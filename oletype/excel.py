# coding: utf-8

# Generated by oletype, win32com(excel) object py/pyi file
#   for ide tips
#
# Usage:
#   from win32com.client import Dispatch
#   from oletype import excel
#   exapp = excel.Application = Dispatch('excel.application')  #declare app obj
#   exapp.   #  get ide auto type hit



from enum import IntFlag, unique
import datetime


# list collection  1
class VBA_Collection:
  '''The Item property of a collection returns a single object from that collection. The following example sets the firstBook variable to a Workbook object that represents the first workbook in the Workbooks collection.

Set FirstBook = Workbooks.Item(1)

The Item property is the default property for most collections, so you can write the same statement more concisely by omitting the Item keyword.

Set FirstBook = Workbooks(1)

For more information about a specific collection, see the Help topic for that collection or the Item property for the collection.

Although you can usually specify an integer value with the Item property, it may be more convenient to return an object by name. Before you can use a name with the Item property, you must name the object. Most often, this is done by setting the object's Name property. The following example creates a named worksheet in the active workbook and then refers to the worksheet by name.

ActiveWorkbook.Worksheets.Add.Name = "A New Sheet" 
With Worksheets("A New Sheet") 
 .Range("A5:A10").Formula = "=RAND()" 
End With

Some collections have predefined index values you can use to return single objects. Each predefined index value is represented by a constant. For example, you specify an xlBordersIndex constant with the Item property of the Borders collection to return a single border.

The following example sets the bottom border of cells A1:G1 on Sheet1 to a double line.

Worksheets("Sheet1").Range("A1:A1"). _ 
 Borders.Item(xlEdgeBottom).LineStyle = xlDouble

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

# list collection  end

# list enumeration  157
@unique
class XlCalculation(IntFlag):
  '''Specifies the calculation mode.'''

  xlCalculationAutomatic = -4105
  '''Excel controls recalculation.'''
  xlCalculationManual = -4135
  '''Calculation is done when the user requests it.'''
  xlCalculationSemiautomatic = 2
  '''Excel controls recalculation but ignores changes in tables.'''

@unique
class XlCalculationInterruptKey(IntFlag):
  '''Specifies which key interrupts recalculation.'''

  xlAnyKey = 2
  '''Pressing any key interrupts recalculation.'''
  xlEscKey = 1
  '''Pressing the ESC key interrupts recalculation.'''
  xlNoKey = 0
  '''No key press can interrupt recalculation.'''

@unique
class XlCalculationState(IntFlag):
  '''Specifies the calculation state of the application.'''

  xlCalculating = 1
  '''Calculations in process.'''
  xlDone = 0
  '''Calculations complete.'''
  xlPending = 2
  '''Changes that trigger calculation have been made, but a recalculation has not yet been performed.'''

@unique
class XlClipboardFormat(IntFlag):
  '''Specifies the format of an item on the Microsoft Windows clipboard.'''

  xlClipboardFormatBIFF = 8
  '''Binary Interchange file format for Excel version 2.x'''
  xlClipboardFormatBIFF12 = 63
  '''Binary Interchange file format 12'''
  xlClipboardFormatBIFF2 = 18
  '''Binary Interchange file format 2'''
  xlClipboardFormatBIFF3 = 20
  '''Binary Interchange file format 3'''
  xlClipboardFormatBIFF4 = 30
  '''Binary Interchange file format 4'''
  xlClipboardFormatBinary = 15
  '''Binary format'''
  xlClipboardFormatBitmap = 9
  '''Bitmap format'''
  xlClipboardFormatCGM = 13
  '''CGM format'''
  xlClipboardFormatCSV = 5
  '''CSV format'''
  xlClipboardFormatDIF = 4
  '''DIF format'''
  xlClipboardFormatDspText = 12
  '''Dsp Text format'''
  xlClipboardFormatEmbeddedObject = 21
  '''Embedded Object'''
  xlClipboardFormatEmbedSource = 22
  '''Embedded Source'''
  xlClipboardFormatLink = 11
  '''Link'''
  xlClipboardFormatLinkSource = 23
  '''Link to the source file'''
  xlClipboardFormatLinkSourceDesc = 32
  '''Link to the source description'''
  xlClipboardFormatMovie = 24
  '''Movie'''
  xlClipboardFormatNative = 14
  '''Native'''
  xlClipboardFormatObjectDesc = 31
  '''Object description'''
  xlClipboardFormatObjectLink = 19
  '''Object link'''
  xlClipboardFormatOwnerLink = 17
  '''Link to the owner'''
  xlClipboardFormatPICT = 2
  '''Picture'''
  xlClipboardFormatPrintPICT = 3
  '''Print picture'''
  xlClipboardFormatRTF = 7
  '''RTF format'''
  xlClipboardFormatScreenPICT = 29
  '''Screen Picture'''
  xlClipboardFormatStandardFont = 28
  '''Standard Font'''
  xlClipboardFormatStandardScale = 27
  '''Standard Scale'''
  xlClipboardFormatSYLK = 6
  '''SYLK'''
  xlClipboardFormatTable = 16
  '''Table'''
  xlClipboardFormatText = 0
  '''Text'''
  xlClipboardFormatToolFace = 25
  '''Tool Face'''
  xlClipboardFormatToolFacePICT = 26
  '''Tool Face Picture'''
  xlClipboardFormatVALU = 1
  '''Value'''
  xlClipboardFormatWK1 = 10
  '''Workbook'''

@unique
class XlCommandUnderlines(IntFlag):
  '''Specifies the state of the command underlines in Microsoft Excel for the Macintosh.'''

  xlCommandUnderlinesAutomatic = -4105
  '''Excel controls the display of command underlines.'''
  xlCommandUnderlinesOff = -4146
  '''Command underlines are not displayed.'''
  xlCommandUnderlinesOn = 1
  '''Command underlines are displayed.'''

@unique
class XlMousePointer(IntFlag):
  '''Specifies the appearance of the mouse pointer in Excel.'''

  xlDefault = -4143
  '''The default pointer.'''
  xlIBeam = 3
  '''The I-beam pointer.'''
  xlNorthwestArrow = 1
  '''The northwest-arrow pointer.'''
  xlWait = 2
  '''The hourglass pointer.'''

@unique
class XlCutCopyMode(IntFlag):
  '''Specifies whether status is Copy mode or Cut mode.'''

  xlCopy = 1
  '''In Copy mode'''
  xlCut = 2
  '''In Cut mode'''

@unique
class XlCommentDisplayMode(IntFlag):
  '''Specifies the way that cells display comments and comment indicators.'''

  xlCommentAndIndicator = 1
  '''Display comment and indicator at all times.'''
  xlCommentIndicatorOnly = -1
  '''Display comment indicator only. Display comment when mouse pointer is moved over cell.'''
  xlNoIndicator = 0
  '''Display neither the comment nor the comment indicator at any time.'''

@unique
class XlEnableCancelKey(IntFlag):
  '''Specifies how Microsoft Office Excel 2007 handles CTRL+BREAK (or ESC or COMMAND+PERIOD) user interruptions to the running procedure.'''

  xlDisabled = 0
  '''Cancel key trapping is completely disabled.'''
  xlErrorHandler = 2
  '''The interrupt is sent to the running procedure as an error, trappable by an error handler set up with an On Error GoTo statement. The trappable error code is 18.'''
  xlInterrupt = 1
  '''The current procedure is interrupted, and the user can debug or end the procedure.'''

@unique
class XlFileValidationPivotMode(IntFlag):
  '''Specifies how to validate the data caches for PivotTable reports.

#REMARKS:

This enumeration is used to specify the setting of the FileValidationPivot property of the Application object.

The effect of the xlFileValidationPivotDefault setting is controlled by the PivotOptions registry value, which is set in the following registry subkey: HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\Excel\Security\FileValidation. The PivotOptions value is a DWORD value that can be set as listed in the following table.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlFileValidationPivotDefault = 0
  '''Validate the contents of data caches as specified by the PivotOptions registry setting (default).'''
  xlFileValidationPivotRun = 1
  '''Validate the contents of all data caches regardless of the registry setting.'''
  xlFileValidationPivotSkip = 2
  '''Do not validate the contents of data caches.'''

@unique
class XlMailSystem(IntFlag):
  '''Specifies the mail system that is installed on the host computer.'''

  xlMAPI = 1
  '''MAPI-complaint system'''
  xlNoMailSystem = 0
  '''No mail system'''
  xlPowerTalk = 2
  '''PowerTalk mail system'''

@unique
class XlMeasurementUnits(IntFlag):
  '''Specifies the measurement units.'''

  xlCentimeters = 1
  '''Centimeters'''
  xlInches = 0
  '''Inches'''
  xlMillimeters = 2
  '''Millimeters'''

@unique
class XlDirection(IntFlag):
  '''Specifies the direction in which to move.'''

  xlDown = -4121
  '''Down.'''
  xlToLeft = -4159
  '''To left.'''
  xlToRight = -4161
  '''To right.'''
  xlUp = -4162
  '''Up.'''

@unique
class XlReferenceStyle(IntFlag):
  '''Specifies the reference style.'''

  xlA1 = 1
  '''Default. Use xlA1 to return an A1-style reference.'''
  xlR1C1 = -4150
  '''Use xlR1C1 to return an R1C1-style reference.'''

class Constants(IntFlag):
  '''This enumeration groups together constants used with various Excel methods.'''

  xl3DBar = -4099
  '''3D Bar'''
  xl3DEffects1 = 13
  '''3D Effects1'''
  xl3DEffects2 = 14
  '''3D Effects2'''
  xl3DSurface = -4103
  '''3D Surface'''
  xlAbove = 0
  '''Above'''
  xlAccounting1 = 4
  '''Accounting1'''
  xlAccounting2 = 5
  '''Accounting2'''
  xlAccounting4 = 17
  '''Accounting4'''
  xlAdd = 2
  '''Add'''
  xlAll = -4104
  '''All'''
  xlAccounting3 = 6
  '''Accounting3'''
  xlAllExceptBorders = 7
  '''All Except Borders'''
  xlAutomatic = -4105
  '''Automatic'''
  xlBar = 2
  '''Automatic'''
  xlBelow = 1
  '''Below'''
  xlBidi = -5000
  '''Bidi'''
  xlBidiCalendar = 3
  '''BidiCalendar'''
  xlBoth = 1
  '''Both'''
  xlBottom = -4107
  '''Bottom'''
  xlCascade = 7
  '''Cascade'''
  xlCenter = -4108
  '''Center'''
  xlCenterAcrossSelection = 7
  '''Center Across Selection'''
  xlChart4 = 2
  '''Chart 4'''
  xlChartSeries = 17
  '''Chart Series'''
  xlChartShort = 6
  '''Chart Short'''
  xlChartTitles = 18
  '''Chart Titles'''
  xlChecker = 9
  '''Checker'''
  xlCircle = 8
  '''Circle'''
  xlClassic1 = 1
  '''Classic1'''
  xlClassic2 = 2
  '''Classic2'''
  xlClassic3 = 3
  '''Classic3'''
  xlClosed = 3
  '''Closed'''
  xlColor1 = 7
  '''Color1'''
  xlColor2 = 8
  '''Color2'''
  xlColor3 = 9
  '''Color3'''
  xlColumn = 3
  '''Column'''
  xlCombination = -4111
  '''Combination'''
  xlComplete = 4
  '''Complete'''
  xlConstants = 2
  '''Constants'''
  xlContents = 2
  '''Contents'''
  xlContext = -5002
  '''Context'''
  xlCorner = 2
  '''Corner'''
  xlCrissCross = 16
  '''CrissCross'''
  xlCross = 4
  '''Cross'''
  xlCustom = -4114
  '''Custom'''
  xlDebugCodePane = 13
  '''Debug Code Pane'''
  xlDefaultAutoFormat = -1
  '''Default Auto Format'''
  xlDesktop = 9
  '''Desktop'''
  xlDiamond = 2
  '''Diamond'''
  xlDirect = 1
  '''Direct'''
  xlDistributed = -4117
  '''Distributed'''
  xlDivide = 5
  '''Divide'''
  xlDoubleAccounting = 5
  '''Double Accounting'''
  xlDoubleClosed = 5
  '''Double Closed'''
  xlDoubleOpen = 4
  '''Double Open'''
  xlDoubleQuote = 1
  '''Double Quote'''
  xlDrawingObject = 14
  '''Drawing Object'''
  xlEntireChart = 20
  '''Entire Chart'''
  xlExcelMenus = 1
  '''Excel Menus'''
  xlExtended = 3
  '''Extended'''
  xlFill = 5
  '''Fill'''
  xlFirst = 0
  '''First'''
  xlFixedValue = 1
  '''Fixed Value'''
  xlFloating = 5
  '''Floating'''
  xlFormats = -4122
  '''Formats'''
  xlFormula = 5
  '''Formula'''
  xlFullScript = 1
  '''Full Script'''
  xlGeneral = 1
  '''General'''
  xlGray16 = 17
  '''Gray16'''
  xlGray25 = -4124
  '''Gray25'''
  xlGray50 = -4125
  '''Gray50'''
  xlGray75 = -4126
  '''Gray75'''
  xlGray8 = 18
  '''Gray8'''
  xlGregorian = 2
  '''Gregorian'''
  xlGrid = 15
  '''Grid'''
  xlGridline = 22
  '''Gridline'''
  xlHigh = -4127
  '''High'''
  xlHindiNumerals = 3
  '''Hindi Numerals'''
  xlIcons = 1
  '''Icons'''
  xlImmediatePane = 12
  '''Immediate Pane'''
  xlInside = 2
  '''Inside'''
  xlInteger = 2
  '''Integer'''
  xlJustify = -4130
  '''Justify'''
  xlLast = 1
  '''Last'''
  xlLastCell = 11
  '''Last Cell'''
  xlLatin = -5001
  '''Latin'''
  xlLeft = -4131
  '''Left'''
  xlLeftToRight = 2
  '''Left To Right'''
  xlLightDown = 13
  '''Light Down'''
  xlLightHorizontal = 11
  '''Light Horizontal'''
  xlLightUp = 14
  '''Light Up'''
  xlLightVertical = 12
  '''Light Vertical'''
  xlList1 = 10
  '''List1'''
  xlList2 = 11
  '''List2'''
  xlList3 = 12
  '''List3'''
  xlLocalFormat1 = 15
  '''Local Format1'''
  xlLocalFormat2 = 16
  '''Local Format2'''
  xlLogicalCursor = 1
  '''Logical Cursor'''
  xlLong = 3
  '''Long'''
  xlLotusHelp = 2
  '''Lotus Help'''
  xlLow = -4134
  '''Low'''
  xlLTR = -5003
  '''LTR'''
  xlMacrosheetCell = 7
  '''MacrosheetCell'''
  xlManual = -4135
  '''Manual'''
  xlMaximum = 2
  '''Maximum'''
  xlMinimum = 4
  '''Minimum'''
  xlMinusValues = 3
  '''Minus Values'''
  xlMixed = 2
  '''Mixed'''
  xlMixedAuthorizedScript = 4
  '''Mixed Authorized Script'''
  xlMixedScript = 3
  '''Mixed Script'''
  xlModule = -4141
  '''Module'''
  xlMultiply = 4
  '''Multiply'''
  xlNarrow = 1
  '''Narrow'''
  xlNextToAxis = 4
  '''Next To Axis'''
  xlNoDocuments = 3
  '''No Documents'''
  xlNone = -4142
  '''None'''
  xlNotes = -4144
  '''Notes'''
  xlOff = -4146
  '''Off'''
  xlOn = 1
  '''On'''
  xlOpaque = 3
  '''Opaque'''
  xlOpen = 2
  '''Open'''
  xlOutside = 3
  '''Outside'''
  xlPartial = 3
  '''Partial'''
  xlPartialScript = 2
  '''Partial Script'''
  xlPercent = 2
  '''Percent'''
  xlPlus = 9
  '''Plus'''
  xlPlusValues = 2
  '''Plus Values'''
  xlReference = 4
  '''Reference'''
  xlRight = -4152
  '''Right'''
  xlRTL = -5004
  '''RTL'''
  xlScale = 3
  '''Scale'''
  xlSemiautomatic = 2
  '''Semiautomatic'''
  xlSemiGray75 = 10
  '''SemiGray75'''
  xlShort = 1
  '''Short'''
  xlShowLabel = 4
  '''Show Label'''
  xlShowLabelAndPercent = 5
  '''Show Label and Percent'''
  xlShowPercent = 3
  '''Show Percent'''
  xlShowValue = 2
  '''Show Value'''
  xlSimple = -4154
  '''Simple'''
  xlSingle = 2
  '''Single'''
  xlSingleAccounting = 4
  '''Single Accounting'''
  xlSingleQuote = 2
  '''Single Quote'''
  xlSolid = 1
  '''Solid'''
  xlSquare = 1
  '''Square'''
  xlStar = 5
  '''Star'''
  xlStError = 4
  '''St Error'''
  xlStrict = 2
  '''Strict'''
  xlSubtract = 3
  '''Subtract'''
  xlSystem = 1
  '''System'''
  xlTextBox = 16
  '''Text Box'''
  xlTiled = 1
  '''Tiled'''
  xlTitleBar = 8
  '''Title Bar'''
  xlToolbar = 1
  '''Toolbar'''
  xlToolbarButton = 2
  '''Toolbar Button'''
  xlTop = -4160
  '''Top'''
  xlTopToBottom = 1
  '''Top To Bottom'''
  xlTransparent = 2
  '''Transparent'''
  xlTriangle = 3
  '''Triangle'''
  xlVeryHidden = 2
  '''Very Hidden'''
  xlVisible = 12
  '''Visible'''
  xlVisualCursor = 2
  '''Visual Cursor'''
  xlWatchPane = 11
  '''Watch Pane'''
  xlWide = 3
  '''Wide'''
  xlWorkbookTab = 6
  '''Workbook Tab'''
  xlWorksheet4 = 1
  '''Worksheet4'''
  xlWorksheetCell = 3
  '''Worksheet Cell'''
  xlWorksheetShort = 5
  '''Worksheet Short'''

@unique
class XlWindowState(IntFlag):
  '''Specifies the state of the window.'''

  xlMaximized = -4137
  '''Maximized'''
  xlMinimized = -4140
  '''Minimized'''
  xlNormal = -4143
  '''Normal'''

class XlFileFormat(IntFlag):
  '''Specifies the file format when saving the worksheet.'''

  xlAddIn = 18
  '''Microsoft Excel 97-2003 Add-In  *.xla'''
  xlAddIn8 = 18
  '''Microsoft Excel 97-2003 Add-In  *.xla'''
  xlCSV = 6
  '''CSV  *.csv'''
  xlCSVMac = 22
  '''Macintosh CSV  *.csv'''
  xlCSVMSDOS = 24
  '''MSDOS CSV  *.csv'''
  xlCSVUTF8 = 62
  '''UTF8 CSV  *.csv'''
  xlCSVWindows = 23
  '''Windows CSV  *.csv'''
  xlCurrentPlatformText = -4158
  '''Current Platform Text  *.txt'''
  xlDBF2 = 7
  '''Dbase 2 format  *.dbf'''
  xlDBF3 = 8
  '''Dbase 3 format  *.dbf'''
  xlDBF4 = 11
  '''Dbase 4 format  *.dbf'''
  xlDIF = 9
  '''Data Interchange format  *.dif'''
  xlExcel12 = 50
  '''Excel Binary Workbook  *.xlsb'''
  xlExcel2 = 16
  '''Excel version 2.0 (1987)  *.xls'''
  xlExcel2FarEast = 27
  '''Excel version 2.0 far east (1987)  *.xls'''
  xlExcel3 = 29
  '''Excel version 3.0 (1990)  *.xls'''
  xlExcel4 = 33
  '''Excel version 4.0 (1992)  *.xls'''
  xlExcel4Workbook = 35
  '''Excel version 4.0. Workbook format (1992)  *.xlw'''
  xlExcel5 = 39
  '''Excel version 5.0 (1994)  *.xls'''
  xlExcel7 = 39
  '''Excel 95 (version 7.0)  *.xls'''
  xlExcel8 = 56
  '''Excel 97-2003 Workbook  *.xls'''
  xlExcel9795 = 43
  '''Excel version 95 and 97  *.xls'''
  xlHtml = 44
  '''HTML format  *.htm; *.html'''
  xlIntlAddIn = 26
  '''International Add-In  No file extension'''
  xlIntlMacro = 25
  '''International Macro  No file extension'''
  xlOpenDocumentSpreadsheet = 60
  '''OpenDocument Spreadsheet  *.ods'''
  xlOpenXMLAddIn = 55
  '''Open XML Add-In  *.xlam'''
  xlOpenXMLStrictWorkbook = 61 #TODO FIXME(&H3D)
  '''Strict Open XML file  *.xlsx'''
  xlOpenXMLTemplate = 54
  '''Open XML Template  *.xltx'''
  xlOpenXMLTemplateMacroEnabled = 53
  '''Open XML Template Macro Enabled  *.xltm'''
  xlOpenXMLWorkbook = 51
  '''Open XML Workbook  *.xlsx'''
  xlOpenXMLWorkbookMacroEnabled = 52
  '''Open XML Workbook Macro Enabled  *.xlsm'''
  xlSYLK = 2
  '''Symbolic Link format  *.slk'''
  xlTemplate = 17
  '''Excel Template format  *.xlt'''
  xlTemplate8 = 17
  '''Template 8  *.xlt'''
  xlTextMac = 19
  '''Macintosh Text  *.txt'''
  xlTextMSDOS = 21
  '''MSDOS Text  *.txt'''
  xlTextPrinter = 36
  '''Printer Text  *.prn'''
  xlTextWindows = 20
  '''Windows Text  *.txt'''
  xlUnicodeText = 42
  '''Unicode Text  No file extension; *.txt'''
  xlWebArchive = 45
  '''Web Archive  *.mht; *.mhtml'''
  xlWJ2WD1 = 14
  '''Japanese 1-2-3  *.wj2'''
  xlWJ3 = 40
  '''Japanese 1-2-3  *.wj3'''
  xlWJ3FJ3 = 41
  '''Japanese 1-2-3 format  *.wj3'''
  xlWK1 = 5
  '''Lotus 1-2-3 format  *.wk1'''
  xlWK1ALL = 31
  '''Lotus 1-2-3 format  *.wk1'''
  xlWK1FMT = 30
  '''Lotus 1-2-3 format  *.wk1'''
  xlWK3 = 15
  '''Lotus 1-2-3 format  *.wk3'''
  xlWK3FM3 = 32
  '''Lotus 1-2-3 format  *.wk3'''
  xlWK4 = 38
  '''Lotus 1-2-3 format  *.wk4'''
  xlWKS = 4
  '''Lotus 1-2-3 format  *.wks'''
  xlWorkbookDefault = 51
  '''Workbook default  *.xlsx'''
  xlWorkbookNormal = -4143
  '''Workbook normal  *.xls'''
  xlWorks2FarEast = 28
  '''Microsoft Works 2.0 far east format  *.wks'''
  xlWQ1 = 34
  '''Quattro Pro format  *.wq1'''
  xlXMLSpreadsheet = 46
  '''XML Spreadsheet  *.xml'''

class XlBuiltInDialog(IntFlag):
  '''Specifies which dialog box to display.'''

  xlDialogActivate = 103
  '''Activate dialog box'''
  xlDialogActiveCellFont = 476
  '''Active Cell Font dialog box'''
  xlDialogAddChartAutoformat = 390
  '''Add Chart Autoformat dialog box'''
  xlDialogAddinManager = 321
  '''Addin Manager dialog box'''
  xlDialogAlignment = 43
  '''Alignment dialog box'''
  xlDialogApplyNames = 133
  '''Apply Names dialog box'''
  xlDialogApplyStyle = 212
  '''Apply Style dialog box'''
  xlDialogAppMove = 170
  '''AppMove dialog box'''
  xlDialogAppSize = 171
  '''AppSize dialog box'''
  xlDialogArrangeAll = 12
  '''Arrange All dialog box'''
  xlDialogAssignToObject = 213
  '''Assign To Object dialog box'''
  xlDialogAssignToTool = 293
  '''Assign To Tool dialog box'''
  xlDialogAttachText = 80
  '''Attach Text dialog box'''
  xlDialogAttachToolbars = 323
  '''Attach Toolbars dialog box'''
  xlDialogAutoCorrect = 485
  '''Auto Correct dialog box'''
  xlDialogAxes = 78
  '''Axes dialog box'''
  xlDialogBorder = 45
  '''Border dialog box'''
  xlDialogCalculation = 32
  '''Calculation dialog box'''
  xlDialogCellProtection = 46
  '''Cell Protection dialog box'''
  xlDialogChangeLink = 166
  '''Change Link dialog box'''
  xlDialogChartAddData = 392
  '''Chart Add Data dialog box'''
  xlDialogChartLocation = 527
  '''Chart Location dialog box'''
  xlDialogChartOptionsDataLabelMultiple = 724
  '''Chart Options DataLabel Multiple dialog box'''
  xlDialogChartOptionsDataLabels = 505
  '''Chart Options DataLabels dialog box'''
  xlDialogChartOptionsDataTable = 506
  '''Chart Options DataTable dialog box'''
  xlDialogChartSourceData = 540
  '''Chart SourceData dialog box'''
  xlDialogChartTrend = 350
  '''Chart Trend dialog box'''
  xlDialogChartType = 526
  '''Chart Type dialog box'''
  xlDialogChartWizard = 288
  '''ChartWizard dialog box'''
  xlDialogCheckboxProperties = 435
  '''Checkbox Properties dialog box'''
  xlDialogClear = 52
  '''Clear dialog box'''
  xlDialogColorPalette = 161
  '''Color Palette dialog box'''
  xlDialogColumnWidth = 47
  '''Column Width dialog box'''
  xlDialogCombination = 73
  '''Combination dialog box'''
  xlDialogConditionalFormatting = 583
  '''Conditional Formatting dialog box'''
  xlDialogConsolidate = 191
  '''Consolidate dialog box'''
  xlDialogCopyChart = 147
  '''Copy Chart dialog box'''
  xlDialogCopyPicture = 108
  '''Copy Picture dialog box'''
  xlDialogCreateList = 796
  '''Create List dialog box'''
  xlDialogCreateNames = 62
  '''Create Names dialog box'''
  xlDialogCreatePublisher = 217
  '''Create Publisher dialog box'''
  xlDialogCreateRelationship = 1272
  '''Create Relationship dialog box'''
  xlDialogCustomizeToolbar = 276
  '''Customize Toolbar dialog box'''
  xlDialogCustomViews = 493
  '''Custom Views dialog box'''
  xlDialogDataDelete = 36
  '''Data Delete dialog box'''
  xlDialogDataLabel = 379
  '''Data Label dialog box'''
  xlDialogDataLabelMultiple = 723
  '''Data Label Multiple dialog box'''
  xlDialogDataSeries = 40
  '''Data Series dialog box'''
  xlDialogDataValidation = 525
  '''Data Validation dialog box'''
  xlDialogDefineName = 61
  '''Define Name dialog box'''
  xlDialogDefineStyle = 229
  '''Define Style dialog box'''
  xlDialogDeleteFormat = 111
  '''Delete Format dialog box'''
  xlDialogDeleteName = 110
  '''Delete Name dialog box'''
  xlDialogDemote = 203
  '''Demote dialog box'''
  xlDialogDisplay = 27
  '''Display dialog box'''
  xlDialogDocumentInspector = 862
  '''Document Inspector dialog box'''
  xlDialogEditboxProperties = 438
  '''Editbox Properties dialog box'''
  xlDialogEditColor = 223
  '''Edit Color dialog box'''
  xlDialogEditDelete = 54
  '''Edit Delete dialog box'''
  xlDialogEditionOptions = 251
  '''Edition Options dialog box'''
  xlDialogEditSeries = 228
  '''Edit Series dialog box'''
  xlDialogErrorbarX = 463
  '''Errorbar X dialog box'''
  xlDialogErrorbarY = 464
  '''Errorbar Y dialog box'''
  xlDialogErrorChecking = 732
  '''Error Checking dialog box'''
  xlDialogEvaluateFormula = 709
  '''Evaluate Formula dialog box'''
  xlDialogExternalDataProperties = 530
  '''External Data Properties dialog box'''
  xlDialogExtract = 35
  '''Extract dialog box'''
  xlDialogFileDelete = 6
  '''File Delete dialog box'''
  xlDialogFileSharing = 481
  '''File Sharing dialog box'''
  xlDialogFillGroup = 200
  '''Fill Group dialog box'''
  xlDialogFillWorkgroup = 301
  '''Fill Workgroup dialog box'''
  xlDialogFilter = 447
  '''Dialog Filter dialog box'''
  xlDialogFilterAdvanced = 370
  '''Filter Advanced dialog box'''
  xlDialogFindFile = 475
  '''Find File dialog box'''
  xlDialogFont = 26
  '''Font dialog box'''
  xlDialogFontProperties = 381
  '''Font Properties dialog box'''
  xlDialogFormatAuto = 269
  '''Format Auto dialog box'''
  xlDialogFormatChart = 465
  '''Format Chart dialog box'''
  xlDialogFormatCharttype = 423
  '''Format Charttype dialog box'''
  xlDialogFormatFont = 150
  '''Format Font dialog box'''
  xlDialogFormatLegend = 88
  '''Format Legend dialog box'''
  xlDialogFormatMain = 225
  '''Format Main dialog box'''
  xlDialogFormatMove = 128
  '''Format Move dialog box'''
  xlDialogFormatNumber = 42
  '''Format Number dialog box'''
  xlDialogFormatOverlay = 226
  '''Format Overlay dialog box'''
  xlDialogFormatSize = 129
  '''Format Size dialog box'''
  xlDialogFormatText = 89
  '''Format Text dialog box'''
  xlDialogFormulaFind = 64
  '''Formula Find dialog box'''
  xlDialogFormulaGoto = 63
  '''Formula Goto dialog box'''
  xlDialogFormulaReplace = 130
  '''Formula Replace dialog box'''
  xlDialogFunctionWizard = 450
  '''Function Wizard dialog box'''
  xlDialogGallery3dArea = 193
  '''Gallery 3D Area dialog box'''
  xlDialogGallery3dBar = 272
  '''Gallery 3D Bar dialog box'''
  xlDialogGallery3dColumn = 194
  '''Gallery 3D Column dialog box'''
  xlDialogGallery3dLine = 195
  '''Gallery 3D Line dialog box'''
  xlDialogGallery3dPie = 196
  '''Gallery 3D Pie dialog box'''
  xlDialogGallery3dSurface = 273
  '''Gallery 3D Surface dialog box'''
  xlDialogGalleryArea = 67
  '''Gallery Area dialog box'''
  xlDialogGalleryBar = 68
  '''Gallery Bar dialog box'''
  xlDialogGalleryColumn = 69
  '''Gallery Column dialog box'''
  xlDialogGalleryCustom = 388
  '''Gallery Custom dialog box'''
  xlDialogGalleryDoughnut = 344
  '''Gallery Doughnut dialog box'''
  xlDialogGalleryLine = 70
  '''Gallery Line dialog box'''
  xlDialogGalleryPie = 71
  '''Gallery Pie dialog box'''
  xlDialogGalleryRadar = 249
  '''Gallery Radar dialog box'''
  xlDialogGalleryScatter = 72
  '''Gallery Scatter dialog box'''
  xlDialogGoalSeek = 198
  '''Goal Seek dialog box'''
  xlDialogGridlines = 76
  '''Gridlines dialog box'''
  xlDialogImportTextFile = 666
  '''Import Text File dialog box'''
  xlDialogInsert = 55
  '''Insert dialog box'''
  xlDialogInsertHyperlink = 596
  '''Insert Hyperlink dialog box'''
  xlDialogInsertObject = 259
  '''Insert Object dialog box'''
  xlDialogInsertPicture = 342
  '''Insert Picture dialog box'''
  xlDialogInsertTitle = 380
  '''Insert Title dialog box'''
  xlDialogLabelProperties = 436
  '''Label Properties dialog box'''
  xlDialogListboxProperties = 437
  '''Listbox Properties dialog box'''
  xlDialogMacroOptions = 382
  '''Macro Options dialog box'''
  xlDialogMailEditMailer = 470
  '''Mail Edit Mailer dialog box'''
  xlDialogMailLogon = 339
  '''Mail Logon dialog box'''
  xlDialogMailNextLetter = 378
  '''Mail Next Letter dialog box'''
  xlDialogMainChart = 85
  '''Main Chart dialog box'''
  xlDialogMainChartType = 185
  '''Main Chart Type dialog box'''
  xlDialogManageRelationships = 1271
  '''Manage Relationships dialog box'''
  xlDialogMenuEditor = 322
  '''Menu Editor dialog box'''
  xlDialogMove = 262
  '''Move dialog box'''
  xlDialogMyPermission = 834
  '''My Permission dialog box'''
  xlDialogNameManager = 977
  '''NameManager dialog box'''
  xlDialogNew = 119
  '''New dialog box'''
  xlDialogNewName = 978
  '''NewName dialog box'''
  xlDialogNewWebQuery = 667
  '''New Web Query dialog box'''
  xlDialogNote = 154
  '''Note dialog box'''
  xlDialogObjectProperties = 207
  '''Object Properties dialog box'''
  xlDialogObjectProtection = 214
  '''Object Protection dialog box'''
  xlDialogOpen = 1
  '''Open dialog box'''
  xlDialogOpenLinks = 2
  '''Open Links dialog box'''
  xlDialogOpenMail = 188
  '''Open Mail dialog box'''
  xlDialogOpenText = 441
  '''Open Text dialog box'''
  xlDialogOptionsCalculation = 318
  '''Options Calculation dialog box'''
  xlDialogOptionsChart = 325
  '''Options Chart dialog box'''
  xlDialogOptionsEdit = 319
  '''Options Edit dialog box'''
  xlDialogOptionsGeneral = 356
  '''Options General dialog box'''
  xlDialogOptionsListsAdd = 458
  '''Options Lists Add dialog box'''
  xlDialogOptionsME = 647
  '''OptionsME dialog box'''
  xlDialogOptionsTransition = 355
  '''Options Transition dialog box'''
  xlDialogOptionsView = 320
  '''Options View dialog box'''
  xlDialogOutline = 142
  '''Outline dialog box'''
  xlDialogOverlay = 86
  '''Overlay dialog box'''
  xlDialogOverlayChartType = 186
  '''Overlay ChartType dialog box'''
  xlDialogPageSetup = 7
  '''Page Setup dialog box'''
  xlDialogParse = 91
  '''Parse dialog box'''
  xlDialogPasteNames = 58
  '''Paste Names dialog box'''
  xlDialogPasteSpecial = 53
  '''Paste Special dialog box'''
  xlDialogPatterns = 84
  '''Patterns dialog box'''
  xlDialogPermission = 832
  '''Permission dialog box'''
  xlDialogPhonetic = 656
  '''Phonetic dialog box'''
  xlDialogPivotCalculatedField = 570
  '''Pivot Calculated Field dialog box'''
  xlDialogPivotCalculatedItem = 572
  '''Pivot Calculated Item dialog box'''
  xlDialogPivotClientServerSet = 689
  '''Pivot Client Server Set dialog box'''
  xlDialogPivotFieldGroup = 433
  '''Pivot Field Group dialog box'''
  xlDialogPivotFieldProperties = 313
  '''Pivot Field Properties dialog box'''
  xlDialogPivotFieldUngroup = 434
  '''Pivot Field Ungroup dialog box'''
  xlDialogPivotShowPages = 421
  '''Pivot Show Pages dialog box'''
  xlDialogPivotSolveOrder = 568
  '''Pivot Solve Order dialog box'''
  xlDialogPivotTableOptions = 567
  '''PivotTable Options dialog box'''
  xlDialogPivotTableSlicerConnections = 1183
  '''PivotTable Slicer Connections dialog box'''
  xlDialogPivotTableWhatIfAnalysisSettings = 1153
  '''PivotTable What If Analysis Settings dialog box'''
  xlDialogPivotTableWizard = 312
  '''PivotTable Wizard dialog box'''
  xlDialogPlacement = 300
  '''Placement dialog box'''
  xlDialogPrint = 8
  '''Print dialog box'''
  xlDialogPrinterSetup = 9
  '''Printer Setup dialog box'''
  xlDialogPrintPreview = 222
  '''Print Preview dialog box'''
  xlDialogPromote = 202
  '''Promote dialog box'''
  xlDialogProperties = 474
  '''Properties dialog box'''
  xlDialogPropertyFields = 754
  '''Property Fields dialog box'''
  xlDialogProtectDocument = 28
  '''Protect Document dialog box'''
  xlDialogProtectSharing = 620
  '''Protect Sharing dialog box'''
  xlDialogPublishAsWebPage = 653
  '''Publish As WebPage dialog box'''
  xlDialogPushbuttonProperties = 445
  '''Pushbutton Properties dialog box'''
  xlDialogRecommendedPivotTables = 1258
  '''Recommended PivotTables dialog box'''
  xlDialogReplaceFont = 134
  '''Replace Font dialog box'''
  xlDialogRoutingSlip = 336
  '''This object or member has been deprecated, but it remains part of the object model for backward compatibility. You should not use it in new applications.'''
  xlDialogRowHeight = 127
  '''Row Height dialog box'''
  xlDialogRun = 17
  '''Run dialog box'''
  xlDialogSaveAs = 5
  '''SaveAs dialog box'''
  xlDialogSaveCopyAs = 456
  '''SaveCopyAs dialog box'''
  xlDialogSaveNewObject = 208
  '''Save New Object dialog box'''
  xlDialogSaveWorkbook = 145
  '''Save Workbook dialog box'''
  xlDialogSaveWorkspace = 285
  '''Save Workspace dialog box'''
  xlDialogScale = 87
  '''Scale dialog box'''
  xlDialogScenarioAdd = 307
  '''Scenario Add dialog box'''
  xlDialogScenarioCells = 305
  '''Scenario Cells dialog box'''
  xlDialogScenarioEdit = 308
  '''Scenario Edit dialog box'''
  xlDialogScenarioMerge = 473
  '''Scenario Merge dialog box'''
  xlDialogScenarioSummary = 311
  '''Scenario Summary dialog box'''
  xlDialogScrollbarProperties = 420
  '''Scrollbar Properties dialog box'''
  xlDialogSearch = 731
  '''Search dialog box'''
  xlDialogSelectSpecial = 132
  '''Select Special dialog box'''
  xlDialogSendMail = 189
  '''Send Mail dialog box'''
  xlDialogSeriesAxes = 460
  '''Series Axes dialog box'''
  xlDialogSeriesOptions = 557
  '''Series Options dialog box'''
  xlDialogSeriesOrder = 466
  '''Series Order dialog box'''
  xlDialogSeriesShape = 504
  '''Series Shape dialog box'''
  xlDialogSeriesX = 461
  '''Series X dialog box'''
  xlDialogSeriesY = 462
  '''Series Y dialog box'''
  xlDialogSetBackgroundPicture = 509
  '''Set Background Picture dialog box'''
  xlDialogSetManager = 1109
  '''Set Manager dialog box'''
  xlDialogSetMDXEditor = 1208
  '''Set MDX Editor dialog box'''
  xlDialogSetPrintTitles = 23
  '''Set Print Titles dialog box'''
  xlDialogSetTupleEditorOnColumns = 1108
  '''Set Tuple Editor On Columns dialog box'''
  xlDialogSetTupleEditorOnRows = 1107
  '''Set Tuple Editor On Rows dialog box'''
  xlDialogSetUpdateStatus = 159
  '''Set Update Status dialog box'''
  xlDialogShowDetail = 204
  '''Show Detail dialog box'''
  xlDialogShowToolbar = 220
  '''Show Toolbar dialog box'''
  xlDialogSize = 261
  '''Size dialog box'''
  xlDialogSlicerCreation = 1182
  '''Slicer Creation dialog box'''
  xlDialogSlicerPivotTableConnections = 1184
  '''Slicer PivotTable Connections dialog box'''
  xlDialogSlicerSettings = 1179
  '''Slicer Settings dialog box'''
  xlDialogSort = 39
  '''Sort dialog box'''
  xlDialogSortSpecial = 192
  '''Sort Special dialog box'''
  xlDialogSparklineInsertColumn = 1134
  '''Sparkline Insert Column dialog box'''
  xlDialogSparklineInsertLine = 1133
  '''Sparkline Insert Line dialog box'''
  xlDialogSparklineInsertWinLoss = 1135
  '''Sparkline Insert Win Loss dialog box'''
  xlDialogSplit = 137
  '''Split dialog box'''
  xlDialogStandardFont = 190
  '''Standard Font dialog box'''
  xlDialogStandardWidth = 472
  '''Standard Width dialog box'''
  xlDialogStyle = 44
  '''Style dialog box'''
  xlDialogSubscribeTo = 218
  '''Subscribe To dialog box'''
  xlDialogSubtotalCreate = 398
  '''Subtotal Create dialog box'''
  xlDialogSummaryInfo = 474
  '''Summary Info dialog box'''
  xlDialogTable = 41
  '''Table dialog box'''
  xlDialogTabOrder = 394
  '''Tab Order dialog box'''
  xlDialogTextToColumns = 422
  '''Text To Columns dialog box'''
  xlDialogUnhide = 94
  '''Unhide dialog box'''
  xlDialogUpdateLink = 201
  '''Update Link dialog box'''
  xlDialogVbaInsertFile = 328
  '''VBA Insert File dialog box'''
  xlDialogVbaMakeAddin = 478
  '''VBA Make Addin dialog box'''
  xlDialogVbaProcedureDefinition = 330
  '''VBA Procedure Definition dialog box'''
  xlDialogView3d = 197
  '''View 3D dialog box'''
  xlDialogWebOptionsBrowsers = 773
  '''Web Options Browsers dialog box'''
  xlDialogWebOptionsEncoding = 686
  '''Web Options Encoding dialog box'''
  xlDialogWebOptionsFiles = 684
  '''Web Options Files dialog box'''
  xlDialogWebOptionsFonts = 687
  '''Web Options Fonts dialog box'''
  xlDialogWebOptionsGeneral = 683
  '''Web Options General dialog box'''
  xlDialogWebOptionsPictures = 685
  '''Web Options Pictures dialog box'''
  xlDialogWindowMove = 14
  '''Window Move dialog box'''
  xlDialogWindowSize = 13
  '''Window Size dialog box'''
  xlDialogWorkbookAdd = 281
  '''Workbook Add dialog box'''
  xlDialogWorkbookCopy = 283
  '''Workbook Copy dialog box'''
  xlDialogWorkbookInsert = 354
  '''Workbook Insert dialog box'''
  xlDialogWorkbookMove = 282
  '''Workbook Move dialog box'''
  xlDialogWorkbookName = 386
  '''Workbook Name dialog box'''
  xlDialogWorkbookNew = 302
  '''Workbook New dialog box'''
  xlDialogWorkbookOptions = 284
  '''Workbook Options dialog box'''
  xlDialogWorkbookProtect = 417
  '''Workbook Protect dialog box'''
  xlDialogWorkbookTabSplit = 415
  '''Workbook Tab Split dialog box'''
  xlDialogWorkbookUnhide = 384
  '''Workbook Unhide dialog box'''
  xlDialogWorkgroup = 199
  '''Workgroup dialog box'''
  xlDialogWorkspace = 95
  '''Workspace dialog box'''
  xlDialogZoom = 256
  '''Zoom dialog box'''

@unique
class XlRangeAutoFormat(IntFlag):
  '''Specifies the predefined format when a range is automatically formatted.'''

  xlRangeAutoFormat3DEffects1 = 13
  '''3D effects 1.'''
  xlRangeAutoFormat3DEffects2 = 14
  '''3D effects 2.'''
  xlRangeAutoFormatAccounting1 = 4
  '''Accounting 1.'''
  xlRangeAutoFormatAccounting2 = 5
  '''Accounting 2.'''
  xlRangeAutoFormatAccounting3 = 6
  '''Accounting 3.'''
  xlRangeAutoFormatAccounting4 = 17
  '''Accounting 4.'''
  xlRangeAutoFormatClassic1 = 1
  '''Classic 1.'''
  xlRangeAutoFormatClassic2 = 2
  '''Classic 2.'''
  xlRangeAutoFormatClassic3 = 3
  '''Classic 3.'''
  xlRangeAutoFormatClassicPivotTable = 31
  '''Classic PivotTable.'''
  xlRangeAutoFormatColor1 = 7
  '''Color 1.'''
  xlRangeAutoFormatColor2 = 8
  '''Color 2.'''
  xlRangeAutoFormatColor3 = 9
  '''Color 3.'''
  xlRangeAutoFormatList1 = 10
  '''List 1.'''
  xlRangeAutoFormatList2 = 11
  '''List 2.'''
  xlRangeAutoFormatList3 = 12
  '''List 3.'''
  xlRangeAutoFormatLocalFormat1 = 15
  '''Local Format 1.'''
  xlRangeAutoFormatLocalFormat2 = 16
  '''Local Format 2.'''
  xlRangeAutoFormatLocalFormat3 = 19
  '''Local Format 3.'''
  xlRangeAutoFormatLocalFormat4 = 20
  '''Local Format 4.'''
  xlRangeAutoFormatNone = -4142
  '''No specified format.'''
  xlRangeAutoFormatPTNone = 42
  '''No specified PivotTable format.'''
  xlRangeAutoFormatReport1 = 21
  '''Report 1.'''
  xlRangeAutoFormatReport10 = 30
  '''Report 10.'''
  xlRangeAutoFormatReport2 = 22
  '''Report 2.'''
  xlRangeAutoFormatReport3 = 23
  '''Report 3.'''
  xlRangeAutoFormatReport4 = 24
  '''Report 4.'''
  xlRangeAutoFormatReport5 = 25
  '''Report 5.'''
  xlRangeAutoFormatReport6 = 26
  '''Report 6.'''
  xlRangeAutoFormatReport7 = 27
  '''Report 7.'''
  xlRangeAutoFormatReport8 = 28
  '''Report 8.'''
  xlRangeAutoFormatReport9 = 29
  '''Report 9.'''
  xlRangeAutoFormatSimple = -4154
  '''Simple.'''
  xlRangeAutoFormatTable1 = 32
  '''Table 1.'''
  xlRangeAutoFormatTable10 = 41
  '''Table 10.'''
  xlRangeAutoFormatTable2 = 33
  '''Table 2.'''
  xlRangeAutoFormatTable3 = 34
  '''Table 3.'''
  xlRangeAutoFormatTable4 = 35
  '''Table 4.'''
  xlRangeAutoFormatTable5 = 36
  '''Table 5.'''
  xlRangeAutoFormatTable6 = 37
  '''Table 6.'''
  xlRangeAutoFormatTable7 = 38
  '''Table 7.'''
  xlRangeAutoFormatTable8 = 39
  '''Table 8.'''
  xlRangeAutoFormatTable9 = 40
  '''Table 9.'''

@unique
class XlLinkedDataTypeState(IntFlag):
  '''Indicates the state of cells that may contain Linked data types such as Stocks or Geography. These are the possible values of the Range.LinkedDataTypeState property.'''

  xlLinkedDataTypeStateNone = 0
  '''The cell does not contain any Linked data types.'''
  xlLinkedDataTypeStateValidLinkedData = 1
  '''The cell contains a Linked data type.'''
  xlLinkedDataTypeStateDisambiguationNeeded = 2
  '''The cell needs to be disambiguated by the user before a Linked data type can be inserted. For example, if the user types "New York" into a cell and attempts to convert it to a "Geography" data type, they may need to select whether they meant New York State or New York City. Until they do so, the cell will be in this state.'''
  xlLinkedDataTypeStateBrokenLinkedData = 3
  '''There is a valid Linked data type in the cell, but entity no longer exists on the service.'''
  xlLinkedDataTypeStateFetchingData = 4
  '''The Linked data type in the cell is in the middle of refreshing new data from the service.'''

@unique
class XlHAlign(IntFlag):
  '''Specifies the horizontal alignment for the object.'''

  xlHAlignCenter = -4108
  '''Center.'''
  xlHAlignCenterAcrossSelection = 7
  '''Center across selection.'''
  xlHAlignDistributed = -4117
  '''Distribute.'''
  xlHAlignFill = 5
  '''Fill.'''
  xlHAlignGeneral = 1
  '''Align according to data type.'''
  xlHAlignJustify = -4130
  '''Justify.'''
  xlHAlignLeft = -4131
  '''Left.'''
  xlHAlignRight = -4152
  '''Right.'''

@unique
class XlLocationInTable(IntFlag):
  '''Specifies the part of the PivotTable report that contains the upper-left corner of a range.'''

  xlColumnHeader = -4110
  '''Column header'''
  xlColumnItem = 5
  '''Column item'''
  xlDataHeader = 3
  '''Data header'''
  xlDataItem = 7
  '''Data item'''
  xlPageHeader = 2
  '''Page header'''
  xlPageItem = 6
  '''Page item'''
  xlRowHeader = -4153
  '''Row header'''
  xlRowItem = 4
  '''Row item'''
  xlTableBody = 8
  '''Table body'''

@unique
class XlOrientation(IntFlag):
  '''Specifies the text orientation.'''

  xlDownward = -4170
  '''Text runs downward.'''
  xlHorizontal = -4128
  '''Text runs horizontally.'''
  xlUpward = -4171
  '''Text runs upward.'''
  xlVertical = -4166
  '''Text runs downward and is centered in the cell.'''

@unique
class XlPageBreak(IntFlag):
  '''Specifies page break location on the worksheet.'''

  xlPageBreakAutomatic = -4105
  '''Excel will automatically add page breaks.'''
  xlPageBreakManual = -4135
  '''Page breaks are manually inserted.'''
  xlPageBreakNone = -4142
  '''Page breaks are not inserted on the worksheet.'''

@unique
class XlVAlign(IntFlag):
  '''Specifies the vertical alignment for the object.'''

  xlVAlignBottom = -4107
  '''Bottom'''
  xlVAlignCenter = -4108
  '''Center'''
  xlVAlignDistributed = -4117
  '''Distributed'''
  xlVAlignJustify = -4130
  '''Justify'''
  xlVAlignTop = -4160
  '''Top'''

@unique
class XlBarShape(IntFlag):
  '''Specifies the shape used with the 3D bar or column chart.'''

  xlBox = 0
  '''Box.'''
  xlConeToMax = 5
  '''Cone, truncated at value.'''
  xlConeToPoint = 4
  '''Cone, coming to point at value.'''
  xlCylinder = 3
  '''Cylinder.'''
  xlPyramidToMax = 2
  '''Pyramid, truncated at value.'''
  xlPyramidToPoint = 1
  '''Pyramid, coming to point at value.'''

class XlCategoryLabelLevel(IntFlag):
  '''Specifies the category labels for the category label levels.'''


@unique
class XlChartType(IntFlag):
  '''Specifies the chart type.'''

  xl3DArea = -4098
  '''3D Area.'''
  xl3DAreaStacked = 78
  '''3D Stacked Area.'''
  xl3DAreaStacked100 = 79
  '''100% Stacked Area.'''
  xl3DBarClustered = 60
  '''3D Clustered Bar.'''
  xl3DBarStacked = 61
  '''3D Stacked Bar.'''
  xl3DBarStacked100 = 62
  '''3D 100% Stacked Bar.'''
  xl3DColumn = -4100
  '''3D Column.'''
  xl3DColumnClustered = 54
  '''3D Clustered Column.'''
  xl3DColumnStacked = 55
  '''3D Stacked Column.'''
  xl3DColumnStacked100 = 56
  '''3D 100% Stacked Column.'''
  xl3DLine = -4101
  '''3D Line.'''
  xl3DPie = -4102
  '''3D Pie.'''
  xl3DPieExploded = 70
  '''Exploded 3D Pie.'''
  xlArea = 1
  '''Area'''
  xlAreaStacked = 76
  '''Stacked Area.'''
  xlAreaStacked100 = 77
  '''100% Stacked Area.'''
  xlBarClustered = 57
  '''Clustered Bar.'''
  xlBarOfPie = 71
  '''Bar of Pie.'''
  xlBarStacked = 58
  '''Stacked Bar.'''
  xlBarStacked100 = 59
  '''100% Stacked Bar.'''
  xlBubble = 15
  '''Bubble.'''
  xlBubble3DEffect = 87
  '''Bubble with 3D effects.'''
  xlColumnClustered = 51
  '''Clustered Column.'''
  xlColumnStacked = 52
  '''Stacked Column.'''
  xlColumnStacked100 = 53
  '''100% Stacked Column.'''
  xlConeBarClustered = 102
  '''Clustered Cone Bar.'''
  xlConeBarStacked = 103
  '''Stacked Cone Bar.'''
  xlConeBarStacked100 = 104
  '''100% Stacked Cone Bar.'''
  xlConeCol = 105
  '''3D Cone Column.'''
  xlConeColClustered = 99
  '''Clustered Cone Column.'''
  xlConeColStacked = 100
  '''Stacked Cone Column.'''
  xlConeColStacked100 = 101
  '''100% Stacked Cone Column.'''
  xlCylinderBarClustered = 95
  '''Clustered Cylinder Bar.'''
  xlCylinderBarStacked = 96
  '''Stacked Cylinder Bar.'''
  xlCylinderBarStacked100 = 97
  '''100% Stacked Cylinder Bar.'''
  xlCylinderCol = 98
  '''3D Cylinder Column.'''
  xlCylinderColClustered = 92
  '''Clustered Cone Column.'''
  xlCylinderColStacked = 93
  '''Stacked Cone Column.'''
  xlCylinderColStacked100 = 94
  '''100% Stacked Cylinder Column.'''
  xlDoughnut = -4120
  '''Doughnut.'''
  xlDoughnutExploded = 80
  '''Exploded Doughnut.'''
  xlLine = 4
  '''Line.'''
  xlLineMarkers = 65
  '''Line with Markers.'''
  xlLineMarkersStacked = 66
  '''Stacked Line with Markers.'''
  xlLineMarkersStacked100 = 67
  '''100% Stacked Line with Markers.'''
  xlLineStacked = 63
  '''Stacked Line.'''
  xlLineStacked100 = 64
  '''100% Stacked Line.'''
  xlPie = 5
  '''Pie.'''
  xlPieExploded = 69
  '''Exploded Pie.'''
  xlPieOfPie = 68
  '''Pie of Pie.'''
  xlPyramidBarClustered = 109
  '''Clustered Pyramid Bar.'''
  xlPyramidBarStacked = 110
  '''Stacked Pyramid Bar.'''
  xlPyramidBarStacked100 = 111
  '''100% Stacked Pyramid Bar.'''
  xlPyramidCol = 112
  '''3D Pyramid Column.'''
  xlPyramidColClustered = 106
  '''Clustered Pyramid Column.'''
  xlPyramidColStacked = 107
  '''Stacked Pyramid Column.'''
  xlPyramidColStacked100 = 108
  '''100% Stacked Pyramid Column.'''
  xlRadar = -4151
  '''Radar.'''
  xlRadarFilled = 82
  '''Filled Radar.'''
  xlRadarMarkers = 81
  '''Radar with Data Markers.'''
  xlRegionMap = 140
  '''Map chart.'''
  xlStockHLC = 88
  '''High-Low-Close.'''
  xlStockOHLC = 89
  '''Open-High-Low-Close.'''
  xlStockVHLC = 90
  '''Volume-High-Low-Close.'''
  xlStockVOHLC = 91
  '''Volume-Open-High-Low-Close.'''
  xlSurface = 83
  '''3D Surface.'''
  xlSurfaceTopView = 85
  '''Surface (Top View).'''
  xlSurfaceTopViewWireframe = 86
  '''Surface (Top View wireframe).'''
  xlSurfaceWireframe = 84
  '''3D Surface (wireframe).'''
  xlXYScatter = -4169
  '''Scatter.'''
  xlXYScatterLines = 74
  '''Scatter with Lines.'''
  xlXYScatterLinesNoMarkers = 75
  '''Scatter with Lines and No Data Markers.'''
  xlXYScatterSmooth = 72
  '''Scatter with Smoothed Lines.'''
  xlXYScatterSmoothNoMarkers = 73
  '''Scatter with Smoothed Lines and No Data Markers.'''

@unique
class XlDisplayBlanksAs(IntFlag):
  '''Specifies how blank cells are plotted on a chart.'''

  xlInterpolated = 3
  '''Values are interpolated into the chart.'''
  xlNotPlotted = 1
  '''Blank cells are not plotted.'''
  xlZero = 2
  '''Blanks are plotted as zero.'''

@unique
class XlRowCol(IntFlag):
  '''Specifies whether the values corresponding to a particular data series are in rows or columns.'''

  xlColumns = 2
  '''Data series is in a row.'''
  xlRows = 1
  '''Data series is in a column.'''

class XlSeriesNameLevel(IntFlag):
  '''Specifies the series labels for the series label levels.'''


@unique
class XlSheetVisibility(IntFlag):
  '''Specifies whether the object is visible.'''

  xlSheetHidden = 0
  '''Hides the worksheet which the user can unhide via menu.'''
  xlSheetVeryHidden = 2
  '''Hides the object so that the only way for you to make it visible again is by setting this property to True (the user cannot make the object visible).'''
  xlSheetVisible = -1
  '''Displays the sheet.'''

@unique
class XlProtectedViewWindowState(IntFlag):
  '''Specifies the state of the Protected View window.'''

  xlProtectedViewWindowMaximized = 2
  '''Maximized'''
  xlProtectedViewWindowMinimized = 1
  '''Minimized'''
  xlProtectedViewWindowNormal = 0
  '''Normal'''

@unique
class XlColorIndex(IntFlag):
  '''Specifies the color of a selected feature, such as a border, font, or fill.'''

  xlColorIndexAutomatic = -4105
  '''Automatic color.'''
  xlColorIndexNone = -4142
  '''No color.'''

@unique
class XlWindowType(IntFlag):
  '''Specifies how the chart is displayed.'''

  xlChartAsWindow = 5
  '''The chart will open in a new window.'''
  xlChartInPlace = 4
  '''The chart will be displayed on the current worksheet.'''
  xlClipboard = 3
  '''The chart is copied to the clipboard.'''
  xlInfo = -4129
  '''This constant has been deprecated.'''
  xlWorkbook = 1
  '''This constant applies to Macintosh only.'''

@unique
class XlWindowView(IntFlag):
  '''Specifies the view showing in the window.'''

  xlNormalView = 1
  '''Normal.'''
  xlPageBreakPreview = 2
  '''Page break preview.'''
  xlPageLayoutView = 3
  '''Page layout view.'''

@unique
class XlSaveConflictResolution(IntFlag):
  '''Specifies the way that conflicts are to be resolved whenever a shared workbook is updated.'''

  xlLocalSessionChanges = 2
  '''The local user's changes are always accepted.'''
  xlOtherSessionChanges = 3
  '''The local user's changes are always rejected.'''
  xlUserResolution = 1
  '''A dialog box asks the user to resolve the conflict.'''

@unique
class XlDisplayDrawingObjects(IntFlag):
  '''Specifies how shapes are displayed.'''

  xlDisplayShapes = -4104
  '''Show all shapes.'''
  xlHide = 3
  '''Hide all shapes.'''
  xlPlaceholders = 2
  '''Show only placeholders.'''

@unique
class XlUpdateLinks(IntFlag):
  '''Specifies a workbook's setting for updating embedded OLE links.'''

  xlUpdateLinksAlways = 3
  '''Embedded OLE links are always updated for the specified workbook.'''
  xlUpdateLinksNever = 2
  '''Embedded OLE links are never updated for the specified workbook.'''
  xlUpdateLinksUserSetting = 1
  '''Embedded OLE links are updated according to the user's settings for the specified workbook.'''

@unique
class XlThreadMode(IntFlag):
  '''Specifies the control over the multi-threaded calculation mode.'''

  xlThreadModeAutomatic = 0
  '''Multi-threaded calculation mode is automatic.'''
  xlThreadModeManual = 1
  '''Multi-threaded calculation mode is manual.'''

@unique
class XlOrder(IntFlag):
  '''Specifies the order in which cells are processed.'''

  xlDownThenOver = 1
  '''Process down the rows before processing across pages or page fields to the right.'''
  xlOverThenDown = 2
  '''Process across pages or page fields to the right before moving down the rows.'''

@unique
class XlPageOrientation(IntFlag):
  '''Specifies the page orientation when the worksheet is printed.'''

  xlLandscape = 2
  '''Landscape mode.'''
  xlPortrait = 1
  '''Portrait mode.'''

@unique
class XlPaperSize(IntFlag):
  '''Specifies the size of the paper.'''

  xlPaper10x14 = 16
  '''10 in. x 14 in.'''
  xlPaper11x17 = 17
  '''11 in. x 17 in.'''
  xlPaperA3 = 8
  '''A3 (297 mm x 420 mm)'''
  xlPaperA4 = 9
  '''A4 (210 mm x 297 mm)'''
  xlPaperA4Small = 10
  '''A4 Small (210 mm x 297 mm)'''
  xlPaperA5 = 11
  '''A5 (148 mm x 210 mm)'''
  xlPaperB4 = 12
  '''B4 (250 mm x 354 mm)'''
  xlPaperB5 = 13
  '''A5 (148 mm x 210 mm)'''
  xlPaperCsheet = 24
  '''C size sheet'''
  xlPaperDsheet = 25
  '''D size sheet'''
  xlPaperEnvelope10 = 20
  '''Envelope #10 (4-1/8 in. x 9-1/2 in.)'''
  xlPaperEnvelope11 = 21
  '''Envelope #11 (4-1/2 in. x 10-3/8 in.)'''
  xlPaperEnvelope12 = 22
  '''Envelope #12 (4-1/2 in. x 11 in.)'''
  xlPaperEnvelope14 = 23
  '''Envelope #14 (5 in. x 11-1/2 in.)'''
  xlPaperEnvelope9 = 19
  '''Envelope #9 (3-7/8 in. x 8-7/8 in.)'''
  xlPaperEnvelopeB4 = 33
  '''Envelope B4 (250 mm x 353 mm)'''
  xlPaperEnvelopeB5 = 34
  '''Envelope B5 (176 mm x 250 mm)'''
  xlPaperEnvelopeB6 = 35
  '''Envelope B6 (176 mm x 125 mm)'''
  xlPaperEnvelopeC3 = 29
  '''Envelope C3 (324 mm x 458 mm)'''
  xlPaperEnvelopeC4 = 30
  '''Envelope C4 (229 mm x 324 mm)'''
  xlPaperEnvelopeC5 = 28
  '''Envelope C5 (162 mm x 229 mm)'''
  xlPaperEnvelopeC6 = 31
  '''Envelope C6 (114 mm x 162 mm)'''
  xlPaperEnvelopeC65 = 32
  '''Envelope C65 (114 mm x 229 mm)'''
  xlPaperEnvelopeDL = 27
  '''Envelope DL (110 mm x 220 mm)'''
  xlPaperEnvelopeItaly = 36
  '''Envelope (110 mm x 230 mm)'''
  xlPaperEnvelopeMonarch = 37
  '''Envelope Monarch (3-7/8 in. x 7-1/2 in.)'''
  xlPaperEnvelopePersonal = 38
  '''Envelope (3-5/8 in. x 6-1/2 in.)'''
  xlPaperEsheet = 26
  '''E size sheet'''
  xlPaperExecutive = 7
  '''Executive (7-1/2 in. x 10-1/2 in.)'''
  xlPaperFanfoldLegalGerman = 41
  '''German Legal Fanfold (8-1/2 in. x 13 in.)'''
  xlPaperFanfoldStdGerman = 40
  '''German Legal Fanfold (8-1/2 in. x 13 in.)'''
  xlPaperFanfoldUS = 39
  '''U.S. Standard Fanfold (14-7/8 in. x 11 in.)'''
  xlPaperFolio = 14
  '''Folio (8-1/2 in. x 13 in.)'''
  xlPaperLedger = 4
  '''Ledger (17 in. x 11 in.)'''
  xlPaperLegal = 5
  '''Legal (8-1/2 in. x 14 in.)'''
  xlPaperLetter = 1
  '''Letter (8-1/2 in. x 11 in.)'''
  xlPaperLetterSmall = 2
  '''Letter Small (8-1/2 in. x 11 in.)'''
  xlPaperNote = 18
  '''Note (8-1/2 in. x 11 in.)'''
  xlPaperQuarto = 15
  '''Quarto (215 mm x 275 mm)'''
  xlPaperStatement = 6
  '''Statement (5-1/2 in. x 8-1/2 in.)'''
  xlPaperTabloid = 3
  '''Tabloid (11 in. x 17 in.)'''
  xlPaperUser = 256
  '''User-defined'''

@unique
class XlPrintLocation(IntFlag):
  '''Specifies the way that comments are printed with the sheet.'''

  xlPrintInPlace = 16
  '''Comments will be printed where they were inserted on the worksheet.'''
  xlPrintNoComments = -4142
  '''Comments will not be printed.'''
  xlPrintSheetEnd = 1
  '''Comments will be printed as end notes at the end of the worksheet.'''

@unique
class XlPrintErrors(IntFlag):
  '''Specifies the type of print error displayed.'''

  xlPrintErrorsBlank = 1
  '''Print errors are blank.'''
  xlPrintErrorsDash = 2
  '''Print errors are displayed as dashes.'''
  xlPrintErrorsDisplayed = 0
  '''All print errors are displayed.'''
  xlPrintErrorsNA = 3
  '''Print errors are displayed as not available.'''

@unique
class XlSpeakDirection(IntFlag):
  '''Specifies the order in which the cells are spoken.'''

  xlSpeakByColumns = 1
  '''Reads down a column, then moves to the next column.'''
  xlSpeakByRows = 0
  '''Reads across a row, then moves to the next row.'''

@unique
class XlArabicModes(IntFlag):
  '''Specifies spelling rules for the Arabic spelling checker.'''

  xlArabicBothStrict = 3
  '''The spelling checker uses spelling rules regarding both Arabic words ending with the letter yaa and Arabic words beginning with an alef hamza.'''
  xlArabicNone = 0
  '''The spelling checker ignores spelling rules regarding either Arabic words ending with the letter yaa or Arabic words beginning with an alef hamza.'''
  xlArabicStrictAlefHamza = 1
  '''The spelling checker uses spelling rules regarding Arabic words beginning with an alef hamza.'''
  xlArabicStrictFinalYaa = 2
  '''The spelling checker uses spelling rules regarding Arabic words ending with the letter yaa.'''

@unique
class XlPortugueseReform(IntFlag):
  '''Specifies the mode for checking the spelling of Portuguese.'''

  xlPortugueseBoth = 3
  '''The spelling checker recognizes both pre-reform and post-reform spellings.'''
  xlPortuguesePostReform = 2
  '''The spelling checker recognizes only post-reform spellings.'''
  xlPortuguesePreReform = 1
  '''The spelling checker recognizes only pre-reform spellings.'''

@unique
class XlHebrewModes(IntFlag):
  '''Specifies the mode for the Hebrew spelling checker.'''

  xlHebrewFullScript = 0
  '''The conventional script type as required by the Hebrew Language Academy when writing text without diacritics.'''
  xlHebrewMixedAuthorizedScript = 3
  '''The Hebrew traditional script.'''
  xlHebrewMixedScript = 2
  '''In this mode the speller accepts any word recognized as Hebrew, whether in Full Script, Partial Script, or any unconventional spelling variation that is known to the speller.'''
  xlHebrewPartialScript = 1
  '''In this mode the speller accepts words both in Full Script and Partial Script. Some words will be flagged since this spelling is not authorized in either Full script or Partial script.'''

@unique
class XlSpanishModes(IntFlag):
  '''Specifies the mode for checking the spelling of Spanish.'''

  xlSpanishTuteoAndVoseo = 1
  '''Tuteo and Voseo verb forms.'''
  xlSpanishTuteoOnly = 0
  '''Tuteo verb forms only.'''
  xlSpanishVoseoOnly = 2
  '''Voseo verb forms only.'''

@unique
class XlBordersIndex(IntFlag):
  '''Specifies the border to be retrieved.'''

  xlDiagonalDown = 5
  '''Border running from the upper-left corner to the lower-right of each cell in the range.'''
  xlDiagonalUp = 6
  '''Border running from the lower-left corner to the upper-right of each cell in the range.'''
  xlEdgeBottom = 9
  '''Border at the bottom of the range.'''
  xlEdgeLeft = 7
  '''Border at the left edge of the range.'''
  xlEdgeRight = 10
  '''Border at the right edge of the range.'''
  xlEdgeTop = 8
  '''Border at the top of the range.'''
  xlInsideHorizontal = 12
  '''Horizontal borders for all cells in the range except borders on the outside of the range.'''
  xlInsideVertical = 11
  '''Vertical borders for all the cells in the range except borders on the outside of the range.'''

@unique
class XlPlacement(IntFlag):
  '''Specifies the way that an object is attached to its underlying cells.'''

  xlFreeFloating = 3
  '''Object is free floating.'''
  xlMove = 2
  '''Object is moved with the cells.'''
  xlMoveAndSize = 1
  '''Object is moved and sized with the cells.'''

@unique
class XlAxisGroup(IntFlag):
  '''Specifies the type of axis group.'''

  xlPrimary = 1
  '''Primary axis group'''
  xlSecondary = 2
  '''Secondary axis group'''

@unique
class XlIconSet(IntFlag):
  '''Specifies the type of icon set.'''

  xl3Arrows = 1
  '''3 Arrows'''
  xl3ArrowsGray = 2
  '''3 Arrows Gray'''
  xl3Flags = 3
  '''3 Flags'''
  xl3Signs = 6
  '''3 Signs'''
  xl3Symbols = 7
  '''3 Symbols'''
  xl3TrafficLights1 = 4
  '''3 Traffic Lights 1'''
  xl3TrafficLights2 = 5
  '''3 Traffic Lights 2'''
  xl4Arrows = 8
  '''4 Arrows'''
  xl4ArrowsGray = 9
  '''4 Arrows Gray'''
  xl4CRV = 11
  '''4 CRV'''
  xl4RedToBlack = 10
  '''4 Red To Black'''
  xl4TrafficLights = 12
  '''4 Traffic Lights'''
  xl5Arrows = 13
  '''5 Arrows'''
  xl5ArrowsGray = 14
  '''5 Arrows Gray'''
  xl5CRV = 15
  '''5 CRV'''
  xl5Quarters = 16
  '''5 Quarters'''

@unique
class XlConsolidationFunction(IntFlag):
  '''Specifies the subtotal function.'''

  xlAverage = -4106
  '''Average.'''
  xlCount = -4112
  '''Count.'''
  xlCountNums = -4113
  '''Count numerical values only.'''
  xlDistinctCount = 11
  '''Count using Distinct Count analysis.'''
  xlMax = -4136
  '''Maximum.'''
  xlMin = -4139
  '''Minimum.'''
  xlProduct = -4149
  '''Multiply.'''
  xlStDev = -4155
  '''Standard deviation, based on a sample.'''
  xlStDevP = -4156
  '''Standard deviation, based on the whole population.'''
  xlSum = -4157
  '''Sum.'''
  xlUnknown = 1000
  '''No subtotal function specified.'''
  xlVar = -4164
  '''Variation, based on a sample.'''
  xlVarP = -4165
  '''Variation, based on the whole population.'''

@unique
class XlEnableSelection(IntFlag):
  '''Specifies what can be selected on the sheet.'''

  xlNoRestrictions = 0
  '''Anything can be selected.'''
  xlNoSelection = -4142
  '''Nothing can be selected.'''
  xlUnlockedCells = 1
  '''Only unlocked cells can be selected.'''

@unique
class XlSheetType(IntFlag):
  '''Specifies the worksheet type.'''

  xlChart = -4109
  '''Chart'''
  xlDialogSheet = -4116
  '''Dialog sheet'''
  xlExcel4IntlMacroSheet = 4
  '''Excel version 4 international macro sheet'''
  xlExcel4MacroSheet = 3
  '''Excel version 4 macro sheet'''
  xlWorksheet = -4167
  '''Worksheet'''

@unique
class XlXLMMacroType(IntFlag):
  '''Specifies, in a Microsoft Excel version 4 macro worksheet, what type of macro a name refers to or whether the name refers to a macro.'''

  xlCommand = 2
  '''Custom command.'''
  xlFunction = 1
  '''Custom function.'''
  xlNotXLM = 3
  '''Not a macro.'''

@unique
class XlLineStyle(IntFlag):
  '''Specifies the line style for the border.'''

  xlContinuous = 1
  '''Continuous line.'''
  xlDash = -4115
  '''Dashed line.'''
  xlDashDot = 4
  '''Alternating dashes and dots.'''
  xlDashDotDot = 5
  '''Dash followed by two dots.'''
  xlDot = -4142
  '''Dotted line.'''
  xlDouble = -4119
  '''Double line.'''
  xlLineStyleNone = -4118
  '''No line.'''
  xlSlantDashDot = 13
  '''Slanted dashes.'''

@unique
class XlBorderWeight(IntFlag):
  '''Specifies the weight of the border around a range.'''

  xlHairline = 1
  '''Hairline (thinnest border).'''
  xlMedium = -4138
  '''Medium.'''
  xlThick = 4
  '''Thick (widest border).'''
  xlThin = 2
  '''Thin.'''

@unique
class XlBackground(IntFlag):
  '''Specifies the background type for text in charts.'''

  xlBackgroundAutomatic = -4105
  '''Excel controls the background.'''
  xlBackgroundOpaque = 3
  '''Opaque background.'''
  xlBackgroundTransparent = 2
  '''Transparent background.'''

@unique
class XlThemeFont(IntFlag):
  '''Specifies the theme font to use.'''

  xlThemeFontMajor = 2
  '''Major.'''
  xlThemeFontMinor = 1
  '''Minor.'''
  xlThemeFontNone = 0
  '''Do not use any theme font.'''

@unique
class XlUnderlineStyle(IntFlag):
  '''Specifies the type of underline applied to a font.'''

  xlUnderlineStyleDouble = -4119
  '''Double thick underline.'''
  xlUnderlineStyleDoubleAccounting = 5
  '''Two thin underlines placed close together.'''
  xlUnderlineStyleNone = -4142
  '''No underlining.'''
  xlUnderlineStyleSingle = 2
  '''Single underlining.'''
  xlUnderlineStyleSingleAccounting = 4
  '''Not supported.'''

@unique
class XlPattern(IntFlag):
  '''Specifies the interior pattern of a chart or interior object.'''

  xlPatternAutomatic = -4105
  '''Excel controls the pattern.'''
  xlPatternChecker = 9
  '''Checkerboard.'''
  xlPatternCrissCross = 16
  '''Criss-cross lines.'''
  xlPatternDown = -4121
  '''Dark diagonal lines running from the upper-left to the lower-right.'''
  xlPatternGray16 = 17
  '''16% gray.'''
  xlPatternGray25 = -4124
  '''25% gray.'''
  xlPatternGray50 = -4125
  '''50% gray.'''
  xlPatternGray75 = -4126
  '''75% gray.'''
  xlPatternGray8 = 18
  '''8% gray.'''
  xlPatternGrid = 15
  '''Grid.'''
  xlPatternHorizontal = -4128
  '''Dark horizontal lines.'''
  xlPatternLightDown = 13
  '''Light diagonal lines running from the upper-left to the lower-right.'''
  xlPatternLightHorizontal = 11
  '''Light horizontal lines.'''
  xlPatternLightUp = 14
  '''Light diagonal lines running from the lower-left to the upper-right.'''
  xlPatternLightVertical = 12
  '''Light vertical bars.'''
  xlPatternNone = -4142
  '''No pattern.'''
  xlPatternSemiGray75 = 10
  '''75% dark gray.'''
  xlPatternSolid = 1
  '''Solid color.'''
  xlPatternUp = -4162
  '''Dark diagonal lines running from the lower-left to the upper-right.'''
  xlPatternVertical = -4166
  '''Dark vertical bars.'''

@unique
class XlThemeColor(IntFlag):
  '''Specifies the theme color to be used.'''

  xlThemeColorAccent1 = 5
  '''Accent1'''
  xlThemeColorAccent2 = 6
  '''Accent2'''
  xlThemeColorAccent3 = 7
  '''Accent3'''
  xlThemeColorAccent4 = 8
  '''Accent4'''
  xlThemeColorAccent5 = 9
  '''Accent5'''
  xlThemeColorAccent6 = 10
  '''Accent6'''
  xlThemeColorDark1 = 1
  '''Dark1'''
  xlThemeColorDark2 = 3
  '''Dark2'''
  xlThemeColorFollowedHyperlink = 12
  '''Followed hyperlink'''
  xlThemeColorHyperlink = 11
  '''Hyperlink'''
  xlThemeColorLight1 = 2
  '''Light1'''
  xlThemeColorLight2 = 4
  '''Light2'''

@unique
class XlListObjectSourceType(IntFlag):
  '''Specifies the current source of the list.'''

  xlSrcExternal = 0
  '''External data source (Microsoft SharePoint Foundation site).'''
  xlSrcModel = 4
  '''PowerPivot Model'''
  xlSrcQuery = 3
  '''Query'''
  xlSrcRange = 1
  '''Range'''
  xlSrcXml = 2
  '''XML'''

@unique
class XlAllocation(IntFlag):
  '''Specifies when to calculate changes when performing what-if analysis on a PivotTable based on an OLAP data source.'''

  xlAutomaticAllocation = 2
  '''Calculate changes automatically after each value is changed.'''
  xlManualAllocation = 1
  '''Calculate changes manually.'''

@unique
class XlAllocationMethod(IntFlag):
  '''Specifies the method to use to allocate values when performing what-if analysis on a PivotTable report based on an OLAP data source.

#REMARKS:

If the AllocationMethod property is set to xlWeightedAllocation, you can optionally specify the weight expression to use by setting the AllocationWeightExpression property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlEqualAllocation = 1
  '''Use equal allocation.'''
  xlWeightedAllocation = 2
  '''Use weighted allocation.'''

@unique
class XlAllocationValue(IntFlag):
  '''Specifies what value to allocate when performing what-if analysis on a PivotTable report based on an OLAP data source.'''

  xlAllocateIncrement = 2
  '''Increment based on the old value.'''
  xlAllocateValue = 1
  '''The value entered divided by the number of allocations.'''

@unique
class XlLayoutRowType(IntFlag):
  '''Specifies the type of layout row.'''

  xlCompactRow = 0
  '''Compact Row'''
  xlOutlineRow = 2
  '''Outline Row'''
  xlTabularRow = 1
  '''Tabular Row'''

@unique
class XlPTSelectionMode(IntFlag):
  '''Specifies what can be selected in a PivotTable during a structured selection. These constants can be combined to select multiple types.'''

  xlBlanks = 4
  '''Blanks'''
  xlButton = 15
  '''Buttons'''
  xlDataAndLabel = 0
  '''Data and labels'''
  xlDataOnly = 2
  '''Data'''
  xlFirstRow = 256
  '''First row'''
  xlLabelOnly = 1
  '''Label'''
  xlOrigin = 3
  '''Origin'''

@unique
class XlPivotTableVersionList(IntFlag):
  '''Specifies the version of a PivotTable or a PivotCache. Creating PivotTables with a specific version ensures that tables created in Excel behave in the same manner as they did in the corresponding version of Excel.'''

  xlPivotTableVersion2000 = 0
  '''Excel 2000'''
  xlPivotTableVersion10 = 1
  '''Excel 2002'''
  xlPivotTableVersion11 = 2
  '''Excel 2003'''
  xlPivotTableVersion12 = 3
  '''Excel 2007'''
  xlPivotTableVersion14 = 4
  '''Excel 2010'''
  xlPivotTableVersion15 = 5
  '''Excel 2013'''
  xlPivotTableVersionCurrent = -1
  '''Provided only for backward compatibility'''

@unique
class XlPhoneticCharacterType(IntFlag):
  '''Specifies the type of phonetic text in a cell.'''

  xlHiragana = 2
  '''Hiragana'''
  xlKatakana = 1
  '''Katakana'''
  xlKatakanaHalf = 0
  '''Half-size Katakana'''
  xlNoConversion = 3
  '''No conversion'''

@unique
class XlCellChangedState(IntFlag):
  '''Specifies whether a PivotTable value cell has been edited or recalculated since the PivotTable report was created or the last commit operation was performed.

#REMARKS:

Applying and saving changes applies only to PivotTable reports with OLAP data sources. For more information about the meaning of the xlCellChangedState enumeration constant values, see the CellChanged property of the PivotCell object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlCellChangeApplied = 3
  '''The value in the cell has been edited or recalculated, and that change has been applied to the data source. (Applies only PivotTable reports with OLAP data sources)'''
  xlCellChanged = 2
  '''The value in the cell has been edited or recalculated.'''
  xlCellNotChanged = 1
  '''The value in the cell has not been edited or recalculated.'''

@unique
class XlPivotCellType(IntFlag):
  '''Specifies the PivotTable entity to which the cell corresponds.'''

  xlPivotCellBlankCell = 9
  '''A structural blank cell in the PivotTable.'''
  xlPivotCellCustomSubtotal = 7
  '''A cell in the row or column area that is a custom subtotal.'''
  xlPivotCellDataField = 4
  '''A data field label (not the Data button).'''
  xlPivotCellDataPivotField = 8
  '''The Data button.'''
  xlPivotCellGrandTotal = 3
  '''A cell in a row or column area that is a grand total.'''
  xlPivotCellPageFieldItem = 6
  '''The cell that shows the selected item of a Page field.'''
  xlPivotCellPivotField = 5
  '''The button for a field (not the Data button).'''
  xlPivotCellPivotItem = 1
  '''A cell in the row or column area that is not a subtotal, grand total, custom subtotal, or blank line.'''
  xlPivotCellSubtotal = 2
  '''A cell in the row or column area that is a subtotal.'''
  xlPivotCellValue = 0
  '''Any cell in the data area (except a blank row).'''

@unique
class XlSortOrder(IntFlag):
  '''Specifies the sort order for the specified field or range.'''

  xlAscending = 1
  '''Sorts the specified field in ascending order. This is the default value.'''
  xlDescending = 2
  '''Sorts the specified field in descending order.'''
  xlManual = -4135
  '''Manual sort (you can drag items to rearrange them).'''

@unique
class XlPivotFieldCalculation(IntFlag):
  '''Specifies the type of calculation performed by a data PivotField when a custom calculation is used.'''

  xlDifferenceFrom = 2
  '''The difference from the value of the Base item in the Base field.'''
  xlIndex = 9
  '''Data calculated as ((value in cell) x (Grand Total of Grand Totals)) / ((Grand Row Total) x (Grand Column Total)).'''
  xlNoAdditionalCalculation = -4143
  '''No calculation.'''
  xlPercentDifferenceFrom = 4
  '''Percentage difference from the value of the Base item in the Base field.'''
  xlPercentOf = 3
  '''Percentage of the value of the Base item in the Base field.'''
  xlPercentOfColumn = 7
  '''Percentage of the total for the column or series.'''
  xlPercentOfParent = 12
  '''Percentage of the total of the specified parent Base field.'''
  xlPercentOfParentColumn = 11
  '''Percentage of the total of the parent column.'''
  xlPercentOfParentRow = 10
  '''Percentage of the total of the parent row.'''
  xlPercentOfRow = 6
  '''Percentage of the total for the row or category.'''
  xlPercentOfTotal = 8
  '''Percentage of the grand total of all the data or data points in the report.'''
  xlPercentRunningTotal = 13
  '''Percentage of the running total of the specified Base field.'''
  xlRankAscending = 14
  '''Rank smallest to largest.'''
  xlRankDecending = 15
  '''Rank largest to smallest.'''
  xlRunningTotal = 5
  '''Data for successive items in the Base field as a running total.'''

@unique
class XlPivotFieldDataType(IntFlag):
  '''Specifies the type of data in the PivotTable field.

#REMARKS:

This enumeration is used with the DataType property of the PivotField object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlDate = 2
  '''Contains a date.'''
  xlNumber = -4145
  '''Contains a number.'''
  xlText = -4158
  '''Contains text.'''

@unique
class XlLayoutFormType(IntFlag):
  '''Specifies the way the specified PivotTable items appear—in table format or in outline format.'''

  xlOutline = 1
  '''The LayoutSubtotalLocation property specifies where the subtotal appears in the PivotTable report.'''
  xlTabular = 0
  '''Default.'''

@unique
class XlSubtotalLocationType(IntFlag):
  '''Specifies where the subtotal will be displayed on the worksheet.'''

  xlAtBottom = 2
  '''Subtotal will be at the bottom.'''
  xlAtTop = 1
  '''Subtotal will be at the top.'''

@unique
class XlPivotFieldOrientation(IntFlag):
  '''Specifies the location of the field in a PivotTable report.'''

  xlColumnField = 2
  '''Column'''
  xlDataField = 4
  '''Data'''
  xlHidden = 0
  '''Hidden'''
  xlPageField = 3
  '''Page'''
  xlRowField = 1
  '''Row'''

@unique
class XlCmdType(IntFlag):
  '''Specifies the value of the CommandText property.'''

  xlCmdCube = 1
  '''Contains a cube name for an OLAP data source.'''
  xlCmdDAX = 8
  '''Contains a Data Analysis Expressions (DAX) formula.'''
  xlCmdDefault = 4
  '''Contains command text that the OLE DB provider understands.'''
  xlCmdExcel = 7
  '''Contains an Excel formula.'''
  xlCmdList = 5
  '''Contains a pointer to list data.'''
  xlCmdSql = 2
  '''Contains an SQL statement.'''
  xlCmdTable = 3
  '''Contains a table name for accessing OLE DB data sources.'''
  xlCmdTableCollection = 6
  '''Contains the name of a table collection.'''

@unique
class XlQueryType(IntFlag):
  '''Specifies the type of query used by Microsoft Excel to populate the query table or PivotTable cache.'''

  xlADORecordset = 7
  '''Based on an ADO recordset query'''
  xlDAORecordset = 2
  '''Based on a DAO recordset query, for query tables only'''
  xlODBCQuery = 1
  '''Based on an ODBC data source'''
  xlOLEDBQuery = 5
  '''Based on an OLE DB query, including OLAP data sources'''
  xlTextImport = 6
  '''Based on a text file, for query tables only'''
  xlWebQuery = 4
  '''Based on a webpage, for query tables only'''

@unique
class XlCellInsertionMode(IntFlag):
  '''Specifies the way that rows on the specified worksheet are added or deleted to accommodate the number of rows in a recordset returned by a query.'''

  xlInsertDeleteCells = 1
  '''Partial rows are inserted or deleted to match the exact number of rows required for the new recordset.'''
  xlInsertEntireRows = 2
  '''Entire rows are inserted, if necessary, to accommodate any overflow. No cells or rows are deleted from the worksheet.'''
  xlOverwriteCells = 0
  '''No new cells or rows are added to the worksheet. Data in surrounding cells is overwritten to accommodate any overflow.'''

@unique
class XlRobustConnect(IntFlag):
  '''Specifies how the PivotTable cache or a query table connects to its data source.'''

  xlAlways = 1
  '''The PivotTable cache or query table always uses external source information (as defined by the SourceConnectionFile or SourceDataFile property) to reconnect.'''
  xlAsRequired = 0
  '''The PivotTable cache or query table uses external source information to reconnect by using the Connection property.'''
  xlNever = 2
  '''The PivotTable cache or query table never uses source information to reconnect.'''

@unique
class XlColumnDataType(IntFlag):
  '''Specifies how a column is to be parsed.'''

  xlDMYFormat = 4
  '''DMY date format.'''
  xlDYMFormat = 7
  '''DYM date format.'''
  xlEMDFormat = 10
  '''EMD date format.'''
  xlGeneralFormat = 1
  '''General.'''
  xlMDYFormat = 3
  '''MDY date format.'''
  xlMYDFormat = 6
  '''MYD date format.'''
  xlSkipColumn = 9
  '''Column is not parsed.'''
  xlTextFormat = 2
  '''Text.'''
  xlYDMFormat = 8
  '''YDM date format.'''
  xlYMDFormat = 5
  '''YMD date format.'''

@unique
class XlTextParsingType(IntFlag):
  '''Specifies the column format for the data in the text file that you are importing into a query table.'''

  xlDelimited = 1
  '''Default. Indicates that the file is delimited by delimiter characters.'''
  xlFixedWidth = 2
  '''Indicates that the data in the file is arranged in columns of fixed widths.'''

@unique
class XlPlatform(IntFlag):
  '''Specifies the platform on which a text file originated.'''

  xlMacintosh = 1
  '''Macintosh'''
  xlMSDOS = 3
  '''MS-DOS'''
  xlWindows = 2
  '''Microsoft Windows'''

@unique
class XlTextQualifier(IntFlag):
  '''Specifies the delimiter to use to specify text.'''

  xlTextQualifierDoubleQuote = 1
  '''Double quotation mark (").'''
  xlTextQualifierNone = -4142
  '''No delimiter.'''
  xlTextQualifierSingleQuote = 2
  '''Single quotation mark (').'''

@unique
class XlTextVisualLayoutType(IntFlag):
  '''Specifies whether the visual layout of the text being imported is left-to-right or right-to-left.'''

  xlTextVisualLTR = 1
  '''Left-to-right'''
  xlTextVisualRTL = 2
  '''Right-to-left'''

@unique
class XlWebFormatting(IntFlag):
  '''Specifies how much formatting from a webpage, if any, is applied when a webpage is imported into a query table.'''

  xlWebFormattingAll = 1
  '''All formatting is imported.'''
  xlWebFormattingNone = 3
  '''No formatting is imported.'''
  xlWebFormattingRTF = 2
  '''Rich Text Format - compatible formatting is imported.'''

@unique
class XlWebSelectionType(IntFlag):
  '''Specifies whether an entire webpage, all tables on the webpage, or only a specific table is imported into a query table.'''

  xlAllTables = 2
  '''All tables'''
  xlEntirePage = 1
  '''Entire page'''
  xlSpecifiedTables = 3
  '''Specified tables'''

@unique
class XlDVAlertStyle(IntFlag):
  '''Specifies the icon used in message boxes displayed during validation.'''

  xlValidAlertInformation = 3
  '''Information icon.'''
  xlValidAlertStop = 1
  '''Stop icon.'''
  xlValidAlertWarning = 2
  '''Warning icon.'''

@unique
class XlFormatConditionOperator(IntFlag):
  '''Specifies the operator to use to compare a formula against the value in a cell or, for xlBetween and xlNotBetween, to compare two formulas.'''

  xlBetween = 1
  '''Between. Can be used only if two formulas are provided.'''
  xlEqual = 3
  '''Equal.'''
  xlGreater = 5
  '''Greater than.'''
  xlGreaterEqual = 7
  '''Greater than or equal to.'''
  xlLess = 6
  '''Less than.'''
  xlLessEqual = 8
  '''Less than or equal to.'''
  xlNotBetween = 2
  '''Not between. Can be used only if two formulas are provided.'''
  xlNotEqual = 4
  '''Not equal.'''

@unique
class XlIMEMode(IntFlag):
  '''Specifies the description of the Japanese input rules.'''

  xlIMEModeAlpha = 8
  '''Half-width alphanumeric.'''
  xlIMEModeAlphaFull = 7
  '''Full-width alphanumeric.'''
  xlIMEModeDisable = 3
  '''Disable.'''
  xlIMEModeHangul = 10
  '''Hangul.'''
  xlIMEModeHangulFull = 9
  '''Full-width Hangul.'''
  xlIMEModeHiragana = 4
  '''Hiragana.'''
  xlIMEModeKatakana = 5
  '''Katakana.'''
  xlIMEModeKatakanaHalf = 6
  '''Half-width Katakana.'''
  xlIMEModeNoControl = 0
  '''No control.'''
  xlIMEModeOff = 2
  '''Off (English mode).'''
  xlIMEModeOn = 1
  '''Mode on.'''

@unique
class XlDVType(IntFlag):
  '''Specifies the type of validation test to be performed in conjunction with values.'''

  xlValidateCustom = 7
  '''Data is validated using an arbitrary formula.'''
  xlValidateDate = 4
  '''Date values.'''
  xlValidateDecimal = 2
  '''Numeric values.'''
  xlValidateInputOnly = 0
  '''Validate only when user changes the value.'''
  xlValidateList = 3
  '''Value must be present in a specified list.'''
  xlValidateTextLength = 6
  '''Length of text.'''
  xlValidateTime = 5
  '''Time values.'''
  xlValidateWholeNumber = 1
  '''Whole numeric values.'''

@unique
class XlChartPictureType(IntFlag):
  '''Specifies how pictures are displayed on a column, bar picture chart, or legend key.'''

  xlStack = 2
  '''Picture is sized to repeat a maximum of 15 times in the longest stacked bar.'''
  xlStackScale = 3
  '''Picture is sized to a specified number of units and repeated the length of the bar.'''
  xlStretch = 1
  '''Picture is stretched the full length of the stacked bar.'''

@unique
class XlChartElementPosition(IntFlag):
  '''Specifies the position of the chart element.'''

  xlChartElementPositionAutomatic = -4105
  '''Automatically sets the position of the chart element.'''
  xlChartElementPositionCustom = -4114
  '''Specifies a specific position for the chart element.'''

@unique
class XlLegendPosition(IntFlag):
  '''Specifies the position of the legend on a chart.'''

  xlLegendPositionBottom = -4107
  '''Below the chart.'''
  xlLegendPositionCorner = 2
  '''In the upper-right corner of the chart border.'''
  xlLegendPositionCustom = -4161
  '''A custom position.'''
  xlLegendPositionLeft = -4131
  '''Left of the chart.'''
  xlLegendPositionRight = -4152
  '''Right of the chart.'''
  xlLegendPositionTop = -4160
  '''Above the chart.'''

@unique
class XlPivotConditionScope(IntFlag):
  '''This enumeration specifies the conditional formatting applied for filtering values from the PivotTable object.'''

  xlDataFieldScope = 2
  '''Based on the data in the specified fields.'''
  xlFieldsScope = 1
  '''Based on the specified fields.'''
  xlSelectionScope = 0
  '''Based on the specified selection criteria.'''

@unique
class XlContainsOperator(IntFlag):
  '''Specifies the operator used in a function.'''

  xlBeginsWith = 2
  '''Begins with a specified value.'''
  xlContains = 0
  '''Contains a specified value.'''
  xlDoesNotContain = 1
  '''Does not contain the specified value.'''
  xlEndsWith = 3
  '''Endswith the specified value'''

@unique
class XlFormatConditionType(IntFlag):
  '''Specifies whether the conditional format is based on a cell value or an expression.'''

  xlAboveAverageCondition = 12
  '''Above average condition'''
  xlBlanksCondition = 10
  '''Blanks condition'''
  xlCellValue = 1
  '''Cell value'''
  xlColorScale = 3
  '''Color scale'''
  xlDataBar = 4
  '''DataBar'''
  xlErrorsCondition = 16
  '''Errors condition'''
  xlExpression = 2
  '''Expression'''
  xlIconSet = 6
  '''Icon set'''
  xlNoBlanksCondition = 13
  '''No blanks condition'''
  xlNoErrorsCondition = 17
  '''No errors condition'''
  xlTextString = 9
  '''Text string'''
  xlTimePeriod = 11
  '''Time period'''
  xlTop10 = 5
  '''Top 10 values'''
  xlUniqueValues = 8
  '''Unique values'''

@unique
class XlCalculatedMemberType(IntFlag):
  '''Specifies the type of a calculated member in a PivotTable.'''

  xlCalculatedMeasure = 2
  '''The member is a Multidimensional Expressions (MDX) expression that defines the measure.'''
  xlCalculatedMember = 0
  '''The member uses a Multidimensional Expression (MDX) formula.'''
  xlCalculatedSet = 1
  '''The member contains an MDX formula for a set in a cube field.'''

@unique
class XlSparklineRowCol(IntFlag):
  '''Specifies how to plot the sparkline when the data on which it is based is in a square-shaped range.

#REMARKS:

The xlSparklineRowCol enumeration is used by the PlotBy property of the SparklineGroup object to determine how to plot chart in a sparkline when data on which it based is in a square-shaped range, such as A1:B2.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlSparklineColumnsSquare = 2
  '''Plot the data by columns.'''
  xlSparklineNonSquare = 0
  '''The sparkline is not bound to data in a square-shaped range.'''
  xlSparklineRowsSquare = 1
  '''Plot the data by rows.'''

@unique
class XlSparkType(IntFlag):
  '''Specifies the type of sparkline.'''

  xlSparkColumn = 2
  '''A column chart sparkline.'''
  xlSparkColumnStacked100 = 3
  '''A win/loss chart sparkline.'''
  xlSparkLine = 1
  '''A line chart sparkline.'''

@unique
class XlTotalsCalculation(IntFlag):
  '''Specifies the type of calculation in the Totals row of a list column.'''

  xlTotalsCalculationAverage = 2
  '''Average'''
  xlTotalsCalculationCount = 3
  '''Count of non-empty cells'''
  xlTotalsCalculationCountNums = 4
  '''Count of cells with numeric values'''
  xlTotalsCalculationCustom = 9
  '''Custom calculation'''
  xlTotalsCalculationMax = 6
  '''Maximum value in the list'''
  xlTotalsCalculationMin = 5
  '''Minimum value in the list'''
  xlTotalsCalculationNone = 0
  '''No calculation'''
  xlTotalsCalculationStdDev = 7
  '''Standard deviation value'''
  xlTotalsCalculationSum = 1
  '''Sum of all values in the list column'''
  xlTotalsCalculationVar = 8
  '''Variable'''

@unique
class XlTimeUnit(IntFlag):
  '''Specifies the unit of time for chart axes and data series.'''

  xlDays = 0
  '''Days'''
  xlMonths = 1
  '''Months'''
  xlYears = 2
  '''Years'''

@unique
class XlCategoryType(IntFlag):
  '''Specifies the type of the category axis.'''

  xlAutomaticScale = -4105
  '''Excel controls the axis type.'''
  xlCategoryScale = 2
  '''Axis groups data by an arbitrary set of categories.'''
  xlTimeScale = 3
  '''Axis groups data on a time scale.'''

@unique
class XlAxisCrosses(IntFlag):
  '''Specifies the point on the specified axis where the other axis crosses.'''

  xlAxisCrossesAutomatic = -4105
  '''Microsoft Excel sets the axis crossing point.'''
  xlAxisCrossesCustom = -4114
  '''The CrossesAt property specifies the axis crossing point.'''
  xlAxisCrossesMaximum = 2
  '''The axis crosses at the maximum value.'''
  xlAxisCrossesMinimum = 4
  '''The axis crosses at the minimum value.'''

@unique
class XlDisplayUnit(IntFlag):
  '''Specifies the display unit label for an axis.'''

  xlHundredMillions = -8
  '''Hundreds of millions.'''
  xlHundreds = -2
  '''Hundreds.'''
  xlHundredThousands = -5
  '''Hundreds of thousands.'''
  xlMillionMillions = -10
  '''Millions of millions.'''
  xlMillions = -6
  '''Millions.'''
  xlTenMillions = -7
  '''Tens of millions.'''
  xlTenThousands = -4
  '''Tens of thousands.'''
  xlThousandMillions = -9
  '''Thousands of millions.'''
  xlThousands = -3
  '''Thousands.'''

@unique
class XlTickMark(IntFlag):
  '''Specifies the position of major and minor tick marks for an axis.'''

  xlTickMarkCross = 4
  '''Crosses the axis'''
  xlTickMarkInside = 2
  '''Inside the axis'''
  xlTickMarkNone = -4142
  '''No mark'''
  xlTickMarkOutside = 3
  '''Outside the axis'''

@unique
class XlScaleType(IntFlag):
  '''Specifies the scale type of the value axis.'''

  xlScaleLinear = -4132
  '''Linear'''
  xlScaleLogarithmic = -4133
  '''Logarithmic'''

@unique
class XlTickLabelPosition(IntFlag):
  '''Specifies the position of tick-mark labels on the specified axis.'''

  xlTickLabelPositionHigh = -4127
  '''Top or right side of the chart.'''
  xlTickLabelPositionLow = -4134
  '''Bottom or left side of the chart.'''
  xlTickLabelPositionNextToAxis = 4
  '''Next to axis (where axis is not at either side of the chart).'''
  xlTickLabelPositionNone = -4142
  '''No tick marks.'''

@unique
class XlAxisType(IntFlag):
  '''Specifies the axis type.'''

  xlCategory = 1
  '''Axis displays categories.'''
  xlSeriesAxis = 3
  '''Axis displays data series.'''
  xlValue = 2
  '''Axis displays values.'''

class XlBinsType(IntFlag):
  '''Constants passed to and returned by the ChartGroup.BinsType property.'''


@unique
class XlSizeRepresents(IntFlag):
  '''Specifies what the bubble size represents on a bubble chart.'''

  xlSizeIsArea = 1
  '''Area of the bubble.'''
  xlSizeIsWidth = 2
  '''Width of the bubble.'''

@unique
class XlChartSplitType(IntFlag):
  '''Specifies the values displayed in the second chart in a pie chart or a Bar of Pie chart.'''

  xlSplitByCustomSplit = 4
  '''Arbitrary slides are displayed in the second chart.'''
  xlSplitByPercentValue = 3
  '''Second chart displays values less than some percentage of the total value. The percentage is specified by the SplitValue property.'''
  xlSplitByPosition = 1
  '''Second chart displays the smallest values in the data series. The number of values to display is specified by the SplitValue property.'''
  xlSplitByValue = 2
  '''Second chart displays values less than the value specified by the SplitValue property.'''

class XlGeoMappingLevel(IntFlag):
  '''Constants passed to and returned by the Series.GeoMappingLevel property.'''


class XlGeoProjectionType(IntFlag):
  '''Constants passed to and returned by the Series.GeoProjectionType property.'''


@unique
class XlMarkerStyle(IntFlag):
  '''Specifies the marker style for a point or series in a line chart, scatter chart, or radar chart.'''

  xlMarkerStyleAutomatic = -4105
  '''Automatic markers'''
  xlMarkerStyleCircle = 8
  '''Circular markers'''
  xlMarkerStyleDash = -4115
  '''Long bar markers'''
  xlMarkerStyleDiamond = 2
  '''Diamond-shaped markers'''
  xlMarkerStyleDot = -4118
  '''Short bar markers'''
  xlMarkerStyleNone = -4142
  '''No markers'''
  xlMarkerStylePicture = -4147
  '''Picture markers'''
  xlMarkerStylePlus = 9
  '''Square markers with a plus sign'''
  xlMarkerStyleSquare = 1
  '''Square markers'''
  xlMarkerStyleStar = 5
  '''Square markers with an asterisk'''
  xlMarkerStyleTriangle = 3
  '''Triangular markers'''
  xlMarkerStyleX = -4168
  '''Square markers with an X'''

class XlParentDataLabelOptions(IntFlag):
  '''Constants passed to and returned by the Series.ParentDataLabelOption property.'''


class XlRegionLabelOptions(IntFlag):
  '''Constants passed to and returned by the Series.RegionLabelOptions property.'''


@unique
class XlFormControl(IntFlag):
  '''Specifies the type of the form control.'''

  xlButtonControl = 0
  '''Button.'''
  xlCheckBox = 1
  '''Check box.'''
  xlDropDown = 2
  '''Combo box.'''
  xlEditBox = 3
  '''Text box.'''
  xlGroupBox = 4
  '''Group box.'''
  xlLabel = 5
  '''Label.'''
  xlListBox = 6
  '''List box.'''
  xlOptionButton = 7
  '''Option button.'''
  xlScrollBar = 8
  '''Scroll bar.'''
  xlSpinner = 9
  '''Spinner.'''

@unique
class XlConnectionType(IntFlag):
  '''Specifies the type of database connection.'''

  xlConnectionTypeDATAFEED = 6
  '''Data Feed'''
  xlConnectionTypeMODEL = 7
  '''PowerPivot Model'''
  xlConnectionTypeNOSOURCE = 9
  '''No source'''
  xlConnectionTypeODBC = 2
  '''ODBC'''
  xlConnectionTypeOLEDB = 1
  '''OLEDB'''
  xlConnectionTypeTEXT = 4
  '''Text'''
  xlConnectionTypeWEB = 5
  '''Web'''
  xlConnectionTypeWORKSHEET = 8
  '''Worksheet'''
  xlConnectionTypeXMLMAP = 3
  '''XML MAP'''

@unique
class XlHtmlType(IntFlag):
  '''Specifies the type of HTML generated by Excel when you save the specified item to a webpage and whether the item is static or interactive.'''

  xlHtmlCalc = 1
  '''Use the Spreadsheet component. Deprecated.'''
  xlHtmlChart = 3
  '''Use the Chart component. Deprecated.'''
  xlHtmlList = 2
  '''Use the PivotTable component. Deprecated.'''
  xlHtmlStatic = 0
  '''Use static (noninteractive) HTML for viewing only.'''

@unique
class XlSourceType(IntFlag):
  '''Identifies the source object.'''

  xlSourceAutoFilter = 3
  '''An AutoFilter range'''
  xlSourceChart = 5
  '''A chart'''
  xlSourcePivotTable = 6
  '''A PivotTable report'''
  xlSourcePrintArea = 2
  '''A range of cells selected for printing'''
  xlSourceQuery = 7
  '''A query table (external data range)'''
  xlSourceRange = 4
  '''A range of cells'''
  xlSourceSheet = 1
  '''An entire worksheet'''
  xlSourceWorkbook = 0
  '''A workbook'''

@unique
class XlSlicerCrossFilterType(IntFlag):
  '''Specifies the type of cross filtering used by the specified slicer cache and how it is visualized.'''

  xlSlicerCrossFilterHideButtonsWithNoData = 4
  '''Cross filtering is turned on for this slicer cache, any tile with no data for a filtering selection in other slicers connected to the same data source will be dimmed. Additionally, buttons will be hidden.'''
  xlSlicerCrossFilterShowItemsWithDataAtTop = 2
  '''Cross filtering is turned on for this slicer cache, any tile with no data for a filtering selection in other slicers connected to the same data source will be dimmed. Additionally, tiles with data are moved to the top in the slicer. (Default)'''
  xlSlicerCrossFilterShowItemsWithNoData = 3
  '''Cross filtering is turned on for this slicer cache, any tile with no data for a filtering selection in other slicers connected to the same data source will be dimmed.'''
  xlSlicerNoCrossFilter = 1
  '''Cross filtering is turned off entirely, so all tiles are displayed and active (not dimmed) regardless of filtering selections in other slicers.'''

class XlSlicerCacheType(IntFlag):
  '''Designates the type of slicer or slicer cache.'''


@unique
class XlSlicerSort(IntFlag):
  '''Specifies whether items displayed in the slicer are sorted, and if they are sorted, whether they are sorted in ascending or descending order by item captions.'''

  xlSlicerSortAscending = 2
  '''Slicer items are sorted in ascending order by item captions.'''
  xlSlicerSortDataSourceOrder = 1
  '''Slicer items are displayed in the order provided by the data source.'''
  xlSlicerSortDescending = 3
  '''Slicer items are sorted in descending order by item captions.'''

@unique
class XlPivotTableSourceType(IntFlag):
  '''Specifies the source of the report data.'''

  xlConsolidation = 3
  '''Multiple consolidation ranges.'''
  xlDatabase = 1
  '''Microsoft Excel list or database.'''
  xlExternal = 2
  '''Data from another application.'''
  xlPivotTable = -4148
  '''Same source as another PivotTable report.'''
  xlScenario = 4
  '''Data is based on scenarios created using the Scenario Manager.'''

@unique
class XlSummaryColumn(IntFlag):
  '''Specifies the location of the summary columns in the outline.'''

  xlSummaryOnLeft = -4131
  '''The summary column will be positioned to the left of the detail columns in the outline.'''
  xlSummaryOnRight = -4152
  '''The summary column will be positioned to the right of the detail columns in the outline.'''

@unique
class XlSummaryRow(IntFlag):
  '''Specifies the location of the summary rows in the outline.'''

  xlSummaryAbove = 0
  '''The summary row will be positioned above the detail rows in the outline.'''
  xlSummaryBelow = 1
  '''The summary row will be positioned below the detail rows in the outline.'''

@unique
class XlYesNoGuess(IntFlag):
  '''Specifies whether or not the first row contains headers. Cannot be used when sorting PivotTable reports.'''

  xlGuess = 0
  '''Excel determines whether there is a header, and where it is, if there is one.'''
  xlNo = 2
  '''Default. The entire range should be sorted.'''
  xlYes = 1
  '''The entire range should not be sorted.'''

@unique
class XlSortOrientation(IntFlag):
  '''Specifies the sort orientation.'''

  xlSortColumns = 1
  '''Sorts by column.'''
  xlSortRows = 2
  '''Sorts by row. This is the default value.'''

@unique
class XlSortMethod(IntFlag):
  '''Specifies the type of sort.'''

  xlPinYin = 1
  '''Phonetic Chinese sort order for characters. This is the default value.'''
  xlStroke = 2
  '''Sort by the quantity of strokes in each character.'''

@unique
class XlPageBreakExtent(IntFlag):
  '''Specifies whether a page break is full screen or applies only within the print area.'''

  xlPageBreakFull = 1
  '''Full screen.'''
  xlPageBreakPartial = 2
  '''Only within print area.'''

@unique
class XlCubeFieldSubType(IntFlag):
  '''Specifies the subtype of the CubeField.'''

  xlCubeAttribute = 4
  '''Attribute'''
  xlCubeCalculatedMeasure = 5
  '''Calculated Measure'''
  xlCubeHierarchy = 1
  '''Hierarchy'''
  xlCubeImplicitMeasure = 11
  '''An implicit measure'''
  xlCubeKPIGoal = 7
  '''KPI Goal'''
  xlCubeKPIStatus = 8
  '''KPI Status'''
  xlCubeKPITrend = 9
  '''KPI Trend'''
  xlCubeKPIValue = 6
  '''KPI Value'''
  xlCubeKPIWeight = 10
  '''KPI Weight'''
  xlCubeMeasure = 2
  '''Measure'''
  xlCubeSet = 3
  '''Set'''

@unique
class XlCubeFieldType(IntFlag):
  '''Specifies whether the OLAP field is a hierarchy, set, or measure field.'''

  xlHierarchy = 1
  '''OLAP field is a hierarchy.'''
  xlMeasure = 2
  '''OLAP field is a measure.'''
  xlSet = 3
  '''OLAP field is a set.'''

@unique
class XlPivotLineType(IntFlag):
  '''Specifies the type of the PivotLine.'''

  xlPivotLineBlank = 3
  '''Blank line after each group.'''
  xlPivotLineGrandTotal = 2
  '''Grand Total line.'''
  xlPivotLineRegular = 0
  '''Regular PivotLine with pivot items.'''
  xlPivotLineSubtotal = 1
  '''Subtotal line.'''

@unique
class XlPivotTableMissingItems(IntFlag):
  '''Specifies the maximum number of unique items allowed per PivotField.'''

  xlMissingItemsDefault = -1
  '''The default number of unique items per PivotField allowed.'''
  xlMissingItemsMax = 32500
  '''The maximum number of unique items per PivotField allowed (32,500) for a pre-Excel 2007 PivotTable.'''
  xlMissingItemsMax2 = 1048576
  '''The maximum number of unique items per PivotField allowed (1,048,576) for PivotTables in Excel 2007 and later.'''
  xlMissingItemsNone = 0
  '''No unique items per PivotField allowed (zero).'''

@unique
class XlTrendlineType(IntFlag):
  '''Specifies how the trendline that smooths out fluctuations in the data is calculated.'''

  xlExponential = 5
  '''Uses an equation to calculate the least squares fit through points, for example, y=ab^x .'''
  xlLinear = -4132
  '''Uses the linear equation y = mx + b to calculate the least squares fit through points.'''
  xlLogarithmic = -4133
  '''Uses the equation y = c ln x + b to calculate the least squares fit through points.'''
  xlMovingAvg = 6
  '''Uses a sequence of averages computed from parts of the data series. The number of points equals the total number of points in the series less the number specified for the period.'''
  xlPolynomial = 3
  '''Uses an equation to calculate the least squares fit through points, for example, y = ax^6 + bx^5 + cx^4 + dx^3 + ex^2 + fx + g.'''
  xlPower = 4
  '''Uses an equation to calculate the least squares fit through points, for example, y = ax^b.'''

@unique
class XlParameterDataType(IntFlag):
  '''Specifies the data type of a query parameter.'''

  xlParamTypeBigInt = -5
  '''Big integer.'''
  xlParamTypeBinary = -2
  '''Binary.'''
  xlParamTypeBit = -7
  '''Bit.'''
  xlParamTypeChar = 1
  '''String.'''
  xlParamTypeDate = 9
  '''Date.'''
  xlParamTypeDecimal = 3
  '''Decimal.'''
  xlParamTypeDouble = 8
  '''Double.'''
  xlParamTypeFloat = 6
  '''Float.'''
  xlParamTypeInteger = 4
  '''Integer.'''
  xlParamTypeLongVarBinary = -4
  '''Long binary.'''
  xlParamTypeLongVarChar = -1
  '''Long string.'''
  xlParamTypeNumeric = 2
  '''Numeric.'''
  xlParamTypeReal = 7
  '''Real.'''
  xlParamTypeSmallInt = 5
  '''Small integer.'''
  xlParamTypeTime = 10
  '''Time.'''
  xlParamTypeTimestamp = 11
  '''Time stamp.'''
  xlParamTypeTinyInt = -6
  '''Tiny integer.'''
  xlParamTypeUnknown = 0
  '''Type unknown.'''
  xlParamTypeVarBinary = -3
  '''Variable-length binary.'''
  xlParamTypeVarChar = 12
  '''Variable-length string.'''
  xlParamTypeWChar = -8
  '''Unicode character string.'''

@unique
class XlParameterType(IntFlag):
  '''Specifies how to determine the value of the parameter for the specified query table.'''

  xlConstant = 1
  '''Uses the value specified by the Value argument.'''
  xlPrompt = 0
  '''Displays a dialog box that prompts the user for the value. The Value argument specifies the text shown in the dialog box.'''
  xlRange = 2
  '''Uses the value of the cell in the upper-left corner of the range. The Value argument specifies a Range object.'''

@unique
class XlOartHorizontalOverflow(IntFlag):
  '''Specifies the horizontal overflow setting for a text frame.'''

  xlOartHorizontalOverflowClip = 1
  '''Hide text that does not fit horizontally in the text frame.'''
  xlOartHorizontalOverflowOverflow = 0
  '''Allow text to overflow the text frame horizontally.'''

@unique
class XlOartVerticalOverflow(IntFlag):
  '''Specifies the vertical overflow setting for a text frame.'''

  xlOartVerticalOverflowClip = 1
  '''Hide text that does not fit vertically within the text frame.'''
  xlOartVerticalOverflowEllipsis = 2
  '''Hide text that does not fit vertically within the text frame, and add an ellipsis (...) at the end of the visible text.'''
  xlOartVerticalOverflowOverflow = 0
  '''Allow text to overflow the text frame vertically (can be from the top, bottom, or both depending on the text alignment).'''

@unique
class XlTickLabelOrientation(IntFlag):
  '''Specifies the text orientation for tick-mark labels.'''

  xlTickLabelOrientationAutomatic = -4105
  '''Text orientation set by Excel.'''
  xlTickLabelOrientationDownward = -4170
  '''Text runs down.'''
  xlTickLabelOrientationHorizontal = -4128
  '''Characters run horizontally.'''
  xlTickLabelOrientationUpward = -4171
  '''Text runs up.'''
  xlTickLabelOrientationVertical = -4166
  '''Characters run vertically.'''

@unique
class XlEndStyleCap(IntFlag):
  '''Specifies the end style for error bars.'''

  xlCap = 1
  '''Caps applied.'''
  xlNoCap = 2
  '''No caps applied.'''

@unique
class XlCredentialsMethod(IntFlag):
  '''Specifies the type of credentials method used.'''

  CredentialsMethodIntegrated = 0
  '''Integrated'''
  CredentialsMethodNone = 1
  '''No credentials used'''
  CredentialsMethodStored = 2
  '''Use stored credentials'''

@unique
class XlPivotFilterType(IntFlag):
  '''The type of filter applied.'''

  xlBefore = 31
  '''Filters for all dates before a specified date'''
  xlBeforeOrEqualTo = 32
  '''Filters for all dates on or before a specified date'''
  xlAfter = 33
  '''Filters for all dates after a specified date'''
  xlAfterOrEqualTo = 34
  '''Filters for all dates on or after a specified date'''
  xlAllDatesInPeriodJanuary = 57
  '''Filters for all dates in January'''
  xlAllDatesInPeriodFebruary = 58
  '''Filters for all dates in February'''
  xlAllDatesInPeriodMarch = 59
  '''Filters for all dates in March'''
  xlAllDatesInPeriodApril = 60
  '''Filters for all dates in April'''
  xlAllDatesInPeriodMay = 61
  '''Filters for all dates in May'''
  xlAllDatesInPeriodJune = 62
  '''Filters for all dates in June'''
  xlAllDatesInPeriodJuly = 63
  '''Filters for all dates in July'''
  xlAllDatesInPeriodAugust = 64
  '''Filters for all dates in August'''
  xlAllDatesInPeriodSeptember = 65
  '''Filters for all dates in September'''
  xlAllDatesInPeriodOctober = 66
  '''Filters for all dates in October'''
  xlAllDatesInPeriodNovember = 67
  '''Filters for all dates in November'''
  xlAllDatesInPeriodDecember = 68
  '''Filters for all dates in December'''
  xlAllDatesInPeriodQuarter1 = 53
  '''Filters for all dates in Quarter1'''
  xlAllDatesInPeriodQuarter2 = 54
  '''Filters for all dates in Quarter2'''
  xlAllDatesInPeriodQuarter3 = 55
  '''Filters for all dates in Quarter3'''
  xlAllDatesInPeriodQuarter4 = 56
  '''Filters for all dates in Quarter 4'''
  xlBottomCount = 2
  '''Filters for the specified number of values from the bottom of a list'''
  xlBottomPercent = 4
  '''Filters for the specified percentage of values from the bottom of a list'''
  xlBottomSum = 6
  '''Sum of the values from the bottom of the list'''
  xlCaptionBeginsWith = 17
  '''Filters for all captions beginning with the specified string'''
  xlCaptionContains = 21
  '''Filters for all captions that contain the specified string'''
  xlCaptionDoesNotBeginWith = 18
  '''Filters for all captions that don't begin with the specified string'''
  xlCaptionDoesNotContain = 22
  '''Filters for all captions that don't contain the specified string'''
  xlCaptionDoesNotEndWith = 20
  '''Filters for all captions that don't end with the specified string'''
  xlCaptionDoesNotEqual = 16
  '''Filters for all captions that don't match the specified string'''
  xlCaptionEndsWith = 19
  '''Filters for all captions that end with the specified string'''
  xlCaptionEquals = 15
  '''Filters for all captions that match the specified string'''
  xlCaptionIsBetween = 27
  '''Filters for all captions that are between a specified range of values'''
  xlCaptionIsGreaterThan = 23
  '''Filters for all captions that are greater than the specified value'''
  xlCaptionIsGreaterThanOrEqualTo = 24
  '''Filters for all captions that are greater than or match the specified value'''
  xlCaptionIsLessThan = 25
  '''Filters for all captions that are less than the specified value'''
  xlCaptionIsLessThanOrEqualTo = 26
  '''Filters for all captions that are less than or match the specified value'''
  xlCaptionIsNotBetween = 28
  '''Filters for all captions that are not between a specified range of values'''
  xlDateBetween = 35
  '''Filters for all dates that are between a specified range of dates'''
  xlDateLastMonth = 45
  '''Filters for all dates that apply to the previous month'''
  xlDateLastQuarter = 48
  '''Filters for all dates that apply to the previous quarter'''
  xlDateLastWeek = 42
  '''Filters for all dates that apply to the previous week'''
  xlDateLastYear = 51
  '''Filters for all dates that apply to the previous year'''
  xlDateNextMonth = 43
  '''Filters for all dates that apply to the next month'''
  xlDateNextQuarter = 46
  '''Filters for all dates that apply to the next quarter'''
  xlDateNextWeek = 40
  '''Filters for all dates that apply to the next week'''
  xlDateNextYear = 49
  '''Filters for all dates that apply to the next year'''
  xlDateThisMonth = 44
  '''Filters for all dates that apply to the current month'''
  xlDateThisQuarter = 47
  '''Filters for all dates that apply to the current quarter'''
  xlDateThisWeek = 41
  '''Filters for all dates that apply to the current week'''
  xlDateThisYear = 50
  '''Filters for all dates that apply to the current year'''
  xlDateToday = 38
  '''Filters for all dates that apply to the current date'''
  xlDateTomorrow = 37
  '''Filters for all dates that apply to the next day'''
  xlDateYesterday = 39
  '''Filters for all dates that apply to the previous day'''
  xlNotSpecificDate = 30
  '''Filters for all dates that don't match a specified date'''
  xlSpecificDate = 29
  '''Filters for all dates that match a specified date'''
  xlTopCount = 1
  '''Filters for the specified number of values from the top of a list'''
  xlTopPercent = 3
  '''Filters for the specified percentage of values from a list'''
  xlTopSum = 5
  '''Sum of the values from the top of the list'''
  xlValueDoesNotEqual = 8
  '''Filters for all values that don't match the specified value'''
  xlValueEquals = 7
  '''Filters for all values that match the specified value'''
  xlValueIsBetween = 13
  '''Filters for all values that are between a specified range of values'''
  xlValueIsGreaterThan = 9
  '''Filters for all values that are greater than the specified value'''
  xlValueIsGreaterThanOrEqualTo = 10
  '''Filters for all values that are greater than or match the specified value'''
  xlValueIsLessThan = 11
  '''Filters for all values that are less than the specified value'''
  xlValueIsLessThanOrEqualTo = 12
  '''Filters for all values that are less than or match the specified value'''
  xlValueIsNotBetween = 14
  '''Filters for all values that are not between a specified range of values'''
  xlYearToDate = 52
  '''Filters for all values that are within one year of a specified date'''

class XlTimelineLevel(IntFlag):
  '''One of the built-in hierarchy levels that Timeline supports.'''


@unique
class XlDataLabelPosition(IntFlag):
  '''Specifies where the data label is positioned.'''

  xlLabelPositionAbove = 0
  '''Data label is positioned above the data point.'''
  xlLabelPositionBelow = 1
  '''Data label is positioned below the data point.'''
  xlLabelPositionBestFit = 5
  '''Microsoft Office Excel 2007 sets the position of the data label.'''
  xlLabelPositionCenter = -4108
  '''Data label is centered on the data point or is inside a bar or pie chart.'''
  xlLabelPositionCustom = 7
  '''Data label is in a custom position.'''
  xlLabelPositionInsideBase = 4
  '''Data label is positioned inside the data point at the bottom edge.'''
  xlLabelPositionInsideEnd = 3
  '''Data label is positioned inside the data point at the top edge.'''
  xlLabelPositionLeft = -4131
  '''Data label is positioned to the left of the data point.'''
  xlLabelPositionMixed = 6
  '''Data labels are in multiple positions.'''
  xlLabelPositionOutsideEnd = 2
  '''Data label is positioned outside the data point at the top edge.'''
  xlLabelPositionRight = -4152
  '''Data label is positioned to the right of the data point.'''

@unique
class XlDataLabelSeparator(IntFlag):
  '''Specifies the separator used with data labels.'''

  xlDataLabelSeparatorDefault = 1
  '''Excel selects the separator.'''

@unique
class XlConditionValueTypes(IntFlag):
  '''Specifies the types of condition values that can be used.'''

  xlConditionValueAutomaticMax = 7
  '''The longest data bar is proportional to the maximum value in the range.'''
  xlConditionValueAutomaticMin = 6
  '''The shortest data bar is proportional to the minimum value in the range.'''
  xlConditionValueFormula = 4
  '''Formula is used.'''
  xlConditionValueHighestValue = 2
  '''Highest value from the list of values.'''
  xlConditionValueLowestValue = 1
  '''Lowest value from the list of values.'''
  xlConditionValueNone = -1
  '''No conditional value.'''
  xlConditionValueNumber = 0
  '''Number is used.'''
  xlConditionValuePercent = 3
  '''Percentage is used.'''
  xlConditionValuePercentile = 5
  '''Percentile is used.'''

@unique
class XlAutoFilterOperator(IntFlag):
  '''Specifies the operator to use to associate two criteria applied by a filter.'''

  xlAnd = 1
  '''Logical AND of Criteria1 and Criteria2'''
  xlBottom10Items = 4
  '''Lowest-valued items displayed (number of items specified in Criteria1)'''
  xlBottom10Percent = 6
  '''Lowest-valued items displayed (percentage specified in Criteria1)'''
  xlFilterCellColor = 8
  '''Color of the cell'''
  xlFilterDynamic = 11
  '''Dynamic filter'''
  xlFilterFontColor = 9
  '''Color of the font'''
  xlFilterIcon = 10
  '''Filter icon'''
  xlFilterValues = 7
  '''Filter values'''
  xlOr = 2
  '''Logical OR of Criteria1 or Criteria2'''
  xlTop10Items = 3
  '''Highest-valued items displayed (number of items specified in Criteria1)'''
  xlTop10Percent = 5
  '''Highest-valued items displayed (percentage specified in Criteria1)'''

@unique
class XlSortDataOption(IntFlag):
  '''Specifies how to sort text.'''

  xlSortNormal = 0
  '''default. Sorts numeric and text data separately.'''
  xlSortTextAsNumbers = 1
  '''Treat text as numeric data for the sort.'''

@unique
class XlSortOn(IntFlag):
  '''Specifies the parameter on which the data should be sorted.'''

  SortOnCellColor = 1
  '''Cell color.'''
  SortOnFontColor = 2
  '''Font color.'''
  SortOnIcon = 3
  '''Icon.'''
  SortOnValues = 0
  '''Values.'''

@unique
class XlSparkScale(IntFlag):
  '''Specifies how the minimum or maximum value of the vertical axis of the sparkline is scaled relative to other sparklines in the group.

#REMARKS:

The constants of the xlSparkScale enumeration correspond to the settings of the Vertical Axis Minimum Value Options and the Vertical Axis Maximum Value Options on the Axis drop-down list on the Sparkline Tools Design tab of the ribbon.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlSparkScaleCustom = 3
  '''The minimum or maximum value for the vertical axis of the sparkline has a user-defined value.'''
  xlSparkScaleGroup = 1
  '''The minimum or maximum value for the vertical axes of all of the sparklines in the group have the same value.'''
  xlSparkScaleSingle = 2
  '''The minimum or maximum value for the vertical axis of each sparkline in the group is automatically set to its own calculated value.'''

# list enumeration  end


# unfoundcls
class ACTIONS: pass
class ADJUSTMENTS: pass
class ADOConnection: pass
class APPLICATION: pass
class AboveAverage: pass
class Add: pass
class AllocationMethod: pass
class CALCULATEDMEMBER: pass
class CHART: pass
class COMAddIns: pass
class CUBEFIELD: pass
class CalculatedFields: pass
class CalculatedItems: pass
class CalculatedMember: pass
class ChartFillFormat: pass
class Color: pass
class CommandBars: pass
class Crop: pass
class CustomXMLParts: pass
class DATAFEEDCONNECTION: pass
class DATE: pass
class Databar: pass
class Date: pass
class Developer: pass
class DocumentInspectors: pass
class DocumentLibraryVersions: pass
class DocumentProperties: pass
class Enabled: pass
class FileDialog: pass
class FileFormat: pass
class FixedDecimal: pass
class GenerateTableRefs: pass
class GlowFormat: pass
class HasDisplayUnitLabel: pass
class Hidden: pass
class IAssistance: pass
class IncludeNewItemsInFilter: pass
class Item: pass
class LISTOBJECT: pass
class LanguageSettings: pass
class LocalConnection: pass
class MODEL: pass
class MODELCONNECTION: pass
class MODELRELATIONSHIP: pass
class MODELRELATIONSHIPS: pass
class MODELTABLE: pass
class MODELTABLECOLUMN: pass
class MODELTABLECOLUMNS: pass
class MODELTABLES: pass
class MSOAUTOSHAPETYPE: pass
class MetaProperties: pass
class MsoArrowheadLength: pass
class MsoArrowheadStyle: pass
class MsoArrowheadWidth: pass
class MsoAutoShapeType: pass
class MsoAutoSize: pass
class MsoAutomationSecurity: pass
class MsoBackgroundStyleIndex: pass
class MsoBevelType: pass
class MsoBlackWhiteMode: pass
class MsoCalloutAngleType: pass
class MsoCalloutDropType: pass
class MsoCalloutType: pass
class MsoColorType: pass
class MsoConnectorType: pass
class MsoEditingType: pass
class MsoEncoding: pass
class MsoExtrusionColorType: pass
class MsoFeatureInstall: pass
class MsoFileValidationMode: pass
class MsoFillType: pass
class MsoGradientColorType: pass
class MsoGradientStyle: pass
class MsoGraphicStyleIndex: pass
class MsoHorizontalAnchor: pass
class MsoLightRigType: pass
class MsoLineDashStyle: pass
class MsoLineStyle: pass
class MsoPathFormat: pass
class MsoPatternType: pass
class MsoPictureColorType: pass
class MsoPresetCamera: pass
class MsoPresetExtrusionDirection: pass
class MsoPresetGradientType: pass
class MsoPresetLightingDirection: pass
class MsoPresetLightingSoftness: pass
class MsoPresetMaterial: pass
class MsoPresetTextEffect: pass
class MsoPresetTextEffectShape: pass
class MsoPresetTexture: pass
class MsoPresetThreeDFormat: pass
class MsoScreenSize: pass
class MsoSegmentType: pass
class MsoShadowStyle: pass
class MsoShadowType: pass
class MsoShapeStyleIndex: pass
class MsoShapeType: pass
class MsoTargetBrowser: pass
class MsoTextEffectAlignment: pass
class MsoTextOrientation: pass
class MsoTextureType: pass
class MsoThemeColorIndex: pass
class MsoTriState: pass
class MsoVerticalAnchor: pass
class MsoWarpFormat: pass
class NewFile: pass
class ODBCConnection: pass
class OLAP: pass
class OLEDBConnection: pass
class PIVOTLINECELLS: pass
class PIVOTVALUECELL: pass
class PictureType: pass
class QUICKANALYSIS: pass
class RANGE: pass
class RGB: pass
class Ranges: pass
class Recordset: pass
class ReflectionFormat: pass
class Refresh: pass
class Replace: pass
class Research: pass
class Ruler2: pass
class SHAPE: pass
class SLICERS: pass
class SPARKPOINTS: pass
class STRING: pass
class SensitivityLabel: pass
class SensitivityLabelPolicy: pass
class ServerPolicy: pass
class SheetView: pass
class SmartArt: pass
class SmartArtColors: pass
class SmartArtLayouts: pass
class SmartArtQuickStyles: pass
class SmartDocument: pass
class SoftEdgeFormat: pass
class SourceCaption: pass
class TABLEOBJECT: pass
class TEXTCONNECTION: pass
class TIMELINESTATE: pass
class TIMELINEVIEWSTATE: pass
class TableStyle: pass
class TableStyle2: pass
class TextColumn2: pass
class TextRange2: pass
class Top10: pass
class TransparentBackground: pass
class TypeName: pass
class UNIQUE: pass
class UniqueValues: pass
class UseLocalConnection: pass
class VARIANT: pass
class VBA_Object: pass
class VBA_Variant: pass
class VBE: pass
class VBProject: pass
class WORKBOOKCONNECTION: pass
class WORKSHEETDATACONNECTION: pass
class Watch: pass
class WebPageFonts: pass
class WorkFlowTasks: pass
class WorkflowTemplates: pass
class XLCATEGORYLABELLEVEL: pass
class XLCELLINSERTIONMODE: pass
class XLCMDTYPE: pass
class XLCREATOR: pass
class XLCREDENTIALSMETHOD: pass
class XLCutCopyMode: pass
class XLDISPLAYBLANKSAS: pass
class XLPIVOTFILTERTYPE: pass
class XLPLATFORM: pass
class XLSERIESNAMELEVEL: pass
class XLSLICERCACHETYPE: pass
class XLSPARKLINEROWCOL: pass
class XLTEXTPARSINGTYPE: pass
class XLTEXTQUALIFIER: pass
class XLTEXTVISUALLAYOUTTYPE: pass
class XLTIMELINELEVEL: pass
class XMLMap: pass
class XlCreator: pass
class XlFilterStatus: pass
class XlReadingOrder: pass
class XlUpdateLink: pass
class XlXmlExportResult: pass
class XlXmlImportResult: pass
class __DEPRECATED_WARNNING__: pass
class __UNKNOWN_TYPE_SEE_DOC__: pass
class constants: pass
class currency: pass
class general: pass
class points: pass
class recommended: pass
class xlAutomatic: pass
class xlCap: pass
class xlColorIndexAutomatic: pass
class xlColorIndexNone: pass
class xlColumns: pass
class xlContext: pass
class xlDownThenOver: pass
class xlExcelMenus: pass
class xlExtended: pass
class xlLTR: pass
class xlLogicalCursor: pass
class xlLotusHelp: pass
class xlNoCap: pass
class xlNone: pass
class xlOverThenDown: pass
class xlPageBreakAutomatic: pass
class xlPageBreakManual: pass
class xlPageBreakNone: pass
class xlRTL: pass
class xlRows: pass
class xlSimple: pass
class xlSizeIsArea: pass
class xlSizeIsWidth: pass
class xlStackScale: pass
class xlVisualCursor: pass
# unfoundcls  end

# ole cls  247
class AddIn:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.CLSID: None    #UNIQUE
    self.Creator: None  #XlCreator
    self.FullName: str
    self.Installed: bool
    self.IsOpen: bool
    self.Name: str
    self.Parent: None   #VBA_Object
    self.Path: str
    self.progID: str




class AddIns:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: None  #XlCreator
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, FileName, CopyFile) -> None: pass                 #AddIn




class AddIns2:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, FileName, CopyFile) -> None: pass                 #AddIn




class Adjustments:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: float
    self.Parent: None   #VBA_Object




class AllowEditRange:
  '''just need name'''

  def __init__(self):
    self.Range: None    #Range
    self.Title: str
    self.Users: None    #UserAccessList

  def ChangePassword(self, Password) -> None: pass                #None
  def Delete(self, ) -> None: pass          #None
  def Unprotect(self, Password) -> None: pass                     #None




class AllowEditRanges:
  '''just need name'''

  def __init__(self):
    self.Count: int
    self.Item: None     #VBA_Object

  def Add(self, Title, Range, Password) -> None: pass             #AllowEditRange




class Application:
  '''just need name'''

  def __init__(self):
    self.ActiveCell: None           #Range
    self.ActiveChart: None          #VBA_Object
    self.ActiveEncryptionSession: int
    self.ActivePrinter: str
    self.ActiveProtectedViewWindow: None        #ProtectedViewWindow | None
    self.ActiveSheet: None          #VBA_Object | None
    self.ActiveWindow: None         #Window | None
    self.ActiveWorkbook: None       #Workbook | None
    self.AddIns: None   #AddIns | AddIns | Developer
    self.AddIns2: None  #AddIns2
    self.AlertBeforeOverwriting: bool
    self.AltStartupPath: str
    self.AlwaysUseClearType: bool
    self.Application: None          #Application
    self.ArbitraryXMLSupportAvailable: bool
    self.AskToUpdateLinks: bool
    self.Assistance: None           #IAssistance
    self.AutoCorrect: None          #AutoCorrect
    self.AutoFormatAsYouTypeReplaceHyperlinks: bool
    self.AutoPercentEntry: bool
    self.AutoRecover: None          #AutoRecover
    self.AutomationSecurity: None   #MsoAutomationSecurity
    self.Build: int
    self.COMAddIns: None            #COMAddIns
    self.CalculateBeforeSave: bool
    self.Calculation: None          #XlCalculation
    self.CalculationInterruptKey: None          #XlCalculationInterruptKey
    self.CalculationState: None     #XlCalculationState
    self.CalculationVersion: int
    self.Caller: None   #Application
    self.CanPlaySounds: None        #Application
    self.CanRecordSounds: None      #Application
    self.Caption: str
    self.CellDragAndDrop: bool
    self.Cells: None    #Range
    self.ChartDataPointTrack: bool
    self.Charts: None   #Sheets
    self.ClipboardFormats: None     #VBA_Variant
    self.ClusterConnector: str
    self.Columns: None  #Range
    self.CommandBars: None          #CommandBars
    self.CommandUnderlines: None    #XlCommandUnderlines | int
    self.ConstrainNumeric: bool
    self.ControlCharacters: bool
    self.CopyObjectsWithCells: bool
    self.Creator: None  #XlCreator
    self.Cursor: None   #XlMousePointer
    self.CursorMovement: None       #xlVisualCursor | xlLogicalCursor | int
    self.CustomListCount: int
    self.CutCopyMode: None          #bool | XLCutCopyMode | int
    self.DDEAppReturnCode: int
    self.DataEntryMode: int
    self.DecimalSeparator: str
    self.DefaultFilePath: str
    self.DefaultSaveFormat: None    #FileFormat | int
    self.DefaultSheetDirection: None            #XlReadingOrder | xlRTL | xlLTR | int
    self.DefaultWebOptions: None    #DefaultWebOptions
    self.DeferAsyncQueries: bool
    self.Dialogs: None  #Dialogs
    self.DisplayAlerts: bool
    self.DisplayClipboardWindow: bool
    self.DisplayCommentIndicator: None          #XlCommentDisplayMode
    self.DisplayDocumentActionTaskPane: bool
    self.DisplayDocumentInformationPanel: bool
    self.DisplayExcel4Menus: bool
    self.DisplayFormulaAutoComplete: bool
    self.DisplayFormulaBar: bool
    self.DisplayFullScreen: bool
    self.DisplayFunctionToolTips: bool
    self.DisplayInsertOptions: bool
    self.DisplayNoteIndicator: bool
    self.DisplayPasteOptions: bool
    self.DisplayRecentFiles: bool
    self.DisplayScrollBars: bool
    self.DisplayStatusBar: bool
    self.EditDirectlyInCell: bool
    self.EnableAnimations: None     #__DEPRECATED_WARNNING__
    self.EnableAutoComplete: bool
    self.EnableCancelKey: None      #XlEnableCancelKey
    self.EnableCheckFileExtensions: bool
    self.EnableEvents: bool
    self.EnableLargeOperationAlert: bool
    self.EnableLivePreview: bool
    self.EnableMacroAnimations: bool
    self.EnableSound: bool
    self.ErrorCheckingOptions: None             #ErrorCheckingOptions
    self.Excel4IntlMacroSheets: None            #Sheets
    self.Excel4MacroSheets: None    #Sheets
    self.ExtendList: bool
    self.FeatureInstall: None       #MsoFeatureInstall
    self.FileConverters: None       #VBA_Variant
    self.FileDialog: None           #FileDialog
    self.FileExportConverters: None             #FileExportConverters
    self.FileValidation: None       #MsoFileValidationMode
    self.FileValidationPivot: None  #XlFileValidationPivotMode
    self.FindFormat: None           #Application
    self.FixedDecimal: bool
    self.FixedDecimalPlaces: None   #FixedDecimal | bool | int
    self.FlashFill: bool
    self.FlashFillMode: bool
    self.FormulaBarHeight: int
    self.GenerateGetPivotData: bool
    self.GenerateTableRefs: None    #GenerateTableRefs
    self.Height: float
    self.HighQualityModeForGraphics: None       #Application
    self.Hinstance: int
    self.HinstancePtr: None         #VBA_Variant
    self.IgnoreRemoteRequests: bool
    self.Interactive: bool
    self.International: None        #VBA_Variant
    self.IsSandboxed: bool
    self.Iteration: bool
    self.LanguageSettings: None     #LanguageSettings
    self.LargeOperationCellThousandCount: int
    self.Left: float
    self.LibraryPath: str
    self.MailSession: None          #VBA_Variant
    self.MailSystem: None           #XlMailSystem
    self.MapPaperSize: bool
    self.MathCoprocessorAvailable: bool
    self.MaxChange: float
    self.MaxIterations: int
    self.MeasurementUnit: None      #XlMeasurementUnits
    self.MergeInstances: bool
    self.MouseAvailable: bool
    self.MoveAfterReturn: bool
    self.MoveAfterReturnDirection: None         #XlDirection
    self.MultiThreadedCalculation: None         #MultiThreadedCalculation
    self.Name: str
    self.Names: None    #Names
    self.NetworkTemplatesPath: str
    self.NewWorkbook: None          #NewFile
    self.ODBCErrors: None           #ODBCErrors
    self.ODBCTimeout: int
    self.OLEDBErrors: None          #OLEDBErrors
    self.OnWindow: str
    self.OperatingSystem: str
    self.OrganizationName: str
    self.Parent: None   #VBA_Object
    self.Path: str
    self.PathSeparator: str
    self.PivotTableSelection: bool
    self.PreviousSelections: None   #VBA_Variant
    self.PrintCommunication: bool
    self.ProductCode: str
    self.PromptForSummaryInfo: bool
    self.ProtectedViewWindows: None             #ProtectedViewWindows
    self.QuickAnalysis: None        #QUICKANALYSIS
    self.RTD: None      #RTD
    self.Range: None    #Range
    self.Ready: bool
    self.RecentFiles: None          #RecentFiles
    self.RecordRelative: bool
    self.ReferenceStyle: None       #XlReferenceStyle
    self.RegisteredFunctions: None  #VBA_Variant
    self.ReplaceFormat: None        #Replace
    self.RollZoom: bool
    self.Rows: None     #Range
    self.ScreenUpdating: bool
    self.Selection: None            #TypeName
    self.SensitivityLabelPolicy: None           #SensitivityLabelPolicy
    self.Sheets: None   #Sheets
    self.SheetsInNewWorkbook: int
    self.ShowChartTipNames: bool
    self.ShowChartTipValues: bool
    self.ShowDevTools: bool
    self.ShowMenuFloaties: bool
    self.ShowQuickAnalysis: bool
    self.ShowSelectionFloaties: bool
    self.ShowStartupDialog: bool
    self.ShowToolTips: bool
    self.SmartArtColors: None       #SmartArtColors
    self.SmartArtLayouts: None      #SmartArtLayouts
    self.SmartArtQuickStyles: None  #SmartArtQuickStyles
    self.Speech: None   #Speech
    self.SpellingOptions: None      #VBA_Object
    self.StandardFont: str
    self.StandardFontSize: int
    self.StartupPath: str
    self.StatusBar: str
    self.TemplatesPath: str
    self.ThisCell: None             #Range
    self.ThisWorkbook: None         #Workbook
    self.ThousandsSeparator: str
    self.Top: float
    self.TransitionMenuKey: str
    self.TransitionMenuKeyAction: None          #xlExcelMenus | xlLotusHelp | int
    self.TransitionNavigKeys: bool
    self.UsableHeight: float
    self.UsableWidth: float
    self.UseClusterConnector: bool
    self.UseSystemSeparators: bool
    self.UsedObjects: None          #UsedObjects
    self.UserControl: bool
    self.UserLibraryPath: str
    self.UserName: str
    self.VBE: None      #VBE
    self.Value: str
    self.Version: str
    self.Visible: bool
    self.WarnOnFunctionNameConflict: bool
    self.Watches: None  #Watches
    self.Width: float
    self.WindowState: None          #XlWindowState
    self.Windows: None  #Windows
    self.WindowsForPens: bool
    self.Workbooks: None            #Workbooks
    self.WorksheetFunction: None    #WorksheetFunction
    self.Worksheets: None           #Sheets
    self.hWnd: int

  def ActivateMicrosoftApp(self, Index) -> None: pass             #None
  def AddCustomList(self, ListArray, ByRow) -> None: pass         #None
  def Calculate(self, ) -> None: pass       #None
  def CalculateFull(self, ) -> None: pass   #None
  def CalculateFullRebuild(self, ) -> None: pass                  #None
  def CalculateUntilAsyncQueriesDone(self, ) -> None: pass        #None
  def CentimetersToPoints(self, Centimeters) -> None: pass        #float
  def CheckAbort(self, KeepAbort) -> None: pass                   #None
  def CheckSpelling(self, Word, CustomDictionary, IgnoreUppercase) -> None: pass        #bool
  def ConvertFormula(self, Formula, FromReferenceStyle, ToReferenceStyle, ToAbsolute, RelativeTo) -> None: pass                     #VBA_Variant
  def DDEExecute(self, Channel, String) -> None: pass             #None
  def DDEInitiate(self, App, Topic) -> None: pass                 #int
  def DDEPoke(self, Channel, Item, Data) -> None: pass            #None
  def DDERequest(self, Channel, Item) -> None: pass               #VBA_Variant
  def DDETerminate(self, Channel) -> None: pass                   #None
  def DeleteCustomList(self, ListNum) -> None: pass               #None
  def DisplayXMLSourcePane(self, XmlMap) -> None: pass            #None
  def DoubleClick(self, ) -> None: pass     #None
  def Evaluate(self, Name) -> None: pass    #VBA_Variant
  def ExecuteExcel4Macro(self, String) -> None: pass              #VBA_Variant
  def FindFile(self, ) -> None: pass        #bool
  def GetCustomListContents(self, ListNum) -> None: pass          #VBA_Variant
  def GetCustomListNum(self, ListArray) -> None: pass             #int
  def GetOpenFilename(self, FileFilter, FilterIndex, Title, ButtonText, MultiSelect) -> None: pass            #VBA_Variant
  def GetPhonetic(self, Text) -> None: pass                       #str
  def GetSaveAsFilename(self, InitialFilename, FileFilter, FilterIndex, Title, ButtonText) -> None: pass      #VBA_Variant
  def Goto(self, Reference, Scroll) -> None: pass                 #None
  def Help(self, HelpFile, HelpContextID) -> None: pass           #None
  def InchesToPoints(self, Inches) -> None: pass                  #float
  def InputBox(self, Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type) -> None: pass          #VBA_Variant
  def Intersect(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass  #Range
  def MacroOptions(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile, ArgumentDescriptions) -> None: pass  #None
  def MailLogoff(self, ) -> None: pass      #None
  def MailLogon(self, Name, Password, DownloadNewMail) -> None: pass                    #None
  def NextLetter(self, ) -> None: pass      #Workbook
  def OnKey(self, Key, Procedure) -> None: pass                   #None
  def OnRepeat(self, Text, Procedure) -> None: pass               #None
  def OnTime(self, EarliestTime, Procedure, LatestTime, Schedule) -> None: pass         #None
  def OnUndo(self, Text, Procedure) -> None: pass                 #None
  def Quit(self, ) -> None: pass            #None
  def RecordMacro(self, BasicCode, XlmCode) -> None: pass         #None
  def RegisterXLL(self, FileName) -> None: pass                   #bool
  def Repeat(self, ) -> None: pass          #None
  def Run(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #VBA_Variant
  def SendKeys(self, Keys, Wait) -> None: pass                    #None
  def SharePointVersion(self, bstrUrl) -> None: pass              #int
  def Undo(self, ) -> None: pass            #None
  def Union(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass      #Range
  def Volatile(self, Volatile) -> None: pass                      #None
  def Wait(self, Time) -> None: pass        #bool




class Areas:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object




class Author:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Name: str
    self.Parent: None   #VBA_Object
    self.ProviderID: str
    self.UserID: str




class AutoCorrect:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoExpandListRange: bool
    self.AutoFillFormulasInLists: bool
    self.CapitalizeNamesOfDays: bool
    self.CorrectCapsLock: bool
    self.CorrectSentenceCap: bool
    self.Creator: int
    self.DisplayAutoCorrectOptions: bool
    self.Parent: None   #VBA_Object
    self.ReplaceText: bool
    self.ReplacementList: list
    self.TwoInitialCapitals: bool

  def AddReplacement(self, What, Replacement) -> None: pass       #VBA_Variant
  def DeleteReplacement(self, What) -> None: pass                 #VBA_Variant




class AutoFilter:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.FilterMode: bool
    self.Filters: None  #Filters
    self.Parent: None   #VBA_Object
    self.Range: None    #VBA_Object
    self.Sort: None     #AutoFilter

  def ApplyFilter(self, ) -> None: pass     #None
  def ShowAllData(self, ) -> None: pass     #None




class AutoRecover:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Enabled: bool
    self.Parent: None   #VBA_Object
    self.Path: str
    self.Time: None     #AutoRecover | int




class Axes:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Type, AxisGroup) -> None: pass                   #Axis




class Axis:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AxisBetweenCategories: bool
    self.AxisGroup: None            #XlAxisGroup
    self.AxisTitle: None            #AxisTitle
    self.BaseUnit: None             #XlTimeUnit
    self.BaseUnitIsAuto: bool
    self.Border: None   #VBA_Object
    self.CategoryNames: None        #VBA_Variant
    self.CategoryType: None         #XlCategoryType
    self.Creator: int
    self.Crosses: int
    self.CrossesAt: float
    self.DisplayUnit: None          #XlDisplayUnit
    self.DisplayUnitCustom: float
    self.DisplayUnitLabel: None     #DisplayUnitLabel | None | HasDisplayUnitLabel | bool
    self.Format: None   #ChartFormat
    self.HasDisplayUnitLabel: bool
    self.HasMajorGridlines: bool
    self.HasMinorGridlines: bool
    self.HasTitle: bool
    self.Height: float
    self.Left: float
    self.LogBase: float
    self.MajorGridlines: None       #Gridlines
    self.MajorTickMark: None        #XlTickMark
    self.MajorUnit: float
    self.MajorUnitIsAuto: bool
    self.MajorUnitScale: None       #XlTimeUnit
    self.MaximumScale: float
    self.MaximumScaleIsAuto: bool
    self.MinimumScale: float
    self.MinimumScaleIsAuto: bool
    self.MinorGridlines: None       #Gridlines
    self.MinorTickMark: None        #XlTickMark
    self.MinorUnit: float
    self.MinorUnitIsAuto: bool
    self.MinorUnitScale: None       #XlTimeUnit
    self.Parent: None   #VBA_Object
    self.ReversePlotOrder: bool
    self.ScaleType: None            #XlScaleType
    self.TickLabelPosition: None    #XlTickLabelPosition
    self.TickLabelSpacing: int
    self.TickLabelSpacingIsAuto: bool
    self.TickLabels: None           #TickLabels
    self.TickMarkSpacing: int
    self.Top: float
    self.Type: None     #XlAxisType
    self.Width: float

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class AxisTitle:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Caption: str
    self.Characters: None           #Characters
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Formula: str
    self.FormulaLocal: str
    self.FormulaR1C1: str
    self.FormulaR1C1Local: str
    self.Height: float
    self.HorizontalAlignment: None  #VBA_Variant
    self.IncludeInLayout: bool
    self.Left: float
    self.Name: str
    self.Orientation: None          #VBA_Variant
    self.Parent: None   #VBA_Object
    self.Position: None             #XlChartElementPosition
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int
    self.Shadow: bool
    self.Text: str
    self.Top: float
    self.VerticalAlignment: None    #VBA_Variant
    self.Width: float

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class Border:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Color: None    #VBA_Variant
    self.ColorIndex: None           #VBA_Variant
    self.Creator: int
    self.LineStyle: None            #XlLineStyle
    self.Parent: None   #VBA_Object
    self.ThemeColor: None           #VBA_Variant
    self.TintAndShade: float
    self.Weight: None   #XlBorderWeight




class Borders:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Color: None    #VBA_Variant
    self.ColorIndex: None           #VBA_Variant
    self.Count: int
    self.Creator: int
    self.Item: None     #Border
    self.LineStyle: None            #XlLineStyle
    self.Parent: None   #VBA_Object
    self.ThemeColor: None           #VBA_Variant
    self.TintAndShade: float
    self.Value: None    #__UNKNOWN_TYPE_SEE_DOC__
    self.Weight: None   #XlBorderWeight




class CalculatedMembers:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Name, Formula, SolveOrder, Type, Dynamic, DisplayFolder, HierarchizeDistinct) -> None: pass   #CalculatedMember
  def AddCalculatedMember(self, Name, Formula, SolveOrder, Type, DisplayFolder, MeasureGroup, ParentHierarchy, ParentMember, NumberFormat) -> None: pass  #CALCULATEDMEMBER




class CalloutFormat:
  '''just need name'''

  def __init__(self):
    self.Accent: None   #MsoTriState
    self.Angle: None    #MsoCalloutAngleType
    self.Application: None          #Application
    self.AutoAttach: None           #MsoTriState
    self.AutoLength: None           #MsoTriState
    self.Border: None   #MsoTriState
    self.Creator: int
    self.Drop: float
    self.DropType: None             #MsoCalloutDropType
    self.Gap: float
    self.Length: float
    self.Parent: None   #VBA_Object
    self.Type: None     #MsoCalloutType

  def AutomaticLength(self, ) -> None: pass                       #None
  def CustomDrop(self, Drop) -> None: pass  #None
  def CustomLength(self, Length) -> None: pass                    #None
  def PresetDrop(self, DropType) -> None: pass                    #None




class Characters:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Caption: str
    self.Count: int
    self.Creator: int
    self.Font: None     #VBA_Object
    self.Parent: None   #VBA_Object
    self.PhoneticCharacters: str
    self.Text: str

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Insert(self, String) -> None: pass    #VBA_Variant




class Chart:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoScaling: bool
    self.BackWall: None             #Walls
    self.BarShape: None             #XlBarShape
    self.CategoryLabelLevel: None   #XLCATEGORYLABELLEVEL
    self.ChartArea: None            #ChartArea
    self.ChartColor: None           #VARIANT
    self.ChartStyle: None           #VBA_Variant
    self.ChartTitle: None           #ChartTitle
    self.ChartType: None            #XlChartType
    self.CodeName: str
    self.Creator: int
    self.DataTable: None            #DataTable
    self.DepthPercent: int
    self.DisplayBlanksAs: None      #XlDisplayBlanksAs | int
    self.Elevation: int
    self.Floor: None    #Floor
    self.GapDepth: int
    self.HasAxis: None  #VBA_Variant
    self.HasDataTable: bool
    self.HasLegend: bool
    self.HasTitle: bool
    self.HeightPercent: int
    self.Hyperlinks: None           #Hyperlinks
    self.Index: int
    self.Legend: None   #Legend
    self.MailEnvelope: None         #Chart
    self.Name: str
    self.Next: None     #VBA_Object
    self.PageSetup: None            #PageSetup
    self.Parent: None   #VBA_Object
    self.Perspective: int
    self.PivotLayout: None          #PivotLayout
    self.PlotArea: None             #PlotArea
    self.PlotBy: None   #XlRowCol | xlColumns | xlRows | int
    self.PlotVisibleOnly: bool
    self.Previous: None             #VBA_Object
    self.PrintedCommentPages: int
    self.ProtectContents: bool
    self.ProtectData: bool
    self.ProtectDrawingObjects: bool
    self.ProtectFormatting: bool
    self.ProtectSelection: bool
    self.ProtectionMode: bool
    self.RightAngleAxes: bool
    self.Rotation: None             #VBA_Variant
    self.SeriesNameLevel: None      #XLSERIESNAMELEVEL
    self.Shapes: None   #Shapes
    self.ShowAllFieldButtons: bool
    self.ShowAxisFieldButtons: bool
    self.ShowDataLabelsOverMaximum: bool
    self.ShowExpandCollapseEntireFieldButtons: bool
    self.ShowLegendFieldButtons: bool
    self.ShowReportFilterFieldButtons: bool
    self.ShowValueFieldButtons: bool
    self.SideWall: None             #Walls
    self.Tab: None      #Tab
    self.Visible: None  #XlSheetVisibility
    self.Walls: None    #Walls

  def Activate(self, ) -> None: pass        #None
  def ApplyChartTemplate(self, FileName) -> None: pass            #None
  def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator) -> None: pass    #None
  def ApplyLayout(self, Layout, ChartType) -> None: pass          #None
  def Axes(self, Type, AxisGroup) -> None: pass                   #VBA_Object
  def ChartGroups(self, Index) -> None: pass                      #VBA_Object
  def ChartObjects(self, Index) -> None: pass                     #VBA_Object
  def ChartWizard(self, Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle) -> None: pass                   #None
  def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang) -> None: pass          #None
  def ClearToMatchColorStyle(self, ) -> None: pass                #None
  def ClearToMatchStyle(self, ) -> None: pass                     #None
  def Copy(self, Before, After) -> None: pass                     #None
  def CopyPicture(self, Appearance, Format, Size) -> None: pass   #None
  def Delete(self, ) -> None: pass          #None
  def Evaluate(self, Name) -> None: pass    #VBA_Variant
  def Export(self, FileName, FilterName, Interactive) -> None: pass                     #bool
  def ExportAsFixedFormat(self, Type, FileName, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr) -> None: pass              #None
  def FullSeriesCollection(self, Index) -> None: pass             #VBA_Object
  def GetChartElement(self, x, y, ElementID, Arg1, Arg2) -> None: pass                  #None
  def Location(self, Where, Name) -> None: pass                   #VBA_Object
  def Move(self, Before, After) -> None: pass                     #None
  def OLEObjects(self, Index) -> None: pass                       #VBA_Object
  def Paste(self, Type) -> None: pass       #None
  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas) -> None: pass  #VBA_Variant
  def PrintPreview(self, EnableChanges) -> None: pass             #None
  def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly) -> None: pass           #None
  def Refresh(self, ) -> None: pass         #None
  def SaveAs(self, FileName, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local) -> None: pass          #None
  def SaveChartTemplate(self, FileName) -> None: pass             #None
  def Select(self, Replace) -> None: pass   #None
  def SeriesCollection(self, Index) -> None: pass                 #VBA_Object
  def SetBackgroundPicture(self, FileName) -> None: pass          #None
  def SetDefaultChart(self, Name) -> None: pass                   #None
  def SetElement(self, Element) -> None: pass                     #None
  def SetSourceData(self, Source, PlotBy) -> None: pass           #None
  def Unprotect(self, Password) -> None: pass                     #None




class ChartArea:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Height: float
    self.Left: float
    self.Name: str
    self.Parent: None   #VBA_Object
    self.RoundedCorners: bool
    self.Shadow: bool
    self.Top: float
    self.Width: float

  def Clear(self, ) -> None: pass           #VBA_Variant
  def ClearContents(self, ) -> None: pass   #VBA_Variant
  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Copy(self, ) -> None: pass            #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class ChartFormat:
  '''just need name'''

  def __init__(self):
    self.Adjustments: None          #ADJUSTMENTS
    self.Application: None          #Application
    self.AutoShapeType: None        #MSOAUTOSHAPETYPE
    self.Creator: None  #XlCreator
    self.Fill: None     #FillFormat
    self.Glow: None     #GlowFormat
    self.Line: None     #LineFormat
    self.Parent: None   #VBA_Object
    self.PictureFormat: None        #PictureFormat
    self.Shadow: None   #ShadowFormat
    self.SoftEdge: None             #SoftEdgeFormat
    self.TextFrame2: None           #TextFrame2
    self.ThreeD: None   #ThreeDFormat




class ChartGroup:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AxisGroup: None            #XlAxisGroup
    self.BinWidthValue: float
    self.BinsCountValue: int
    self.BinsOverflowEnabled: bool
    self.BinsOverflowValue: float
    self.BinsType: None             #XlBinsType
    self.BinsUnderflowEnabled: bool
    self.BinsUnderflowValue: float
    self.BubbleScale: int
    self.Creator: int
    self.DoughnutHoleSize: int
    self.DownBars: None             #DownBars
    self.DropLines: None            #DropLines
    self.FirstSliceAngle: int
    self.GapWidth: None             #ChartGroup
    self.Has3DShading: bool
    self.HasDropLines: bool
    self.HasHiLoLines: bool
    self.HasRadarAxisLabels: bool
    self.HasSeriesLines: bool
    self.HasUpDownBars: bool
    self.HiLoLines: None            #HiLoLines
    self.Index: int
    self.Overlap: int
    self.Parent: None   #VBA_Object
    self.RadarAxisLabels: None      #TickLabels
    self.SecondPlotSize: int
    self.SeriesLines: None          #SeriesLines
    self.ShowNegativeBubbles: bool
    self.SizeRepresents: None       #XlSizeRepresents | xlSizeIsArea | xlSizeIsWidth | int
    self.SplitType: None            #XlChartSplitType
    self.SplitValue: None           #VBA_Variant
    self.UpBars: None   #UpBars
    self.VaryByCategories: bool

  def CategoryCollection(self, Index) -> None: pass               #VBA_Object
  def FullCategoryCollection(self, Index) -> None: pass           #VBA_Object
  def SeriesCollection(self, Index) -> None: pass                 #VBA_Object




class ChartGroups:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #ChartGroup




class ChartObject:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.BottomRightCell: None      #Range
    self.Chart: None    #Chart
    self.Creator: int
    self.Height: float
    self.Index: int
    self.Left: float
    self.Locked: bool
    self.Name: str
    self.Parent: None   #VBA_Object
    self.Placement: None            #VBA_Variant
    self.PrintObject: bool
    self.ProtectChartObject: bool
    self.RoundedCorners: bool
    self.Shadow: bool
    self.ShapeRange: None           #ShapeRange
    self.Top: float
    self.TopLeftCell: None          #Range
    self.Visible: bool
    self.Width: float
    self.ZOrder: int

  def Activate(self, ) -> None: pass        #VBA_Variant
  def BringToFront(self, ) -> None: pass    #VBA_Variant
  def Copy(self, ) -> None: pass            #VBA_Variant
  def CopyPicture(self, Appearance, Format) -> None: pass         #VBA_Variant
  def Cut(self, ) -> None: pass             #VBA_Variant
  def Delete(self, ) -> None: pass          #VBA_Variant
  def Duplicate(self, ) -> None: pass       #VBA_Object
  def Select(self, Replace) -> None: pass   #VBA_Variant
  def SendToBack(self, ) -> None: pass      #VBA_Variant




class ChartObjects:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Height: float
    self.Left: float
    self.Locked: bool
    self.Parent: None   #VBA_Object
    self.Placement: None            #VBA_Variant
    self.PrintObject: bool
    self.ProtectChartObject: bool
    self.ShapeRange: None           #ShapeRange
    self.Top: float
    self.Visible: bool
    self.Width: float

  def Add(self, Left, Width) -> None: pass  #ChartObject
  def Copy(self, ) -> None: pass            #VBA_Variant
  def CopyPicture(self, Appearance, Format) -> None: pass         #VBA_Variant
  def Cut(self, ) -> None: pass             #VBA_Variant
  def Delete(self, ) -> None: pass          #VBA_Variant
  def Duplicate(self, ) -> None: pass       #VBA_Object
  def Item(self, Index) -> None: pass       #VBA_Object
  def Select(self, Replace) -> None: pass   #VBA_Variant




class ChartTitle:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Caption: str
    self.Characters: None           #Characters
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Formula: str
    self.FormulaLocal: str
    self.FormulaR1C1: str
    self.FormulaR1C1Local: str
    self.Height: float
    self.HorizontalAlignment: None  #VBA_Variant
    self.IncludeInLayout: bool
    self.Left: float
    self.Name: str
    self.Orientation: None          #VBA_Variant
    self.Parent: None   #VBA_Object
    self.Position: None             #XlChartElementPosition
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int
    self.Shadow: bool
    self.Text: str
    self.Top: float
    self.VerticalAlignment: None    #VBA_Variant
    self.Width: float

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class Charts:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.HPageBreaks: None          #HPageBreaks
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object
    self.VPageBreaks: None          #VPageBreaks
    self.Visible: None  #VBA_Variant

  def Add2(self, Before, After, Count, NewLayout) -> None: pass   #CHART
  def Copy(self, Before, After) -> None: pass                     #None
  def Delete(self, ) -> None: pass          #None
  def Move(self, Before, After) -> None: pass                     #None
  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas) -> None: pass  #VBA_Variant
  def PrintPreview(self, EnableChanges) -> None: pass             #None
  def Select(self, Replace) -> None: pass   #None




class ColorFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Brightness: float
    self.Creator: int
    self.ObjectThemeColor: None     #MsoThemeColorIndex
    self.Parent: None   #VBA_Object
    self.RGB: int
    self.SchemeColor: None          #int | Color
    self.TintAndShade: float
    self.Type: None     #MsoColorType




class ColorScale:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AppliesTo: None            #Range
    self.ColorScaleCriteria: None   #ColorScaleCriteria | ColorScaleCriterion
    self.Creator: int
    self.Formula: str
    self.PTCondition: bool
    self.Parent: None   #VBA_Object
    self.Priority: None             #ColorScale
    self.ScopeType: None            #XlPivotConditionScope
    self.StopIfTrue: bool
    self.Type: None     #XlFormatConditionType

  def Delete(self, ) -> None: pass          #None
  def ModifyAppliesToRange(self, Range) -> None: pass             #None
  def SetFirstPriority(self, ) -> None: pass                      #None
  def SetLastPriority(self, ) -> None: pass                       #None




class ColorScaleCriteria:
  '''just need name'''

  def __init__(self):
    self.Count: int
    self.Item: None     #ColorScaleCriterion | ColorScaleCriteria




class ColorScaleCriterion:
  '''just need name'''

  def __init__(self):
    self.FormatColor: None          #FormatColor
    self.Index: int
    self.Type: None     #XlConditionValueTypes
    self.Value: None    #VBA_Variant




class Comment:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Author: str
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.Shape: None    #VBA_Object
    self.Visible: bool

  def Delete(self, ) -> None: pass          #None
  def Next(self, ) -> None: pass            #Comment
  def Previous(self, ) -> None: pass        #Comment
  def Text(self, Text, Start, Overwrite) -> None: pass            #str




class CommentThreaded:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Author: None   #Author | CommentThreaded
    self.Creator: int
    self.Date: None     #VBA_Variant
    self.Parent: None   #VBA_Object
    self.Replies: None  #CommentsThreaded

  def AddReply(self, Text) -> None: pass    #CommentThreaded
  def Delete(self, ) -> None: pass          #None
  def Next(self, ) -> None: pass            #CommentThreaded
  def Previous(self, ) -> None: pass        #CommentThreaded
  def Text(self, Text, Start, Overwrite) -> None: pass            #str




class Comments:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #Comment




class CommentsThreaded:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #CommentThreaded




class Connections:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Name, Description, ConnectionString, CommandText, lCmdtype, CreateModelConnection, ImportRelationships) -> None: pass                     #WorkbookConnection
  def AddFromFile(self, FileName, CreateModelConnection, ImportRelationships) -> None: pass                   #WorkbookConnection
  def Item(self, Index) -> None: pass       #WorkbookConnection




class ConnectorFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.BeginConnected: None       #MsoTriState
    self.BeginConnectedShape: None  #Shape
    self.BeginConnectionSite: int
    self.Creator: int
    self.EndConnected: None         #MsoTriState
    self.EndConnectedShape: None    #Shape
    self.EndConnectionSite: int
    self.Parent: None   #VBA_Object
    self.Type: None     #MsoConnectorType

  def BeginConnect(self, ConnectedShape, ConnectionSite) -> None: pass                  #None
  def BeginDisconnect(self, ) -> None: pass                       #None
  def EndConnect(self, ConnectedShape, ConnectionSite) -> None: pass                    #None
  def EndDisconnect(self, ) -> None: pass   #None




class ControlFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.DropDownLines: int
    self.Enabled: bool
    self.LargeChange: int
    self.LinkedCell: str
    self.ListCount: int
    self.ListFillRange: str
    self.ListIndex: int
    self.LockedText: bool
    self.Max: int
    self.Min: int
    self.MultiSelect: None          #constants | xlNone | xlSimple | xlExtended | int
    self.Parent: None   #VBA_Object
    self.PrintObject: bool
    self.SmallChange: int
    self.Value: int

  def AddItem(self, Text, Index) -> None: pass                    #None
  def List(self, Index) -> None: pass       #VBA_Variant
  def RemoveAllItems(self, ) -> None: pass  #None
  def RemoveItem(self, Index, Count) -> None: pass                #None




class CubeField:
  '''just need name'''

  def __init__(self):
    self.AllItemsVisible: bool
    self.Application: None          #Application
    self.Caption: str
    self.Creator: int
    self.CubeFieldSubType: None     #VBA_Object
    self.CubeFieldType: None        #XlCubeFieldType
    self.CurrentPageName: str
    self.DragToColumn: bool
    self.DragToData: bool
    self.DragToHide: bool
    self.DragToPage: bool
    self.DragToRow: bool
    self.EnableMultiplePageItems: bool
    self.FlattenHierarchies: bool
    self.HasMemberProperties: bool
    self.HierarchizeDistinct: bool
    self.IncludeNewItemsInFilter: None          #IncludeNewItemsInFilter
    self.IsDate: bool
    self.LayoutForm: None           #XlLayoutFormType
    self.LayoutSubtotalLocation: None           #XlSubtotalLocationType
    self.Name: str
    self.Orientation: None          #XlPivotFieldOrientation
    self.Parent: None   #VBA_Object
    self.PivotFields: None          #PivotFields
    self.Position: int
    self.ShowInFieldList: bool
    self.TreeviewControl: None      #TreeviewControl | CubeField
    self.Value: str

  def AddMemberPropertyField(self, Property, PropertyOrder, PropertyDisplayedIn) -> None: pass                #None
  def AutoGroup(self, Orientation, Position) -> None: pass        #None
  def ClearManualFilter(self, ) -> None: pass                     #None
  def CreatePivotFields(self, ) -> None: pass                     #None
  def Delete(self, ) -> None: pass          #None




class CubeFields:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def AddSet(self, Name, Caption) -> None: pass                   #CubeField
  def GetMeasure(self, AttributeHierarchy, Function, Caption) -> None: pass             #CUBEFIELD




class CustomProperties:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Name, Value) -> None: pass  #CustomProperty




class CustomProperty:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Name: str
    self.Parent: None   #VBA_Object
    self.Value: None    #__UNKNOWN_TYPE_SEE_DOC__

  def Delete(self, ) -> None: pass          #None




class CustomView:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Name: str
    self.Parent: None   #VBA_Object
    self.PrintSettings: bool
    self.RowColSettings: bool

  def Delete(self, ) -> None: pass          #None
  def Show(self, ) -> None: pass            #None




class CustomViews:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, ViewName, PrintSettings, RowColSettings) -> None: pass                  #CustomView
  def Item(self, Index) -> None: pass       #CustomView




class DataFeedConnection:
  '''just need name'''

  def __init__(self):
    self.AlwaysUseConnectionFile: bool
    self.Application: None          #APPLICATION
    self.CommandText: None          #VARIANT
    self.CommandType: None          #XLCMDTYPE
    self.Connection: None           #VARIANT
    self.Creator: None  #XLCREATOR
    self.EnableRefresh: bool
    self.Parent: None   #VBA_Object
    self.RefreshDate: None          #DATE
    self.RefreshOnFileOpen: bool
    self.RefreshPeriod: int
    self.Refreshing: bool
    self.SavePassword: bool
    self.ServerCredentialsMethod: None          #XLCREDENTIALSMETHOD
    self.SourceConnectionFile: None             #STRING
    self.SourceDataFile: None       #STRING

  def CancelRefresh(self, ) -> None: pass   #None
  def Refresh(self, ) -> None: pass         #None
  def SaveAsODC(self, ODCFileName, Description, Keywords) -> None: pass                 #None




class DataLabel:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoText: bool
    self.Caption: str
    self.Characters: None           #Characters
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Formula: str
    self.FormulaLocal: str
    self.FormulaR1C1: str
    self.FormulaR1C1Local: str
    self.Height: float
    self.HorizontalAlignment: None  #VBA_Variant
    self.Left: float
    self.Name: str
    self.NumberFormat: str
    self.NumberFormatLinked: bool
    self.NumberFormatLocal: None    #VBA_Variant
    self.Orientation: None          #VBA_Variant
    self.Parent: None   #VBA_Object
    self.Position: None             #XlDataLabelPosition
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int
    self.Separator: None            #VBA_Variant
    self.Shadow: bool
    self.ShowBubbleSize: bool
    self.ShowCategoryName: bool
    self.ShowLegendKey: bool
    self.ShowPercentage: bool
    self.ShowRange: bool
    self.ShowSeriesName: bool
    self.ShowValue: bool
    self.Text: str
    self.Top: float
    self.VerticalAlignment: None    #VBA_Variant
    self.Width: float

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class DataLabels:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoText: bool
    self.Count: int
    self.Creator: int
    self.Format: None   #ChartFormat
    self.HorizontalAlignment: None  #VBA_Variant
    self.Name: str
    self.NumberFormat: str
    self.NumberFormatLinked: bool
    self.NumberFormatLocal: None    #VBA_Variant
    self.Orientation: None          #VBA_Variant
    self.Parent: None   #VBA_Object
    self.Position: None             #XlDataLabelPosition
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int
    self.Separator: None            #VBA_Variant
    self.Shadow: bool
    self.ShowBubbleSize: bool
    self.ShowCategoryName: bool
    self.ShowLegendKey: bool
    self.ShowPercentage: bool
    self.ShowRange: bool
    self.ShowSeriesName: bool
    self.ShowValue: bool
    self.VerticalAlignment: None    #VBA_Variant

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Item(self, Index) -> None: pass       #DataLabel
  def Propagate(self, Index) -> None: pass  #None
  def Select(self, ) -> None: pass          #VBA_Variant




class DataTable:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Border: None   #VBA_Object
    self.Creator: int
    self.Font: None     #VBA_Object
    self.Format: None   #ChartFormat
    self.HasBorderHorizontal: bool
    self.HasBorderOutline: bool
    self.HasBorderVertical: bool
    self.Parent: None   #VBA_Object
    self.ShowLegendKey: bool

  def Delete(self, ) -> None: pass          #None
  def Select(self, ) -> None: pass          #None




class DefaultWebOptions:
  '''just need name'''

  def __init__(self):
    self.AllowPNG: bool
    self.AlwaysSaveInDefaultEncoding: bool
    self.Application: None          #Application
    self.CheckIfOfficeIsHTMLEditor: bool
    self.Creator: int
    self.DownloadComponents: bool
    self.Encoding: None             #MsoEncoding
    self.FolderSuffix: str
    self.Fonts: None    #WebPageFonts
    self.LoadPictures: bool
    self.LocationOfComponents: str
    self.OrganizeInFolder: bool
    self.Parent: None   #VBA_Object
    self.PixelsPerInch: int
    self.RelyOnCSS: bool
    self.RelyOnVML: bool
    self.SaveHiddenData: bool
    self.SaveNewWebPagesAsWebArchives: bool
    self.ScreenSize: None           #MsoScreenSize
    self.TargetBrowser: None        #MsoTargetBrowser
    self.UpdateLinksOnSave: bool
    self.UseLongFileNames: bool




class Dialog:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Show(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass       #bool




class Dialogs:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object




class DisplayFormat:
  '''just need name'''

  def __init__(self):
    self.AddIndent: None            #VBA_Variant
    self.Application: None          #Application
    self.Borders: None  #Borders
    self.Characters: None           #Characters
    self.Creator: int
    self.Font: None     #Font
    self.FormulaHidden: None        #VBA_Variant
    self.HorizontalAlignment: None  #VBA_Variant
    self.IndentLevel: None          #VBA_Variant
    self.Interior: None             #Interior
    self.Locked: None   #VBA_Variant
    self.MergeCells: None           #VBA_Variant
    self.NumberFormat: None         #VBA_Variant
    self.NumberFormatLocal: None    #VBA_Variant
    self.Orientation: None          #VBA_Variant
    self.Parent: None   #VBA_Object
    self.ReadingOrder: int
    self.ShrinkToFit: None          #VBA_Variant
    self.Style: None    #VBA_Variant
    self.VerticalAlignment: None    #VBA_Variant
    self.WrapText: None             #VBA_Variant




class DisplayUnitLabel:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Caption: str
    self.Characters: None           #Characters
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Formula: str
    self.FormulaLocal: str
    self.FormulaR1C1: str
    self.FormulaR1C1Local: str
    self.Height: float
    self.HorizontalAlignment: None  #VBA_Variant
    self.Left: float
    self.Name: str
    self.Orientation: None          #VBA_Variant
    self.Parent: None   #VBA_Object
    self.Position: None             #XlChartElementPosition
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int
    self.Shadow: bool
    self.Text: str
    self.Top: float
    self.VerticalAlignment: None    #VBA_Variant
    self.Width: float

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class DownBars:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class DropLines:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Border: None   #VBA_Object
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class Error:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Ignore: bool
    self.Parent: None   #VBA_Object
    self.Value: bool




class ErrorBars:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Border: None   #VBA_Object
    self.Creator: int
    self.EndStyle: None             #XlEndStyleCap | xlCap | xlNoCap | int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object

  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class ErrorCheckingOptions:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.BackgroundChecking: bool
    self.Creator: int
    self.EmptyCellReferences: bool
    self.EvaluateToError: bool
    self.InconsistentFormula: bool
    self.InconsistentTableFormula: bool
    self.IndicatorColorIndex: None  #XlColorIndex
    self.ListDataValidation: bool
    self.NumberAsText: bool
    self.OmittedCells: bool
    self.Parent: None   #VBA_Object
    self.TextDate: bool
    self.UnlockedFormulaCells: bool




class Errors:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Item: None     #Error
    self.Parent: None   #VBA_Object




class FileExportConverter:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Description: str
    self.Extensions: str
    self.FileFormat: None           #FileExportConverter
    self.Parent: None   #VBA_Object | FileExportConverter




class FileExportConverters:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #FileExportConverter
    self.Parent: None   #VBA_Object | FileExportConverters




class FillFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.BackColor: None            #ColorFormat
    self.Creator: int
    self.ForeColor: None            #ColorFormat
    self.GradientAngle: float
    self.GradientColorType: None    #MsoGradientColorType
    self.GradientDegree: float
    self.GradientStops: None        #VBA_Object
    self.GradientStyle: None        #MsoGradientStyle
    self.GradientVariant: int
    self.Parent: None   #VBA_Object
    self.Pattern: None  #MsoPatternType
    self.PictureEffects: None       #VBA_Object
    self.PresetGradientType: None   #MsoPresetGradientType
    self.PresetTexture: None        #MsoPresetTexture
    self.RotateWithObject: None     #MsoTriState
    self.TextureAlignment: None     #FillFormat
    self.TextureHorizontalScale: float
    self.TextureName: str
    self.TextureOffsetX: float
    self.TextureOffsetY: float
    self.TextureTile: None          #MsoTriState
    self.TextureType: None          #MsoTextureType
    self.TextureVerticalScale: float
    self.Transparency: float
    self.Type: None     #MsoFillType
    self.Visible: None  #MsoTriState

  def OneColorGradient(self, Style, Variant, Degree) -> None: pass                      #None
  def Patterned(self, Pattern) -> None: pass                      #None
  def PresetGradient(self, Style, Variant, PresetGradientType) -> None: pass            #None
  def PresetTextured(self, PresetTexture) -> None: pass           #None
  def Solid(self, ) -> None: pass           #None
  def TwoColorGradient(self, Style, Variant) -> None: pass        #None
  def UserPicture(self, PictureFile) -> None: pass                #None
  def UserTextured(self, TextureFile) -> None: pass               #None




class Filter:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Criteria1: None            #VBA_Variant
    self.Criteria2: None            #VBA_Variant
    self.On: bool
    self.Operator: None             #XlAutoFilterOperator
    self.Parent: None   #VBA_Object




class Filters:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object




class Floor:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object
    self.PictureType: None          #VBA_Variant
    self.Thickness: int

  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Paste(self, ) -> None: pass           #None
  def Select(self, ) -> None: pass          #VBA_Variant




class Font:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Background: None           #VBA_Variant
    self.Bold: None     #VBA_Variant
    self.Color: None    #VBA_Variant
    self.ColorIndex: None           #VBA_Variant
    self.Creator: int
    self.FontStyle: str
    self.Italic: bool
    self.Name: None     #VBA_Variant
    self.Parent: None   #VBA_Object
    self.Size: None     #VBA_Variant
    self.Strikethrough: bool
    self.Subscript: None            #VBA_Variant
    self.Superscript: None          #VBA_Variant
    self.ThemeColor: None           #VBA_Variant
    self.ThemeFont: None            #XlThemeFont
    self.TintAndShade: float
    self.Underline: None            #VBA_Variant




class FormatColor:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Color: None    #FormatColor | RGB
    self.ColorIndex: None           #XlColorIndex
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.ThemeColor: None           #XlThemeColor
    self.TintAndShade: float




class FormatCondition:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AppliesTo: None            #Range
    self.Borders: None  #Borders
    self.Creator: int
    self.DateOperator: None         #FormatCondition
    self.Font: None     #VBA_Object
    self.Formula1: str
    self.Formula2: str
    self.Interior: None             #Interior
    self.NumberFormat: None         #VBA_Variant
    self.Operator: int
    self.PTCondition: bool
    self.Parent: None   #VBA_Object
    self.Priority: None             #FormatCondition
    self.ScopeType: None            #XlPivotConditionScope
    self.StopIfTrue: bool
    self.Text: str
    self.TextOperator: None         #XlContainsOperator
    self.Type: int

  def Delete(self, ) -> None: pass          #None
  def Modify(self, Type, Operator, Formula1, Formula2) -> None: pass                    #None
  def ModifyAppliesToRange(self, Range) -> None: pass             #None
  def SetFirstPriority(self, ) -> None: pass                      #None
  def SetLastPriority(self, ) -> None: pass                       #None




class FormatConditions:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Type, Operator, Formula1, Formula2) -> None: pass                       #FormatCondition
  def AddAboveAverage(self, ) -> None: pass                       #AboveAverage
  def AddColorScale(self, ColorScaleType) -> None: pass           #ColorScale
  def AddDatabar(self, ) -> None: pass      #Databar
  def AddIconSetCondition(self, ) -> None: pass                   #IconSetCondition
  def AddTop10(self, ) -> None: pass        #Top10
  def AddUniqueValues(self, ) -> None: pass                       #UniqueValues
  def Delete(self, ) -> None: pass          #None
  def Item(self, Index) -> None: pass       #VBA_Object




class FreeformBuilder:
  '''just need name'''

  def ConvertToShape(self, ) -> None: pass  #Shape




class Graphic:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Brightness: float
    self.ColorType: None            #MsoPictureColorType
    self.Contrast: float
    self.Creator: int
    self.CropBottom: float
    self.CropLeft: float
    self.CropRight: float
    self.CropTop: float
    self.Filename: str
    self.Height: float
    self.LockAspectRatio: None      #MsoTriState
    self.Parent: None   #VBA_Object
    self.Width: float




class Gridlines:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Border: None   #VBA_Object
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class GroupShapes:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.Range: None    #ShapeRange | Shapes

  def Item(self, Index) -> None: pass       #Shape




class HPageBreak:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Extent: int
    self.Location: None             #Range
    self.Parent: None   #VBA_Object
    self.Type: None     #XlPageBreak

  def Delete(self, ) -> None: pass          #None
  def DragOff(self, Direction, RegionIndex) -> None: pass         #None




class HPageBreaks:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Before) -> None: pass       #HPageBreak




class HiLoLines:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Border: None   #VBA_Object
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class Hyperlink:
  '''just need name'''

  def __init__(self):
    self.Address: str
    self.Application: None          #Application
    self.Creator: int
    self.EmailSubject: str
    self.Name: str
    self.Parent: None   #VBA_Object
    self.Range: None    #VBA_Object
    self.ScreenTip: str
    self.Shape: None    #VBA_Object
    self.SubAddress: str
    self.TextToDisplay: str
    self.Type: int

  def AddToFavorites(self, ) -> None: pass  #None
  def CreateNewDocument(self, FileName, EditNow, Overwrite) -> None: pass               #None
  def Delete(self, ) -> None: pass          #None
  def Follow(self, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo) -> None: pass  #None




class Hyperlinks:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Anchor, Address, SubAddress, ScreenTip, TextToDisplay) -> None: pass    #Hyperlink
  def Delete(self, ) -> None: pass          #None




class Icon:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Index: None    #int | Icon | IconSet
    self.Parent: None   #VBA_Object




class IconCriteria:
  '''just need name'''

  def __init__(self):
    self.Count: int
    self.Item: None     #IconCriterion | IconCriteria




class IconCriterion:
  '''just need name'''

  def __init__(self):
    self.Icon: None     #IconCriterion | IconSet
    self.Index: int
    self.Operator: None             #XlFormatConditionOperator
    self.Type: None     #XlConditionValueTypes
    self.Value: None    #VBA_Variant




class IconSet:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.ID: None       #XlIconSet
    self.Item: None     #Icon
    self.Parent: None   #VBA_Object




class IconSetCondition:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AppliesTo: None            #Range
    self.Creator: int
    self.Formula: str
    self.IconCriteria: None         #IconCriteria
    self.IconSet: None  #IconSets
    self.PTCondition: bool
    self.Parent: None   #VBA_Object
    self.PercentileValues: bool
    self.Priority: None             #IconSetCondition
    self.ReverseOrder: bool
    self.ScopeType: None            #XlPivotConditionScope
    self.ShowIconOnly: bool
    self.StopIfTrue: bool
    self.Type: None     #XlFormatConditionType

  def Delete(self, ) -> None: pass          #None
  def ModifyAppliesToRange(self, Range) -> None: pass             #None
  def SetFirstPriority(self, ) -> None: pass                      #None
  def SetLastPriority(self, ) -> None: pass                       #None




class IconSets:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #IconSet | IconSets
    self.Parent: None   #VBA_Object




class Interior:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Color: None    #VBA_Variant
    self.ColorIndex: None           #VBA_Variant
    self.Creator: int
    self.Gradient: None             #VBA_Object
    self.InvertIfNegative: None     #VBA_Variant
    self.Parent: None   #VBA_Object
    self.Pattern: None  #VBA_Variant
    self.PatternColor: None         #VBA_Variant
    self.PatternColorIndex: None    #XlColorIndex | xlColorIndexAutomatic | xlColorIndexNone | int
    self.PatternThemeColor: None    #VBA_Variant
    self.PatternTintAndShade: None  #VBA_Variant
    self.ThemeColor: None           #VBA_Variant
    self.TintAndShade: float




class LeaderLines:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Border: None   #VBA_Object
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Parent: None   #VBA_Object

  def Delete(self, ) -> None: pass          #None
  def Select(self, ) -> None: pass          #None




class Legend:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Height: float
    self.IncludeInLayout: bool
    self.Left: float
    self.Name: str
    self.Parent: None   #VBA_Object
    self.Position: None             #XlLegendPosition
    self.Shadow: bool
    self.Top: float
    self.Width: float

  def Clear(self, ) -> None: pass           #VBA_Variant
  def Delete(self, ) -> None: pass          #VBA_Variant
  def LegendEntries(self, Index) -> None: pass                    #VBA_Object
  def Select(self, ) -> None: pass          #VBA_Variant




class LegendEntries:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #LegendEntry




class LegendEntry:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Font: None     #VBA_Object
    self.Format: None   #ChartFormat
    self.Height: float
    self.Index: int
    self.Left: float
    self.LegendKey: None            #VBA_Object
    self.Parent: None   #VBA_Object
    self.Top: float
    self.Width: float

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class LegendKey:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Height: float
    self.InvertIfNegative: bool
    self.Left: float
    self.MarkerBackgroundColor: None            #RGB | int
    self.MarkerBackgroundColorIndex: None       #XlColorIndex | xlColorIndexAutomatic | xlColorIndexNone | int
    self.MarkerForegroundColor: None            #RGB | int
    self.MarkerForegroundColorIndex: None       #XlColorIndex | xlColorIndexAutomatic | xlColorIndexNone | int
    self.MarkerSize: None           #points | int
    self.MarkerStyle: None          #XlMarkerStyle
    self.Parent: None   #VBA_Object
    self.PictureType: None          #XlChartPictureType
    self.PictureUnit2: float
    self.Shadow: bool
    self.Smooth: bool
    self.Top: float
    self.Width: float

  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Delete(self, ) -> None: pass          #VBA_Variant




class LineFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.BackColor: None            #ColorFormat
    self.BeginArrowheadLength: None             #MsoArrowheadLength
    self.BeginArrowheadStyle: None  #MsoArrowheadStyle
    self.BeginArrowheadWidth: None  #MsoArrowheadWidth
    self.Creator: int
    self.DashStyle: None            #MsoLineDashStyle | int
    self.EndArrowheadLength: None   #MsoArrowheadLength
    self.EndArrowheadStyle: None    #MsoArrowheadStyle
    self.EndArrowheadWidth: None    #MsoArrowheadWidth
    self.ForeColor: None            #ColorFormat
    self.InsetPen: None             #MsoTriState
    self.Parent: None   #VBA_Object
    self.Pattern: None  #MsoPatternType
    self.Style: None    #MsoLineStyle
    self.Transparency: float
    self.Visible: None  #MsoTriState
    self.Weight: float




class LinkFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoUpdate: bool
    self.Creator: int
    self.Locked: bool
    self.Parent: None   #VBA_Object

  def Update(self, ) -> None: pass          #None




class ListColumn:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.DataBodyRange: None        #Range
    self.Index: int
    self.Name: str
    self.Parent: None   #VBA_Object
    self.Range: None    #VBA_Object
    self.Total: None    #ListColumn
    self.TotalsCalculation: None    #XlTotalsCalculation
    self.XPath: None    #XPath | Range

  def Delete(self, ) -> None: pass          #None




class ListColumns:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Position) -> None: pass     #ListColumn




class ListObject:
  '''just need name'''

  def __init__(self):
    self.Active: bool
    self.AlternativeText: str
    self.Application: None          #Application
    self.AutoFilter: None           #VBA_Object
    self.Comment: str
    self.Creator: int
    self.DataBodyRange: None        #Range
    self.DisplayName: str
    self.DisplayRightToLeft: bool
    self.HeaderRowRange: None       #Range
    self.InsertRowRange: None       #Range
    self.ListColumns: None          #ListColumns | ListObject
    self.ListRows: None             #ListRows | ListObject
    self.Name: str
    self.Parent: None   #VBA_Object
    self.QueryTable: None           #QueryTable | ListObject
    self.Range: None    #VBA_Object
    self.SharePointURL: str
    self.ShowAutoFilter: bool
    self.ShowAutoFilterDropDown: bool
    self.ShowHeaders: bool
    self.ShowTableStyleColumnStripes: bool
    self.ShowTableStyleFirstColumn: bool
    self.ShowTableStyleLastColumn: bool
    self.ShowTableStyleRowStripes: bool
    self.ShowTotals: bool
    self.Slicers: None  #SLICERS
    self.Sort: None     #ListObject
    self.SourceType: None           #XlListObjectSourceType
    self.Summary: str
    self.TableObject: None          #TABLEOBJECT
    self.TableStyle: None           #VBA_Variant
    self.TotalsRowRange: None       #Range | ListObject
    self.XmlMap: None   #XmlMap

  def Delete(self, ) -> None: pass          #None
  def ExportToVisio(self, ) -> None: pass   #None
  def Publish(self, Target, LinkSource) -> None: pass             #str
  def Refresh(self, ) -> None: pass         #None
  def Resize(self, Range) -> None: pass     #None
  def Unlink(self, ) -> None: pass          #None
  def Unlist(self, ) -> None: pass          #None




class ListObjects:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, SourceType, Source, LinkSource, XlListObjectHasHeaders, Destination, TableStyleName) -> None: pass                  #ListObject




class ListRow:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Index: int
    self.Parent: None   #VBA_Object
    self.Range: None    #VBA_Object

  def Delete(self, ) -> None: pass          #None




class ListRows:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Position, AlwaysInsert) -> None: pass             #ListRow




class Model:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Creator: None  #XLCREATOR
    self.DataModelConnection: None  #WORKBOOKCONNECTION
    self.ModelFormatBoolean: None   #ModelFormatBoolean | bool
    self.ModelFormatCurrency: None  #ModelFormatCurrency | currency
    self.ModelFormatDate: None      #ModelFormatDate | Date
    self.ModelFormatDecimalNumber: None         #ModelFormatDecimalNumber
    self.ModelFormatGeneral: None   #ModelFormatGeneral | general
    self.ModelFormatPercentageNumber: None      #ModelFormatPercentageNumber
    self.ModelFormatScientificNumber: None      #ModelFormatScientificNumber
    self.ModelFormatWholeNumber: None           #ModelFormatWholeNumber
    self.ModelMeasures: None        #ModelMeasures
    self.ModelRelationships: None   #MODELRELATIONSHIPS
    self.ModelTables: None          #MODELTABLES
    self.Name: None     #STRING
    self.Parent: None   #VBA_Object

  def AddConnection(self, ConnectionToDataSource) -> None: pass   #WORKBOOKCONNECTION
  def CreateModelWorkbookConnection(self, ModelTable) -> None: pass                     #WORKBOOKCONNECTION
  def Initialize(self, ) -> None: pass      #None
  def Refresh(self, ) -> None: pass         #None




class Model3DFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #VBA_Object
    self.AutoFit: None  #Model3DFormat
    self.CameraPositionX: float
    self.CameraPositionY: float
    self.CameraPositionZ: float
    self.Creator: int
    self.FieldOfView: float
    self.LookAtPointX: float
    self.LookAtPointY: float
    self.LookAtPointZ: float
    self.Parent: None   #VBA_Object
    self.RotationX: float
    self.RotationY: float
    self.RotationZ: float

  def IncrementRotationX(self, Increment) -> None: pass           #None
  def IncrementRotationY(self, Increment) -> None: pass           #None
  def IncrementRotationZ(self, Increment) -> None: pass           #None
  def ResetModel(self, ResetSize) -> None: pass                   #None




class ModelFormatBoolean:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #VBA_Object




class ModelFormatCurrency:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.DecimalPlaces: int
    self.Parent: None   #VBA_Object
    self.Symbol: str




class ModelFormatDate:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.FormatString: str
    self.Parent: None   #VBA_Object




class ModelFormatDecimalNumber:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.DecimalPlaces: int
    self.Parent: None   #VBA_Object
    self.UseThousandSeparator: bool




class ModelFormatGeneral:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #VBA_Object




class ModelFormatPercentageNumber:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.DecimalPlaces: int
    self.Parent: None   #VBA_Object
    self.UseThousandSeparator: bool




class ModelFormatScientificNumber:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.DecimalPlaces: int
    self.Parent: None   #VBA_Object




class ModelFormatWholeNumber:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.UseThousandSeparator: bool




class ModelMeasure:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AssociatedTable: None      #ModelTable
    self.Creator: int
    self.Description: str
    self.FormatInformation: None    #VBA_Variant
    self.Formula: str
    self.Name: str
    self.Parent: None   #VBA_Object

  def Delete(self, ) -> None: pass          #None




class ModelMeasures:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, MeasureName, AssociatedTable, Formula, FormatInformation, Description) -> None: pass          #ModelMeasure
  def Item(self, Index) -> None: pass       #ModelMeasure




class ModelRelationship:
  '''just need name'''

  def __init__(self):
    self.Active: bool
    self.Application: None          #APPLICATION
    self.Creator: None  #XLCREATOR
    self.ForeignKeyColumn: None     #MODELTABLECOLUMN
    self.ForeignKeyTable: None      #MODELTABLE
    self.Parent: None   #VBA_Object
    self.PrimaryKeyColumn: None     #MODELTABLECOLUMN
    self.PrimaryKeyTable: None      #MODELTABLE

  def Delete(self, ) -> None: pass          #None




class ModelRelationships:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Count: int
    self.Creator: None  #XLCREATOR
    self.Parent: None   #VBA_Object

  def Add(self, ForeignKeyColumn, PrimaryKeyColumn) -> None: pass                       #MODELRELATIONSHIP
  def DetectRelationships(self, PivotTable) -> None: pass         #None
  def Item(self, Index) -> None: pass       #ModelRelationship




class ModelTable:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Creator: None  #XLCREATOR
    self.ModelTableColumns: None    #MODELTABLECOLUMNS
    self.Name: None     #STRING
    self.Parent: None   #VBA_Object
    self.RecordCount: int
    self.SourceName: None           #STRING
    self.SourceWorkbookConnection: None         #WORKBOOKCONNECTION

  def Refresh(self, ) -> None: pass         #None




class ModelTableColumn:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Creator: None  #XLCREATOR
    self.DataType: int
    self.Name: None     #STRING
    self.Parent: None   #VBA_Object




class ModelTableColumns:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Count: int
    self.Creator: None  #XLCREATOR
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #MODELTABLECOLUMN




class ModelTables:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Count: int
    self.Creator: None  #XLCREATOR
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #MODELTABLE




class MultiThreadedCalculation:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Enabled: None  #Enabled | MultiThreadedCalculation
    self.Parent: None   #VBA_Object
    self.ThreadCount: None          #MultiThreadedCalculation
    self.ThreadMode: None           #XlThreadMode




class Name:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Category: str
    self.CategoryLocal: str
    self.Comment: str
    self.Creator: int
    self.Index: int
    self.MacroType: None            #XlXLMMacroType
    self.Name: str
    self.NameLocal: str
    self.Parent: None   #VBA_Object
    self.RefersTo: str
    self.RefersToLocal: str
    self.RefersToR1C1: str
    self.RefersToR1C1Local: str
    self.RefersToRange: None        #Range | Name
    self.ShortcutKey: str
    self.ValidWorkbookParameter: bool
    self.Value: str
    self.Visible: bool
    self.WorkbookParameter: bool

  def Delete(self, ) -> None: pass          #None




class Names:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Name, RefersTo, Visible, MacroType, ShortcutKey, Category, NameLocal, RefersToLocal, CategoryLocal, RefersToR1C1, RefersToR1C1Local) -> None: pass              #Name
  def Item(self, Index, IndexLocal, RefersTo) -> None: pass       #Name




class ODBCError:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.ErrorString: str
    self.Parent: None   #VBA_Object
    self.SqlState: str




class ODBCErrors:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #ODBCError




class OLEDBError:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.ErrorString: str
    self.Native: int
    self.Number: int
    self.Parent: None   #VBA_Object
    self.SqlState: str
    self.Stage: int




class OLEDBErrors:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #OLEDBError




class OLEFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Object: None   #VBA_Object
    self.Parent: None   #VBA_Object
    self.progID: str

  def Activate(self, ) -> None: pass        #None
  def Verb(self, Verb) -> None: pass        #None




class Outline:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutomaticStyles: bool
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.SummaryColumn: None        #XlSummaryColumn
    self.SummaryRow: None           #XlSummaryRow

  def ShowLevels(self, RowLevels, ColumnLevels) -> None: pass     #VBA_Variant




class Page:
  '''just need name'''

  def __init__(self):
    self.CenterFooter: None         #Page
    self.CenterHeader: None         #Page
    self.LeftFooter: None           #Page
    self.LeftHeader: None           #Page
    self.RightFooter: None          #Page
    self.RightHeader: None          #Page




class PageSetup:
  '''just need name'''

  def __init__(self):
    self.AlignMarginsHeaderFooter: bool
    self.Application: None          #Application
    self.BlackAndWhite: bool
    self.BottomMargin: float
    self.CenterFooter: str
    self.CenterFooterPicture: None  #VBA_Object
    self.CenterHeader: str
    self.CenterHeaderPicture: None  #VBA_Object
    self.CenterHorizontally: bool
    self.CenterVertically: bool
    self.Creator: int
    self.DifferentFirstPageHeaderFooter: bool
    self.Draft: bool
    self.EvenPage: None             #PageSetup
    self.FirstPage: None            #PageSetup
    self.FirstPageNumber: None      #xlAutomatic | Constants | int
    self.FitToPagesTall: None       #VBA_Variant
    self.FitToPagesWide: None       #VBA_Variant
    self.FooterMargin: float
    self.HeaderMargin: float
    self.LeftFooter: None           #PageSetup
    self.LeftFooterPicture: None    #VBA_Object
    self.LeftHeader: None           #PageSetup
    self.LeftHeaderPicture: None    #VBA_Object
    self.LeftMargin: float
    self.OddAndEvenPagesHeaderFooter: bool
    self.Order: None    #XlOrder
    self.Orientation: None          #XlPageOrientation
    self.Pages: None    #Pages
    self.PaperSize: None            #XlPaperSize
    self.Parent: None   #VBA_Object
    self.PrintArea: str
    self.PrintComments: None        #XlPrintLocation
    self.PrintErrors: None          #XlPrintErrors
    self.PrintGridlines: bool
    self.PrintHeadings: bool
    self.PrintNotes: bool
    self.PrintQuality: None         #VBA_Variant
    self.PrintTitleColumns: str
    self.PrintTitleRows: str
    self.RightFooter: str
    self.RightFooterPicture: None   #VBA_Object
    self.RightHeader: str
    self.RightHeaderPicture: None   #VBA_Object
    self.RightMargin: float
    self.ScaleWithDocHeaderFooter: bool
    self.TopMargin: float
    self.Zoom: None     #VBA_Variant




class Pages:
  '''just need name'''

  def __init__(self):
    self.Count: int
    self.Item: None     #Page




class Pane:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Index: int
    self.Parent: None   #VBA_Object
    self.ScrollColumn: int
    self.ScrollRow: int
    self.VisibleRange: None         #Range

  def Activate(self, ) -> None: pass        #bool
  def LargeScroll(self, Down, Up, ToRight, ToLeft) -> None: pass  #VBA_Variant
  def PointsToScreenPixelsX(self, Points) -> None: pass           #int
  def PointsToScreenPixelsY(self, Points) -> None: pass           #int
  def ScrollIntoView(self, Left, Top, Width, Height, Start) -> None: pass               #None
  def SmallScroll(self, Down, Up, ToRight, ToLeft) -> None: pass  #VBA_Variant




class Panes:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object




class Parameter:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.DataType: None             #XlParameterDataType
    self.Name: str
    self.Parent: None   #VBA_Object
    self.PromptString: str
    self.RefreshOnChange: bool
    self.SourceRange: None          #Range
    self.Type: None     #XlParameterType
    self.Value: None    #VBA_Variant

  def SetParam(self, Type, Value) -> None: pass                   #None




class Parameters:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Name, iDataType) -> None: pass                    #Parameter
  def Delete(self, ) -> None: pass          #None
  def Item(self, Index) -> None: pass       #Parameter




class Phonetic:
  '''just need name'''

  def __init__(self):
    self.Alignment: int
    self.Application: None          #Application
    self.CharacterType: None        #XlPhoneticCharacterType
    self.Creator: int
    self.Font: None     #VBA_Object
    self.Parent: None   #VBA_Object
    self.Text: str
    self.Visible: bool




class Phonetics:
  '''just need name'''

  def __init__(self):
    self.Alignment: int
    self.Application: None          #Application
    self.CharacterType: None        #XlPhoneticCharacterType
    self.Count: int
    self.Creator: int
    self.Font: None     #VBA_Object
    self.Item: None     #VBA_Object
    self.Length: int
    self.Parent: None   #VBA_Object
    self.Start: int
    self.Text: str
    self.Visible: bool

  def Add(self, Start, Length, Text) -> None: pass                #None
  def Delete(self, ) -> None: pass          #None




class PictureFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Brightness: float
    self.ColorType: None            #PictureFormat | MsoPictureColorType
    self.Contrast: float
    self.Creator: int
    self.Crop: None     #Crop | PictureFormat
    self.CropBottom: float
    self.CropLeft: float
    self.CropRight: float
    self.CropTop: float
    self.Parent: None   #VBA_Object
    self.TransparencyColor: None    #TransparentBackground | bool | int
    self.TransparentBackground: None            #MsoTriState

  def IncrementBrightness(self, Increment) -> None: pass          #None
  def IncrementContrast(self, Increment) -> None: pass            #None




class PivotAxis:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #PivotAxis
    self.PivotLines: None           #PivotLines | PivotAxis




class PivotCache:
  '''just need name'''

  def __init__(self):
    self.ADOConnection: None        #ADOConnection
    self.Application: None          #Application
    self.BackgroundQuery: bool
    self.CommandText: None          #VBA_Variant
    self.CommandType: None          #XlCmdType
    self.Connection: None           #PivotCache | UseLocalConnection | LocalConnection
    self.Creator: int
    self.EnableRefresh: bool
    self.Index: int
    self.IsConnected: bool
    self.LocalConnection: str
    self.MaintainConnection: bool
    self.MemoryUsed: int
    self.MissingItemsLimit: None    #XlPivotTableMissingItems
    self.OLAP: bool
    self.OptimizeCache: bool
    self.Parent: None   #VBA_Object
    self.QueryType: None            #XlQueryType
    self.RecordCount: int
    self.Recordset: None            #Recordset
    self.RefreshDate: None          #Date
    self.RefreshName: str
    self.RefreshOnFileOpen: bool
    self.RefreshPeriod: int
    self.RobustConnect: None        #XlRobustConnect
    self.SavePassword: bool
    self.SourceConnectionFile: str
    self.SourceData: None           #VBA_Variant
    self.SourceDataFile: str
    self.SourceType: None           #XlPivotTableSourceType
    self.UpgradeOnRefresh: bool
    self.UseLocalConnection: bool
    self.Version: None  #XlPivotTableVersionList
    self.WorkbookConnection: None   #PivotCache

  def CreatePivotChart(self, ChartDestination, XlChartType, Left, Top, Width, Height) -> None: pass           #Shape
  def CreatePivotTable(self, TableDestination, TableName, ReadData, DefaultVersion) -> None: pass             #PivotTable
  def MakeConnection(self, ) -> None: pass  #None
  def Refresh(self, ) -> None: pass         #None
  def ResetTimer(self, ) -> None: pass      #None
  def SaveAsODC(self, ODCFileName, Description, Keywords) -> None: pass                 #None




class PivotCaches:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Create(self, SourceType, SourceData, Version) -> None: pass                       #PivotCache
  def Item(self, Index) -> None: pass       #PivotCache




class PivotCell:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.CellChanged: None          #XlCellChangedState
    self.ColumnItems: None          #PivotItemList
    self.Creator: int
    self.CustomSubtotalFunction: None           #XlConsolidationFunction
    self.DataField: None            #PivotField
    self.DataSourceValue: None      #VBA_Variant
    self.MDX: str
    self.Parent: None   #VBA_Object
    self.PivotCellType: None        #XlPivotCellType
    self.PivotColumnLine: None      #PivotLine
    self.PivotField: None           #VBA_Object
    self.PivotItem: None            #VBA_Object
    self.PivotRowLine: None         #PivotLine
    self.PivotTable: None           #VBA_Object
    self.Range: None    #VBA_Object
    self.RowItems: None             #PivotItemList
    self.ServerActions: None        #ACTIONS

  def AllocateChange(self, ) -> None: pass  #None
  def DiscardChange(self, ) -> None: pass   #None




class PivotField:
  '''just need name'''

  def __init__(self):
    self.AllItemsVisible: bool
    self.Application: None          #Application
    self.AutoShowCount: int
    self.AutoShowField: str
    self.AutoShowRange: int
    self.AutoShowType: int
    self.AutoSortCustomSubtotal: None           #VBA_Object
    self.AutoSortField: str
    self.AutoSortOrder: int
    self.AutoSortPivotLine: None    #PivotLine
    self.BaseField: None            #VBA_Variant
    self.BaseItem: None             #VBA_Variant
    self.Calculation: None          #XlPivotFieldCalculation
    self.Caption: str
    self.ChildField: None           #PivotField
    self.ChildItems: None           #PivotItem | PivotItems
    self.Creator: int
    self.CubeField: None            #CubeField
    self.CurrentPage: None          #PivotItem
    self.CurrentPageList: None      #VBA_Variant
    self.CurrentPageName: str
    self.DataRange: None            #Range
    self.DataType: None             #XlPivotFieldDataType
    self.DatabaseSort: bool
    self.DisplayAsCaption: None     #VBA_Object
    self.DisplayAsTooltip: bool
    self.DisplayInReport: bool
    self.DragToColumn: bool
    self.DragToData: bool
    self.DragToHide: bool
    self.DragToPage: bool
    self.DragToRow: bool
    self.DrilledDown: bool
    self.EnableItemSelection: bool
    self.EnableMultiplePageItems: bool
    self.Formula: str
    self.Function: None             #XlConsolidationFunction
    self.GroupLevel: None           #VBA_Object
    self.Hidden: bool
    self.HiddenItems: None          #PivotItem | PivotItems
    self.HiddenItemsList: None      #VBA_Variant
    self.IncludeNewItemsInFilter: bool
    self.IsCalculated: bool
    self.IsMemberProperty: bool
    self.LabelRange: None           #Range
    self.LayoutBlankLine: bool
    self.LayoutCompactRow: bool
    self.LayoutForm: None           #XlLayoutFormType
    self.LayoutPageBreak: bool
    self.LayoutSubtotalLocation: None           #XlSubtotalLocationType
    self.MemberPropertyCaption: bool
    self.MemoryUsed: int
    self.Name: str
    self.NumberFormat: str
    self.Orientation: None          #XlPivotFieldOrientation
    self.Parent: None   #VBA_Object
    self.ParentField: None          #PivotField
    self.ParentItems: None          #PivotItem | PivotItems
    self.PivotFilters: None         #PivotField
    self.Position: None             #VBA_Variant
    self.PropertyOrder: int
    self.PropertyParentField: None  #PivotField
    self.RepeatLabels: bool
    self.ServerBased: bool
    self.ShowAllItems: bool
    self.ShowDetail: bool
    self.ShowingInAxis: None        #VBA_Object
    self.SourceCaption: None        #SourceCaption
    self.SourceName: str
    self.StandardFormula: str
    self.SubtotalName: str
    self.Subtotals: None            #VBA_Variant
    self.TotalLevels: int
    self.UseMemberPropertyAsCaption: bool
    self.Value: str
    self.VisibleItems: None         #PivotItem | PivotItems
    self.VisibleItemsList: None     #VBA_Variant

  def AddPageItem(self, Item, ClearList) -> None: pass            #None
  def AutoGroup(self, ) -> None: pass       #None
  def AutoShow(self, Type, Range, Count, Field) -> None: pass     #None
  def AutoSort(self, Order, Field, PivotLine, CustomSubtotal) -> None: pass             #None
  def CalculatedItems(self, ) -> None: pass                       #CalculatedItems
  def ClearAllFilters(self, ) -> None: pass                       #None
  def ClearLabelFilters(self, ) -> None: pass                     #None
  def ClearManualFilter(self, ) -> None: pass                     #None
  def ClearValueFilters(self, ) -> None: pass                     #None
  def Delete(self, ) -> None: pass          #None
  def DrillTo(self, PivotFieldName) -> None: pass                 #None
  def PivotItems(self, Index) -> None: pass                       #VBA_Variant




class PivotFields:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #VBA_Object




class PivotFormula:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Formula: str
    self.Index: int
    self.Parent: None   #VBA_Object
    self.StandardFormula: str
    self.Value: str

  def Delete(self, ) -> None: pass          #None




class PivotFormulas:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Formula, UseStandardFormula) -> None: pass        #PivotFormula
  def Item(self, Index) -> None: pass       #PivotFormula




class PivotItem:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Caption: str
    self.ChildItems: None           #PivotItem | PivotItems
    self.Creator: int
    self.DataRange: None            #Range
    self.DrilledDown: bool
    self.Formula: str
    self.IsCalculated: bool
    self.LabelRange: None           #Range
    self.Name: str
    self.Parent: None   #VBA_Object
    self.ParentItem: None           #PivotItem | PivotField
    self.ParentShowDetail: bool
    self.Position: int
    self.RecordCount: int
    self.ShowDetail: None           #VBA_Variant
    self.SourceName: None           #VBA_Variant
    self.SourceNameStandard: str
    self.StandardFormula: str
    self.Value: str
    self.Visible: bool

  def Delete(self, ) -> None: pass          #None
  def DrillTo(self, PivotItemName) -> None: pass                  #None




class PivotItemList:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #PivotItem




class PivotItems:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Name) -> None: pass         #None
  def Item(self, Index) -> None: pass       #VBA_Object




class PivotLayout:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.PivotTable: None           #VBA_Object




class PivotLine:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.LineType: None             #XlPivotLineType
    self.Parent: None   #PivotLine
    self.PivotLineCells: None       #PivotCell
    self.PivotLineCellsFull: None   #PIVOTLINECELLS
    self.Position: None             #PivotLine




class PivotLines:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: None    #PivotLines
    self.Creator: int
    self.Item: None     #PivotLines
    self.Parent: None   #PivotLines




class PivotTable:
  '''just need name'''

  def __init__(self):
    self.ActiveFilters: None        #VBA_Object
    self.Allocation: None           #XlAllocation
    self.AllocationMethod: None     #XlAllocationMethod
    self.AllocationValue: None      #XlAllocationValue
    self.AllocationWeightExpression: None       #PivotTable | AllocationMethod
    self.AllowMultipleFilters: bool
    self.AlternativeText: str
    self.Application: None          #Application
    self.CacheIndex: int
    self.CalculatedMembers: None    #CalculatedMembers
    self.CalculatedMembersInFilters: bool
    self.ChangeList: None           #PivotTableChangeList
    self.ColumnFields: None         #PivotField | PivotFields
    self.ColumnGrand: bool
    self.ColumnRange: None          #Range
    self.CompactLayoutColumnHeader: str
    self.CompactLayoutRowHeader: str
    self.CompactRowIndent: None     #PivotTable
    self.Creator: int
    self.CubeFields: None           #CubeFields | CubeField
    self.DataBodyRange: None        #Range
    self.DataFields: None           #PivotField | PivotFields
    self.DataLabelRange: None       #Range
    self.DataPivotField: None       #PivotField
    self.DisplayContextTooltips: bool
    self.DisplayEmptyColumn: bool
    self.DisplayEmptyRow: bool
    self.DisplayErrorString: bool
    self.DisplayFieldCaptions: None             #PivotTable
    self.DisplayImmediateItems: bool
    self.DisplayMemberPropertyTooltips: bool
    self.DisplayNullString: bool
    self.EnableDataValueEditing: bool
    self.EnableDrilldown: bool
    self.EnableFieldDialog: bool
    self.EnableFieldList: bool
    self.EnableWizard: bool
    self.EnableWriteback: bool
    self.ErrorString: str
    self.FieldListSortAscending: bool
    self.GrandTotalName: str
    self.HasAutoFormat: bool
    self.Hidden: bool
    self.HiddenFields: None         #PivotField | PivotFields
    self.InGridDropZones: bool
    self.InnerDetail: str
    self.LayoutRowDefault: None     #XlLayoutRowType
    self.Location: None             #str | PivotTable
    self.MDX: str
    self.ManualUpdate: bool
    self.MergeLabels: bool
    self.Name: str
    self.NullString: str
    self.PageFieldOrder: None       #XlOrder | xlDownThenOver | xlOverThenDown | int
    self.PageFieldStyle: str
    self.PageFieldWrapCount: int
    self.PageFields: None           #PivotField | PivotFields
    self.PageRange: None            #Range
    self.PageRangeCells: None       #Range
    self.Parent: None   #VBA_Object
    self.PivotChart: None           #SHAPE
    self.PivotColumnAxis: None      #PivotAxis
    self.PivotFormulas: None        #PivotFormulas
    self.PivotRowAxis: None         #PivotAxis
    self.PivotSelection: str
    self.PivotSelectionStandard: str
    self.PreserveFormatting: bool
    self.PrintDrillIndicators: bool
    self.PrintTitles: bool
    self.RefreshDate: None          #Date
    self.RefreshName: str
    self.RepeatItemsOnEachPrintedPage: bool
    self.RowFields: None            #PivotField | PivotFields
    self.RowGrand: bool
    self.RowRange: None             #Range
    self.SaveData: bool
    self.SelectionMode: None        #XlPTSelectionMode
    self.ShowDrillIndicators: bool
    self.ShowPageMultipleItemLabel: bool
    self.ShowTableStyleColumnHeaders: bool
    self.ShowTableStyleColumnStripes: bool
    self.ShowTableStyleLastColumn: bool
    self.ShowTableStyleRowHeaders: bool
    self.ShowTableStyleRowStripes: bool
    self.ShowValuesRow: None        #PivotTable
    self.Slicers: None  #Slicers
    self.SmallGrid: bool
    self.SortUsingCustomLists: bool
    self.SourceData: None           #VBA_Variant
    self.SubtotalHiddenPageItems: bool
    self.Summary: None  #PivotTable
    self.TableRange1: None          #Range
    self.TableRange2: None          #Range
    self.TableStyle2: None          #TableStyle2
    self.Tag: str
    self.TotalsAnnotation: bool
    self.VacatedStyle: str
    self.Value: str
    self.Version: None  #XlPivotTableVersionList
    self.ViewCalculatedMembers: bool
    self.VisibleFields: None        #PivotField | PivotFields
    self.VisualTotals: bool
    self.VisualTotalsForSets: bool

  def AddDataField(self, Field, Caption, Function) -> None: pass  #PivotField
  def AddFields(self, RowFields, ColumnFields, PageFields, AddToTable) -> None: pass    #VBA_Variant
  def AllocateChanges(self, ) -> None: pass                       #None
  def CalculatedFields(self, ) -> None: pass                      #CalculatedFields
  def ChangeConnection(self, conn) -> None: pass                  #None
  def ChangePivotCache(self, bstr) -> None: pass                  #None
  def ClearAllFilters(self, ) -> None: pass                       #None
  def ClearTable(self, ) -> None: pass      #None
  def CommitChanges(self, ) -> None: pass   #None
  def ConvertToFormulas(self, ConvertFilters) -> None: pass       #None
  def CreateCubeFile(self, File, Measures, Levels, Members, Properties) -> None: pass   #str
  def DiscardChanges(self, ) -> None: pass  #None
  def DrillDown(self, PivotItem, PivotLine) -> None: pass         #None
  def DrillTo(self, PivotItem, CubeField, PivotLine) -> None: pass                      #None
  def DrillUp(self, PivotItem, PivotLine, LevelUniqueName) -> None: pass                #None
  def GetData(self, Name) -> None: pass     #float
  def GetPivotData(self, DataField, Field1, Item1, Field2, Item2, Field3, Item3, Field4, Item4, Field5, Item5, Field6, Item6, Field7, Item7, Field8, Item8, Field9, Item9, Field10, Item10, Field11, Item11, Field12, Item12, Field13, Item13, Field14, Item14) -> None: pass                 #Range
  def ListFormulas(self, ) -> None: pass    #None
  def PivotCache(self, ) -> None: pass      #PivotCache
  def PivotFields(self, Index) -> None: pass                      #VBA_Object
  def PivotSelect(self, Name, Mode, UseStandardName) -> None: pass                      #None
  def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection) -> None: pass           #None
  def PivotValueCell(self, RowLine, ColumnLine) -> None: pass     #PIVOTVALUECELL
  def RefreshDataSourceValues(self, ) -> None: pass               #None
  def RefreshTable(self, ) -> None: pass    #bool
  def RepeatAllLabels(self, Repeat) -> None: pass                 #None
  def RowAxisLayout(self, RowLayout) -> None: pass                #None
  def ShowPages(self, PageField) -> None: pass                    #VBA_Variant
  def SubtotalLocation(self, Location) -> None: pass              #None
  def Update(self, ) -> None: pass          #None




class PivotTableChangeList:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: float
    self.Parent: None   #PivotTable | PivotTableChangeList

  def Add(self, Tuple, Value, AllocationValue, AllocationMethod, AllocationWeightExpression) -> None: pass    #ValueChange




class PivotTables:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, PivotCache, TableDestination, TableName, ReadData, DefaultVersion) -> None: pass              #PivotTable
  def Item(self, Index) -> None: pass       #PivotTable




class PlotArea:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Height: float
    self.InsideHeight: float
    self.InsideLeft: float
    self.InsideTop: float
    self.InsideWidth: float
    self.Left: float
    self.Name: str
    self.Parent: None   #VBA_Object
    self.Position: None             #XlChartElementPosition
    self.Top: float
    self.Width: float

  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class Point:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.ApplyPictToEnd: bool
    self.ApplyPictToFront: bool
    self.ApplyPictToSides: bool
    self.Creator: int
    self.DataLabel: None            #DataLabel
    self.Explosion: int
    self.Format: None   #ChartFormat
    self.Has3DEffect: bool
    self.HasDataLabel: bool
    self.Height: float
    self.InvertIfNegative: bool
    self.IsTotal: bool
    self.Left: float
    self.MarkerBackgroundColor: int
    self.MarkerBackgroundColorIndex: None       #XlColorIndex | xlColorIndexAutomatic | xlColorIndexNone | int
    self.MarkerForegroundColor: int
    self.MarkerForegroundColorIndex: None       #XlColorIndex | xlColorIndexAutomatic | xlColorIndexNone | int
    self.MarkerSize: None           #points | int
    self.MarkerStyle: None          #XlMarkerStyle
    self.Name: str
    self.Parent: None   #VBA_Object
    self.PictureType: None          #XlChartPictureType
    self.PictureUnit2: float
    self.SecondaryPlot: bool
    self.Shadow: bool
    self.Top: float
    self.Width: float

  def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator) -> None: pass    #None
  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Copy(self, ) -> None: pass            #VBA_Variant
  def Delete(self, ) -> None: pass          #VBA_Variant
  def Paste(self, ) -> None: pass           #VBA_Variant
  def PieSliceLocation(self, loc, Index) -> None: pass            #float
  def Select(self, ) -> None: pass          #VBA_Variant




class Points:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Item(self, Index) -> None: pass       #Point




class ProtectedViewWindow:
  '''just need name'''

  def __init__(self):
    self.Caption: None  #VBA_Variant
    self.EnableResize: bool
    self.Height: float
    self.Left: float
    self.SourceName: str
    self.SourcePath: str
    self.Top: float
    self.Visible: bool
    self.Width: None    #points
    self.WindowState: None          #XlProtectedViewWindowState
    self.Workbook: None             #Workbook

  def Activate(self, ) -> None: pass        #None
  def Close(self, ) -> None: pass           #bool
  def Edit(self, WriteResPassword, UpdateLinks) -> None: pass     #Workbook




class ProtectedViewWindows:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Open(self, FileName, Password, AddToMru, RepairMode) -> None: pass                #ProtectedViewWindow




class Protection:
  '''just need name'''

  def __init__(self):
    self.AllowDeletingColumns: bool
    self.AllowDeletingRows: bool
    self.AllowEditRanges: None      #AllowEditRanges
    self.AllowFiltering: bool
    self.AllowFormattingCells: bool
    self.AllowFormattingColumns: bool
    self.AllowFormattingRows: bool
    self.AllowInsertingColumns: bool
    self.AllowInsertingHyperlinks: bool
    self.AllowInsertingRows: bool
    self.AllowSorting: bool
    self.AllowUsingPivotTables: bool




class PublishObject:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoRepublish: bool
    self.Creator: int
    self.DivID: str
    self.Filename: str
    self.HtmlType: None             #XlHtmlType
    self.Parent: None   #VBA_Object
    self.Sheet: str
    self.Source: None   #VBA_Variant
    self.SourceType: None           #XlSourceType
    self.Title: str

  def Delete(self, ) -> None: pass          #None
  def Publish(self, Create) -> None: pass   #None




class PublishObjects:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, SourceType, FileName, Sheet, Source, HtmlType, DivID, Title) -> None: pass                    #PublishObject
  def Delete(self, ) -> None: pass          #None
  def Publish(self, ) -> None: pass         #None




class Queries:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.FastCombine: bool
    self.Parent: None   #VBA_Object

  def Add(self, Name, Formula, Description) -> None: pass         #WorkbookQuery
  def Item(self, NameOrIndex) -> None: pass                       #WorkbookQuery




class QueryTable:
  '''just need name'''

  def __init__(self):
    self.AdjustColumnWidth: bool
    self.Application: None          #Application
    self.BackgroundQuery: bool
    self.CommandText: None          #VBA_Variant
    self.CommandType: None          #XlCmdType
    self.Connection: None           #QueryTable | Refresh | Add | ListObject
    self.Creator: int
    self.Destination: None          #Range
    self.EditWebPage: None          #VBA_Variant
    self.EnableEditing: bool
    self.EnableRefresh: bool
    self.FetchedRowOverflow: bool
    self.FieldNames: bool
    self.FillAdjacentFormulas: bool
    self.ListObject: None           #ListObject
    self.MaintainConnection: bool
    self.Name: str
    self.Parameters: None           #Parameters
    self.Parent: None   #VBA_Object
    self.PostText: str
    self.PreserveColumnInfo: bool
    self.PreserveFormatting: bool
    self.QueryType: None            #XlQueryType
    self.Recordset: None            #Recordset
    self.RefreshOnFileOpen: bool
    self.RefreshPeriod: int
    self.RefreshStyle: None         #XlCellInsertionMode
    self.Refreshing: bool
    self.ResultRange: None          #Range
    self.RobustConnect: None        #XlRobustConnect
    self.RowNumbers: bool
    self.SaveData: bool
    self.SavePassword: bool
    self.Sort: None     #VBA_Object
    self.SourceConnectionFile: str
    self.SourceDataFile: str
    self.TextFileColumnDataTypes: None          #VBA_Variant
    self.TextFileCommaDelimiter: bool
    self.TextFileConsecutiveDelimiter: bool
    self.TextFileDecimalSeparator: str
    self.TextFileFixedColumnWidths: None        #VBA_Variant
    self.TextFileOtherDelimiter: str
    self.TextFileParseType: None    #XlTextParsingType
    self.TextFilePlatform: None     #XlPlatform
    self.TextFilePromptOnRefresh: bool
    self.TextFileSemicolonDelimiter: bool
    self.TextFileSpaceDelimiter: bool
    self.TextFileStartRow: int
    self.TextFileTabDelimiter: bool
    self.TextFileTextQualifier: None            #XlTextQualifier
    self.TextFileThousandsSeparator: str
    self.TextFileTrailingMinusNumbers: bool
    self.TextFileVisualLayout: None             #XlTextVisualLayoutType
    self.WebConsecutiveDelimitersAsOne: bool
    self.WebDisableDateRecognition: bool
    self.WebDisableRedirections: bool
    self.WebFormatting: None        #XlWebFormatting
    self.WebPreFormattedTextToColumns: bool
    self.WebSelectionType: None     #XlWebSelectionType
    self.WebSingleBlockTextImport: bool
    self.WebTables: str
    self.WorkbookConnection: None   #WorkbookConnection

  def CancelRefresh(self, ) -> None: pass   #None
  def Delete(self, ) -> None: pass          #None
  def Refresh(self, BackgroundQuery) -> None: pass                #bool
  def ResetTimer(self, ) -> None: pass      #None
  def SaveAsODC(self, ODCFileName, Description, Keywords) -> None: pass                 #None




class QueryTables:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Connection, Destination, Sql) -> None: pass       #QueryTable
  def Item(self, Index) -> None: pass       #QueryTable




class QuickAnalysis:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Creator: None  #XLCREATOR
    self.Parent: None   #VBA_Object

  def Hide(self, XlQuickAnalysisMode) -> None: pass               #None
  def Show(self, XlQuickAnalysisMode) -> None: pass               #None




class RTD:
  '''just need name'''

  def __init__(self):
    self.ThrottleInterval: int

  def RefreshData(self, ) -> None: pass     #None
  def RestartServers(self, ) -> None: pass  #None




class Range:
  '''just need name'''

  def __init__(self):
    self.AddIndent: None            #VBA_Variant
    self.Address: str
    self.AddressLocal: str
    self.AllowEdit: bool
    self.Application: None          #Application
    self.Areas: None    #Areas
    self.Borders: None  #Borders
    self.Cells: None    #VBA_Object
    self.Characters: None           #Characters
    self.Column: int
    self.ColumnWidth: float
    self.Columns: None  #VBA_Object
    self.Comment: None  #VBA_Object
    self.CommentThreaded: None      #VBA_Object
    self.Count: int
    self.CountLarge: None           #VBA_Variant
    self.Creator: int
    self.CurrentArray: None         #Range
    self.CurrentRegion: None        #Range
    self.Dependents: None           #Range
    self.DirectDependents: None     #Range
    self.DirectPrecedents: None     #Range
    self.DisplayFormat: None        #DisplayFormat
    self.End: None      #Range
    self.EntireColumn: None         #Range
    self.EntireRow: None            #Range
    self.Errors: None   #Range | Errors
    self.Font: None     #VBA_Object
    self.FormatConditions: None     #FormatConditions
    self.Formula: None  #VBA_Variant
    self.FormulaArray: None         #VBA_Variant
    self.FormulaHidden: None        #VBA_Variant
    self.FormulaLocal: None         #VBA_Variant
    self.FormulaR1C1: None          #VBA_Variant
    self.FormulaR1C1Local: None     #VBA_Variant
    self.HasArray: None             #VBA_Variant
    self.HasFormula: None           #VBA_Variant
    self.HasRichDataType: None      #VBA_Variant
    self.Height: None   #float | points
    self.Hidden: None   #VBA_Variant
    self.HorizontalAlignment: None  #VBA_Object
    self.Hyperlinks: None           #Hyperlinks
    self.ID: str
    self.IndentLevel: None          #VBA_Variant
    self.Interior: None             #Interior
    self.Item: None     #Range
    self.Left: None     #VBA_Variant
    self.LinkedDataTypeState: None  #XlLinkedDataTypeState
    self.ListHeaderRows: int
    self.ListObject: None           #ListObject
    self.LocationInTable: int
    self.Locked: None   #VBA_Variant
    self.MDX: str
    self.MergeArea: None            #VBA_Variant
    self.MergeCells: None           #VBA_Variant
    self.Name: None     #VBA_Variant
    self.Next: None     #VBA_Object
    self.NumberFormat: None         #VBA_Variant
    self.NumberFormatLocal: None    #VBA_Variant
    self.Offset: None   #Range
    self.Orientation: None          #VBA_Variant
    self.OutlineLevel: None         #VBA_Variant
    self.PageBreak: None            #XlPageBreak | xlPageBreakAutomatic | xlPageBreakManual | xlPageBreakNone | int
    self.Parent: None   #VBA_Object
    self.Phonetic: None             #Phonetic
    self.Phonetics: None            #Phonetics
    self.PivotCell: None            #PivotCell
    self.PivotField: None           #VBA_Object
    self.PivotItem: None            #VBA_Object
    self.PivotTable: None           #VBA_Object
    self.Precedents: None           #Range
    self.PrefixCharacter: None      #VBA_Variant
    self.Previous: None             #VBA_Object
    self.QueryTable: None           #VBA_Object
    self.Range: None    #Range
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int
    self.Resize: None   #Range
    self.Row: int
    self.RowHeight: float
    self.Rows: None     #VBA_Object
    self.ServerActions: None        #Range
    self.ShowDetail: None           #VBA_Variant
    self.ShrinkToFit: None          #VBA_Variant
    self.SoundNote: None            #Range
    self.SparklineGroups: None      #SparklineGroups
    self.Style: None    #VBA_Variant
    self.Summary: None  #VBA_Variant
    self.Text: str
    self.Top: None      #VBA_Variant
    self.UseStandardHeight: None    #VBA_Variant
    self.UseStandardWidth: None     #VBA_Variant
    self.Validation: None           #Validation
    self.Value: None    #VBA_Variant
    self.Value2: None   #VBA_Variant
    self.VerticalAlignment: None    #VBA_Object
    self.Width: None    #float | points
    self.Worksheet: None            #Worksheet
    self.WrapText: None             #VBA_Variant
    self.XPath: None    #XPath | Range

  def Activate(self, ) -> None: pass        #VBA_Variant
  def AddComment(self, Text) -> None: pass  #Comment
  def AddCommentThreaded(self, Text) -> None: pass                #CommentThreaded
  def AdvancedFilter(self, Action, CriteriaRange, CopyToRange, Unique) -> None: pass    #VBA_Variant
  def AllocateChanges(self, ) -> None: pass                       #None
  def ApplyNames(self, Names, IgnoreRelativeAbsolute, UseRowColumnNames, OmitColumn, OmitRow, Order, AppendLast) -> None: pass      #VBA_Variant
  def ApplyOutlineStyles(self, ) -> None: pass                    #VBA_Variant
  def AutoComplete(self, String) -> None: pass                    #str
  def AutoFill(self, Destination, Type) -> None: pass             #VBA_Variant
  def AutoFilter(self, Field, Criteria1, Operator, Criteria2, SubField, VisibleDropDown) -> None: pass        #VBA_Variant
  def AutoFit(self, ) -> None: pass         #VBA_Variant
  def AutoOutline(self, ) -> None: pass     #VBA_Variant
  def BorderAround(self, LineStyle, Weight, ColorIndex, Color, ThemeColor) -> None: pass                      #VBA_Variant
  def Calculate(self, ) -> None: pass       #VBA_Variant
  def CalculateRowMajorOrder(self, ) -> None: pass                #VBA_Variant
  def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang) -> None: pass          #VBA_Variant
  def Clear(self, ) -> None: pass           #VBA_Variant
  def ClearComments(self, ) -> None: pass   #None
  def ClearContents(self, ) -> None: pass   #VBA_Variant
  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def ClearHyperlinks(self, ) -> None: pass                       #None
  def ClearNotes(self, ) -> None: pass      #VBA_Variant
  def ClearOutline(self, ) -> None: pass    #VBA_Variant
  def ColumnDifferences(self, Comparison) -> None: pass           #Range
  def Consolidate(self, Sources, Function, TopRow, LeftColumn, CreateLinks) -> None: pass                     #VBA_Variant
  def ConvertToLinkedDataType(self, ServiceID, LanguageCulture) -> None: pass           #None
  def Copy(self, Destination) -> None: pass                       #VBA_Variant
  def CopyFromRecordset(self, Data, MaxRows, MaxColumns) -> None: pass                  #int
  def CopyPicture(self, Appearance, Format) -> None: pass         #VBA_Variant
  def CreateNames(self, Top, Left, Bottom, Right) -> None: pass   #VBA_Variant
  def Cut(self, Destination) -> None: pass  #VBA_Variant
  def DataSeries(self, Rowcol, Type, Date, Step, Stop, Trend) -> None: pass             #VBA_Variant
  def DataTypeToText(self, ) -> None: pass  #None
  def Delete(self, Shift) -> None: pass     #VBA_Variant
  def DialogBox(self, ) -> None: pass       #VBA_Variant
  def Dirty(self, ) -> None: pass           #None
  def DiscardChanges(self, ) -> None: pass  #None
  def EditionOptions(self, Type, Option, Name, Reference, Appearance, ChartSize, Format) -> None: pass        #VBA_Variant
  def ExportAsFixedFormat(self, Type, FileName, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr) -> None: pass              #None
  def FillDown(self, ) -> None: pass        #VBA_Variant
  def FillLeft(self, ) -> None: pass        #VBA_Variant
  def FillRight(self, ) -> None: pass       #VBA_Variant
  def FillUp(self, ) -> None: pass          #VBA_Variant
  def Find(self, What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, SearchFormat) -> None: pass       #Range
  def FindNext(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass   #Range
  def FindPrevious(self, Before) -> None: pass                    #Range
  def FlashFill(self, ) -> None: pass       #None
  def FunctionWizard(self, ) -> None: pass  #VBA_Variant
  def Group(self, Start, End, By, Periods) -> None: pass          #VBA_Variant
  def Insert(self, Shift, CopyOrigin) -> None: pass               #VBA_Variant
  def InsertIndent(self, InsertAmount) -> None: pass              #None
  def Justify(self, ) -> None: pass         #VBA_Variant
  def ListNames(self, ) -> None: pass       #VBA_Variant
  def Merge(self, Across) -> None: pass     #None
  def NavigateArrow(self, TowardPrecedent, ArrowNumber, LinkNumber) -> None: pass       #VBA_Variant
  def NoteText(self, Text, Start, Length) -> None: pass           #str
  def Parse(self, ParseLine, Destination) -> None: pass           #VBA_Variant
  def PasteSpecial(self, Paste, Operation, SkipBlanks, Transpose) -> None: pass         #VBA_Variant
  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName) -> None: pass                    #VBA_Variant
  def PrintPreview(self, EnableChanges) -> None: pass             #VBA_Variant
  def RemoveDuplicates(self, Columns, Header) -> None: pass       #None
  def RemoveSubtotal(self, ) -> None: pass  #VBA_Variant
  def Replace(self, What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, SearchFormat, ReplaceFormat) -> None: pass        #bool
  def RowDifferences(self, Comparison) -> None: pass              #Range
  def Run(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant
  def SetCellDataTypeFromCell(self, Range, LanguageCulture) -> None: pass               #None
  def SetPhonetic(self, ) -> None: pass     #None
  def Show(self, ) -> None: pass            #VBA_Variant
  def ShowCard(self, ) -> None: pass        #None
  def ShowDependents(self, Remove) -> None: pass                  #VBA_Variant
  def ShowErrors(self, ) -> None: pass      #VBA_Variant
  def ShowPrecedents(self, Remove) -> None: pass                  #VBA_Variant
  def Sort(self, Key1, Order1, Key2, Type, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, SortMethod, DataOption1, DataOption2, DataOption3) -> None: pass  #VBA_Variant
  def SortSpecial(self, SortMethod, Key1, Order1, Type, Key2, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, DataOption1, DataOption2, DataOption3) -> None: pass                 #VBA_Variant
  def Speak(self, SpeakDirection, SpeakFormulas) -> None: pass    #None
  def SpecialCells(self, Type, Value) -> None: pass               #Range
  def SubscribeTo(self, Edition, Format) -> None: pass            #VBA_Variant
  def Subtotal(self, GroupBy, Function, TotalList, Replace, PageBreaks, SummaryBelowData) -> None: pass       #VBA_Variant
  def Table(self, RowInput, ColumnInput) -> None: pass            #VBA_Variant
  def TextToColumns(self, Destination, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers) -> None: pass  #VBA_Variant
  def UnMerge(self, ) -> None: pass         #None
  def Ungroup(self, ) -> None: pass         #VBA_Variant




class RecentFile:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Index: int
    self.Name: str
    self.Parent: None   #VBA_Object
    self.Path: str

  def Delete(self, ) -> None: pass          #None
  def Open(self, ) -> None: pass            #Workbook




class RecentFiles:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Maximum: int
    self.Parent: None   #VBA_Object

  def Add(self, Name) -> None: pass         #RecentFile




class Series:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.ApplyPictToEnd: bool
    self.ApplyPictToFront: bool
    self.ApplyPictToSides: bool
    self.AxisGroup: None            #XlAxisGroup
    self.BarShape: None             #XlBarShape
    self.BubbleSizes: None          #VBA_Variant
    self.ChartType: None            #XlChartType
    self.Creator: int
    self.ErrorBars: None            #ErrorBars
    self.Explosion: int
    self.Format: None   #ChartFormat
    self.Formula: str
    self.FormulaLocal: str
    self.FormulaR1C1: str
    self.FormulaR1C1Local: str
    self.GeoMappingLevel: None      #XlGeoMappingLevel
    self.GeoProjectionType: None    #XlGeoProjectionType
    self.Has3DEffect: bool
    self.HasDataLabels: bool
    self.HasErrorBars: bool
    self.HasLeaderLines: bool
    self.InvertColor: int
    self.InvertColorIndex: int
    self.InvertIfNegative: bool
    self.IsFiltered: bool
    self.LeaderLines: None          #LeaderLines
    self.MarkerBackgroundColor: int
    self.MarkerBackgroundColorIndex: None       #XlColorIndex | xlColorIndexAutomatic | xlColorIndexNone | int
    self.MarkerForegroundColor: int
    self.MarkerForegroundColorIndex: None       #XlColorIndex | xlColorIndexAutomatic | xlColorIndexNone | int
    self.MarkerSize: None           #points | int
    self.MarkerStyle: None          #XlMarkerStyle
    self.Name: str
    self.Parent: None   #VBA_Object
    self.ParentDataLabelOption: None            #XlParentDataLabelOptions
    self.PictureType: None          #XlChartPictureType
    self.PictureUnit2: float
    self.PlotColorIndex: int
    self.PlotOrder: int
    self.QuartileCalculationInclusiveMedian: bool
    self.RegionLabelOptions: None   #XlRegionLabelOptions
    self.Shadow: bool
    self.Smooth: bool
    self.Type: int
    self.Values: None   #VBA_Variant
    self.XValues: None  #VBA_Variant

  def ApplyDataLabels(self, Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator) -> None: pass    #None
  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Copy(self, ) -> None: pass            #VBA_Variant
  def DataLabels(self, Index) -> None: pass                       #VBA_Object
  def Delete(self, ) -> None: pass          #VBA_Variant
  def ErrorBar(self, Direction, Include, Type, Amount, MinusValues) -> None: pass       #VBA_Variant
  def Paste(self, ) -> None: pass           #VBA_Variant
  def Points(self, Index) -> None: pass     #VBA_Object
  def Select(self, ) -> None: pass          #VBA_Variant
  def Trendlines(self, Index) -> None: pass                       #VBA_Object




class SeriesCollection:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Source, Rowcol, SeriesLabels, CategoryLabels, Replace) -> None: pass    #Series
  def Extend(self, Source, RowCol, CategoryLabels) -> None: pass  #VBA_Variant
  def Item(self, Index) -> None: pass       #Series
  def NewSeries(self, ) -> None: pass       #Series
  def Paste(self, RowCol, SeriesLabels, CategoryLabels, Replace, NewSeries) -> None: pass                     #VBA_Variant




class SeriesLines:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Border: None   #VBA_Object
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class ShadowFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Blur: float
    self.Creator: int
    self.ForeColor: None            #ColorFormat
    self.Obscured: bool
    self.OffsetX: float
    self.OffsetY: float
    self.Parent: None   #VBA_Object
    self.RotateWithShape: None      #MsoTriState
    self.Size: float
    self.Style: None    #MsoShadowStyle
    self.Transparency: float
    self.Type: None     #MsoShadowType
    self.Visible: None  #MsoTriState

  def IncrementOffsetX(self, Increment) -> None: pass             #None
  def IncrementOffsetY(self, Increment) -> None: pass             #None




class Shape:
  '''just need name'''

  def __init__(self):
    self.Adjustments: None          #Adjustments
    self.AlternativeText: str
    self.Application: None          #Application
    self.AutoShapeType: None        #MsoAutoShapeType
    self.BackgroundStyle: None      #MsoBackgroundStyleIndex
    self.BlackWhiteMode: None       #MsoBlackWhiteMode
    self.BottomRightCell: None      #Range
    self.Callout: None  #CalloutFormat | Shape
    self.Chart: None    #Chart
    self.Child: None    #MsoTriState
    self.ConnectionSiteCount: int
    self.Connector: None            #MsoTriState
    self.ConnectorFormat: None      #ConnectorFormat | Shape
    self.ControlFormat: None        #ControlFormat
    self.Creator: int
    self.Decorative: None           #VBA_Object
    self.Fill: None     #FillFormat | ChartFillFormat
    self.FormControlType: None      #XlFormControl
    self.Glow: None     #GlowFormat
    self.GraphicStyle: None         #MsoGraphicStyleIndex
    self.GroupItems: None           #GroupShapes | Item | Shape
    self.HasChart: None             #MsoTriState
    self.HasSmartArt: None          #MsoTriState
    self.Height: float
    self.HorizontalFlip: None       #MsoTriState
    self.Hyperlink: None            #VBA_Object
    self.ID: int
    self.Left: float
    self.Line: None     #LineFormat
    self.LinkFormat: None           #LinkFormat
    self.LockAspectRatio: None      #MsoTriState
    self.Locked: bool
    self.Model3D: None  #Model3DFormat
    self.Name: str
    self.Nodes: None    #ShapeNodes
    self.OLEFormat: None            #OLEFormat
    self.OnAction: str
    self.Parent: None   #VBA_Object
    self.ParentGroup: None          #VBA_Object
    self.PictureFormat: None        #PictureFormat | Shape
    self.Placement: None            #XlPlacement
    self.Reflection: None           #ReflectionFormat
    self.Rotation: float
    self.Shadow: None   #ShadowFormat
    self.ShapeStyle: None           #MsoShapeStyleIndex
    self.SmartArt: None             #SmartArt
    self.SoftEdge: None             #SoftEdgeFormat
    self.TextEffect: None           #TextEffectFormat
    self.TextFrame: None            #TextFrame
    self.TextFrame2: None           #TextFrame2
    self.ThreeD: None   #ThreeDFormat
    self.Title: str
    self.Top: float
    self.TopLeftCell: None          #Range
    self.Type: None     #MsoShapeType
    self.VerticalFlip: None         #MsoTriState
    self.Vertices: None             #VBA_Variant
    self.Visible: None  #MsoTriState
    self.Width: float
    self.ZOrderPosition: int

  def Apply(self, ) -> None: pass           #None
  def Copy(self, ) -> None: pass            #None
  def CopyPicture(self, Appearance, Format) -> None: pass         #None
  def Cut(self, ) -> None: pass             #None
  def Delete(self, ) -> None: pass          #None
  def Duplicate(self, ) -> None: pass       #Shape
  def Flip(self, FlipCmd) -> None: pass     #None
  def IncrementLeft(self, Increment) -> None: pass                #None
  def IncrementRotation(self, Increment) -> None: pass            #None
  def IncrementTop(self, Increment) -> None: pass                 #None
  def PickUp(self, ) -> None: pass          #None
  def RerouteConnections(self, ) -> None: pass                    #None
  def ScaleHeight(self, Factor, RelativeToOriginalSize, Scale) -> None: pass            #None
  def ScaleWidth(self, Factor, RelativeToOriginalSize, Scale) -> None: pass             #None
  def Select(self, Replace) -> None: pass   #None
  def SetShapesDefaultProperties(self, ) -> None: pass            #None
  def Ungroup(self, ) -> None: pass         #ShapeRange
  def ZOrder(self, ZOrderCmd) -> None: pass                       #None




class ShapeNode:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.EditingType: None          #MsoEditingType
    self.Parent: None   #VBA_Object
    self.Points: None   #VBA_Variant
    self.SegmentType: None          #MsoSegmentType




class ShapeNodes:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Delete(self, Index) -> None: pass     #None
  def Insert(self, Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3) -> None: pass                     #None
  def Item(self, Index) -> None: pass       #ShapeNode
  def SetEditingType(self, Index, EditingType) -> None: pass      #None
  def SetPosition(self, Index, X1, Y1) -> None: pass              #None
  def SetSegmentType(self, Index, SegmentType) -> None: pass      #None




class ShapeRange:
  '''just need name'''

  def __init__(self):
    self.Adjustments: None          #Adjustments
    self.AlternativeText: str
    self.Application: None          #Application
    self.AutoShapeType: None        #MsoAutoShapeType
    self.BackgroundStyle: None      #MsoBackgroundStyleIndex
    self.BlackWhiteMode: None       #MsoBlackWhiteMode
    self.Callout: None  #CalloutFormat | ShapeRange
    self.Chart: None    #Chart
    self.Child: None    #MsoTriState
    self.ConnectionSiteCount: int
    self.Connector: None            #MsoTriState
    self.ConnectorFormat: None      #ConnectorFormat | ShapeRange
    self.Count: int
    self.Creator: int
    self.Decorative: None           #VBA_Object
    self.Fill: None     #FillFormat | ChartFillFormat
    self.Glow: None     #GlowFormat
    self.GraphicStyle: None         #MsoGraphicStyleIndex
    self.GroupItems: None           #GroupShapes | Item | ShapeRange
    self.HasChart: None             #MsoTriState
    self.Height: float
    self.HorizontalFlip: None       #MsoTriState
    self.ID: int
    self.Left: float
    self.Line: None     #LineFormat
    self.LockAspectRatio: None      #MsoTriState
    self.Model3D: None  #Model3DFormat
    self.Name: str
    self.Nodes: None    #ShapeNodes
    self.Parent: None   #VBA_Object
    self.ParentGroup: None          #VBA_Object
    self.PictureFormat: None        #PictureFormat | ShapeRange
    self.Reflection: None           #ReflectionFormat
    self.Rotation: float
    self.Shadow: None   #ShadowFormat
    self.ShapeStyle: None           #MsoShapeStyleIndex
    self.SoftEdge: None             #SoftEdgeFormat
    self.TextEffect: None           #TextEffectFormat
    self.TextFrame: None            #TextFrame
    self.TextFrame2: None           #TextFrame2
    self.ThreeD: None   #ThreeDFormat
    self.Title: str
    self.Top: float
    self.Type: None     #MsoShapeType
    self.VerticalFlip: None         #MsoTriState
    self.Vertices: None             #VBA_Variant
    self.Visible: None  #MsoTriState
    self.Width: float
    self.ZOrderPosition: int

  def Align(self, AlignCmd, RelativeTo) -> None: pass             #None
  def Apply(self, ) -> None: pass           #None
  def Delete(self, ) -> None: pass          #None
  def Distribute(self, DistributeCmd, RelativeTo) -> None: pass   #None
  def Duplicate(self, ) -> None: pass       #None
  def Flip(self, FlipCmd) -> None: pass     #None
  def Group(self, ) -> None: pass           #Shape
  def IncrementLeft(self, Increment) -> None: pass                #None
  def IncrementRotation(self, Increment) -> None: pass            #None
  def IncrementTop(self, Increment) -> None: pass                 #None
  def Item(self, Index) -> None: pass       #Shape
  def PickUp(self, ) -> None: pass          #None
  def Regroup(self, ) -> None: pass         #Shape
  def RerouteConnections(self, ) -> None: pass                    #None
  def ScaleHeight(self, Factor, RelativeToOriginalSize, Scale) -> None: pass            #None
  def ScaleWidth(self, Factor, RelativeToOriginalSize, Scale) -> None: pass             #None
  def Select(self, Replace) -> None: pass   #None
  def SetShapesDefaultProperties(self, ) -> None: pass            #None
  def Ungroup(self, ) -> None: pass         #ShapeRange
  def ZOrder(self, ZOrderCmd) -> None: pass                       #None




class Shapes:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.Range: None    #ShapeRange

  def Add3DModel(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height) -> None: pass        #Shape
  def AddCallout(self, Type, Left, Top, Width, Height) -> None: pass                    #Shape
  def AddChart2(self, Style, XlChartType, Left, Top, Width, Height, NewLayout) -> None: pass                  #Shape
  def AddConnector(self, Type, BeginX, BeginY, EndX, EndY) -> None: pass                #Shape
  def AddCurve(self, SafeArrayOfPoints) -> None: pass             #Shape
  def AddFormControl(self, Type, Left, Top, Width, Height) -> None: pass                #Shape
  def AddLabel(self, Orientation, Left, Top, Width, Height) -> None: pass               #Shape
  def AddLine(self, BeginX, BeginY, EndX, EndY) -> None: pass     #Shape
  def AddOLEObject(self, ClassType, FileName, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height) -> None: pass            #Shape
  def AddPicture(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height) -> None: pass        #Shape
  def AddPicture2(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, compress) -> None: pass                   #Shape
  def AddPolyline(self, SafeArrayOfPoints) -> None: pass          #Shape
  def AddShape(self, Type, Left, Top, Width, Height) -> None: pass                      #Shape
  def AddSmartArt(self, Layout, Left, Top, Width, Height) -> None: pass                 #Shape
  def AddTextEffect(self, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top) -> None: pass                #Shape
  def AddTextbox(self, Orientation, Left, Top, Width, Height) -> None: pass             #Shape
  def BuildFreeform(self, EditingType, X1, Y1) -> None: pass      #FreeformBuilder
  def Item(self, Index) -> None: pass       #Shape
  def SelectAll(self, ) -> None: pass       #None




class SheetViews:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #SheetView
    self.Parent: None   #VBA_Object




class Sheets:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.HPageBreaks: None          #HPageBreaks
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object
    self.VPageBreaks: None          #VPageBreaks
    self.Visible: None  #VBA_Variant

  def Add(self, Before, After, Count, Type) -> None: pass         #VBA_Object
  def Add2(self, Before, After, Count, NewLayout) -> None: pass   #VBA_Object
  def Copy(self, Before, After) -> None: pass                     #None
  def Delete(self, ) -> None: pass          #None
  def FillAcrossSheets(self, Range, Type) -> None: pass           #None
  def Move(self, Before, After) -> None: pass                     #None
  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas) -> None: pass  #VBA_Variant
  def PrintPreview(self, EnableChanges) -> None: pass             #None
  def Select(self, Replace) -> None: pass   #None




class Slicer:
  '''just need name'''

  def __init__(self):
    self.ActiveItem: None           #SlicerItem
    self.Application: None          #Application
    self.Caption: str
    self.ColumnWidth: float
    self.Creator: int
    self.DisableMoveResizeUI: bool
    self.DisplayHeader: bool
    self.Height: float
    self.Left: float
    self.Locked: bool
    self.Name: str
    self.NumberOfColumns: int
    self.Parent: None   #Worksheet
    self.RowHeight: float
    self.Shape: None    #Shape
    self.SlicerCache: None          #SlicerCache
    self.SlicerCacheLevel: None     #SlicerCacheLevel
    self.SlicerCacheType: None      #XLSLICERCACHETYPE
    self.Style: None    #VBA_Variant
    self.TimelineViewState: None    #TIMELINEVIEWSTATE
    self.Top: float
    self.Width: float

  def Copy(self, ) -> None: pass            #None
  def Cut(self, ) -> None: pass             #None
  def Delete(self, ) -> None: pass          #None




class SlicerCache:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.CrossFilterType: None      #XlSlicerCrossFilterType
    self.FilterCleared: bool
    self.Index: None    #SlicerCache | SlicerCaches
    self.List: bool
    self.ListObject: None           #LISTOBJECT
    self.Name: str
    self.OLAP: bool
    self.Parent: None   #SlicerCaches | SlicerCache
    self.PivotTables: None          #PivotTables
    self.RequireManualUpdate: bool
    self.ShowAllItems: bool
    self.SlicerCacheLevels: None    #SlicerCacheLevel
    self.SlicerCacheType: None      #XLSLICERCACHETYPE
    self.SlicerItems: None          #SlicerItems
    self.Slicers: None  #Slicers
    self.SortItems: None            #XlSlicerSort
    self.SortUsingCustomLists: None             #SlicerCache | OLAP
    self.SourceName: str
    self.SourceType: None           #XlPivotTableSourceType
    self.TimelineState: None        #TIMELINESTATE
    self.VisibleSlicerItems: None   #SlicerItems
    self.VisibleSlicerItemsList: None           #VBA_Variant
    self.WorkbookConnection: None   #WorkbookConnection

  def ClearAllFilters(self, ) -> None: pass                       #None
  def ClearDateFilter(self, ) -> None: pass                       #None
  def ClearManualFilter(self, ) -> None: pass                     #None
  def Delete(self, ) -> None: pass          #None




class SlicerCacheLevel:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.CrossFilterType: None      #XlSlicerCrossFilterType
    self.Name: str
    self.Ordinal: int
    self.Parent: None   #SlicerCache | SlicerCacheLevel
    self.SlicerItems: None          #SlicerItems
    self.SortItems: None            #XlSlicerSort
    self.VisibleSlicerItemsList: None           #VBA_Variant




class SlicerCacheLevels:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #SlicerCacheLevel
    self.Parent: None   #SlicerCache | SlicerCacheLevels




class SlicerCaches:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #SlicerCache
    self.Parent: None   #Workbook

  def Add(self, Source, SourceField, Name, SlicerCacheType) -> None: pass               #SlicerCache




class SlicerItem:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Caption: str
    self.Creator: int
    self.HasData: bool
    self.Name: str
    self.Parent: None   #SlicerCache
    self.Selected: bool
    self.SourceName: None           #VBA_Variant
    self.SourceNameStandard: str
    self.Value: str




class SlicerItems:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #SlicerItem
    self.Parent: None   #SlicerCache




class SlicerPivotTables:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #PivotTable
    self.Parent: None   #SlicerCache | SlicerPivotTables

  def AddPivotTable(self, PivotTable) -> None: pass               #None
  def RemovePivotTable(self, PivotTable) -> None: pass            #None




class Slicers:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #Slicer
    self.Parent: None   #SlicerCache | Slicers

  def Add(self, SlicerDestination, Level, Name, Caption, Top, Left, Width, Height) -> None: pass              #Slicer




class Sort:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Header: None   #XlYesNoGuess
    self.MatchCase: bool
    self.Orientation: None          #XlSortOrientation
    self.Parent: None   #VBA_Object
    self.Rng: None      #VBA_Object
    self.SortFields: None           #SortFields | Sort
    self.SortMethod: None           #XlSortMethod

  def Apply(self, ) -> None: pass           #None
  def SetRange(self, Rng) -> None: pass     #None




class SortField:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.CustomOrder: None          #VBA_Variant
    self.DataOption: None           #XlSortDataOption
    self.Key: None      #VBA_Object
    self.Order: None    #SortField
    self.Parent: None   #VBA_Object
    self.Priority: None             #SortField
    self.SortOn: None   #XlSortOn
    self.SortOnValue: None          #SortField

  def Delete(self, ) -> None: pass          #None
  def ModifyKey(self, Key) -> None: pass    #None
  def SetIcon(self, Icon) -> None: pass     #None




class SortFields:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #SortField
    self.Parent: None   #VBA_Object

  def Add(self, Key, SortOn, Order, CustomOrder, DataOption) -> None: pass              #SortField
  def Add2(self, Key, SortOn, Order, CustomOrder, DataOption, SubField) -> None: pass   #SortField
  def Clear(self, ) -> None: pass           #None




class SparkAxes:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Horizontal: None           #SparkHorizontalAxis
    self.Parent: None   #SparklineGroup
    self.Vertical: None             #SparkVerticalAxis




class SparkColor:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Color: None    #FormatColor
    self.Creator: int
    self.Parent: None   #SparklineGroup
    self.Visible: bool




class SparkHorizontalAxis:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Axis: None     #SparkColor
    self.Creator: int
    self.IsDateAxis: bool
    self.Parent: None   #SparklineGroup
    self.RightToLeftPlotOrder: bool




class SparkPoints:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Firstpoint: None           #SparkColor
    self.Highpoint: None            #SparkColor
    self.Lastpoint: None            #SparkColor
    self.Lowpoint: None             #SparkColor
    self.Markers: None  #SparkColor
    self.Negative: None             #SparkColor
    self.Parent: None   #SparklineGroup




class SparkVerticalAxis:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.CustomMaxScaleValue: None  #VBA_Variant
    self.CustomMinScaleValue: None  #VBA_Variant
    self.MaxScaleType: None         #XlSparkScale
    self.MinScaleType: None         #XlSparkScale
    self.Parent: None   #SparklineGroup




class Sparkline:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Location: None             #Range
    self.Parent: None   #SparklineGroup
    self.SourceData: str

  def ModifyLocation(self, Range) -> None: pass                   #None
  def ModifySourceData(self, Formula) -> None: pass               #None




class SparklineGroup:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Axes: None     #SparkAxes
    self.Count: int
    self.Creator: int
    self.DateRange: str
    self.DisplayBlanksAs: None      #XLDISPLAYBLANKSAS
    self.DisplayHidden: bool
    self.Item: None     #Sparkline
    self.LineWeight: None           #VBA_Variant
    self.Location: None             #Range
    self.Parent: None   #VBA_Object
    self.PlotBy: None   #XLSPARKLINEROWCOL
    self.Points: None   #SPARKPOINTS
    self.SeriesColor: None          #FormatColor
    self.SourceData: str
    self.Type: None     #XlSparkType

  def Delete(self, ) -> None: pass          #None
  def Modify(self, Location, SourceData) -> None: pass            #None
  def ModifyDateRange(self, DateRange) -> None: pass              #None
  def ModifyLocation(self, Location) -> None: pass                #None
  def ModifySourceData(self, SourceData) -> None: pass            #None




class SparklineGroups:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #SparklineGroup
    self.Parent: None   #Range

  def Add(self, Type, SourceData) -> None: pass                   #SparklineGroup
  def Clear(self, ) -> None: pass           #None
  def ClearGroups(self, ) -> None: pass     #None
  def Group(self, Location) -> None: pass   #None
  def Ungroup(self, ) -> None: pass         #None




class Speech:
  '''just need name'''

  def __init__(self):
    self.Direction: None            #XlSpeakDirection
    self.SpeakCellOnEnter: bool

  def Speak(self, Text, SpeakAsync, SpeakXML, Purge) -> None: pass                      #None




class SpellingOptions:
  '''just need name'''

  def __init__(self):
    self.ArabicModes: None          #XlArabicModes
    self.ArabicStrictAlefHamza: bool
    self.ArabicStrictFinalYaa: bool
    self.ArabicStrictTaaMarboota: bool
    self.BrazilReform: None         #XlPortugueseReform
    self.DictLang: int
    self.GermanPostReform: bool
    self.HebrewModes: None          #XlHebrewModes
    self.IgnoreCaps: bool
    self.IgnoreFileNames: bool
    self.IgnoreMixedDigits: bool
    self.KoreanCombineAux: bool
    self.KoreanProcessCompound: bool
    self.KoreanUseAutoChangeList: bool
    self.PortugalReform: None       #XlPortugueseReform
    self.RussianStrictE: bool
    self.SpanishModes: None         #XlSpanishModes
    self.SuggestMainOnly: bool
    self.UserDict: str




class Style:
  '''just need name'''

  def __init__(self):
    self.AddIndent: bool
    self.Application: None          #Application
    self.Borders: None  #Borders
    self.BuiltIn: bool
    self.Creator: int
    self.Font: None     #VBA_Object
    self.FormulaHidden: bool
    self.HorizontalAlignment: None  #XlHAlign
    self.IncludeAlignment: bool
    self.IncludeBorder: bool
    self.IncludeFont: bool
    self.IncludeNumber: bool
    self.IncludePatterns: bool
    self.IncludeProtection: bool
    self.IndentLevel: int
    self.Interior: None             #Interior
    self.Locked: bool
    self.MergeCells: None           #VBA_Variant
    self.Name: str
    self.NameLocal: str
    self.NumberFormat: str
    self.NumberFormatLocal: str
    self.Orientation: None          #XlOrientation
    self.Parent: None   #VBA_Object
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int
    self.ShrinkToFit: bool
    self.Value: str
    self.VerticalAlignment: None    #XlVAlign
    self.WrapText: bool

  def Delete(self, ) -> None: pass          #VBA_Variant




class Styles:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Name) -> None: pass         #Style
  def Merge(self, Workbook) -> None: pass   #VBA_Variant




class Tab:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Color: None    #VBA_Variant
    self.ColorIndex: None           #VBA_Variant
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.ThemeColor: None           #XlThemeColor
    self.TintAndShade: float




class TableObject:
  '''just need name'''

  def __init__(self):
    self.AdjustColumnWidth: bool
    self.Application: None          #APPLICATION
    self.Creator: None  #XLCREATOR
    self.Destination: None          #RANGE
    self.EnableEditing: bool
    self.EnableRefresh: bool
    self.FetchedRowOverflow: bool
    self.ListObject: None           #LISTOBJECT
    self.Parent: None   #VBA_Object
    self.PreserveColumnInfo: bool
    self.PreserveFormatting: bool
    self.RefreshStyle: None         #XLCELLINSERTIONMODE
    self.ResultRange: None          #RANGE
    self.RowNumbers: bool
    self.WorkbookConnection: None   #WORKBOOKCONNECTION

  def Delete(self, ) -> None: pass          #None
  def Refresh(self, ) -> None: pass         #bool




class TableStyles:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, TableStyleName) -> None: pass                     #TableStyle
  def Item(self, Index) -> None: pass       #TableStyle




class TextConnection:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Connection: None           #VARIANT
    self.Creator: None  #XLCREATOR
    self.Parent: None   #VBA_Object
    self.TextFileColumnDataTypes: None          #VARIANT
    self.TextFileCommaDelimiter: bool
    self.TextFileConsecutiveDelimiter: bool
    self.TextFileDecimalSeparator: None         #STRING
    self.TextFileFixedColumnWidths: None        #VARIANT
    self.TextFileHeaderRow: bool
    self.TextFileOtherDelimiter: None           #STRING
    self.TextFileParseType: None    #XLTEXTPARSINGTYPE
    self.TextFilePlatform: None     #XLPLATFORM
    self.TextFilePromptOnRefresh: bool
    self.TextFileSemicolonDelimiter: bool
    self.TextFileSpaceDelimiter: bool
    self.TextFileStartRow: int
    self.TextFileTabDelimiter: bool
    self.TextFileTextQualifier: None            #XLTEXTQUALIFIER
    self.TextFileThousandsSeparator: None       #STRING
    self.TextFileTrailingMinusNumbers: bool
    self.TextFileVisualLayout: None             #XLTEXTVISUALLAYOUTTYPE




class TextEffectFormat:
  '''just need name'''

  def __init__(self):
    self.Alignment: None            #MsoTextEffectAlignment
    self.Application: None          #Application
    self.Creator: int
    self.FontBold: None             #MsoTriState
    self.FontItalic: None           #MsoTriState
    self.FontName: str
    self.FontSize: float
    self.KernedPairs: None          #MsoTriState
    self.NormalizedHeight: None     #MsoTriState
    self.Parent: None   #VBA_Object
    self.PresetShape: None          #MsoPresetTextEffectShape
    self.PresetTextEffect: None     #MsoPresetTextEffect
    self.RotatedChars: None         #MsoTriState
    self.Text: str
    self.Tracking: float

  def ToggleVerticalText(self, ) -> None: pass                    #None




class TextFrame:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoMargins: bool
    self.AutoSize: bool
    self.Creator: int
    self.HorizontalAlignment: None  #XlHAlign
    self.HorizontalOverflow: None   #XlOartHorizontalOverflow
    self.MarginBottom: float
    self.MarginLeft: float
    self.MarginRight: float
    self.MarginTop: float
    self.Orientation: int
    self.Parent: None   #VBA_Object
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int
    self.VerticalAlignment: None    #XlVAlign
    self.VerticalOverflow: None     #XlOartVerticalOverflow

  def Characters(self, Start, Length) -> None: pass               #Characters




class TextFrame2:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoSize: None             #MsoAutoSize
    self.Column: None   #TextColumn2
    self.Creator: int
    self.HasText: None  #MsoTriState
    self.HorizontalAnchor: None     #MsoHorizontalAnchor
    self.MarginBottom: float
    self.MarginLeft: float
    self.MarginRight: float
    self.MarginTop: float
    self.NoTextRotation: None       #MsoTriState
    self.Orientation: None          #MsoTextOrientation
    self.Parent: None   #VBA_Object
    self.PathFormat: None           #MsoPathFormat
    self.Ruler: None    #Ruler2
    self.TextRange: None            #TextRange2
    self.ThreeD: None   #ThreeDFormat
    self.VerticalAnchor: None       #MsoVerticalAnchor
    self.WarpFormat: None           #MsoWarpFormat
    self.WordArtformat: None        #MsoPresetTextEffect
    self.WordWrap: None             #MsoTriState

  def DeleteText(self, ) -> None: pass      #None




class ThreeDFormat:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.BevelBottomDepth: float
    self.BevelBottomInset: float
    self.BevelBottomType: None      #MsoBevelType
    self.BevelTopDepth: float
    self.BevelTopInset: float
    self.BevelTopType: None         #MsoBevelType
    self.ContourColor: None         #ColorFormat
    self.ContourWidth: float
    self.Creator: int
    self.Depth: float
    self.ExtrusionColor: None       #ColorFormat
    self.ExtrusionColorType: None   #MsoExtrusionColorType
    self.FieldOfView: float
    self.LightAngle: float
    self.Parent: None   #VBA_Object
    self.Perspective: None          #MsoTriState
    self.PresetCamera: None         #MsoPresetCamera
    self.PresetExtrusionDirection: None         #MsoPresetExtrusionDirection
    self.PresetLighting: None       #MsoLightRigType
    self.PresetLightingDirection: None          #MsoPresetLightingDirection
    self.PresetLightingSoftness: None           #MsoPresetLightingSoftness
    self.PresetMaterial: None       #MsoPresetMaterial
    self.PresetThreeDFormat: None   #MsoPresetThreeDFormat
    self.ProjectText: None          #MsoTriState
    self.RotationX: float
    self.RotationY: float
    self.RotationZ: float
    self.Visible: None  #MsoTriState
    self.Z: float

  def IncrementRotationHorizontal(self, Increment) -> None: pass  #None
  def IncrementRotationVertical(self, Increment) -> None: pass    #None
  def IncrementRotationX(self, Increment) -> None: pass           #None
  def IncrementRotationY(self, Increment) -> None: pass           #None
  def IncrementRotationZ(self, Increment) -> None: pass           #None
  def ResetRotation(self, ) -> None: pass   #None
  def SetExtrusionDirection(self, PresetExtrusionDirection) -> None: pass               #None
  def SetPresetCamera(self, PresetCamera) -> None: pass           #None
  def SetThreeDFormat(self, PresetThreeDFormat) -> None: pass     #None




class TickLabels:
  '''just need name'''

  def __init__(self):
    self.Alignment: int
    self.Application: None          #Application
    self.Creator: int
    self.Depth: int
    self.Font: None     #VBA_Object
    self.Format: None   #ChartFormat
    self.MultiLevel: bool
    self.Name: str
    self.NumberFormat: str
    self.NumberFormatLinked: bool
    self.NumberFormatLocal: None    #VBA_Variant
    self.Offset: int
    self.Orientation: int
    self.Parent: None   #VBA_Object
    self.ReadingOrder: None         #XlReadingOrder | xlRTL | xlLTR | xlContext | int

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class TimelineState:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Creator: None  #XLCREATOR
    self.EndDate: None  #VARIANT
    self.FilterType: None           #XLPIVOTFILTERTYPE
    self.FilterValue1: None         #VARIANT
    self.FilterValue2: None         #VARIANT
    self.Parent: None   #VBA_Object
    self.SingleRangeFilterState: bool
    self.StartDate: None            #VARIANT

  def SetFilterDateRange(self, StartDate, EndDate) -> None: pass  #XlFilterStatus




class TimelineViewState:
  '''just need name'''

  def __init__(self):
    self.Application: None          #APPLICATION
    self.Creator: None  #XLCREATOR
    self.Level: None    #XLTIMELINELEVEL
    self.Parent: None   #VBA_Object
    self.ShowHeader: bool
    self.ShowHorizontalScrollbar: bool
    self.ShowSelectionLabel: bool
    self.ShowTimeLevel: bool




class TreeviewControl:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Drilled: None  #TreeviewControl | Hidden
    self.Hidden: None   #VBA_Variant
    self.Parent: None   #VBA_Object




class Trendline:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Backward2: float
    self.Border: None   #VBA_Object
    self.Creator: int
    self.DataLabel: None            #DataLabel
    self.DisplayEquation: bool
    self.DisplayRSquared: bool
    self.Format: None   #ChartFormat
    self.Forward2: float
    self.Index: int
    self.Intercept: float
    self.InterceptIsAuto: bool
    self.Name: str
    self.NameIsAuto: bool
    self.Order: int
    self.Parent: None   #VBA_Object
    self.Period: int
    self.Type: None     #XlTrendlineType

  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class Trendlines:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Parent: None   #VBA_Object

  def Add(self, Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name) -> None: pass            #Trendline
  def Item(self, Index) -> None: pass       #Trendline




class UpBars:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object

  def Delete(self, ) -> None: pass          #VBA_Variant
  def Select(self, ) -> None: pass          #VBA_Variant




class UsedObjects:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object




class UserAccess:
  '''just need name'''

  def __init__(self):
    self.AllowEdit: bool
    self.Name: str

  def Delete(self, ) -> None: pass          #None




class UserAccessList:
  '''just need name'''

  def __init__(self):
    self.Count: int
    self.Item: None     #VBA_Object

  def Add(self, Name, AllowEdit) -> None: pass                    #UserAccess
  def DeleteAll(self, ) -> None: pass       #None




class VPageBreak:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Extent: int
    self.Location: None             #Range
    self.Parent: None   #VBA_Object
    self.Type: None     #XlPageBreak

  def Delete(self, ) -> None: pass          #None
  def DragOff(self, Direction, RegionIndex) -> None: pass         #None




class VPageBreaks:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Before) -> None: pass       #VPageBreak




class Validation:
  '''just need name'''

  def __init__(self):
    self.AlertStyle: None           #XlDVAlertStyle
    self.Application: None          #Application
    self.Creator: int
    self.ErrorMessage: str
    self.ErrorTitle: str
    self.Formula1: str
    self.Formula2: str
    self.IMEMode: None  #XlIMEMode | int
    self.IgnoreBlank: bool
    self.InCellDropdown: bool
    self.InputMessage: str
    self.InputTitle: str
    self.Operator: int
    self.Parent: None   #VBA_Object
    self.ShowError: bool
    self.ShowInput: bool
    self.Type: int
    self.Value: bool

  def Add(self, Type, AlertStyle, Operator, Formula1, Formula2) -> None: pass           #None
  def Delete(self, ) -> None: pass          #None
  def Modify(self, Type, AlertStyle, Operator, Formula1, Formula2) -> None: pass        #None




class ValueChange:
  '''just need name'''

  def __init__(self):
    self.AllocationMethod: None     #XlAllocationMethod
    self.AllocationValue: None      #XlAllocationValue
    self.AllocationWeightExpression: str
    self.Application: None          #Application
    self.Creator: int
    self.Order: int
    self.Parent: None   #VBA_Object
    self.PivotCell: None            #PivotCell
    self.Tuple: str
    self.Value: float
    self.VisibleInPivotTable: bool

  def Delete(self, ) -> None: pass          #None




class Walls:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Format: None   #ChartFormat
    self.Name: str
    self.Parent: None   #VBA_Object
    self.PictureType: None          #VBA_Variant
    self.PictureUnit: None          #PictureType | xlStackScale | int
    self.Thickness: int

  def ClearFormats(self, ) -> None: pass    #VBA_Variant
  def Paste(self, ) -> None: pass           #None
  def Select(self, ) -> None: pass          #VBA_Variant




class Watches:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Source) -> None: pass       #Watch
  def Delete(self, ) -> None: pass          #None




class WebOptions:
  '''just need name'''

  def __init__(self):
    self.AllowPNG: bool
    self.Application: None          #Application
    self.Creator: int
    self.DownloadComponents: bool
    self.Encoding: None             #MsoEncoding
    self.FolderSuffix: str
    self.LocationOfComponents: str
    self.OrganizeInFolder: bool
    self.Parent: None   #VBA_Object
    self.PixelsPerInch: int
    self.RelyOnCSS: bool
    self.RelyOnVML: bool
    self.ScreenSize: None           #MsoScreenSize
    self.TargetBrowser: None        #MsoTargetBrowser
    self.UseLongFileNames: bool

  def UseDefaultFolderSuffix(self, ) -> None: pass                #None




class Window:
  '''just need name'''

  def __init__(self):
    self.ActiveCell: None           #Range
    self.ActiveChart: None          #VBA_Object
    self.ActivePane: None           #Pane
    self.ActiveSheet: None          #VBA_Object | None
    self.ActiveSheetView: None      #VBA_Object
    self.Application: None          #Application
    self.AutoFilterDateGrouping: bool
    self.Caption: None  #VBA_Variant
    self.Creator: int
    self.DisplayFormulas: bool
    self.DisplayGridlines: bool
    self.DisplayHeadings: bool
    self.DisplayHorizontalScrollBar: bool
    self.DisplayOutline: bool
    self.DisplayRightToLeft: bool
    self.DisplayRuler: bool
    self.DisplayVerticalScrollBar: bool
    self.DisplayWhitespace: bool
    self.DisplayWorkbookTabs: bool
    self.DisplayZeros: bool
    self.EnableResize: bool
    self.FreezePanes: bool
    self.GridlineColor: int
    self.GridlineColorIndex: None   #XlColorIndex
    self.Height: float
    self.Index: int
    self.Left: float
    self.OnWindow: str
    self.Panes: None    #Panes
    self.Parent: None   #VBA_Object
    self.RangeSelection: None       #Range
    self.ScrollColumn: int
    self.ScrollRow: int
    self.SelectedSheets: None       #Sheets
    self.Selection: None            #Windows
    self.SheetViews: None           #SheetViews
    self.Split: bool
    self.SplitColumn: int
    self.SplitHorizontal: float
    self.SplitRow: int
    self.SplitVertical: float
    self.TabRatio: float
    self.Top: float
    self.Type: None     #XlWindowType
    self.UsableHeight: float
    self.UsableWidth: float
    self.View: None     #XlWindowView
    self.Visible: bool
    self.VisibleRange: None         #Range
    self.Width: float
    self.WindowNumber: int
    self.WindowState: None          #XlWindowState
    self.Zoom: None     #VBA_Variant
    self.hWnd: int

  def Activate(self, ) -> None: pass        #VBA_Variant
  def ActivateNext(self, ) -> None: pass    #VBA_Variant
  def ActivatePrevious(self, ) -> None: pass                      #VBA_Variant
  def Close(self, SaveChanges, FileName, RouteWorkbook) -> None: pass                   #bool
  def LargeScroll(self, Down, Up, ToRight, ToLeft) -> None: pass  #VBA_Variant
  def NewWindow(self, ) -> None: pass       #Window
  def PointsToScreenPixelsX(self, Points) -> None: pass           #int
  def PointsToScreenPixelsY(self, Points) -> None: pass           #int
  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName) -> None: pass                    #VBA_Variant
  def PrintPreview(self, EnableChanges) -> None: pass             #VBA_Variant
  def RangeFromPoint(self, x, y) -> None: pass                    #VBA_Object
  def ScrollIntoView(self, Left, Top, Width, Height, Start) -> None: pass               #None
  def ScrollWorkbookTabs(self, Sheets, Position) -> None: pass    #VBA_Variant
  def SmallScroll(self, Down, Up, ToRight, ToLeft) -> None: pass  #VBA_Variant




class Windows:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object
    self.SyncScrollingSideBySide: bool

  def Arrange(self, ArrangeStyle, ActiveWorkbook, SyncHorizontal, SyncVertical) -> None: pass                 #VBA_Variant
  def BreakSideBySide(self, ) -> None: pass                       #bool
  def CompareSideBySideWith(self, WindowName) -> None: pass       #bool
  def ResetPositionsSideBySide(self, ) -> None: pass              #None




class Workbook:
  '''just need name'''

  def __init__(self):
    self.AccuracyVersion: int
    self.ActiveChart: None          #VBA_Object
    self.ActiveSheet: None          #VBA_Object
    self.ActiveSlicer: None         #Slicer
    self.Application: None          #Application
    self.AutoSaveOn: bool
    self.AutoUpdateFrequency: int
    self.AutoUpdateSaveChanges: bool
    self.BuiltinDocumentProperties: None        #DocumentProperties
    self.CalculationVersion: int
    self.CaseSensitive: bool
    self.ChangeHistoryDuration: int
    self.ChartDataPointTrack: bool
    self.Charts: None   #Sheets
    self.CheckCompatibility: bool
    self.CodeName: str
    self.Colors: None   #VBA_Variant
    self.CommandBars: None          #CommandBars
    self.ConflictResolution: None   #XlSaveConflictResolution
    self.Connections: None          #Connections
    self.ConnectionsDisabled: bool
    self.Container: None            #VBA_Object
    self.ContentTypeProperties: None            #MetaProperties
    self.CreateBackup: bool
    self.Creator: int
    self.CustomDocumentProperties: None         #DocumentProperties
    self.CustomViews: None          #CustomViews
    self.CustomXMLParts: None       #CustomXMLParts
    self.Date1904: bool
    self.DefaultPivotTableStyle: None           #TableStyles
    self.DefaultSlicerStyle: None   #VBA_Variant
    self.DefaultTableStyle: None    #VBA_Variant
    self.DefaultTimelineStyle: None             #VARIANT
    self.DisplayDrawingObjects: int
    self.DisplayInkComments: bool
    self.DoNotPromptForConvert: bool
    self.DocumentInspectors: None   #DocumentInspectors
    self.DocumentLibraryVersions: None          #DocumentLibraryVersions
    self.EnableAutoRecover: bool
    self.EncryptionProvider: str
    self.EnvelopeVisible: bool
    self.Excel4IntlMacroSheets: None            #Sheets
    self.Excel4MacroSheets: None    #Sheets
    self.Excel8CompatibilityMode: bool
    self.FileFormat: None           #XlFileFormat
    self.Final: bool
    self.ForceFullCalculation: bool
    self.FullName: str
    self.FullNameURLEncoded: str
    self.HasPassword: bool
    self.HasVBProject: bool
    self.HighlightChangesOnScreen: bool
    self.IconSets: None             #IconSets
    self.InactiveListBorderVisible: bool
    self.IsAddin: bool
    self.IsInplace: bool
    self.KeepChangeHistory: bool
    self.ListChangesOnNewSheet: bool
    self.Mailer: None   #Workbook
    self.Model: None    #MODEL
    self.MultiUserEditing: bool
    self.Name: str
    self.Names: None    #Names
    self.Parent: None   #VBA_Object
    self.Password: str
    self.PasswordEncryptionAlgorithm: str
    self.PasswordEncryptionFileProperties: bool
    self.PasswordEncryptionKeyLength: int
    self.PasswordEncryptionProvider: str
    self.Path: str
    self.Permission: None           #VBA_Object
    self.PersonalViewListSettings: bool
    self.PersonalViewPrintSettings: bool
    self.PivotTables: None          #VBA_Object
    self.PrecisionAsDisplayed: bool
    self.ProtectStructure: bool
    self.ProtectWindows: bool
    self.PublishObjects: None       #PublishObjects
    self.Queries: None  #Queries | Workbook
    self.ReadOnly: bool
    self.ReadOnlyRecommended: None  #recommended
    self.RemovePersonalInformation: bool
    self.Research: None             #Research
    self.RevisionNumber: int
    self.SaveLinkValues: bool
    self.Saved: bool
    self.SensitivityLabel: None     #SensitivityLabel
    self.ServerPolicy: None         #ServerPolicy
    self.ServerViewableItems: None  #VBA_Object
    self.SharedWorkspace: None      #VBA_Object
    self.Sheets: None   #Sheets
    self.ShowConflictHistory: bool
    self.ShowPivotChartActiveFields: bool
    self.ShowPivotTableFieldList: bool
    self.Signatures: None           #VBA_Object
    self.SlicerCaches: None         #SlicerCaches
    self.SmartDocument: None        #SmartDocument
    self.Styles: None   #Styles
    self.Sync: None     #VBA_Object
    self.TableStyles: None          #TableStyles
    self.TemplateRemoveExtData: bool
    self.Theme: None    #VBA_Object
    self.UpdateLinks: None          #XlUpdateLink
    self.UpdateRemoteReferences: bool
    self.UseWholeCellCriteria: bool
    self.UseWildcards: bool
    self.UserStatus: None           #VBA_Variant
    self.VBASigned: bool
    self.VBProject: None            #VBProject
    self.WebOptions: None           #WebOptions
    self.Windows: None  #Windows
    self.Worksheets: None           #Worksheets
    self.WritePassword: str
    self.WriteReserved: bool
    self.WriteReservedBy: str
    self.XmlMaps: None  #XmlMaps
    self.XmlNamespaces: None        #XmlNamespaces

  def AcceptAllChanges(self, When, Who, Where) -> None: pass      #None
  def Activate(self, ) -> None: pass        #None
  def AddToFavorites(self, ) -> None: pass  #None
  def ApplyTheme(self, FileName) -> None: pass                    #None
  def BreakLink(self, Name, Type) -> None: pass                   #None
  def CanCheckIn(self, ) -> None: pass      #bool
  def ChangeFileAccess(self, Mode, WritePassword, Notify) -> None: pass                 #None
  def ChangeLink(self, Name, NewName, Type) -> None: pass         #None
  def CheckIn(self, SaveChanges, Comments, MakePublic) -> None: pass                    #None
  def CheckInWithVersion(self, SaveChanges, Comments, MakePublic, VersionType) -> None: pass                  #None
  def Close(self, SaveChanges, FileName, RouteWorkbook) -> None: pass                   #None
  def ConvertComments(self, ) -> None: pass                       #None
  def CreateForecastSheet(self, Timeline, Values, ForecastStart, ForecastEnd, ConfInt, Seasonality, DataCompletion, Aggregation, ChartType, ShowStatsTable) -> None: pass       #None
  def DeleteNumberFormat(self, NumberFormat) -> None: pass        #None
  def EnableConnections(self, ) -> None: pass                     #None
  def EndReview(self, ) -> None: pass       #None
  def ExclusiveAccess(self, ) -> None: pass                       #bool
  def ExportAsFixedFormat(self, Type, FileName, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr) -> None: pass              #None
  def FollowHyperlink(self, Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo) -> None: pass                #None
  def ForwardMailer(self, ) -> None: pass   #None
  def GetWorkflowTasks(self, ) -> None: pass                      #WorkFlowTasks
  def GetWorkflowTemplates(self, ) -> None: pass                  #WorkflowTemplates
  def HighlightChangesOptions(self, When, Who, Where) -> None: pass                     #None
  def LinkInfo(self, Name, LinkInfo, Type, EditionRef) -> None: pass                    #VBA_Variant
  def LinkSources(self, Type) -> None: pass                       #VBA_Variant
  def LockServerFile(self, ) -> None: pass  #None
  def MergeWorkbook(self, FileName) -> None: pass                 #None
  def NewWindow(self, ) -> None: pass       #Window
  def OpenLinks(self, Name, ReadOnly, Type) -> None: pass         #None
  def PivotCaches(self, ) -> None: pass     #PivotCaches
  def Post(self, DestName) -> None: pass    #None
  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas) -> None: pass  #VBA_Variant
  def PrintPreview(self, EnableChanges) -> None: pass             #None
  def Protect(self, Password, Structure, Windows) -> None: pass   #None
  def ProtectSharing(self, FileName, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword, FileFormat) -> None: pass            #None
  def PublishToDocs(self, ) -> None: pass   #None
  def PurgeChangeHistoryNow(self, Days, SharingPassword) -> None: pass                  #None
  def RefreshAll(self, ) -> None: pass      #None
  def RejectAllChanges(self, When, Who, Where) -> None: pass      #None
  def ReloadAs(self, Encoding) -> None: pass                      #None
  def RemoveDocumentInformation(self, RemoveDocInfoType) -> None: pass                  #None
  def RemoveUser(self, Index) -> None: pass                       #None
  def Reply(self, ) -> None: pass           #None
  def ReplyAll(self, ) -> None: pass        #None
  def ReplyWithChanges(self, ShowMessage) -> None: pass           #None
  def ResetColors(self, ) -> None: pass     #None
  def RunAutoMacros(self, Which) -> None: pass                    #None
  def Save(self, ) -> None: pass            #None
  def SaveAs(self, FileName, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout, Local) -> None: pass                      #None
  def SaveAsXMLData(self, FileName, Map) -> None: pass            #None
  def SaveCopyAs(self, FileName) -> None: pass                    #None
  def SendFaxOverInternet(self, Recipients, Subject, ShowMessage) -> None: pass         #None
  def SendForReview(self, Recipients, Subject, ShowMessage, IncludeAttachment) -> None: pass                  #None
  def SendMail(self, Recipients, Subject, ReturnReceipt) -> None: pass                  #None
  def SendMailer(self, FileFormat, Priority) -> None: pass        #None
  def SetLinkOnData(self, Name, Procedure) -> None: pass          #None
  def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties) -> None: pass  #None
  def ToggleFormsDesign(self, ) -> None: pass                     #None
  def Unprotect(self, Password) -> None: pass                     #None
  def UnprotectSharing(self, SharingPassword) -> None: pass       #None
  def UpdateFromFile(self, ) -> None: pass  #None
  def UpdateLink(self, Name, Type) -> None: pass                  #None
  def WebPagePreview(self, ) -> None: pass  #None
  def XmlImport(self, Url, ImportMap, Overwrite, Destination) -> None: pass             #XlXmlImportResult
  def XmlImportXml(self, Data, ImportMap, Overwrite, Destination) -> None: pass         #XlXmlImportResult




class WorkbookConnection:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.DataFeedConnection: None   #DATAFEEDCONNECTION
    self.Description: str
    self.InModel: bool
    self.ModelConnection: None      #MODELCONNECTION
    self.ModelTables: None          #MODELTABLES
    self.Name: str
    self.ODBCConnection: None       #ODBCConnection
    self.OLEDBConnection: None      #OLEDBConnection
    self.Parent: None   #VBA_Object
    self.Ranges: None   #Ranges
    self.RefreshWithRefreshAll: bool
    self.TextConnection: None       #TEXTCONNECTION
    self.Type: None     #XlConnectionType
    self.WorksheetDataConnection: None          #WORKSHEETDATACONNECTION

  def Delete(self, ) -> None: pass          #None
  def Refresh(self, ) -> None: pass         #None




class WorkbookQuery:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Description: str
    self.Formula: str
    self.Name: str
    self.Parent: None   #VBA_Object

  def Delete(self, DeleteConnection) -> None: pass                #None




class Workbooks:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Template) -> None: pass     #Workbook
  def CanCheckOut(self, FileName) -> None: pass                   #bool
  def CheckOut(self, FileName) -> None: pass                      #None
  def Close(self, ) -> None: pass           #None
  def Open(self, FileName, UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru, Local, CorruptLoad) -> None: pass                #Workbook
  def OpenDatabase(self, FileName, CommandText, CommandType, BackgroundQuery, ImportDataAs) -> None: pass     #Workbook
  def OpenText(self, FileName, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers, Local) -> None: pass           #None
  def OpenXML(self, FileName, Stylesheets, LoadOption) -> None: pass                    #Workbook




class Worksheet:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.AutoFilter: None           #AutoFilter
    self.AutoFilterMode: bool
    self.Cells: None    #Range
    self.CircularReference: None    #VBA_Object
    self.CodeName: str
    self.Columns: None  #Range
    self.Comments: None             #Comments
    self.CommentsThreaded: None     #CommentsThreaded
    self.ConsolidationFunction: int
    self.ConsolidationOptions: None             #VBA_Variant
    self.ConsolidationSources: None             #VBA_Variant
    self.Creator: int
    self.CustomProperties: None     #CustomProperties
    self.DisplayPageBreaks: bool
    self.DisplayRightToLeft: bool
    self.EnableAutoFilter: bool
    self.EnableCalculation: bool
    self.EnableFormatConditionsCalculation: bool
    self.EnableOutlining: bool
    self.EnablePivotTable: bool
    self.EnableSelection: None      #XlEnableSelection
    self.FilterMode: bool
    self.HPageBreaks: None          #HPageBreaks
    self.Hyperlinks: None           #Hyperlinks
    self.Index: int
    self.ListObjects: None          #ListObjects
    self.MailEnvelope: None         #Worksheet
    self.Name: str
    self.Names: None    #Names
    self.Next: None     #VBA_Object
    self.Outline: None  #Outline
    self.PageSetup: None            #PageSetup
    self.Parent: None   #VBA_Object
    self.Previous: None             #VBA_Object
    self.PrintedCommentPages: int
    self.ProtectContents: bool
    self.ProtectDrawingObjects: bool
    self.ProtectScenarios: bool
    self.Protection: None           #VBA_Object
    self.ProtectionMode: bool
    self.QueryTables: None          #QueryTables
    self.Range: None    #Range
    self.Rows: None     #Range
    self.ScrollArea: str
    self.Shapes: None   #Shapes
    self.Sort: None     #Sort
    self.StandardHeight: float
    self.StandardWidth: float
    self.Tab: None      #Tab
    self.TransitionExpEval: bool
    self.TransitionFormEntry: bool
    self.Type: None     #XlSheetType
    self.UsedRange: None            #Range
    self.VPageBreaks: None          #VPageBreaks
    self.Visible: None  #XlSheetVisibility

  def Activate(self, ) -> None: pass        #None
  def Calculate(self, ) -> None: pass       #None
  def ChartObjects(self, Index) -> None: pass                     #VBA_Object
  def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang) -> None: pass          #None
  def CircleInvalid(self, ) -> None: pass   #None
  def ClearArrows(self, ) -> None: pass     #None
  def ClearCircles(self, ) -> None: pass    #None
  def Copy(self, Before, After) -> None: pass                     #None
  def Delete(self, ) -> None: pass          #bool
  def Evaluate(self, Name) -> None: pass    #VBA_Variant
  def ExportAsFixedFormat(self, Type, FileName, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr) -> None: pass              #None
  def Move(self, Before, After) -> None: pass                     #None
  def OLEObjects(self, Index) -> None: pass                       #VBA_Object
  def Paste(self, Destination, Link) -> None: pass                #None
  def PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, NoHTMLFormatting) -> None: pass           #None
  def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection) -> None: pass           #PivotTable
  def PivotTables(self, Index) -> None: pass                      #VBA_Object
  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas) -> None: pass  #VBA_Variant
  def PrintPreview(self, EnableChanges) -> None: pass             #None
  def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells, AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows, AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering, AllowUsingPivotTables) -> None: pass                       #None
  def ResetAllPageBreaks(self, ) -> None: pass                    #None
  def SaveAs(self, FileName, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local) -> None: pass          #None
  def Scenarios(self, Index) -> None: pass  #VBA_Object
  def Select(self, Replace) -> None: pass   #None
  def SetBackgroundPicture(self, FileName) -> None: pass          #None
  def ShowAllData(self, ) -> None: pass     #None
  def ShowDataForm(self, ) -> None: pass    #None
  def Unprotect(self, Password) -> None: pass                     #None
  def XmlDataQuery(self, XPath, SelectionNamespaces, Map) -> None: pass                 #Range
  def XmlMapQuery(self, XPath, SelectionNamespaces, Map) -> None: pass                  #Range




class WorksheetFunction:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #VBA_Object

  def AccrInt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> None: pass             #float
  def AccrIntM(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass  #float
  def Acos(self, Arg1) -> None: pass        #float
  def Acosh(self, Arg1) -> None: pass       #float
  def Acot(self, Arg1) -> None: pass        #float
  def Acoth(self, Arg1) -> None: pass       #float
  def Aggregate(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass  #float
  def AmorDegrc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> None: pass           #float
  def AmorLinc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> None: pass            #float
  def And(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #bool
  def Arabic(self, Arg1) -> None: pass      #float
  def Asc(self, Arg1) -> None: pass         #str
  def Asin(self, Arg1) -> None: pass        #float
  def Asinh(self, Arg1) -> None: pass       #float
  def Atan2(self, Arg1, Arg2) -> None: pass                       #float
  def Atanh(self, Arg1) -> None: pass       #float
  def AveDev(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass     #float
  def Average(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass    #float
  def AverageIf(self, Arg1, Arg2, Arg3) -> None: pass             #float
  def AverageIfs(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass                       #float
  def BahtText(self, Arg1) -> None: pass    #str
  def Base(self, Arg1, Arg2, Arg3) -> None: pass                  #str
  def BesselI(self, Arg1, Arg2) -> None: pass                     #float
  def BesselJ(self, Arg1, Arg2) -> None: pass                     #float
  def BesselK(self, Arg1, Arg2) -> None: pass                     #float
  def BesselY(self, Arg1, Arg2) -> None: pass                     #float
  def BetaDist(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass  #float
  def BetaInv(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass   #float
  def Beta_Dist(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                 #float
  def Beta_Inv(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass  #float
  def Bin2Dec(self, Arg1) -> None: pass     #str
  def Bin2Hex(self, Arg1, Arg2) -> None: pass                     #str
  def Bin2Oct(self, Arg1, Arg2) -> None: pass                     #str
  def BinomDist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass       #float
  def Binom_Dist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass      #float
  def Binom_Dist_Range(self, Arg1, Arg2, Arg3, Arg4) -> None: pass                      #float
  def Binom_Inv(self, Arg1, Arg2, Arg3) -> None: pass             #float
  def Bitand(self, Arg1, Arg2) -> None: pass                      #float
  def Bitlshift(self, Arg1, Arg2) -> None: pass                   #float
  def Bitor(self, Arg1, Arg2) -> None: pass                       #float
  def Bitrshift(self, Arg1, Arg2) -> None: pass                   #float
  def Bitxor(self, Arg1, Arg2) -> None: pass                      #float
  def Ceiling(self, Arg1, Arg2) -> None: pass                     #float
  def Ceiling_Math(self, Arg1, Arg2, Arg3) -> None: pass          #float
  def Ceiling_Precise(self, Arg1, Arg2) -> None: pass             #float
  def ChiDist(self, Arg1, Arg2) -> None: pass                     #float
  def ChiInv(self, Arg1, Arg2) -> None: pass                      #float
  def ChiSq_Dist(self, Arg1, Arg2, Arg3) -> None: pass            #float
  def ChiSq_Dist_RT(self, Arg1, Arg2) -> None: pass               #float
  def ChiSq_Inv(self, Arg1, Arg2) -> None: pass                   #float
  def ChiSq_Inv_RT(self, Arg1, Arg2) -> None: pass                #float
  def ChiSq_Test(self, Arg1, Arg2) -> None: pass                  #float
  def ChiTest(self, Arg1, Arg2) -> None: pass                     #float
  def Choose(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass     #VBA_Variant
  def Clean(self, Arg1) -> None: pass       #str
  def Combin(self, Arg1, Arg2) -> None: pass                      #float
  def Combina(self, Arg1, Arg2) -> None: pass                     #float
  def Complex(self, Arg1, Arg2, Arg3) -> None: pass               #str
  def Confidence(self, Arg1, Arg2, Arg3) -> None: pass            #float
  def Confidence_Norm(self, Arg1, Arg2, Arg3) -> None: pass       #float
  def Confidence_T(self, Arg1, Arg2, Arg3) -> None: pass          #float
  def Convert(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def Correl(self, Arg1, Arg2) -> None: pass                      #float
  def Cosh(self, Arg1) -> None: pass        #float
  def Cot(self, Arg1) -> None: pass         #float
  def Coth(self, Arg1) -> None: pass        #float
  def Count(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass      #float
  def CountA(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass     #float
  def CountBlank(self, Arg1) -> None: pass  #float
  def CountIf(self, Arg1, Arg2) -> None: pass                     #float
  def CountIfs(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass   #float
  def CoupDayBs(self, Arg1, Arg2, Arg3, Arg4) -> None: pass       #float
  def CoupDays(self, Arg1, Arg2, Arg3, Arg4) -> None: pass        #float
  def CoupDaysNc(self, Arg1, Arg2, Arg3, Arg4) -> None: pass      #float
  def CoupNcd(self, Arg1, Arg2, Arg3, Arg4) -> None: pass         #float
  def CoupNum(self, Arg1, Arg2, Arg3, Arg4) -> None: pass         #float
  def CoupPcd(self, Arg1, Arg2, Arg3, Arg4) -> None: pass         #float
  def Covar(self, Arg1, Arg2) -> None: pass                       #float
  def Covariance_P(self, Arg1, Arg2) -> None: pass                #float
  def Covariance_S(self, Arg1, Arg2) -> None: pass                #float
  def CritBinom(self, Arg1, Arg2, Arg3) -> None: pass             #float
  def Csc(self, Arg1) -> None: pass         #float
  def Csch(self, Arg1) -> None: pass        #float
  def CumIPmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                   #float
  def CumPrinc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                  #float
  def DAverage(self, Arg1, Arg2, Arg3) -> None: pass              #float
  def DCount(self, Arg1, Arg2, Arg3) -> None: pass                #float
  def DCountA(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def DGet(self, Arg1, Arg2, Arg3) -> None: pass                  #VBA_Variant
  def DMax(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def DMin(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def DProduct(self, Arg1, Arg2, Arg3) -> None: pass              #float
  def DStDev(self, Arg1, Arg2, Arg3) -> None: pass                #float
  def DStDevP(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def DSum(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def DVar(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def DVarP(self, Arg1, Arg2, Arg3) -> None: pass                 #float
  def Days(self, Arg1, Arg2) -> None: pass  #float
  def Days360(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass    #float
  def Db(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass        #float
  def Dbcs(self, Arg1) -> None: pass        #str
  def Ddb(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass       #float
  def Dec2Bin(self, Arg1, Arg2) -> None: pass                     #str
  def Dec2Hex(self, Arg1, Arg2) -> None: pass                     #str
  def Dec2Oct(self, Arg1, Arg2) -> None: pass                     #str
  def Decimal(self, Arg1, Arg2) -> None: pass                     #float
  def Degrees(self, Arg1) -> None: pass     #float
  def Delta(self, Arg1, Arg2) -> None: pass                       #float
  def DevSq(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass      #float
  def Disc(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass      #float
  def Dollar(self, Arg1, Arg2) -> None: pass                      #str
  def DollarDe(self, Arg1, Arg2) -> None: pass                    #float
  def DollarFr(self, Arg1, Arg2) -> None: pass                    #float
  def Duration(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                  #float
  def EDate(self, Arg1, Arg2) -> None: pass                       #float
  def Effect(self, Arg1, Arg2) -> None: pass                      #float
  def EncodeUrl(self, Arg1) -> None: pass   #VBA_Variant
  def EoMonth(self, Arg1, Arg2) -> None: pass                     #float
  def Erf(self, Arg1, Arg2) -> None: pass   #float
  def ErfC(self, Arg1, Arg2) -> None: pass  #float
  def ErfC_Precise(self, Arg1) -> None: pass                      #float
  def Erf_Precise(self, Arg1) -> None: pass                       #float
  def Even(self, Arg1) -> None: pass        #float
  def ExponDist(self, Arg1, Arg2, Arg3) -> None: pass             #float
  def Expon_Dist(self, Arg1, Arg2, Arg3) -> None: pass            #float
  def FDist(self, Arg1, Arg2, Arg3) -> None: pass                 #float
  def FInv(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def FTest(self, Arg1, Arg2) -> None: pass                       #float
  def FVSchedule(self, Arg1, Arg2) -> None: pass                  #float
  def F_Dist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass          #float
  def F_Dist_RT(self, Arg1, Arg2, Arg3) -> None: pass             #float
  def F_Inv(self, Arg1, Arg2, Arg3) -> None: pass                 #float
  def F_Inv_RT(self, Arg1, Arg2, Arg3) -> None: pass              #float
  def F_Test(self, Arg1, Arg2) -> None: pass                      #float
  def Fact(self, Arg1) -> None: pass        #float
  def FactDouble(self, Arg1) -> None: pass  #float
  def FilterXML(self, Arg1, Arg2) -> None: pass                   #VBA_Variant
  def Find(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def FindB(self, Arg1, Arg2, Arg3) -> None: pass                 #float
  def Fisher(self, Arg1) -> None: pass      #float
  def FisherInv(self, Arg1) -> None: pass   #float
  def Fixed(self, Arg1, Arg2, Arg3) -> None: pass                 #str
  def Floor(self, Arg1, Arg2) -> None: pass                       #float
  def Floor_Math(self, Arg1, Arg2, Arg3) -> None: pass            #float
  def Floor_Precise(self, Arg1, Arg2) -> None: pass               #float
  def Forecast(self, Arg1, Arg2, Arg3) -> None: pass              #float
  def Forecast_ETS(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass              #float
  def Forecast_ETS_ConfInt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> None: pass                      #float
  def Forecast_ETS_STAT(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass         #float
  def Forecast_ETS_Seasonality(self, Arg1, Arg2, Arg3, Arg4) -> None: pass              #float
  def Forecast_Linear(self, Arg1, Arg2, Arg3) -> None: pass       #float
  def Frequency(self, Arg1, Arg2) -> None: pass                   #VBA_Variant
  def Fv(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass        #float
  def Gamma(self, Arg1) -> None: pass       #float
  def GammaDist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass       #float
  def GammaInv(self, Arg1, Arg2, Arg3) -> None: pass              #float
  def GammaLn(self, Arg1) -> None: pass     #float
  def GammaLn_Precise(self, Arg1) -> None: pass                   #float
  def Gamma_Dist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass      #float
  def Gamma_Inv(self, Arg1, Arg2, Arg3) -> None: pass             #float
  def Gauss(self, Arg1) -> None: pass       #float
  def Gcd(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #float
  def GeStep(self, Arg1, Arg2) -> None: pass                      #float
  def GeoMean(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass    #float
  def Growth(self, Arg1, Arg2, Arg3, Arg4) -> None: pass          #VBA_Variant
  def HLookup(self, Arg1, Arg2, Arg3, Arg4) -> None: pass         #VBA_Variant
  def HarMean(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass    #float
  def Hex2Bin(self, Arg1, Arg2) -> None: pass                     #str
  def Hex2Dec(self, Arg1) -> None: pass     #str
  def Hex2Oct(self, Arg1, Arg2) -> None: pass                     #str
  def HypGeomDist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass     #float
  def HypGeom_Dist(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass                    #float
  def ISO_Ceiling(self, Arg1, Arg2) -> None: pass                 #float
  def IfError(self, Arg1, Arg2) -> None: pass                     #VBA_Variant
  def IfNa(self, Arg1, Arg2) -> None: pass  #VBA_Variant
  def ImAbs(self, Arg1) -> None: pass       #str
  def ImArgument(self, Arg1) -> None: pass  #str
  def ImConjugate(self, Arg1) -> None: pass                       #str
  def ImCos(self, Arg1) -> None: pass       #str
  def ImCosh(self, Arg1) -> None: pass      #str
  def ImCot(self, Arg1) -> None: pass       #str
  def ImCsc(self, Arg1) -> None: pass       #str
  def ImCsch(self, Arg1) -> None: pass      #str
  def ImDiv(self, Arg1, Arg2) -> None: pass                       #str
  def ImExp(self, Arg1) -> None: pass       #str
  def ImLn(self, Arg1) -> None: pass        #str
  def ImLog10(self, Arg1) -> None: pass     #str
  def ImLog2(self, Arg1) -> None: pass      #str
  def ImPower(self, Arg1, Arg2) -> None: pass                     #str
  def ImProduct(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass  #str
  def ImReal(self, Arg1) -> None: pass      #float
  def ImSec(self, Arg1) -> None: pass       #str
  def ImSech(self, Arg1) -> None: pass      #str
  def ImSin(self, Arg1) -> None: pass       #str
  def ImSinh(self, Arg1) -> None: pass      #str
  def ImSqrt(self, Arg1) -> None: pass      #str
  def ImSub(self, Arg1, Arg2) -> None: pass                       #str
  def ImSum(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass      #str
  def ImTan(self, Arg1) -> None: pass       #str
  def Imaginary(self, Arg1) -> None: pass   #float
  def Index(self, Arg1, Arg2, Arg3, Arg4) -> None: pass           #VBA_Variant
  def IntRate(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass   #float
  def Intercept(self, Arg1, Arg2) -> None: pass                   #float
  def Ipmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                      #float
  def Irr(self, Arg1, Arg2) -> None: pass   #float
  def IsErr(self, Arg1) -> None: pass       #bool
  def IsError(self, Arg1) -> None: pass     #bool
  def IsEven(self, Arg1) -> None: pass      #bool
  def IsFormula(self, Arg1) -> None: pass   #bool
  def IsLogical(self, Arg1) -> None: pass   #bool
  def IsNA(self, Arg1) -> None: pass        #bool
  def IsNonText(self, Arg1) -> None: pass   #bool
  def IsNumber(self, Arg1) -> None: pass    #bool
  def IsOdd(self, Arg1) -> None: pass       #bool
  def IsText(self, Arg1) -> None: pass      #bool
  def IsoWeekNum(self, Arg1, Arg2) -> None: pass                  #float
  def Ispmt(self, Arg1, Arg2, Arg3, Arg4) -> None: pass           #float
  def Kurt(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass       #float
  def Large(self, Arg1, Arg2) -> None: pass                       #float
  def Lcm(self, Arg1) -> None: pass         #float
  def LinEst(self, Arg1, Arg2, Arg3, Arg4) -> None: pass          #VBA_Variant
  def Ln(self, Arg1) -> None: pass          #float
  def Log(self, Arg1, Arg2) -> None: pass   #float
  def Log10(self, Arg1) -> None: pass       #float
  def LogEst(self, Arg1, Arg2, Arg3, Arg4) -> None: pass          #VBA_Variant
  def LogInv(self, Arg1, Arg2, Arg3) -> None: pass                #float
  def LogNormDist(self, Arg1, Arg2, Arg3) -> None: pass           #float
  def LogNorm_Dist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass    #float
  def LogNorm_Inv(self, Arg1, Arg2, Arg3) -> None: pass           #float
  def Lookup(self, Arg1, Arg2, Arg3) -> None: pass                #VBA_Variant
  def MDeterm(self, Arg1) -> None: pass     #float
  def MDuration(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                 #float
  def MInverse(self, Arg1) -> None: pass    #VBA_Variant
  def MIrr(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def MMult(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass      #VBA_Variant
  def MRound(self, Arg1, Arg2) -> None: pass                      #float
  def Match(self, Arg1, Arg2, Arg3) -> None: pass                 #float
  def Max(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #float
  def Median(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass     #float
  def Min(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #float
  def Mode(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass       #float
  def Mode_Mult(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass  #VBA_Variant
  def Mode_Sngl(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass  #float
  def MultiNomial(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass                      #float
  def Munit(self, Arg1) -> None: pass       #VBA_Variant
  def NPer(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass      #float
  def NegBinomDist(self, Arg1, Arg2, Arg3) -> None: pass          #float
  def NegBinom_Dist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass   #float
  def NetworkDays(self, Arg1, Arg2, Arg3) -> None: pass           #float
  def NetworkDays_Intl(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass                 #float
  def Nominal(self, Arg1, Arg2) -> None: pass                     #float
  def NormDist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass        #float
  def NormInv(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def NormSDist(self, Arg1) -> None: pass   #float
  def NormSInv(self, Arg1) -> None: pass    #float
  def Norm_Dist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass       #float
  def Norm_Inv(self, Arg1, Arg2, Arg3) -> None: pass              #float
  def Norm_S_Dist(self, Arg1, Arg2) -> None: pass                 #float
  def Norm_S_Inv(self, Arg1) -> None: pass  #float
  def Npv(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #float
  def NumberValue(self, Arg1, Arg2, Arg3) -> None: pass           #float
  def Oct2Bin(self, Arg1, Arg2) -> None: pass                     #str
  def Oct2Dec(self, Arg1) -> None: pass     #str
  def Oct2Hex(self, Arg1, Arg2) -> None: pass                     #str
  def Odd(self, Arg1) -> None: pass         #float
  def OddFPrice(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9) -> None: pass                     #float
  def OddFYield(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9) -> None: pass                     #float
  def OddLPrice(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8) -> None: pass     #float
  def OddLYield(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8) -> None: pass     #float
  def Or(self, Arg1) -> None: pass          #bool
  def PDuration(self, Arg1, Arg2, Arg3) -> None: pass             #float
  def Pearson(self, Arg1, Arg2) -> None: pass                     #float
  def PercentRank(self, Arg1, Arg2, Arg3) -> None: pass           #float
  def PercentRank_Exc(self, Arg1, Arg2, Arg3) -> None: pass       #float
  def PercentRank_Inc(self, Arg1, Arg2, Arg3) -> None: pass       #float
  def Percentile(self, Arg1, Arg2) -> None: pass                  #float
  def Percentile_Exc(self, Arg1, Arg2) -> None: pass              #float
  def Percentile_Inc(self, Arg1, Arg2) -> None: pass              #float
  def Permut(self, Arg1, Arg2) -> None: pass                      #float
  def Permutationa(self, Arg1, Arg2) -> None: pass                #float
  def Phi(self, Arg1) -> None: pass         #float
  def Phonetic(self, Arg1) -> None: pass    #float
  def Pi(self, ) -> None: pass              #float
  def Pmt(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass       #float
  def Poisson(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def Poisson_Dist(self, Arg1, Arg2, Arg3) -> None: pass          #float
  def Power(self, Arg1, Arg2) -> None: pass                       #float
  def Ppmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                      #float
  def Price(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> None: pass               #float
  def PriceDisc(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass                       #float
  def PriceMat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                  #float
  def Prob(self, Arg1, Arg2, Arg3, Arg4) -> None: pass            #float
  def Product(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass    #float
  def Proper(self, Arg1) -> None: pass      #str
  def Pv(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass        #float
  def Quartile(self, Arg1, Arg2) -> None: pass                    #float
  def Quartile_Exc(self, Arg1, Arg2) -> None: pass                #float
  def Quartile_Inc(self, Arg1, Arg2) -> None: pass                #float
  def Quotient(self, Arg1, Arg2) -> None: pass                    #float
  def RSq(self, Arg1, Arg2) -> None: pass   #float
  def RTD(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #VBA_Variant
  def Radians(self, Arg1) -> None: pass     #float
  def RandBetween(self, Arg1, Arg2) -> None: pass                 #float
  def Rank(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def Rank_Avg(self, Arg1, Arg2, Arg3) -> None: pass              #float
  def Rank_Eq(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def Rate(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                      #float
  def Received(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass  #float
  def Replace(self, Arg1, Arg2, Arg3, Arg4) -> None: pass         #str
  def ReplaceB(self, Arg1, Arg2, Arg3, Arg4) -> None: pass        #str
  def Rept(self, Arg1, Arg2) -> None: pass  #str
  def Roman(self, Arg1, Arg2) -> None: pass                       #str
  def Round(self, Arg1, Arg2) -> None: pass                       #float
  def RoundDown(self, Arg1, Arg2) -> None: pass                   #float
  def RoundUp(self, Arg1, Arg2) -> None: pass                     #float
  def Rri(self, Arg1, Arg2, Arg3) -> None: pass                   #float
  def Search(self, Arg1, Arg2, Arg3) -> None: pass                #float
  def SearchB(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def Sec(self, Arg1) -> None: pass         #float
  def Sech(self, Arg1) -> None: pass        #float
  def SeriesSum(self, Arg1, Arg2, Arg3, Arg4) -> None: pass       #float
  def Sinh(self, Arg1) -> None: pass        #float
  def Skew(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass       #float
  def Skew_p(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass     #float
  def Sln(self, Arg1, Arg2, Arg3) -> None: pass                   #float
  def Slope(self, Arg1, Arg2) -> None: pass                       #float
  def Small(self, Arg1, Arg2) -> None: pass                       #float
  def SqrtPi(self, Arg1) -> None: pass      #float
  def StDev(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass      #float
  def StDevP(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass     #float
  def StDev_P(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass    #float
  def StDev_S(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass    #float
  def StEyx(self, Arg1, Arg2) -> None: pass                       #float
  def Standardize(self, Arg1, Arg2, Arg3) -> None: pass           #float
  def Substitute(self, Arg1, Arg2, Arg3, Arg4) -> None: pass      #str
  def Subtotal(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass   #float
  def Sum(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #float
  def SumIf(self, Arg1, Arg2, Arg3) -> None: pass                 #float
  def SumIfs(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass     #float
  def SumProduct(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass                       #float
  def SumSq(self, Arg1) -> None: pass       #float
  def SumX2MY2(self, Arg1, Arg2) -> None: pass                    #float
  def SumX2PY2(self, Arg1, Arg2) -> None: pass                    #float
  def SumXMY2(self, Arg1, Arg2) -> None: pass                     #float
  def Syd(self, Arg1, Arg2, Arg3, Arg4) -> None: pass             #float
  def TBillEq(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def TBillPrice(self, Arg1, Arg2, Arg3) -> None: pass            #float
  def TBillYield(self, Arg1, Arg2, Arg3) -> None: pass            #float
  def TDist(self, Arg1, Arg2, Arg3) -> None: pass                 #float
  def TInv(self, Arg1, Arg2) -> None: pass  #float
  def TTest(self, Arg1, Arg2, Arg3, Arg4) -> None: pass           #float
  def T_Dist(self, Arg1, Arg2, Arg3) -> None: pass                #float
  def T_Dist_2T(self, Arg1, Arg2) -> None: pass                   #float
  def T_Dist_RT(self, Arg1, Arg2) -> None: pass                   #float
  def T_Inv(self, Arg1, Arg2) -> None: pass                       #float
  def T_Inv_2T(self, Arg1, Arg2) -> None: pass                    #float
  def T_Test(self, Arg1, Arg2, Arg3, Arg4) -> None: pass          #float
  def Tanh(self, Arg1) -> None: pass        #float
  def Text(self, Arg1, Arg2) -> None: pass  #str
  def Transpose(self, Arg1) -> None: pass   #VBA_Variant
  def Trend(self, Arg1, Arg2, Arg3, Arg4) -> None: pass           #VBA_Variant
  def Trim(self, Arg1) -> None: pass        #str
  def TrimMean(self, Arg1, Arg2) -> None: pass                    #float
  def USDollar(self, Arg1, Arg2) -> None: pass                    #str
  def Unichar(self, Arg1) -> None: pass     #str
  def Unicode(self, Arg1) -> None: pass     #float
  def VLookup(self, Arg1, Arg2, Arg3, Arg4) -> None: pass         #VBA_Variant
  def Var(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #float
  def VarP(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass       #float
  def Var_P(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass      #float
  def Var_S(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass      #float
  def Vdb(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> None: pass                 #float
  def WebService(self, Url) -> None: pass   #VBA_Variant
  def WeekNum(self, Arg1, Arg2) -> None: pass                     #float
  def Weekday(self, Arg1, Arg2) -> None: pass                     #float
  def Weibull(self, Arg1, Arg2, Arg3, Arg4) -> None: pass         #float
  def Weibull_Dist(self, Arg1, Arg2, Arg3, Arg4) -> None: pass    #float
  def WorkDay(self, Arg1, Arg2, Arg3) -> None: pass               #float
  def WorkDay_Intl(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass                     #float
  def Xirr(self, Arg1, Arg2, Arg3) -> None: pass                  #float
  def Xnpv(self, Arg1, Arg2) -> None: pass  #float
  def Xor(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass        #bool
  def YearFrac(self, Arg1, Arg2, Arg3) -> None: pass              #float
  def YieldDisc(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> None: pass                       #float
  def YieldMat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> None: pass                  #float
  def ZTest(self, Arg1, Arg2, Arg3) -> None: pass                 #float
  def Z_Test(self, Arg1, Arg2, Arg3) -> None: pass                #float




class Worksheets:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.HPageBreaks: None          #HPageBreaks
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object
    self.VPageBreaks: None          #VPageBreaks
    self.Visible: None  #VBA_Variant

  def Add(self, Before, After, Count, Type) -> None: pass         #VBA_Object
  def Add2(self, Before, After, Count, NewLayout) -> None: pass   #VBA_Object
  def Copy(self, Before, After) -> None: pass                     #None
  def Delete(self, ) -> None: pass          #None
  def FillAcrossSheets(self, Range, Type) -> None: pass           #None
  def Move(self, Before, After) -> None: pass                     #None
  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas) -> None: pass  #VBA_Variant
  def PrintPreview(self, EnableChanges) -> None: pass             #None
  def Select(self, Replace) -> None: pass   #None




class XPath:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Map: None      #XmlMap | XPath
    self.Parent: None   #VBA_Object
    self.Repeating: bool
    self.Value: str

  def Clear(self, ) -> None: pass           #None
  def SetValue(self, Map, XPath, SelectionNamespace, Repeating) -> None: pass           #None




class XmlDataBinding:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.SourceUrl: str

  def ClearSettings(self, ) -> None: pass   #None
  def LoadSettings(self, Url) -> None: pass                       #None
  def Refresh(self, ) -> None: pass         #XlXmlImportResult




class XmlMap:
  '''just need name'''

  def __init__(self):
    self.AdjustColumnWidth: bool
    self.AppendOnImport: bool
    self.Application: None          #Application
    self.Creator: int
    self.DataBinding: None          #XmlDataBinding
    self.IsExportable: None         #XPath
    self.Name: str
    self.Parent: None   #VBA_Object
    self.PreserveColumnFilter: bool
    self.PreserveNumberFormatting: bool
    self.RootElementName: str
    self.RootElementNamespace: None             #XmlNamespace
    self.SaveDataSourceDefinition: bool
    self.Schemas: None  #XmlSchemas | XmlMap
    self.ShowImportExportValidationErrors: bool
    self.WorkbookConnection: None   #XMLMap

  def Delete(self, ) -> None: pass          #None
  def Export(self, Url, Overwrite) -> None: pass                  #XlXmlExportResult
  def ExportXml(self, Data) -> None: pass   #XlXmlExportResult
  def Import(self, Url, Overwrite) -> None: pass                  #XlXmlImportResult
  def ImportXml(self, __UN_PARSE__, __UN_PARSE1__) -> None: pass  #XlXmlImportResult




class XmlMaps:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object

  def Add(self, Schema, RootElementName) -> None: pass            #XmlMap




class XmlNamespace:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Parent: None   #VBA_Object
    self.Prefix: str
    self.Uri: str




class XmlNamespaces:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object
    self.Value: str

  def InstallManifest(self, Path, InstallForAllUsers) -> None: pass                     #None




class XmlSchema:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Creator: int
    self.Name: str
    self.Namespace: None            #XmlNamespace
    self.Parent: None   #VBA_Object
    self.XML: str




class XmlSchemas:
  '''just need name'''

  def __init__(self):
    self.Application: None          #Application
    self.Count: int
    self.Creator: int
    self.Item: None     #VBA_Object
    self.Parent: None   #VBA_Object




# ole cls end




