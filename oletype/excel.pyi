
# Generated by oletype, win32com(excel) object py/pyi file
#   for ide tips
#
# Usage:
#   from win32com.client import Dispatch
#   from oletype import excel
#   exapp = excel.Application = Dispatch('excel.application')  #declare app obj
#   exapp.   #  get ide auto type hit



from enum import IntFlag, IntEnum, unique


# TODO FIXME unparsed types.  0

# TODO FIXME not found types.  45
class AboveAverage: pass
class CALCULATEDMEMBER: pass
class CalculatedMember: pass
class Databar: pass
class Enabled: pass
class FileFormat: pass
class FixedDecimal: pass
class FreeformBuilder: pass
class GenerateTableRefs: pass
class INT32: pass
class LineStyle: pass
class MODELRELATIONSHIP: pass
class MODELTABLE: pass
class MsoAutomationSecurity: pass
class MsoEncoding: pass
class MsoFeatureInstall: pass
class MsoFileValidationMode: pass
class MsoScreenSize: pass
class MsoTargetBrowser: pass
class STRING: pass
class Top10: pass
class UniqueValues: pass
class VBA_OBJECT: pass
class VBA_Object: pass
class VBA_Variant: pass
class VBA_object: pass
class WORKBOOKCONNECTION: pass
class Watch: pass
class XLCREATOR: pass
class XLCutCopyMode: pass
class XlCreator: pass
class XlReadingOrder: pass
class __DEPRECATED_WARNNING__: pass
class integer: pass
class points: pass
class xlAutomatic: pass
class xlColorIndexAutomatic: pass
class xlColorIndexNone: pass
class xlContext: pass
class xlExcelMenus: pass
class xlLTR: pass
class xlLogicalCursor: pass
class xlLotusHelp: pass
class xlRTL: pass
class xlVisualCursor: pass

# ole empty class.  155
class AddIn: pass
class Adjustments: pass
class AllowEditRange: pass
class Author: pass
class AutoFilter: pass
class Axes: pass
class Axis: pass
class AxisTitle: pass
class Border: pass
class CalloutFormat: pass
class Chart: pass
class ChartArea: pass
class ChartFormat: pass
class ChartGroup: pass
class ChartGroups: pass
class ChartObject: pass
class ChartObjects: pass
class ChartTitle: pass
class Charts: pass
class ColorFormat: pass
class ColorScale: pass
class ColorScaleCriteria: pass
class ColorScaleCriterion: pass
class Comment: pass
class CommentThreaded: pass
class ConnectorFormat: pass
class ControlFormat: pass
class CubeField: pass
class CubeFields: pass
class CustomProperty: pass
class CustomView: pass
class DataFeedConnection: pass
class DataLabel: pass
class DataLabels: pass
class DataTable: pass
class Dialog: pass
class DisplayUnitLabel: pass
class DownBars: pass
class DropLines: pass
class Error: pass
class ErrorBars: pass
class FileExportConverter: pass
class FillFormat: pass
class Filter: pass
class Filters: pass
class Floor: pass
class FormatColor: pass
class FormatCondition: pass
class Gridlines: pass
class GroupShapes: pass
class HPageBreak: pass
class HiLoLines: pass
class Hyperlink: pass
class Icon: pass
class IconCriteria: pass
class IconCriterion: pass
class IconSet: pass
class IconSetCondition: pass
class LeaderLines: pass
class Legend: pass
class LegendEntries: pass
class LegendEntry: pass
class LegendKey: pass
class LineFormat: pass
class LinkFormat: pass
class ListColumn: pass
class ListColumns: pass
class ListObject: pass
class ListRow: pass
class ListRows: pass
class Model3DFormat: pass
class ModelMeasure: pass
class ModelRelationship: pass
class ModelTable: pass
class ModelTableColumn: pass
class ModelTableColumns: pass
class Name: pass
class ODBCError: pass
class OLEDBError: pass
class OLEFormat: pass
class Parameter: pass
class Parameters: pass
class PictureFormat: pass
class PivotAxis: pass
class PivotCache: pass
class PivotCaches: pass
class PivotCell: pass
class PivotField: pass
class PivotFields: pass
class PivotFormula: pass
class PivotFormulas: pass
class PivotItem: pass
class PivotItemList: pass
class PivotItems: pass
class PivotLayout: pass
class PivotLine: pass
class PivotLines: pass
class PivotTable: pass
class PivotTableChangeList: pass
class PlotArea: pass
class Point: pass
class Points: pass
class ProtectedViewWindow: pass
class PublishObject: pass
class QueryTable: pass
class RecentFile: pass
class Series: pass
class SeriesCollection: pass
class SeriesLines: pass
class ShadowFormat: pass
class Shape: pass
class ShapeNode: pass
class ShapeNodes: pass
class ShapeRange: pass
class Slicer: pass
class SlicerCache: pass
class SlicerCacheLevel: pass
class SlicerCacheLevels: pass
class SlicerItem: pass
class SlicerItems: pass
class SlicerPivotTables: pass
class Slicers: pass
class SortField: pass
class SparkAxes: pass
class SparkColor: pass
class SparkHorizontalAxis: pass
class SparkPoints: pass
class SparkVerticalAxis: pass
class Sparkline: pass
class SparklineGroup: pass
class TableObject: pass
class TextConnection: pass
class TextEffectFormat: pass
class TextFrame: pass
class TextFrame2: pass
class ThreeDFormat: pass
class TickLabels: pass
class TimelineState: pass
class TimelineViewState: pass
class TreeviewControl: pass
class Trendline: pass
class Trendlines: pass
class UpBars: pass
class UserAccess: pass
class UserAccessList: pass
class VPageBreak: pass
class ValueChange: pass
class Walls: pass
class WorkbookQuery: pass
class Worksheets: pass
class XmlDataBinding: pass
class XmlMap: pass
class XmlNamespace: pass
class XmlSchema: pass
class XmlSchemas: pass

# list collection  1
class VBA_Collection:
  '''The Item property of a collection returns a single object from that collection. The following example sets the firstBook variable to a Workbook object that represents the first workbook in the Workbooks collection.

Set FirstBook = Workbooks.Item(1)

The Item property is the default property for most collections, so you can write the same statement more concisely by omitting the Item keyword.

Set FirstBook = Workbooks(1)

For more information about a specific collection, see the Help topic for that collection or the Item property for the collection.

Although you can usually specify an integer value with the Item property, it may be more convenient to return an object by name. Before you can use a name with the Item property, you must name the object. Most often, this is done by setting the object's Name property. The following example creates a named worksheet in the active workbook and then refers to the worksheet by name.

ActiveWorkbook.Worksheets.Add.Name = "A New Sheet" 
With Worksheets("A New Sheet") 
 .Range("A5:A10").Formula = "=RAND()" 
End With

Some collections have predefined index values you can use to return single objects. Each predefined index value is represented by a constant. For example, you specify an xlBordersIndex constant with the Item property of the Borders collection to return a single border.

The following example sets the bottom border of cells A1:G1 on Sheet1 to a double line.

Worksheets("Sheet1").Range("A1:A1"). _ 
 Borders.Item(xlEdgeBottom).LineStyle = xlDouble

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''


# list enumeration  157
@unique
class XlCalculation(IntFlag):
  '''Specifies the calculation mode.'''

  xlCalculationAutomatic = -4105
  '''Excel controls recalculation.'''
  xlCalculationManual = -4135
  '''Calculation is done when the user requests it.'''
  xlCalculationSemiautomatic = 2
  '''Excel controls recalculation but ignores changes in tables.'''

@unique
class XlCalculationInterruptKey(IntFlag):
  '''Specifies which key interrupts recalculation.'''

  xlAnyKey = 2
  '''Pressing any key interrupts recalculation.'''
  xlEscKey = 1
  '''Pressing the ESC key interrupts recalculation.'''
  xlNoKey = 0
  '''No key press can interrupt recalculation.'''

@unique
class XlCalculationState(IntFlag):
  '''Specifies the calculation state of the application.'''

  xlCalculating = 1
  '''Calculations in process.'''
  xlDone = 0
  '''Calculations complete.'''
  xlPending = 2
  '''Changes that trigger calculation have been made, but a recalculation has not yet been performed.'''

@unique
class XlClipboardFormat(IntFlag):
  '''Specifies the format of an item on the Microsoft Windows clipboard.'''

  xlClipboardFormatBIFF = 8
  '''Binary Interchange file format for Excel version 2.x'''
  xlClipboardFormatBIFF12 = 63
  '''Binary Interchange file format 12'''
  xlClipboardFormatBIFF2 = 18
  '''Binary Interchange file format 2'''
  xlClipboardFormatBIFF3 = 20
  '''Binary Interchange file format 3'''
  xlClipboardFormatBIFF4 = 30
  '''Binary Interchange file format 4'''
  xlClipboardFormatBinary = 15
  '''Binary format'''
  xlClipboardFormatBitmap = 9
  '''Bitmap format'''
  xlClipboardFormatCGM = 13
  '''CGM format'''
  xlClipboardFormatCSV = 5
  '''CSV format'''
  xlClipboardFormatDIF = 4
  '''DIF format'''
  xlClipboardFormatDspText = 12
  '''Dsp Text format'''
  xlClipboardFormatEmbeddedObject = 21
  '''Embedded Object'''
  xlClipboardFormatEmbedSource = 22
  '''Embedded Source'''
  xlClipboardFormatLink = 11
  '''Link'''
  xlClipboardFormatLinkSource = 23
  '''Link to the source file'''
  xlClipboardFormatLinkSourceDesc = 32
  '''Link to the source description'''
  xlClipboardFormatMovie = 24
  '''Movie'''
  xlClipboardFormatNative = 14
  '''Native'''
  xlClipboardFormatObjectDesc = 31
  '''Object description'''
  xlClipboardFormatObjectLink = 19
  '''Object link'''
  xlClipboardFormatOwnerLink = 17
  '''Link to the owner'''
  xlClipboardFormatPICT = 2
  '''Picture'''
  xlClipboardFormatPrintPICT = 3
  '''Print picture'''
  xlClipboardFormatRTF = 7
  '''RTF format'''
  xlClipboardFormatScreenPICT = 29
  '''Screen Picture'''
  xlClipboardFormatStandardFont = 28
  '''Standard Font'''
  xlClipboardFormatStandardScale = 27
  '''Standard Scale'''
  xlClipboardFormatSYLK = 6
  '''SYLK'''
  xlClipboardFormatTable = 16
  '''Table'''
  xlClipboardFormatText = 0
  '''Text'''
  xlClipboardFormatToolFace = 25
  '''Tool Face'''
  xlClipboardFormatToolFacePICT = 26
  '''Tool Face Picture'''
  xlClipboardFormatVALU = 1
  '''Value'''
  xlClipboardFormatWK1 = 10
  '''Workbook'''

@unique
class XlCommandUnderlines(IntFlag):
  '''Specifies the state of the command underlines in Microsoft Excel for the Macintosh.'''

  xlCommandUnderlinesAutomatic = -4105
  '''Excel controls the display of command underlines.'''
  xlCommandUnderlinesOff = -4146
  '''Command underlines are not displayed.'''
  xlCommandUnderlinesOn = 1
  '''Command underlines are displayed.'''

@unique
class XlMousePointer(IntFlag):
  '''Specifies the appearance of the mouse pointer in Excel.'''

  xlDefault = -4143
  '''The default pointer.'''
  xlIBeam = 3
  '''The I-beam pointer.'''
  xlNorthwestArrow = 1
  '''The northwest-arrow pointer.'''
  xlWait = 2
  '''The hourglass pointer.'''

@unique
class XlCutCopyMode(IntFlag):
  '''Specifies whether status is Copy mode or Cut mode.'''

  xlCopy = 1
  '''In Copy mode'''
  xlCut = 2
  '''In Cut mode'''

@unique
class XlCommentDisplayMode(IntFlag):
  '''Specifies the way that cells display comments and comment indicators.'''

  xlCommentAndIndicator = 1
  '''Display comment and indicator at all times.'''
  xlCommentIndicatorOnly = -1
  '''Display comment indicator only. Display comment when mouse pointer is moved over cell.'''
  xlNoIndicator = 0
  '''Display neither the comment nor the comment indicator at any time.'''

@unique
class XlEnableCancelKey(IntFlag):
  '''Specifies how Microsoft Office Excel 2007 handles CTRL+BREAK (or ESC or COMMAND+PERIOD) user interruptions to the running procedure.'''

  xlDisabled = 0
  '''Cancel key trapping is completely disabled.'''
  xlErrorHandler = 2
  '''The interrupt is sent to the running procedure as an error, trappable by an error handler set up with an On Error GoTo statement. The trappable error code is 18.'''
  xlInterrupt = 1
  '''The current procedure is interrupted, and the user can debug or end the procedure.'''

@unique
class XlFileValidationPivotMode(IntFlag):
  '''Specifies how to validate the data caches for PivotTable reports.

#REMARKS:

This enumeration is used to specify the setting of the FileValidationPivot property of the Application object.

The effect of the xlFileValidationPivotDefault setting is controlled by the PivotOptions registry value, which is set in the following registry subkey: HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\Excel\Security\FileValidation. The PivotOptions value is a DWORD value that can be set as listed in the following table.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlFileValidationPivotDefault = 0
  '''Validate the contents of data caches as specified by the PivotOptions registry setting (default).'''
  xlFileValidationPivotRun = 1
  '''Validate the contents of all data caches regardless of the registry setting.'''
  xlFileValidationPivotSkip = 2
  '''Do not validate the contents of data caches.'''

@unique
class XlMailSystem(IntFlag):
  '''Specifies the mail system that is installed on the host computer.'''

  xlMAPI = 1
  '''MAPI-complaint system'''
  xlNoMailSystem = 0
  '''No mail system'''
  xlPowerTalk = 2
  '''PowerTalk mail system'''

@unique
class XlMeasurementUnits(IntFlag):
  '''Specifies the measurement units.'''

  xlCentimeters = 1
  '''Centimeters'''
  xlInches = 0
  '''Inches'''
  xlMillimeters = 2
  '''Millimeters'''

@unique
class XlDirection(IntFlag):
  '''Specifies the direction in which to move.'''

  xlDown = -4121
  '''Down.'''
  xlToLeft = -4159
  '''To left.'''
  xlToRight = -4161
  '''To right.'''
  xlUp = -4162
  '''Up.'''

@unique
class XlReferenceStyle(IntFlag):
  '''Specifies the reference style.'''

  xlA1 = 1
  '''Default. Use xlA1 to return an A1-style reference.'''
  xlR1C1 = -4150
  '''Use xlR1C1 to return an R1C1-style reference.'''

class Constants(IntFlag):
  '''This enumeration groups together constants used with various Excel methods.'''

  xl3DBar = -4099
  '''3D Bar'''
  xl3DEffects1 = 13
  '''3D Effects1'''
  xl3DEffects2 = 14
  '''3D Effects2'''
  xl3DSurface = -4103
  '''3D Surface'''
  xlAbove = 0
  '''Above'''
  xlAccounting1 = 4
  '''Accounting1'''
  xlAccounting2 = 5
  '''Accounting2'''
  xlAccounting4 = 17
  '''Accounting4'''
  xlAdd = 2
  '''Add'''
  xlAll = -4104
  '''All'''
  xlAccounting3 = 6
  '''Accounting3'''
  xlAllExceptBorders = 7
  '''All Except Borders'''
  xlAutomatic = -4105
  '''Automatic'''
  xlBar = 2
  '''Automatic'''
  xlBelow = 1
  '''Below'''
  xlBidi = -5000
  '''Bidi'''
  xlBidiCalendar = 3
  '''BidiCalendar'''
  xlBoth = 1
  '''Both'''
  xlBottom = -4107
  '''Bottom'''
  xlCascade = 7
  '''Cascade'''
  xlCenter = -4108
  '''Center'''
  xlCenterAcrossSelection = 7
  '''Center Across Selection'''
  xlChart4 = 2
  '''Chart 4'''
  xlChartSeries = 17
  '''Chart Series'''
  xlChartShort = 6
  '''Chart Short'''
  xlChartTitles = 18
  '''Chart Titles'''
  xlChecker = 9
  '''Checker'''
  xlCircle = 8
  '''Circle'''
  xlClassic1 = 1
  '''Classic1'''
  xlClassic2 = 2
  '''Classic2'''
  xlClassic3 = 3
  '''Classic3'''
  xlClosed = 3
  '''Closed'''
  xlColor1 = 7
  '''Color1'''
  xlColor2 = 8
  '''Color2'''
  xlColor3 = 9
  '''Color3'''
  xlColumn = 3
  '''Column'''
  xlCombination = -4111
  '''Combination'''
  xlComplete = 4
  '''Complete'''
  xlConstants = 2
  '''Constants'''
  xlContents = 2
  '''Contents'''
  xlContext = -5002
  '''Context'''
  xlCorner = 2
  '''Corner'''
  xlCrissCross = 16
  '''CrissCross'''
  xlCross = 4
  '''Cross'''
  xlCustom = -4114
  '''Custom'''
  xlDebugCodePane = 13
  '''Debug Code Pane'''
  xlDefaultAutoFormat = -1
  '''Default Auto Format'''
  xlDesktop = 9
  '''Desktop'''
  xlDiamond = 2
  '''Diamond'''
  xlDirect = 1
  '''Direct'''
  xlDistributed = -4117
  '''Distributed'''
  xlDivide = 5
  '''Divide'''
  xlDoubleAccounting = 5
  '''Double Accounting'''
  xlDoubleClosed = 5
  '''Double Closed'''
  xlDoubleOpen = 4
  '''Double Open'''
  xlDoubleQuote = 1
  '''Double Quote'''
  xlDrawingObject = 14
  '''Drawing Object'''
  xlEntireChart = 20
  '''Entire Chart'''
  xlExcelMenus = 1
  '''Excel Menus'''
  xlExtended = 3
  '''Extended'''
  xlFill = 5
  '''Fill'''
  xlFirst = 0
  '''First'''
  xlFixedValue = 1
  '''Fixed Value'''
  xlFloating = 5
  '''Floating'''
  xlFormats = -4122
  '''Formats'''
  xlFormula = 5
  '''Formula'''
  xlFullScript = 1
  '''Full Script'''
  xlGeneral = 1
  '''General'''
  xlGray16 = 17
  '''Gray16'''
  xlGray25 = -4124
  '''Gray25'''
  xlGray50 = -4125
  '''Gray50'''
  xlGray75 = -4126
  '''Gray75'''
  xlGray8 = 18
  '''Gray8'''
  xlGregorian = 2
  '''Gregorian'''
  xlGrid = 15
  '''Grid'''
  xlGridline = 22
  '''Gridline'''
  xlHigh = -4127
  '''High'''
  xlHindiNumerals = 3
  '''Hindi Numerals'''
  xlIcons = 1
  '''Icons'''
  xlImmediatePane = 12
  '''Immediate Pane'''
  xlInside = 2
  '''Inside'''
  xlInteger = 2
  '''Integer'''
  xlJustify = -4130
  '''Justify'''
  xlLast = 1
  '''Last'''
  xlLastCell = 11
  '''Last Cell'''
  xlLatin = -5001
  '''Latin'''
  xlLeft = -4131
  '''Left'''
  xlLeftToRight = 2
  '''Left To Right'''
  xlLightDown = 13
  '''Light Down'''
  xlLightHorizontal = 11
  '''Light Horizontal'''
  xlLightUp = 14
  '''Light Up'''
  xlLightVertical = 12
  '''Light Vertical'''
  xlList1 = 10
  '''List1'''
  xlList2 = 11
  '''List2'''
  xlList3 = 12
  '''List3'''
  xlLocalFormat1 = 15
  '''Local Format1'''
  xlLocalFormat2 = 16
  '''Local Format2'''
  xlLogicalCursor = 1
  '''Logical Cursor'''
  xlLong = 3
  '''Long'''
  xlLotusHelp = 2
  '''Lotus Help'''
  xlLow = -4134
  '''Low'''
  xlLTR = -5003
  '''LTR'''
  xlMacrosheetCell = 7
  '''MacrosheetCell'''
  xlManual = -4135
  '''Manual'''
  xlMaximum = 2
  '''Maximum'''
  xlMinimum = 4
  '''Minimum'''
  xlMinusValues = 3
  '''Minus Values'''
  xlMixed = 2
  '''Mixed'''
  xlMixedAuthorizedScript = 4
  '''Mixed Authorized Script'''
  xlMixedScript = 3
  '''Mixed Script'''
  xlModule = -4141
  '''Module'''
  xlMultiply = 4
  '''Multiply'''
  xlNarrow = 1
  '''Narrow'''
  xlNextToAxis = 4
  '''Next To Axis'''
  xlNoDocuments = 3
  '''No Documents'''
  xlNone = -4142
  '''None'''
  xlNotes = -4144
  '''Notes'''
  xlOff = -4146
  '''Off'''
  xlOn = 1
  '''On'''
  xlOpaque = 3
  '''Opaque'''
  xlOpen = 2
  '''Open'''
  xlOutside = 3
  '''Outside'''
  xlPartial = 3
  '''Partial'''
  xlPartialScript = 2
  '''Partial Script'''
  xlPercent = 2
  '''Percent'''
  xlPlus = 9
  '''Plus'''
  xlPlusValues = 2
  '''Plus Values'''
  xlReference = 4
  '''Reference'''
  xlRight = -4152
  '''Right'''
  xlRTL = -5004
  '''RTL'''
  xlScale = 3
  '''Scale'''
  xlSemiautomatic = 2
  '''Semiautomatic'''
  xlSemiGray75 = 10
  '''SemiGray75'''
  xlShort = 1
  '''Short'''
  xlShowLabel = 4
  '''Show Label'''
  xlShowLabelAndPercent = 5
  '''Show Label and Percent'''
  xlShowPercent = 3
  '''Show Percent'''
  xlShowValue = 2
  '''Show Value'''
  xlSimple = -4154
  '''Simple'''
  xlSingle = 2
  '''Single'''
  xlSingleAccounting = 4
  '''Single Accounting'''
  xlSingleQuote = 2
  '''Single Quote'''
  xlSolid = 1
  '''Solid'''
  xlSquare = 1
  '''Square'''
  xlStar = 5
  '''Star'''
  xlStError = 4
  '''St Error'''
  xlStrict = 2
  '''Strict'''
  xlSubtract = 3
  '''Subtract'''
  xlSystem = 1
  '''System'''
  xlTextBox = 16
  '''Text Box'''
  xlTiled = 1
  '''Tiled'''
  xlTitleBar = 8
  '''Title Bar'''
  xlToolbar = 1
  '''Toolbar'''
  xlToolbarButton = 2
  '''Toolbar Button'''
  xlTop = -4160
  '''Top'''
  xlTopToBottom = 1
  '''Top To Bottom'''
  xlTransparent = 2
  '''Transparent'''
  xlTriangle = 3
  '''Triangle'''
  xlVeryHidden = 2
  '''Very Hidden'''
  xlVisible = 12
  '''Visible'''
  xlVisualCursor = 2
  '''Visual Cursor'''
  xlWatchPane = 11
  '''Watch Pane'''
  xlWide = 3
  '''Wide'''
  xlWorkbookTab = 6
  '''Workbook Tab'''
  xlWorksheet4 = 1
  '''Worksheet4'''
  xlWorksheetCell = 3
  '''Worksheet Cell'''
  xlWorksheetShort = 5
  '''Worksheet Short'''

@unique
class XlWindowState(IntFlag):
  '''Specifies the state of the window.'''

  xlMaximized = -4137
  '''Maximized'''
  xlMinimized = -4140
  '''Minimized'''
  xlNormal = -4143
  '''Normal'''

class XlFileFormat(IntFlag):
  '''Specifies the file format when saving the worksheet.'''

  xlAddIn = 18
  '''Microsoft Excel 97-2003 Add-In  *.xla'''
  xlAddIn8 = 18
  '''Microsoft Excel 97-2003 Add-In  *.xla'''
  xlCSV = 6
  '''CSV  *.csv'''
  xlCSVMac = 22
  '''Macintosh CSV  *.csv'''
  xlCSVMSDOS = 24
  '''MSDOS CSV  *.csv'''
  xlCSVUTF8 = 62
  '''UTF8 CSV  *.csv'''
  xlCSVWindows = 23
  '''Windows CSV  *.csv'''
  xlCurrentPlatformText = -4158
  '''Current Platform Text  *.txt'''
  xlDBF2 = 7
  '''Dbase 2 format  *.dbf'''
  xlDBF3 = 8
  '''Dbase 3 format  *.dbf'''
  xlDBF4 = 11
  '''Dbase 4 format  *.dbf'''
  xlDIF = 9
  '''Data Interchange format  *.dif'''
  xlExcel12 = 50
  '''Excel Binary Workbook  *.xlsb'''
  xlExcel2 = 16
  '''Excel version 2.0 (1987)  *.xls'''
  xlExcel2FarEast = 27
  '''Excel version 2.0 far east (1987)  *.xls'''
  xlExcel3 = 29
  '''Excel version 3.0 (1990)  *.xls'''
  xlExcel4 = 33
  '''Excel version 4.0 (1992)  *.xls'''
  xlExcel4Workbook = 35
  '''Excel version 4.0. Workbook format (1992)  *.xlw'''
  xlExcel5 = 39
  '''Excel version 5.0 (1994)  *.xls'''
  xlExcel7 = 39
  '''Excel 95 (version 7.0)  *.xls'''
  xlExcel8 = 56
  '''Excel 97-2003 Workbook  *.xls'''
  xlExcel9795 = 43
  '''Excel version 95 and 97  *.xls'''
  xlHtml = 44
  '''HTML format  *.htm; *.html'''
  xlIntlAddIn = 26
  '''International Add-In  No file extension'''
  xlIntlMacro = 25
  '''International Macro  No file extension'''
  xlOpenDocumentSpreadsheet = 60
  '''OpenDocument Spreadsheet  *.ods'''
  xlOpenXMLAddIn = 55
  '''Open XML Add-In  *.xlam'''
  xlOpenXMLStrictWorkbook = 61 #TODO FIXME(&H3D)
  '''Strict Open XML file  *.xlsx'''
  xlOpenXMLTemplate = 54
  '''Open XML Template  *.xltx'''
  xlOpenXMLTemplateMacroEnabled = 53
  '''Open XML Template Macro Enabled  *.xltm'''
  xlOpenXMLWorkbook = 51
  '''Open XML Workbook  *.xlsx'''
  xlOpenXMLWorkbookMacroEnabled = 52
  '''Open XML Workbook Macro Enabled  *.xlsm'''
  xlSYLK = 2
  '''Symbolic Link format  *.slk'''
  xlTemplate = 17
  '''Excel Template format  *.xlt'''
  xlTemplate8 = 17
  '''Template 8  *.xlt'''
  xlTextMac = 19
  '''Macintosh Text  *.txt'''
  xlTextMSDOS = 21
  '''MSDOS Text  *.txt'''
  xlTextPrinter = 36
  '''Printer Text  *.prn'''
  xlTextWindows = 20
  '''Windows Text  *.txt'''
  xlUnicodeText = 42
  '''Unicode Text  No file extension; *.txt'''
  xlWebArchive = 45
  '''Web Archive  *.mht; *.mhtml'''
  xlWJ2WD1 = 14
  '''Japanese 1-2-3  *.wj2'''
  xlWJ3 = 40
  '''Japanese 1-2-3  *.wj3'''
  xlWJ3FJ3 = 41
  '''Japanese 1-2-3 format  *.wj3'''
  xlWK1 = 5
  '''Lotus 1-2-3 format  *.wk1'''
  xlWK1ALL = 31
  '''Lotus 1-2-3 format  *.wk1'''
  xlWK1FMT = 30
  '''Lotus 1-2-3 format  *.wk1'''
  xlWK3 = 15
  '''Lotus 1-2-3 format  *.wk3'''
  xlWK3FM3 = 32
  '''Lotus 1-2-3 format  *.wk3'''
  xlWK4 = 38
  '''Lotus 1-2-3 format  *.wk4'''
  xlWKS = 4
  '''Lotus 1-2-3 format  *.wks'''
  xlWorkbookDefault = 51
  '''Workbook default  *.xlsx'''
  xlWorkbookNormal = -4143
  '''Workbook normal  *.xls'''
  xlWorks2FarEast = 28
  '''Microsoft Works 2.0 far east format  *.wks'''
  xlWQ1 = 34
  '''Quattro Pro format  *.wq1'''
  xlXMLSpreadsheet = 46
  '''XML Spreadsheet  *.xml'''

class XlBuiltInDialog(IntFlag):
  '''Specifies which dialog box to display.'''

  xlDialogActivate = 103
  '''Activate dialog box'''
  xlDialogActiveCellFont = 476
  '''Active Cell Font dialog box'''
  xlDialogAddChartAutoformat = 390
  '''Add Chart Autoformat dialog box'''
  xlDialogAddinManager = 321
  '''Addin Manager dialog box'''
  xlDialogAlignment = 43
  '''Alignment dialog box'''
  xlDialogApplyNames = 133
  '''Apply Names dialog box'''
  xlDialogApplyStyle = 212
  '''Apply Style dialog box'''
  xlDialogAppMove = 170
  '''AppMove dialog box'''
  xlDialogAppSize = 171
  '''AppSize dialog box'''
  xlDialogArrangeAll = 12
  '''Arrange All dialog box'''
  xlDialogAssignToObject = 213
  '''Assign To Object dialog box'''
  xlDialogAssignToTool = 293
  '''Assign To Tool dialog box'''
  xlDialogAttachText = 80
  '''Attach Text dialog box'''
  xlDialogAttachToolbars = 323
  '''Attach Toolbars dialog box'''
  xlDialogAutoCorrect = 485
  '''Auto Correct dialog box'''
  xlDialogAxes = 78
  '''Axes dialog box'''
  xlDialogBorder = 45
  '''Border dialog box'''
  xlDialogCalculation = 32
  '''Calculation dialog box'''
  xlDialogCellProtection = 46
  '''Cell Protection dialog box'''
  xlDialogChangeLink = 166
  '''Change Link dialog box'''
  xlDialogChartAddData = 392
  '''Chart Add Data dialog box'''
  xlDialogChartLocation = 527
  '''Chart Location dialog box'''
  xlDialogChartOptionsDataLabelMultiple = 724
  '''Chart Options DataLabel Multiple dialog box'''
  xlDialogChartOptionsDataLabels = 505
  '''Chart Options DataLabels dialog box'''
  xlDialogChartOptionsDataTable = 506
  '''Chart Options DataTable dialog box'''
  xlDialogChartSourceData = 540
  '''Chart SourceData dialog box'''
  xlDialogChartTrend = 350
  '''Chart Trend dialog box'''
  xlDialogChartType = 526
  '''Chart Type dialog box'''
  xlDialogChartWizard = 288
  '''ChartWizard dialog box'''
  xlDialogCheckboxProperties = 435
  '''Checkbox Properties dialog box'''
  xlDialogClear = 52
  '''Clear dialog box'''
  xlDialogColorPalette = 161
  '''Color Palette dialog box'''
  xlDialogColumnWidth = 47
  '''Column Width dialog box'''
  xlDialogCombination = 73
  '''Combination dialog box'''
  xlDialogConditionalFormatting = 583
  '''Conditional Formatting dialog box'''
  xlDialogConsolidate = 191
  '''Consolidate dialog box'''
  xlDialogCopyChart = 147
  '''Copy Chart dialog box'''
  xlDialogCopyPicture = 108
  '''Copy Picture dialog box'''
  xlDialogCreateList = 796
  '''Create List dialog box'''
  xlDialogCreateNames = 62
  '''Create Names dialog box'''
  xlDialogCreatePublisher = 217
  '''Create Publisher dialog box'''
  xlDialogCreateRelationship = 1272
  '''Create Relationship dialog box'''
  xlDialogCustomizeToolbar = 276
  '''Customize Toolbar dialog box'''
  xlDialogCustomViews = 493
  '''Custom Views dialog box'''
  xlDialogDataDelete = 36
  '''Data Delete dialog box'''
  xlDialogDataLabel = 379
  '''Data Label dialog box'''
  xlDialogDataLabelMultiple = 723
  '''Data Label Multiple dialog box'''
  xlDialogDataSeries = 40
  '''Data Series dialog box'''
  xlDialogDataValidation = 525
  '''Data Validation dialog box'''
  xlDialogDefineName = 61
  '''Define Name dialog box'''
  xlDialogDefineStyle = 229
  '''Define Style dialog box'''
  xlDialogDeleteFormat = 111
  '''Delete Format dialog box'''
  xlDialogDeleteName = 110
  '''Delete Name dialog box'''
  xlDialogDemote = 203
  '''Demote dialog box'''
  xlDialogDisplay = 27
  '''Display dialog box'''
  xlDialogDocumentInspector = 862
  '''Document Inspector dialog box'''
  xlDialogEditboxProperties = 438
  '''Editbox Properties dialog box'''
  xlDialogEditColor = 223
  '''Edit Color dialog box'''
  xlDialogEditDelete = 54
  '''Edit Delete dialog box'''
  xlDialogEditionOptions = 251
  '''Edition Options dialog box'''
  xlDialogEditSeries = 228
  '''Edit Series dialog box'''
  xlDialogErrorbarX = 463
  '''Errorbar X dialog box'''
  xlDialogErrorbarY = 464
  '''Errorbar Y dialog box'''
  xlDialogErrorChecking = 732
  '''Error Checking dialog box'''
  xlDialogEvaluateFormula = 709
  '''Evaluate Formula dialog box'''
  xlDialogExternalDataProperties = 530
  '''External Data Properties dialog box'''
  xlDialogExtract = 35
  '''Extract dialog box'''
  xlDialogFileDelete = 6
  '''File Delete dialog box'''
  xlDialogFileSharing = 481
  '''File Sharing dialog box'''
  xlDialogFillGroup = 200
  '''Fill Group dialog box'''
  xlDialogFillWorkgroup = 301
  '''Fill Workgroup dialog box'''
  xlDialogFilter = 447
  '''Dialog Filter dialog box'''
  xlDialogFilterAdvanced = 370
  '''Filter Advanced dialog box'''
  xlDialogFindFile = 475
  '''Find File dialog box'''
  xlDialogFont = 26
  '''Font dialog box'''
  xlDialogFontProperties = 381
  '''Font Properties dialog box'''
  xlDialogFormatAuto = 269
  '''Format Auto dialog box'''
  xlDialogFormatChart = 465
  '''Format Chart dialog box'''
  xlDialogFormatCharttype = 423
  '''Format Charttype dialog box'''
  xlDialogFormatFont = 150
  '''Format Font dialog box'''
  xlDialogFormatLegend = 88
  '''Format Legend dialog box'''
  xlDialogFormatMain = 225
  '''Format Main dialog box'''
  xlDialogFormatMove = 128
  '''Format Move dialog box'''
  xlDialogFormatNumber = 42
  '''Format Number dialog box'''
  xlDialogFormatOverlay = 226
  '''Format Overlay dialog box'''
  xlDialogFormatSize = 129
  '''Format Size dialog box'''
  xlDialogFormatText = 89
  '''Format Text dialog box'''
  xlDialogFormulaFind = 64
  '''Formula Find dialog box'''
  xlDialogFormulaGoto = 63
  '''Formula Goto dialog box'''
  xlDialogFormulaReplace = 130
  '''Formula Replace dialog box'''
  xlDialogFunctionWizard = 450
  '''Function Wizard dialog box'''
  xlDialogGallery3dArea = 193
  '''Gallery 3D Area dialog box'''
  xlDialogGallery3dBar = 272
  '''Gallery 3D Bar dialog box'''
  xlDialogGallery3dColumn = 194
  '''Gallery 3D Column dialog box'''
  xlDialogGallery3dLine = 195
  '''Gallery 3D Line dialog box'''
  xlDialogGallery3dPie = 196
  '''Gallery 3D Pie dialog box'''
  xlDialogGallery3dSurface = 273
  '''Gallery 3D Surface dialog box'''
  xlDialogGalleryArea = 67
  '''Gallery Area dialog box'''
  xlDialogGalleryBar = 68
  '''Gallery Bar dialog box'''
  xlDialogGalleryColumn = 69
  '''Gallery Column dialog box'''
  xlDialogGalleryCustom = 388
  '''Gallery Custom dialog box'''
  xlDialogGalleryDoughnut = 344
  '''Gallery Doughnut dialog box'''
  xlDialogGalleryLine = 70
  '''Gallery Line dialog box'''
  xlDialogGalleryPie = 71
  '''Gallery Pie dialog box'''
  xlDialogGalleryRadar = 249
  '''Gallery Radar dialog box'''
  xlDialogGalleryScatter = 72
  '''Gallery Scatter dialog box'''
  xlDialogGoalSeek = 198
  '''Goal Seek dialog box'''
  xlDialogGridlines = 76
  '''Gridlines dialog box'''
  xlDialogImportTextFile = 666
  '''Import Text File dialog box'''
  xlDialogInsert = 55
  '''Insert dialog box'''
  xlDialogInsertHyperlink = 596
  '''Insert Hyperlink dialog box'''
  xlDialogInsertObject = 259
  '''Insert Object dialog box'''
  xlDialogInsertPicture = 342
  '''Insert Picture dialog box'''
  xlDialogInsertTitle = 380
  '''Insert Title dialog box'''
  xlDialogLabelProperties = 436
  '''Label Properties dialog box'''
  xlDialogListboxProperties = 437
  '''Listbox Properties dialog box'''
  xlDialogMacroOptions = 382
  '''Macro Options dialog box'''
  xlDialogMailEditMailer = 470
  '''Mail Edit Mailer dialog box'''
  xlDialogMailLogon = 339
  '''Mail Logon dialog box'''
  xlDialogMailNextLetter = 378
  '''Mail Next Letter dialog box'''
  xlDialogMainChart = 85
  '''Main Chart dialog box'''
  xlDialogMainChartType = 185
  '''Main Chart Type dialog box'''
  xlDialogManageRelationships = 1271
  '''Manage Relationships dialog box'''
  xlDialogMenuEditor = 322
  '''Menu Editor dialog box'''
  xlDialogMove = 262
  '''Move dialog box'''
  xlDialogMyPermission = 834
  '''My Permission dialog box'''
  xlDialogNameManager = 977
  '''NameManager dialog box'''
  xlDialogNew = 119
  '''New dialog box'''
  xlDialogNewName = 978
  '''NewName dialog box'''
  xlDialogNewWebQuery = 667
  '''New Web Query dialog box'''
  xlDialogNote = 154
  '''Note dialog box'''
  xlDialogObjectProperties = 207
  '''Object Properties dialog box'''
  xlDialogObjectProtection = 214
  '''Object Protection dialog box'''
  xlDialogOpen = 1
  '''Open dialog box'''
  xlDialogOpenLinks = 2
  '''Open Links dialog box'''
  xlDialogOpenMail = 188
  '''Open Mail dialog box'''
  xlDialogOpenText = 441
  '''Open Text dialog box'''
  xlDialogOptionsCalculation = 318
  '''Options Calculation dialog box'''
  xlDialogOptionsChart = 325
  '''Options Chart dialog box'''
  xlDialogOptionsEdit = 319
  '''Options Edit dialog box'''
  xlDialogOptionsGeneral = 356
  '''Options General dialog box'''
  xlDialogOptionsListsAdd = 458
  '''Options Lists Add dialog box'''
  xlDialogOptionsME = 647
  '''OptionsME dialog box'''
  xlDialogOptionsTransition = 355
  '''Options Transition dialog box'''
  xlDialogOptionsView = 320
  '''Options View dialog box'''
  xlDialogOutline = 142
  '''Outline dialog box'''
  xlDialogOverlay = 86
  '''Overlay dialog box'''
  xlDialogOverlayChartType = 186
  '''Overlay ChartType dialog box'''
  xlDialogPageSetup = 7
  '''Page Setup dialog box'''
  xlDialogParse = 91
  '''Parse dialog box'''
  xlDialogPasteNames = 58
  '''Paste Names dialog box'''
  xlDialogPasteSpecial = 53
  '''Paste Special dialog box'''
  xlDialogPatterns = 84
  '''Patterns dialog box'''
  xlDialogPermission = 832
  '''Permission dialog box'''
  xlDialogPhonetic = 656
  '''Phonetic dialog box'''
  xlDialogPivotCalculatedField = 570
  '''Pivot Calculated Field dialog box'''
  xlDialogPivotCalculatedItem = 572
  '''Pivot Calculated Item dialog box'''
  xlDialogPivotClientServerSet = 689
  '''Pivot Client Server Set dialog box'''
  xlDialogPivotFieldGroup = 433
  '''Pivot Field Group dialog box'''
  xlDialogPivotFieldProperties = 313
  '''Pivot Field Properties dialog box'''
  xlDialogPivotFieldUngroup = 434
  '''Pivot Field Ungroup dialog box'''
  xlDialogPivotShowPages = 421
  '''Pivot Show Pages dialog box'''
  xlDialogPivotSolveOrder = 568
  '''Pivot Solve Order dialog box'''
  xlDialogPivotTableOptions = 567
  '''PivotTable Options dialog box'''
  xlDialogPivotTableSlicerConnections = 1183
  '''PivotTable Slicer Connections dialog box'''
  xlDialogPivotTableWhatIfAnalysisSettings = 1153
  '''PivotTable What If Analysis Settings dialog box'''
  xlDialogPivotTableWizard = 312
  '''PivotTable Wizard dialog box'''
  xlDialogPlacement = 300
  '''Placement dialog box'''
  xlDialogPrint = 8
  '''Print dialog box'''
  xlDialogPrinterSetup = 9
  '''Printer Setup dialog box'''
  xlDialogPrintPreview = 222
  '''Print Preview dialog box'''
  xlDialogPromote = 202
  '''Promote dialog box'''
  xlDialogProperties = 474
  '''Properties dialog box'''
  xlDialogPropertyFields = 754
  '''Property Fields dialog box'''
  xlDialogProtectDocument = 28
  '''Protect Document dialog box'''
  xlDialogProtectSharing = 620
  '''Protect Sharing dialog box'''
  xlDialogPublishAsWebPage = 653
  '''Publish As WebPage dialog box'''
  xlDialogPushbuttonProperties = 445
  '''Pushbutton Properties dialog box'''
  xlDialogRecommendedPivotTables = 1258
  '''Recommended PivotTables dialog box'''
  xlDialogReplaceFont = 134
  '''Replace Font dialog box'''
  xlDialogRoutingSlip = 336
  '''This object or member has been deprecated, but it remains part of the object model for backward compatibility. You should not use it in new applications.'''
  xlDialogRowHeight = 127
  '''Row Height dialog box'''
  xlDialogRun = 17
  '''Run dialog box'''
  xlDialogSaveAs = 5
  '''SaveAs dialog box'''
  xlDialogSaveCopyAs = 456
  '''SaveCopyAs dialog box'''
  xlDialogSaveNewObject = 208
  '''Save New Object dialog box'''
  xlDialogSaveWorkbook = 145
  '''Save Workbook dialog box'''
  xlDialogSaveWorkspace = 285
  '''Save Workspace dialog box'''
  xlDialogScale = 87
  '''Scale dialog box'''
  xlDialogScenarioAdd = 307
  '''Scenario Add dialog box'''
  xlDialogScenarioCells = 305
  '''Scenario Cells dialog box'''
  xlDialogScenarioEdit = 308
  '''Scenario Edit dialog box'''
  xlDialogScenarioMerge = 473
  '''Scenario Merge dialog box'''
  xlDialogScenarioSummary = 311
  '''Scenario Summary dialog box'''
  xlDialogScrollbarProperties = 420
  '''Scrollbar Properties dialog box'''
  xlDialogSearch = 731
  '''Search dialog box'''
  xlDialogSelectSpecial = 132
  '''Select Special dialog box'''
  xlDialogSendMail = 189
  '''Send Mail dialog box'''
  xlDialogSeriesAxes = 460
  '''Series Axes dialog box'''
  xlDialogSeriesOptions = 557
  '''Series Options dialog box'''
  xlDialogSeriesOrder = 466
  '''Series Order dialog box'''
  xlDialogSeriesShape = 504
  '''Series Shape dialog box'''
  xlDialogSeriesX = 461
  '''Series X dialog box'''
  xlDialogSeriesY = 462
  '''Series Y dialog box'''
  xlDialogSetBackgroundPicture = 509
  '''Set Background Picture dialog box'''
  xlDialogSetManager = 1109
  '''Set Manager dialog box'''
  xlDialogSetMDXEditor = 1208
  '''Set MDX Editor dialog box'''
  xlDialogSetPrintTitles = 23
  '''Set Print Titles dialog box'''
  xlDialogSetTupleEditorOnColumns = 1108
  '''Set Tuple Editor On Columns dialog box'''
  xlDialogSetTupleEditorOnRows = 1107
  '''Set Tuple Editor On Rows dialog box'''
  xlDialogSetUpdateStatus = 159
  '''Set Update Status dialog box'''
  xlDialogShowDetail = 204
  '''Show Detail dialog box'''
  xlDialogShowToolbar = 220
  '''Show Toolbar dialog box'''
  xlDialogSize = 261
  '''Size dialog box'''
  xlDialogSlicerCreation = 1182
  '''Slicer Creation dialog box'''
  xlDialogSlicerPivotTableConnections = 1184
  '''Slicer PivotTable Connections dialog box'''
  xlDialogSlicerSettings = 1179
  '''Slicer Settings dialog box'''
  xlDialogSort = 39
  '''Sort dialog box'''
  xlDialogSortSpecial = 192
  '''Sort Special dialog box'''
  xlDialogSparklineInsertColumn = 1134
  '''Sparkline Insert Column dialog box'''
  xlDialogSparklineInsertLine = 1133
  '''Sparkline Insert Line dialog box'''
  xlDialogSparklineInsertWinLoss = 1135
  '''Sparkline Insert Win Loss dialog box'''
  xlDialogSplit = 137
  '''Split dialog box'''
  xlDialogStandardFont = 190
  '''Standard Font dialog box'''
  xlDialogStandardWidth = 472
  '''Standard Width dialog box'''
  xlDialogStyle = 44
  '''Style dialog box'''
  xlDialogSubscribeTo = 218
  '''Subscribe To dialog box'''
  xlDialogSubtotalCreate = 398
  '''Subtotal Create dialog box'''
  xlDialogSummaryInfo = 474
  '''Summary Info dialog box'''
  xlDialogTable = 41
  '''Table dialog box'''
  xlDialogTabOrder = 394
  '''Tab Order dialog box'''
  xlDialogTextToColumns = 422
  '''Text To Columns dialog box'''
  xlDialogUnhide = 94
  '''Unhide dialog box'''
  xlDialogUpdateLink = 201
  '''Update Link dialog box'''
  xlDialogVbaInsertFile = 328
  '''VBA Insert File dialog box'''
  xlDialogVbaMakeAddin = 478
  '''VBA Make Addin dialog box'''
  xlDialogVbaProcedureDefinition = 330
  '''VBA Procedure Definition dialog box'''
  xlDialogView3d = 197
  '''View 3D dialog box'''
  xlDialogWebOptionsBrowsers = 773
  '''Web Options Browsers dialog box'''
  xlDialogWebOptionsEncoding = 686
  '''Web Options Encoding dialog box'''
  xlDialogWebOptionsFiles = 684
  '''Web Options Files dialog box'''
  xlDialogWebOptionsFonts = 687
  '''Web Options Fonts dialog box'''
  xlDialogWebOptionsGeneral = 683
  '''Web Options General dialog box'''
  xlDialogWebOptionsPictures = 685
  '''Web Options Pictures dialog box'''
  xlDialogWindowMove = 14
  '''Window Move dialog box'''
  xlDialogWindowSize = 13
  '''Window Size dialog box'''
  xlDialogWorkbookAdd = 281
  '''Workbook Add dialog box'''
  xlDialogWorkbookCopy = 283
  '''Workbook Copy dialog box'''
  xlDialogWorkbookInsert = 354
  '''Workbook Insert dialog box'''
  xlDialogWorkbookMove = 282
  '''Workbook Move dialog box'''
  xlDialogWorkbookName = 386
  '''Workbook Name dialog box'''
  xlDialogWorkbookNew = 302
  '''Workbook New dialog box'''
  xlDialogWorkbookOptions = 284
  '''Workbook Options dialog box'''
  xlDialogWorkbookProtect = 417
  '''Workbook Protect dialog box'''
  xlDialogWorkbookTabSplit = 415
  '''Workbook Tab Split dialog box'''
  xlDialogWorkbookUnhide = 384
  '''Workbook Unhide dialog box'''
  xlDialogWorkgroup = 199
  '''Workgroup dialog box'''
  xlDialogWorkspace = 95
  '''Workspace dialog box'''
  xlDialogZoom = 256
  '''Zoom dialog box'''

@unique
class XlRangeAutoFormat(IntFlag):
  '''Specifies the predefined format when a range is automatically formatted.'''

  xlRangeAutoFormat3DEffects1 = 13
  '''3D effects 1.'''
  xlRangeAutoFormat3DEffects2 = 14
  '''3D effects 2.'''
  xlRangeAutoFormatAccounting1 = 4
  '''Accounting 1.'''
  xlRangeAutoFormatAccounting2 = 5
  '''Accounting 2.'''
  xlRangeAutoFormatAccounting3 = 6
  '''Accounting 3.'''
  xlRangeAutoFormatAccounting4 = 17
  '''Accounting 4.'''
  xlRangeAutoFormatClassic1 = 1
  '''Classic 1.'''
  xlRangeAutoFormatClassic2 = 2
  '''Classic 2.'''
  xlRangeAutoFormatClassic3 = 3
  '''Classic 3.'''
  xlRangeAutoFormatClassicPivotTable = 31
  '''Classic PivotTable.'''
  xlRangeAutoFormatColor1 = 7
  '''Color 1.'''
  xlRangeAutoFormatColor2 = 8
  '''Color 2.'''
  xlRangeAutoFormatColor3 = 9
  '''Color 3.'''
  xlRangeAutoFormatList1 = 10
  '''List 1.'''
  xlRangeAutoFormatList2 = 11
  '''List 2.'''
  xlRangeAutoFormatList3 = 12
  '''List 3.'''
  xlRangeAutoFormatLocalFormat1 = 15
  '''Local Format 1.'''
  xlRangeAutoFormatLocalFormat2 = 16
  '''Local Format 2.'''
  xlRangeAutoFormatLocalFormat3 = 19
  '''Local Format 3.'''
  xlRangeAutoFormatLocalFormat4 = 20
  '''Local Format 4.'''
  xlRangeAutoFormatNone = -4142
  '''No specified format.'''
  xlRangeAutoFormatPTNone = 42
  '''No specified PivotTable format.'''
  xlRangeAutoFormatReport1 = 21
  '''Report 1.'''
  xlRangeAutoFormatReport10 = 30
  '''Report 10.'''
  xlRangeAutoFormatReport2 = 22
  '''Report 2.'''
  xlRangeAutoFormatReport3 = 23
  '''Report 3.'''
  xlRangeAutoFormatReport4 = 24
  '''Report 4.'''
  xlRangeAutoFormatReport5 = 25
  '''Report 5.'''
  xlRangeAutoFormatReport6 = 26
  '''Report 6.'''
  xlRangeAutoFormatReport7 = 27
  '''Report 7.'''
  xlRangeAutoFormatReport8 = 28
  '''Report 8.'''
  xlRangeAutoFormatReport9 = 29
  '''Report 9.'''
  xlRangeAutoFormatSimple = -4154
  '''Simple.'''
  xlRangeAutoFormatTable1 = 32
  '''Table 1.'''
  xlRangeAutoFormatTable10 = 41
  '''Table 10.'''
  xlRangeAutoFormatTable2 = 33
  '''Table 2.'''
  xlRangeAutoFormatTable3 = 34
  '''Table 3.'''
  xlRangeAutoFormatTable4 = 35
  '''Table 4.'''
  xlRangeAutoFormatTable5 = 36
  '''Table 5.'''
  xlRangeAutoFormatTable6 = 37
  '''Table 6.'''
  xlRangeAutoFormatTable7 = 38
  '''Table 7.'''
  xlRangeAutoFormatTable8 = 39
  '''Table 8.'''
  xlRangeAutoFormatTable9 = 40
  '''Table 9.'''

@unique
class XlLinkedDataTypeState(IntFlag):
  '''Indicates the state of cells that may contain Linked data types such as Stocks or Geography. These are the possible values of the Range.LinkedDataTypeState property.'''

  xlLinkedDataTypeStateNone = 0
  '''The cell does not contain any Linked data types.'''
  xlLinkedDataTypeStateValidLinkedData = 1
  '''The cell contains a Linked data type.'''
  xlLinkedDataTypeStateDisambiguationNeeded = 2
  '''The cell needs to be disambiguated by the user before a Linked data type can be inserted. For example, if the user types "New York" into a cell and attempts to convert it to a "Geography" data type, they may need to select whether they meant New York State or New York City. Until they do so, the cell will be in this state.'''
  xlLinkedDataTypeStateBrokenLinkedData = 3
  '''There is a valid Linked data type in the cell, but entity no longer exists on the service.'''
  xlLinkedDataTypeStateFetchingData = 4
  '''The Linked data type in the cell is in the middle of refreshing new data from the service.'''

@unique
class XlHAlign(IntFlag):
  '''Specifies the horizontal alignment for the object.'''

  xlHAlignCenter = -4108
  '''Center.'''
  xlHAlignCenterAcrossSelection = 7
  '''Center across selection.'''
  xlHAlignDistributed = -4117
  '''Distribute.'''
  xlHAlignFill = 5
  '''Fill.'''
  xlHAlignGeneral = 1
  '''Align according to data type.'''
  xlHAlignJustify = -4130
  '''Justify.'''
  xlHAlignLeft = -4131
  '''Left.'''
  xlHAlignRight = -4152
  '''Right.'''

@unique
class XlLocationInTable(IntFlag):
  '''Specifies the part of the PivotTable report that contains the upper-left corner of a range.'''

  xlColumnHeader = -4110
  '''Column header'''
  xlColumnItem = 5
  '''Column item'''
  xlDataHeader = 3
  '''Data header'''
  xlDataItem = 7
  '''Data item'''
  xlPageHeader = 2
  '''Page header'''
  xlPageItem = 6
  '''Page item'''
  xlRowHeader = -4153
  '''Row header'''
  xlRowItem = 4
  '''Row item'''
  xlTableBody = 8
  '''Table body'''

@unique
class XlOrientation(IntFlag):
  '''Specifies the text orientation.'''

  xlDownward = -4170
  '''Text runs downward.'''
  xlHorizontal = -4128
  '''Text runs horizontally.'''
  xlUpward = -4171
  '''Text runs upward.'''
  xlVertical = -4166
  '''Text runs downward and is centered in the cell.'''

@unique
class XlPageBreak(IntFlag):
  '''Specifies page break location on the worksheet.'''

  xlPageBreakAutomatic = -4105
  '''Excel will automatically add page breaks.'''
  xlPageBreakManual = -4135
  '''Page breaks are manually inserted.'''
  xlPageBreakNone = -4142
  '''Page breaks are not inserted on the worksheet.'''

@unique
class XlVAlign(IntFlag):
  '''Specifies the vertical alignment for the object.'''

  xlVAlignBottom = -4107
  '''Bottom'''
  xlVAlignCenter = -4108
  '''Center'''
  xlVAlignDistributed = -4117
  '''Distributed'''
  xlVAlignJustify = -4130
  '''Justify'''
  xlVAlignTop = -4160
  '''Top'''

@unique
class XlBarShape(IntFlag):
  '''Specifies the shape used with the 3D bar or column chart.'''

  xlBox = 0
  '''Box.'''
  xlConeToMax = 5
  '''Cone, truncated at value.'''
  xlConeToPoint = 4
  '''Cone, coming to point at value.'''
  xlCylinder = 3
  '''Cylinder.'''
  xlPyramidToMax = 2
  '''Pyramid, truncated at value.'''
  xlPyramidToPoint = 1
  '''Pyramid, coming to point at value.'''

class XlCategoryLabelLevel(IntFlag):
  '''Specifies the category labels for the category label levels.'''


@unique
class XlChartType(IntFlag):
  '''Specifies the chart type.'''

  xl3DArea = -4098
  '''3D Area.'''
  xl3DAreaStacked = 78
  '''3D Stacked Area.'''
  xl3DAreaStacked100 = 79
  '''100% Stacked Area.'''
  xl3DBarClustered = 60
  '''3D Clustered Bar.'''
  xl3DBarStacked = 61
  '''3D Stacked Bar.'''
  xl3DBarStacked100 = 62
  '''3D 100% Stacked Bar.'''
  xl3DColumn = -4100
  '''3D Column.'''
  xl3DColumnClustered = 54
  '''3D Clustered Column.'''
  xl3DColumnStacked = 55
  '''3D Stacked Column.'''
  xl3DColumnStacked100 = 56
  '''3D 100% Stacked Column.'''
  xl3DLine = -4101
  '''3D Line.'''
  xl3DPie = -4102
  '''3D Pie.'''
  xl3DPieExploded = 70
  '''Exploded 3D Pie.'''
  xlArea = 1
  '''Area'''
  xlAreaStacked = 76
  '''Stacked Area.'''
  xlAreaStacked100 = 77
  '''100% Stacked Area.'''
  xlBarClustered = 57
  '''Clustered Bar.'''
  xlBarOfPie = 71
  '''Bar of Pie.'''
  xlBarStacked = 58
  '''Stacked Bar.'''
  xlBarStacked100 = 59
  '''100% Stacked Bar.'''
  xlBubble = 15
  '''Bubble.'''
  xlBubble3DEffect = 87
  '''Bubble with 3D effects.'''
  xlColumnClustered = 51
  '''Clustered Column.'''
  xlColumnStacked = 52
  '''Stacked Column.'''
  xlColumnStacked100 = 53
  '''100% Stacked Column.'''
  xlConeBarClustered = 102
  '''Clustered Cone Bar.'''
  xlConeBarStacked = 103
  '''Stacked Cone Bar.'''
  xlConeBarStacked100 = 104
  '''100% Stacked Cone Bar.'''
  xlConeCol = 105
  '''3D Cone Column.'''
  xlConeColClustered = 99
  '''Clustered Cone Column.'''
  xlConeColStacked = 100
  '''Stacked Cone Column.'''
  xlConeColStacked100 = 101
  '''100% Stacked Cone Column.'''
  xlCylinderBarClustered = 95
  '''Clustered Cylinder Bar.'''
  xlCylinderBarStacked = 96
  '''Stacked Cylinder Bar.'''
  xlCylinderBarStacked100 = 97
  '''100% Stacked Cylinder Bar.'''
  xlCylinderCol = 98
  '''3D Cylinder Column.'''
  xlCylinderColClustered = 92
  '''Clustered Cone Column.'''
  xlCylinderColStacked = 93
  '''Stacked Cone Column.'''
  xlCylinderColStacked100 = 94
  '''100% Stacked Cylinder Column.'''
  xlDoughnut = -4120
  '''Doughnut.'''
  xlDoughnutExploded = 80
  '''Exploded Doughnut.'''
  xlLine = 4
  '''Line.'''
  xlLineMarkers = 65
  '''Line with Markers.'''
  xlLineMarkersStacked = 66
  '''Stacked Line with Markers.'''
  xlLineMarkersStacked100 = 67
  '''100% Stacked Line with Markers.'''
  xlLineStacked = 63
  '''Stacked Line.'''
  xlLineStacked100 = 64
  '''100% Stacked Line.'''
  xlPie = 5
  '''Pie.'''
  xlPieExploded = 69
  '''Exploded Pie.'''
  xlPieOfPie = 68
  '''Pie of Pie.'''
  xlPyramidBarClustered = 109
  '''Clustered Pyramid Bar.'''
  xlPyramidBarStacked = 110
  '''Stacked Pyramid Bar.'''
  xlPyramidBarStacked100 = 111
  '''100% Stacked Pyramid Bar.'''
  xlPyramidCol = 112
  '''3D Pyramid Column.'''
  xlPyramidColClustered = 106
  '''Clustered Pyramid Column.'''
  xlPyramidColStacked = 107
  '''Stacked Pyramid Column.'''
  xlPyramidColStacked100 = 108
  '''100% Stacked Pyramid Column.'''
  xlRadar = -4151
  '''Radar.'''
  xlRadarFilled = 82
  '''Filled Radar.'''
  xlRadarMarkers = 81
  '''Radar with Data Markers.'''
  xlRegionMap = 140
  '''Map chart.'''
  xlStockHLC = 88
  '''High-Low-Close.'''
  xlStockOHLC = 89
  '''Open-High-Low-Close.'''
  xlStockVHLC = 90
  '''Volume-High-Low-Close.'''
  xlStockVOHLC = 91
  '''Volume-Open-High-Low-Close.'''
  xlSurface = 83
  '''3D Surface.'''
  xlSurfaceTopView = 85
  '''Surface (Top View).'''
  xlSurfaceTopViewWireframe = 86
  '''Surface (Top View wireframe).'''
  xlSurfaceWireframe = 84
  '''3D Surface (wireframe).'''
  xlXYScatter = -4169
  '''Scatter.'''
  xlXYScatterLines = 74
  '''Scatter with Lines.'''
  xlXYScatterLinesNoMarkers = 75
  '''Scatter with Lines and No Data Markers.'''
  xlXYScatterSmooth = 72
  '''Scatter with Smoothed Lines.'''
  xlXYScatterSmoothNoMarkers = 73
  '''Scatter with Smoothed Lines and No Data Markers.'''

@unique
class XlDisplayBlanksAs(IntFlag):
  '''Specifies how blank cells are plotted on a chart.'''

  xlInterpolated = 3
  '''Values are interpolated into the chart.'''
  xlNotPlotted = 1
  '''Blank cells are not plotted.'''
  xlZero = 2
  '''Blanks are plotted as zero.'''

@unique
class XlRowCol(IntFlag):
  '''Specifies whether the values corresponding to a particular data series are in rows or columns.'''

  xlColumns = 2
  '''Data series is in a row.'''
  xlRows = 1
  '''Data series is in a column.'''

class XlSeriesNameLevel(IntFlag):
  '''Specifies the series labels for the series label levels.'''


@unique
class XlSheetVisibility(IntFlag):
  '''Specifies whether the object is visible.'''

  xlSheetHidden = 0
  '''Hides the worksheet which the user can unhide via menu.'''
  xlSheetVeryHidden = 2
  '''Hides the object so that the only way for you to make it visible again is by setting this property to True (the user cannot make the object visible).'''
  xlSheetVisible = -1
  '''Displays the sheet.'''

@unique
class XlProtectedViewWindowState(IntFlag):
  '''Specifies the state of the Protected View window.'''

  xlProtectedViewWindowMaximized = 2
  '''Maximized'''
  xlProtectedViewWindowMinimized = 1
  '''Minimized'''
  xlProtectedViewWindowNormal = 0
  '''Normal'''

@unique
class XlColorIndex(IntFlag):
  '''Specifies the color of a selected feature, such as a border, font, or fill.'''

  xlColorIndexAutomatic = -4105
  '''Automatic color.'''
  xlColorIndexNone = -4142
  '''No color.'''

@unique
class XlWindowType(IntFlag):
  '''Specifies how the chart is displayed.'''

  xlChartAsWindow = 5
  '''The chart will open in a new window.'''
  xlChartInPlace = 4
  '''The chart will be displayed on the current worksheet.'''
  xlClipboard = 3
  '''The chart is copied to the clipboard.'''
  xlInfo = -4129
  '''This constant has been deprecated.'''
  xlWorkbook = 1
  '''This constant applies to Macintosh only.'''

@unique
class XlWindowView(IntFlag):
  '''Specifies the view showing in the window.'''

  xlNormalView = 1
  '''Normal.'''
  xlPageBreakPreview = 2
  '''Page break preview.'''
  xlPageLayoutView = 3
  '''Page layout view.'''

@unique
class XlSaveConflictResolution(IntFlag):
  '''Specifies the way that conflicts are to be resolved whenever a shared workbook is updated.'''

  xlLocalSessionChanges = 2
  '''The local user's changes are always accepted.'''
  xlOtherSessionChanges = 3
  '''The local user's changes are always rejected.'''
  xlUserResolution = 1
  '''A dialog box asks the user to resolve the conflict.'''

@unique
class XlDisplayDrawingObjects(IntFlag):
  '''Specifies how shapes are displayed.'''

  xlDisplayShapes = -4104
  '''Show all shapes.'''
  xlHide = 3
  '''Hide all shapes.'''
  xlPlaceholders = 2
  '''Show only placeholders.'''

@unique
class XlUpdateLinks(IntFlag):
  '''Specifies a workbook's setting for updating embedded OLE links.'''

  xlUpdateLinksAlways = 3
  '''Embedded OLE links are always updated for the specified workbook.'''
  xlUpdateLinksNever = 2
  '''Embedded OLE links are never updated for the specified workbook.'''
  xlUpdateLinksUserSetting = 1
  '''Embedded OLE links are updated according to the user's settings for the specified workbook.'''

@unique
class XlThreadMode(IntFlag):
  '''Specifies the control over the multi-threaded calculation mode.'''

  xlThreadModeAutomatic = 0
  '''Multi-threaded calculation mode is automatic.'''
  xlThreadModeManual = 1
  '''Multi-threaded calculation mode is manual.'''

@unique
class XlOrder(IntFlag):
  '''Specifies the order in which cells are processed.'''

  xlDownThenOver = 1
  '''Process down the rows before processing across pages or page fields to the right.'''
  xlOverThenDown = 2
  '''Process across pages or page fields to the right before moving down the rows.'''

@unique
class XlPageOrientation(IntFlag):
  '''Specifies the page orientation when the worksheet is printed.'''

  xlLandscape = 2
  '''Landscape mode.'''
  xlPortrait = 1
  '''Portrait mode.'''

@unique
class XlPaperSize(IntFlag):
  '''Specifies the size of the paper.'''

  xlPaper10x14 = 16
  '''10 in. x 14 in.'''
  xlPaper11x17 = 17
  '''11 in. x 17 in.'''
  xlPaperA3 = 8
  '''A3 (297 mm x 420 mm)'''
  xlPaperA4 = 9
  '''A4 (210 mm x 297 mm)'''
  xlPaperA4Small = 10
  '''A4 Small (210 mm x 297 mm)'''
  xlPaperA5 = 11
  '''A5 (148 mm x 210 mm)'''
  xlPaperB4 = 12
  '''B4 (250 mm x 354 mm)'''
  xlPaperB5 = 13
  '''A5 (148 mm x 210 mm)'''
  xlPaperCsheet = 24
  '''C size sheet'''
  xlPaperDsheet = 25
  '''D size sheet'''
  xlPaperEnvelope10 = 20
  '''Envelope #10 (4-1/8 in. x 9-1/2 in.)'''
  xlPaperEnvelope11 = 21
  '''Envelope #11 (4-1/2 in. x 10-3/8 in.)'''
  xlPaperEnvelope12 = 22
  '''Envelope #12 (4-1/2 in. x 11 in.)'''
  xlPaperEnvelope14 = 23
  '''Envelope #14 (5 in. x 11-1/2 in.)'''
  xlPaperEnvelope9 = 19
  '''Envelope #9 (3-7/8 in. x 8-7/8 in.)'''
  xlPaperEnvelopeB4 = 33
  '''Envelope B4 (250 mm x 353 mm)'''
  xlPaperEnvelopeB5 = 34
  '''Envelope B5 (176 mm x 250 mm)'''
  xlPaperEnvelopeB6 = 35
  '''Envelope B6 (176 mm x 125 mm)'''
  xlPaperEnvelopeC3 = 29
  '''Envelope C3 (324 mm x 458 mm)'''
  xlPaperEnvelopeC4 = 30
  '''Envelope C4 (229 mm x 324 mm)'''
  xlPaperEnvelopeC5 = 28
  '''Envelope C5 (162 mm x 229 mm)'''
  xlPaperEnvelopeC6 = 31
  '''Envelope C6 (114 mm x 162 mm)'''
  xlPaperEnvelopeC65 = 32
  '''Envelope C65 (114 mm x 229 mm)'''
  xlPaperEnvelopeDL = 27
  '''Envelope DL (110 mm x 220 mm)'''
  xlPaperEnvelopeItaly = 36
  '''Envelope (110 mm x 230 mm)'''
  xlPaperEnvelopeMonarch = 37
  '''Envelope Monarch (3-7/8 in. x 7-1/2 in.)'''
  xlPaperEnvelopePersonal = 38
  '''Envelope (3-5/8 in. x 6-1/2 in.)'''
  xlPaperEsheet = 26
  '''E size sheet'''
  xlPaperExecutive = 7
  '''Executive (7-1/2 in. x 10-1/2 in.)'''
  xlPaperFanfoldLegalGerman = 41
  '''German Legal Fanfold (8-1/2 in. x 13 in.)'''
  xlPaperFanfoldStdGerman = 40
  '''German Legal Fanfold (8-1/2 in. x 13 in.)'''
  xlPaperFanfoldUS = 39
  '''U.S. Standard Fanfold (14-7/8 in. x 11 in.)'''
  xlPaperFolio = 14
  '''Folio (8-1/2 in. x 13 in.)'''
  xlPaperLedger = 4
  '''Ledger (17 in. x 11 in.)'''
  xlPaperLegal = 5
  '''Legal (8-1/2 in. x 14 in.)'''
  xlPaperLetter = 1
  '''Letter (8-1/2 in. x 11 in.)'''
  xlPaperLetterSmall = 2
  '''Letter Small (8-1/2 in. x 11 in.)'''
  xlPaperNote = 18
  '''Note (8-1/2 in. x 11 in.)'''
  xlPaperQuarto = 15
  '''Quarto (215 mm x 275 mm)'''
  xlPaperStatement = 6
  '''Statement (5-1/2 in. x 8-1/2 in.)'''
  xlPaperTabloid = 3
  '''Tabloid (11 in. x 17 in.)'''
  xlPaperUser = 256
  '''User-defined'''

@unique
class XlPrintLocation(IntFlag):
  '''Specifies the way that comments are printed with the sheet.'''

  xlPrintInPlace = 16
  '''Comments will be printed where they were inserted on the worksheet.'''
  xlPrintNoComments = -4142
  '''Comments will not be printed.'''
  xlPrintSheetEnd = 1
  '''Comments will be printed as end notes at the end of the worksheet.'''

@unique
class XlPrintErrors(IntFlag):
  '''Specifies the type of print error displayed.'''

  xlPrintErrorsBlank = 1
  '''Print errors are blank.'''
  xlPrintErrorsDash = 2
  '''Print errors are displayed as dashes.'''
  xlPrintErrorsDisplayed = 0
  '''All print errors are displayed.'''
  xlPrintErrorsNA = 3
  '''Print errors are displayed as not available.'''

@unique
class XlSpeakDirection(IntFlag):
  '''Specifies the order in which the cells are spoken.'''

  xlSpeakByColumns = 1
  '''Reads down a column, then moves to the next column.'''
  xlSpeakByRows = 0
  '''Reads across a row, then moves to the next row.'''

@unique
class XlArabicModes(IntFlag):
  '''Specifies spelling rules for the Arabic spelling checker.'''

  xlArabicBothStrict = 3
  '''The spelling checker uses spelling rules regarding both Arabic words ending with the letter yaa and Arabic words beginning with an alef hamza.'''
  xlArabicNone = 0
  '''The spelling checker ignores spelling rules regarding either Arabic words ending with the letter yaa or Arabic words beginning with an alef hamza.'''
  xlArabicStrictAlefHamza = 1
  '''The spelling checker uses spelling rules regarding Arabic words beginning with an alef hamza.'''
  xlArabicStrictFinalYaa = 2
  '''The spelling checker uses spelling rules regarding Arabic words ending with the letter yaa.'''

@unique
class XlPortugueseReform(IntFlag):
  '''Specifies the mode for checking the spelling of Portuguese.'''

  xlPortugueseBoth = 3
  '''The spelling checker recognizes both pre-reform and post-reform spellings.'''
  xlPortuguesePostReform = 2
  '''The spelling checker recognizes only post-reform spellings.'''
  xlPortuguesePreReform = 1
  '''The spelling checker recognizes only pre-reform spellings.'''

@unique
class XlHebrewModes(IntFlag):
  '''Specifies the mode for the Hebrew spelling checker.'''

  xlHebrewFullScript = 0
  '''The conventional script type as required by the Hebrew Language Academy when writing text without diacritics.'''
  xlHebrewMixedAuthorizedScript = 3
  '''The Hebrew traditional script.'''
  xlHebrewMixedScript = 2
  '''In this mode the speller accepts any word recognized as Hebrew, whether in Full Script, Partial Script, or any unconventional spelling variation that is known to the speller.'''
  xlHebrewPartialScript = 1
  '''In this mode the speller accepts words both in Full Script and Partial Script. Some words will be flagged since this spelling is not authorized in either Full script or Partial script.'''

@unique
class XlSpanishModes(IntFlag):
  '''Specifies the mode for checking the spelling of Spanish.'''

  xlSpanishTuteoAndVoseo = 1
  '''Tuteo and Voseo verb forms.'''
  xlSpanishTuteoOnly = 0
  '''Tuteo verb forms only.'''
  xlSpanishVoseoOnly = 2
  '''Voseo verb forms only.'''

@unique
class XlBordersIndex(IntFlag):
  '''Specifies the border to be retrieved.'''

  xlDiagonalDown = 5
  '''Border running from the upper-left corner to the lower-right of each cell in the range.'''
  xlDiagonalUp = 6
  '''Border running from the lower-left corner to the upper-right of each cell in the range.'''
  xlEdgeBottom = 9
  '''Border at the bottom of the range.'''
  xlEdgeLeft = 7
  '''Border at the left edge of the range.'''
  xlEdgeRight = 10
  '''Border at the right edge of the range.'''
  xlEdgeTop = 8
  '''Border at the top of the range.'''
  xlInsideHorizontal = 12
  '''Horizontal borders for all cells in the range except borders on the outside of the range.'''
  xlInsideVertical = 11
  '''Vertical borders for all the cells in the range except borders on the outside of the range.'''

@unique
class XlPlacement(IntFlag):
  '''Specifies the way that an object is attached to its underlying cells.'''

  xlFreeFloating = 3
  '''Object is free floating.'''
  xlMove = 2
  '''Object is moved with the cells.'''
  xlMoveAndSize = 1
  '''Object is moved and sized with the cells.'''

@unique
class XlAxisGroup(IntFlag):
  '''Specifies the type of axis group.'''

  xlPrimary = 1
  '''Primary axis group'''
  xlSecondary = 2
  '''Secondary axis group'''

@unique
class XlIconSet(IntFlag):
  '''Specifies the type of icon set.'''

  xl3Arrows = 1
  '''3 Arrows'''
  xl3ArrowsGray = 2
  '''3 Arrows Gray'''
  xl3Flags = 3
  '''3 Flags'''
  xl3Signs = 6
  '''3 Signs'''
  xl3Symbols = 7
  '''3 Symbols'''
  xl3TrafficLights1 = 4
  '''3 Traffic Lights 1'''
  xl3TrafficLights2 = 5
  '''3 Traffic Lights 2'''
  xl4Arrows = 8
  '''4 Arrows'''
  xl4ArrowsGray = 9
  '''4 Arrows Gray'''
  xl4CRV = 11
  '''4 CRV'''
  xl4RedToBlack = 10
  '''4 Red To Black'''
  xl4TrafficLights = 12
  '''4 Traffic Lights'''
  xl5Arrows = 13
  '''5 Arrows'''
  xl5ArrowsGray = 14
  '''5 Arrows Gray'''
  xl5CRV = 15
  '''5 CRV'''
  xl5Quarters = 16
  '''5 Quarters'''

@unique
class XlConsolidationFunction(IntFlag):
  '''Specifies the subtotal function.'''

  xlAverage = -4106
  '''Average.'''
  xlCount = -4112
  '''Count.'''
  xlCountNums = -4113
  '''Count numerical values only.'''
  xlDistinctCount = 11
  '''Count using Distinct Count analysis.'''
  xlMax = -4136
  '''Maximum.'''
  xlMin = -4139
  '''Minimum.'''
  xlProduct = -4149
  '''Multiply.'''
  xlStDev = -4155
  '''Standard deviation, based on a sample.'''
  xlStDevP = -4156
  '''Standard deviation, based on the whole population.'''
  xlSum = -4157
  '''Sum.'''
  xlUnknown = 1000
  '''No subtotal function specified.'''
  xlVar = -4164
  '''Variation, based on a sample.'''
  xlVarP = -4165
  '''Variation, based on the whole population.'''

@unique
class XlEnableSelection(IntFlag):
  '''Specifies what can be selected on the sheet.'''

  xlNoRestrictions = 0
  '''Anything can be selected.'''
  xlNoSelection = -4142
  '''Nothing can be selected.'''
  xlUnlockedCells = 1
  '''Only unlocked cells can be selected.'''

@unique
class XlSheetType(IntFlag):
  '''Specifies the worksheet type.'''

  xlChart = -4109
  '''Chart'''
  xlDialogSheet = -4116
  '''Dialog sheet'''
  xlExcel4IntlMacroSheet = 4
  '''Excel version 4 international macro sheet'''
  xlExcel4MacroSheet = 3
  '''Excel version 4 macro sheet'''
  xlWorksheet = -4167
  '''Worksheet'''

@unique
class XlXLMMacroType(IntFlag):
  '''Specifies, in a Microsoft Excel version 4 macro worksheet, what type of macro a name refers to or whether the name refers to a macro.'''

  xlCommand = 2
  '''Custom command.'''
  xlFunction = 1
  '''Custom function.'''
  xlNotXLM = 3
  '''Not a macro.'''

@unique
class XlLineStyle(IntFlag):
  '''Specifies the line style for the border.'''

  xlContinuous = 1
  '''Continuous line.'''
  xlDash = -4115
  '''Dashed line.'''
  xlDashDot = 4
  '''Alternating dashes and dots.'''
  xlDashDotDot = 5
  '''Dash followed by two dots.'''
  xlDot = -4142
  '''Dotted line.'''
  xlDouble = -4119
  '''Double line.'''
  xlLineStyleNone = -4118
  '''No line.'''
  xlSlantDashDot = 13
  '''Slanted dashes.'''

@unique
class XlBorderWeight(IntFlag):
  '''Specifies the weight of the border around a range.'''

  xlHairline = 1
  '''Hairline (thinnest border).'''
  xlMedium = -4138
  '''Medium.'''
  xlThick = 4
  '''Thick (widest border).'''
  xlThin = 2
  '''Thin.'''

@unique
class XlBackground(IntFlag):
  '''Specifies the background type for text in charts.'''

  xlBackgroundAutomatic = -4105
  '''Excel controls the background.'''
  xlBackgroundOpaque = 3
  '''Opaque background.'''
  xlBackgroundTransparent = 2
  '''Transparent background.'''

@unique
class XlThemeFont(IntFlag):
  '''Specifies the theme font to use.'''

  xlThemeFontMajor = 2
  '''Major.'''
  xlThemeFontMinor = 1
  '''Minor.'''
  xlThemeFontNone = 0
  '''Do not use any theme font.'''

@unique
class XlUnderlineStyle(IntFlag):
  '''Specifies the type of underline applied to a font.'''

  xlUnderlineStyleDouble = -4119
  '''Double thick underline.'''
  xlUnderlineStyleDoubleAccounting = 5
  '''Two thin underlines placed close together.'''
  xlUnderlineStyleNone = -4142
  '''No underlining.'''
  xlUnderlineStyleSingle = 2
  '''Single underlining.'''
  xlUnderlineStyleSingleAccounting = 4
  '''Not supported.'''

@unique
class XlPattern(IntFlag):
  '''Specifies the interior pattern of a chart or interior object.'''

  xlPatternAutomatic = -4105
  '''Excel controls the pattern.'''
  xlPatternChecker = 9
  '''Checkerboard.'''
  xlPatternCrissCross = 16
  '''Criss-cross lines.'''
  xlPatternDown = -4121
  '''Dark diagonal lines running from the upper-left to the lower-right.'''
  xlPatternGray16 = 17
  '''16% gray.'''
  xlPatternGray25 = -4124
  '''25% gray.'''
  xlPatternGray50 = -4125
  '''50% gray.'''
  xlPatternGray75 = -4126
  '''75% gray.'''
  xlPatternGray8 = 18
  '''8% gray.'''
  xlPatternGrid = 15
  '''Grid.'''
  xlPatternHorizontal = -4128
  '''Dark horizontal lines.'''
  xlPatternLightDown = 13
  '''Light diagonal lines running from the upper-left to the lower-right.'''
  xlPatternLightHorizontal = 11
  '''Light horizontal lines.'''
  xlPatternLightUp = 14
  '''Light diagonal lines running from the lower-left to the upper-right.'''
  xlPatternLightVertical = 12
  '''Light vertical bars.'''
  xlPatternNone = -4142
  '''No pattern.'''
  xlPatternSemiGray75 = 10
  '''75% dark gray.'''
  xlPatternSolid = 1
  '''Solid color.'''
  xlPatternUp = -4162
  '''Dark diagonal lines running from the lower-left to the upper-right.'''
  xlPatternVertical = -4166
  '''Dark vertical bars.'''

@unique
class XlThemeColor(IntFlag):
  '''Specifies the theme color to be used.'''

  xlThemeColorAccent1 = 5
  '''Accent1'''
  xlThemeColorAccent2 = 6
  '''Accent2'''
  xlThemeColorAccent3 = 7
  '''Accent3'''
  xlThemeColorAccent4 = 8
  '''Accent4'''
  xlThemeColorAccent5 = 9
  '''Accent5'''
  xlThemeColorAccent6 = 10
  '''Accent6'''
  xlThemeColorDark1 = 1
  '''Dark1'''
  xlThemeColorDark2 = 3
  '''Dark2'''
  xlThemeColorFollowedHyperlink = 12
  '''Followed hyperlink'''
  xlThemeColorHyperlink = 11
  '''Hyperlink'''
  xlThemeColorLight1 = 2
  '''Light1'''
  xlThemeColorLight2 = 4
  '''Light2'''

@unique
class XlListObjectSourceType(IntFlag):
  '''Specifies the current source of the list.'''

  xlSrcExternal = 0
  '''External data source (Microsoft SharePoint Foundation site).'''
  xlSrcModel = 4
  '''PowerPivot Model'''
  xlSrcQuery = 3
  '''Query'''
  xlSrcRange = 1
  '''Range'''
  xlSrcXml = 2
  '''XML'''

@unique
class XlAllocation(IntFlag):
  '''Specifies when to calculate changes when performing what-if analysis on a PivotTable based on an OLAP data source.'''

  xlAutomaticAllocation = 2
  '''Calculate changes automatically after each value is changed.'''
  xlManualAllocation = 1
  '''Calculate changes manually.'''

@unique
class XlAllocationMethod(IntFlag):
  '''Specifies the method to use to allocate values when performing what-if analysis on a PivotTable report based on an OLAP data source.

#REMARKS:

If the AllocationMethod property is set to xlWeightedAllocation, you can optionally specify the weight expression to use by setting the AllocationWeightExpression property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlEqualAllocation = 1
  '''Use equal allocation.'''
  xlWeightedAllocation = 2
  '''Use weighted allocation.'''

@unique
class XlAllocationValue(IntFlag):
  '''Specifies what value to allocate when performing what-if analysis on a PivotTable report based on an OLAP data source.'''

  xlAllocateIncrement = 2
  '''Increment based on the old value.'''
  xlAllocateValue = 1
  '''The value entered divided by the number of allocations.'''

@unique
class XlLayoutRowType(IntFlag):
  '''Specifies the type of layout row.'''

  xlCompactRow = 0
  '''Compact Row'''
  xlOutlineRow = 2
  '''Outline Row'''
  xlTabularRow = 1
  '''Tabular Row'''

@unique
class XlPTSelectionMode(IntFlag):
  '''Specifies what can be selected in a PivotTable during a structured selection. These constants can be combined to select multiple types.'''

  xlBlanks = 4
  '''Blanks'''
  xlButton = 15
  '''Buttons'''
  xlDataAndLabel = 0
  '''Data and labels'''
  xlDataOnly = 2
  '''Data'''
  xlFirstRow = 256
  '''First row'''
  xlLabelOnly = 1
  '''Label'''
  xlOrigin = 3
  '''Origin'''

@unique
class XlPivotTableVersionList(IntFlag):
  '''Specifies the version of a PivotTable or a PivotCache. Creating PivotTables with a specific version ensures that tables created in Excel behave in the same manner as they did in the corresponding version of Excel.'''

  xlPivotTableVersion2000 = 0
  '''Excel 2000'''
  xlPivotTableVersion10 = 1
  '''Excel 2002'''
  xlPivotTableVersion11 = 2
  '''Excel 2003'''
  xlPivotTableVersion12 = 3
  '''Excel 2007'''
  xlPivotTableVersion14 = 4
  '''Excel 2010'''
  xlPivotTableVersion15 = 5
  '''Excel 2013'''
  xlPivotTableVersionCurrent = -1
  '''Provided only for backward compatibility'''

@unique
class XlPhoneticCharacterType(IntFlag):
  '''Specifies the type of phonetic text in a cell.'''

  xlHiragana = 2
  '''Hiragana'''
  xlKatakana = 1
  '''Katakana'''
  xlKatakanaHalf = 0
  '''Half-size Katakana'''
  xlNoConversion = 3
  '''No conversion'''

@unique
class XlCellChangedState(IntFlag):
  '''Specifies whether a PivotTable value cell has been edited or recalculated since the PivotTable report was created or the last commit operation was performed.

#REMARKS:

Applying and saving changes applies only to PivotTable reports with OLAP data sources. For more information about the meaning of the xlCellChangedState enumeration constant values, see the CellChanged property of the PivotCell object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlCellChangeApplied = 3
  '''The value in the cell has been edited or recalculated, and that change has been applied to the data source. (Applies only PivotTable reports with OLAP data sources)'''
  xlCellChanged = 2
  '''The value in the cell has been edited or recalculated.'''
  xlCellNotChanged = 1
  '''The value in the cell has not been edited or recalculated.'''

@unique
class XlPivotCellType(IntFlag):
  '''Specifies the PivotTable entity to which the cell corresponds.'''

  xlPivotCellBlankCell = 9
  '''A structural blank cell in the PivotTable.'''
  xlPivotCellCustomSubtotal = 7
  '''A cell in the row or column area that is a custom subtotal.'''
  xlPivotCellDataField = 4
  '''A data field label (not the Data button).'''
  xlPivotCellDataPivotField = 8
  '''The Data button.'''
  xlPivotCellGrandTotal = 3
  '''A cell in a row or column area that is a grand total.'''
  xlPivotCellPageFieldItem = 6
  '''The cell that shows the selected item of a Page field.'''
  xlPivotCellPivotField = 5
  '''The button for a field (not the Data button).'''
  xlPivotCellPivotItem = 1
  '''A cell in the row or column area that is not a subtotal, grand total, custom subtotal, or blank line.'''
  xlPivotCellSubtotal = 2
  '''A cell in the row or column area that is a subtotal.'''
  xlPivotCellValue = 0
  '''Any cell in the data area (except a blank row).'''

@unique
class XlSortOrder(IntFlag):
  '''Specifies the sort order for the specified field or range.'''

  xlAscending = 1
  '''Sorts the specified field in ascending order. This is the default value.'''
  xlDescending = 2
  '''Sorts the specified field in descending order.'''
  xlManual = -4135
  '''Manual sort (you can drag items to rearrange them).'''

@unique
class XlPivotFieldCalculation(IntFlag):
  '''Specifies the type of calculation performed by a data PivotField when a custom calculation is used.'''

  xlDifferenceFrom = 2
  '''The difference from the value of the Base item in the Base field.'''
  xlIndex = 9
  '''Data calculated as ((value in cell) x (Grand Total of Grand Totals)) / ((Grand Row Total) x (Grand Column Total)).'''
  xlNoAdditionalCalculation = -4143
  '''No calculation.'''
  xlPercentDifferenceFrom = 4
  '''Percentage difference from the value of the Base item in the Base field.'''
  xlPercentOf = 3
  '''Percentage of the value of the Base item in the Base field.'''
  xlPercentOfColumn = 7
  '''Percentage of the total for the column or series.'''
  xlPercentOfParent = 12
  '''Percentage of the total of the specified parent Base field.'''
  xlPercentOfParentColumn = 11
  '''Percentage of the total of the parent column.'''
  xlPercentOfParentRow = 10
  '''Percentage of the total of the parent row.'''
  xlPercentOfRow = 6
  '''Percentage of the total for the row or category.'''
  xlPercentOfTotal = 8
  '''Percentage of the grand total of all the data or data points in the report.'''
  xlPercentRunningTotal = 13
  '''Percentage of the running total of the specified Base field.'''
  xlRankAscending = 14
  '''Rank smallest to largest.'''
  xlRankDecending = 15
  '''Rank largest to smallest.'''
  xlRunningTotal = 5
  '''Data for successive items in the Base field as a running total.'''

@unique
class XlPivotFieldDataType(IntFlag):
  '''Specifies the type of data in the PivotTable field.

#REMARKS:

This enumeration is used with the DataType property of the PivotField object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlDate = 2
  '''Contains a date.'''
  xlNumber = -4145
  '''Contains a number.'''
  xlText = -4158
  '''Contains text.'''

@unique
class XlLayoutFormType(IntFlag):
  '''Specifies the way the specified PivotTable items appear—in table format or in outline format.'''

  xlOutline = 1
  '''The LayoutSubtotalLocation property specifies where the subtotal appears in the PivotTable report.'''
  xlTabular = 0
  '''Default.'''

@unique
class XlSubtotalLocationType(IntFlag):
  '''Specifies where the subtotal will be displayed on the worksheet.'''

  xlAtBottom = 2
  '''Subtotal will be at the bottom.'''
  xlAtTop = 1
  '''Subtotal will be at the top.'''

@unique
class XlPivotFieldOrientation(IntFlag):
  '''Specifies the location of the field in a PivotTable report.'''

  xlColumnField = 2
  '''Column'''
  xlDataField = 4
  '''Data'''
  xlHidden = 0
  '''Hidden'''
  xlPageField = 3
  '''Page'''
  xlRowField = 1
  '''Row'''

@unique
class XlCmdType(IntFlag):
  '''Specifies the value of the CommandText property.'''

  xlCmdCube = 1
  '''Contains a cube name for an OLAP data source.'''
  xlCmdDAX = 8
  '''Contains a Data Analysis Expressions (DAX) formula.'''
  xlCmdDefault = 4
  '''Contains command text that the OLE DB provider understands.'''
  xlCmdExcel = 7
  '''Contains an Excel formula.'''
  xlCmdList = 5
  '''Contains a pointer to list data.'''
  xlCmdSql = 2
  '''Contains an SQL statement.'''
  xlCmdTable = 3
  '''Contains a table name for accessing OLE DB data sources.'''
  xlCmdTableCollection = 6
  '''Contains the name of a table collection.'''

@unique
class XlQueryType(IntFlag):
  '''Specifies the type of query used by Microsoft Excel to populate the query table or PivotTable cache.'''

  xlADORecordset = 7
  '''Based on an ADO recordset query'''
  xlDAORecordset = 2
  '''Based on a DAO recordset query, for query tables only'''
  xlODBCQuery = 1
  '''Based on an ODBC data source'''
  xlOLEDBQuery = 5
  '''Based on an OLE DB query, including OLAP data sources'''
  xlTextImport = 6
  '''Based on a text file, for query tables only'''
  xlWebQuery = 4
  '''Based on a webpage, for query tables only'''

@unique
class XlCellInsertionMode(IntFlag):
  '''Specifies the way that rows on the specified worksheet are added or deleted to accommodate the number of rows in a recordset returned by a query.'''

  xlInsertDeleteCells = 1
  '''Partial rows are inserted or deleted to match the exact number of rows required for the new recordset.'''
  xlInsertEntireRows = 2
  '''Entire rows are inserted, if necessary, to accommodate any overflow. No cells or rows are deleted from the worksheet.'''
  xlOverwriteCells = 0
  '''No new cells or rows are added to the worksheet. Data in surrounding cells is overwritten to accommodate any overflow.'''

@unique
class XlRobustConnect(IntFlag):
  '''Specifies how the PivotTable cache or a query table connects to its data source.'''

  xlAlways = 1
  '''The PivotTable cache or query table always uses external source information (as defined by the SourceConnectionFile or SourceDataFile property) to reconnect.'''
  xlAsRequired = 0
  '''The PivotTable cache or query table uses external source information to reconnect by using the Connection property.'''
  xlNever = 2
  '''The PivotTable cache or query table never uses source information to reconnect.'''

@unique
class XlColumnDataType(IntFlag):
  '''Specifies how a column is to be parsed.'''

  xlDMYFormat = 4
  '''DMY date format.'''
  xlDYMFormat = 7
  '''DYM date format.'''
  xlEMDFormat = 10
  '''EMD date format.'''
  xlGeneralFormat = 1
  '''General.'''
  xlMDYFormat = 3
  '''MDY date format.'''
  xlMYDFormat = 6
  '''MYD date format.'''
  xlSkipColumn = 9
  '''Column is not parsed.'''
  xlTextFormat = 2
  '''Text.'''
  xlYDMFormat = 8
  '''YDM date format.'''
  xlYMDFormat = 5
  '''YMD date format.'''

@unique
class XlTextParsingType(IntFlag):
  '''Specifies the column format for the data in the text file that you are importing into a query table.'''

  xlDelimited = 1
  '''Default. Indicates that the file is delimited by delimiter characters.'''
  xlFixedWidth = 2
  '''Indicates that the data in the file is arranged in columns of fixed widths.'''

@unique
class XlPlatform(IntFlag):
  '''Specifies the platform on which a text file originated.'''

  xlMacintosh = 1
  '''Macintosh'''
  xlMSDOS = 3
  '''MS-DOS'''
  xlWindows = 2
  '''Microsoft Windows'''

@unique
class XlTextQualifier(IntFlag):
  '''Specifies the delimiter to use to specify text.'''

  xlTextQualifierDoubleQuote = 1
  '''Double quotation mark (").'''
  xlTextQualifierNone = -4142
  '''No delimiter.'''
  xlTextQualifierSingleQuote = 2
  '''Single quotation mark (').'''

@unique
class XlTextVisualLayoutType(IntFlag):
  '''Specifies whether the visual layout of the text being imported is left-to-right or right-to-left.'''

  xlTextVisualLTR = 1
  '''Left-to-right'''
  xlTextVisualRTL = 2
  '''Right-to-left'''

@unique
class XlWebFormatting(IntFlag):
  '''Specifies how much formatting from a webpage, if any, is applied when a webpage is imported into a query table.'''

  xlWebFormattingAll = 1
  '''All formatting is imported.'''
  xlWebFormattingNone = 3
  '''No formatting is imported.'''
  xlWebFormattingRTF = 2
  '''Rich Text Format - compatible formatting is imported.'''

@unique
class XlWebSelectionType(IntFlag):
  '''Specifies whether an entire webpage, all tables on the webpage, or only a specific table is imported into a query table.'''

  xlAllTables = 2
  '''All tables'''
  xlEntirePage = 1
  '''Entire page'''
  xlSpecifiedTables = 3
  '''Specified tables'''

@unique
class XlDVAlertStyle(IntFlag):
  '''Specifies the icon used in message boxes displayed during validation.'''

  xlValidAlertInformation = 3
  '''Information icon.'''
  xlValidAlertStop = 1
  '''Stop icon.'''
  xlValidAlertWarning = 2
  '''Warning icon.'''

@unique
class XlFormatConditionOperator(IntFlag):
  '''Specifies the operator to use to compare a formula against the value in a cell or, for xlBetween and xlNotBetween, to compare two formulas.'''

  xlBetween = 1
  '''Between. Can be used only if two formulas are provided.'''
  xlEqual = 3
  '''Equal.'''
  xlGreater = 5
  '''Greater than.'''
  xlGreaterEqual = 7
  '''Greater than or equal to.'''
  xlLess = 6
  '''Less than.'''
  xlLessEqual = 8
  '''Less than or equal to.'''
  xlNotBetween = 2
  '''Not between. Can be used only if two formulas are provided.'''
  xlNotEqual = 4
  '''Not equal.'''

@unique
class XlIMEMode(IntFlag):
  '''Specifies the description of the Japanese input rules.'''

  xlIMEModeAlpha = 8
  '''Half-width alphanumeric.'''
  xlIMEModeAlphaFull = 7
  '''Full-width alphanumeric.'''
  xlIMEModeDisable = 3
  '''Disable.'''
  xlIMEModeHangul = 10
  '''Hangul.'''
  xlIMEModeHangulFull = 9
  '''Full-width Hangul.'''
  xlIMEModeHiragana = 4
  '''Hiragana.'''
  xlIMEModeKatakana = 5
  '''Katakana.'''
  xlIMEModeKatakanaHalf = 6
  '''Half-width Katakana.'''
  xlIMEModeNoControl = 0
  '''No control.'''
  xlIMEModeOff = 2
  '''Off (English mode).'''
  xlIMEModeOn = 1
  '''Mode on.'''

@unique
class XlDVType(IntFlag):
  '''Specifies the type of validation test to be performed in conjunction with values.'''

  xlValidateCustom = 7
  '''Data is validated using an arbitrary formula.'''
  xlValidateDate = 4
  '''Date values.'''
  xlValidateDecimal = 2
  '''Numeric values.'''
  xlValidateInputOnly = 0
  '''Validate only when user changes the value.'''
  xlValidateList = 3
  '''Value must be present in a specified list.'''
  xlValidateTextLength = 6
  '''Length of text.'''
  xlValidateTime = 5
  '''Time values.'''
  xlValidateWholeNumber = 1
  '''Whole numeric values.'''

@unique
class XlChartPictureType(IntFlag):
  '''Specifies how pictures are displayed on a column, bar picture chart, or legend key.'''

  xlStack = 2
  '''Picture is sized to repeat a maximum of 15 times in the longest stacked bar.'''
  xlStackScale = 3
  '''Picture is sized to a specified number of units and repeated the length of the bar.'''
  xlStretch = 1
  '''Picture is stretched the full length of the stacked bar.'''

@unique
class XlChartElementPosition(IntFlag):
  '''Specifies the position of the chart element.'''

  xlChartElementPositionAutomatic = -4105
  '''Automatically sets the position of the chart element.'''
  xlChartElementPositionCustom = -4114
  '''Specifies a specific position for the chart element.'''

@unique
class XlLegendPosition(IntFlag):
  '''Specifies the position of the legend on a chart.'''

  xlLegendPositionBottom = -4107
  '''Below the chart.'''
  xlLegendPositionCorner = 2
  '''In the upper-right corner of the chart border.'''
  xlLegendPositionCustom = -4161
  '''A custom position.'''
  xlLegendPositionLeft = -4131
  '''Left of the chart.'''
  xlLegendPositionRight = -4152
  '''Right of the chart.'''
  xlLegendPositionTop = -4160
  '''Above the chart.'''

@unique
class XlPivotConditionScope(IntFlag):
  '''This enumeration specifies the conditional formatting applied for filtering values from the PivotTable object.'''

  xlDataFieldScope = 2
  '''Based on the data in the specified fields.'''
  xlFieldsScope = 1
  '''Based on the specified fields.'''
  xlSelectionScope = 0
  '''Based on the specified selection criteria.'''

@unique
class XlContainsOperator(IntFlag):
  '''Specifies the operator used in a function.'''

  xlBeginsWith = 2
  '''Begins with a specified value.'''
  xlContains = 0
  '''Contains a specified value.'''
  xlDoesNotContain = 1
  '''Does not contain the specified value.'''
  xlEndsWith = 3
  '''Endswith the specified value'''

@unique
class XlFormatConditionType(IntFlag):
  '''Specifies whether the conditional format is based on a cell value or an expression.'''

  xlAboveAverageCondition = 12
  '''Above average condition'''
  xlBlanksCondition = 10
  '''Blanks condition'''
  xlCellValue = 1
  '''Cell value'''
  xlColorScale = 3
  '''Color scale'''
  xlDataBar = 4
  '''DataBar'''
  xlErrorsCondition = 16
  '''Errors condition'''
  xlExpression = 2
  '''Expression'''
  xlIconSet = 6
  '''Icon set'''
  xlNoBlanksCondition = 13
  '''No blanks condition'''
  xlNoErrorsCondition = 17
  '''No errors condition'''
  xlTextString = 9
  '''Text string'''
  xlTimePeriod = 11
  '''Time period'''
  xlTop10 = 5
  '''Top 10 values'''
  xlUniqueValues = 8
  '''Unique values'''

@unique
class XlCalculatedMemberType(IntFlag):
  '''Specifies the type of a calculated member in a PivotTable.'''

  xlCalculatedMeasure = 2
  '''The member is a Multidimensional Expressions (MDX) expression that defines the measure.'''
  xlCalculatedMember = 0
  '''The member uses a Multidimensional Expression (MDX) formula.'''
  xlCalculatedSet = 1
  '''The member contains an MDX formula for a set in a cube field.'''

@unique
class XlSparklineRowCol(IntFlag):
  '''Specifies how to plot the sparkline when the data on which it is based is in a square-shaped range.

#REMARKS:

The xlSparklineRowCol enumeration is used by the PlotBy property of the SparklineGroup object to determine how to plot chart in a sparkline when data on which it based is in a square-shaped range, such as A1:B2.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlSparklineColumnsSquare = 2
  '''Plot the data by columns.'''
  xlSparklineNonSquare = 0
  '''The sparkline is not bound to data in a square-shaped range.'''
  xlSparklineRowsSquare = 1
  '''Plot the data by rows.'''

@unique
class XlSparkType(IntFlag):
  '''Specifies the type of sparkline.'''

  xlSparkColumn = 2
  '''A column chart sparkline.'''
  xlSparkColumnStacked100 = 3
  '''A win/loss chart sparkline.'''
  xlSparkLine = 1
  '''A line chart sparkline.'''

@unique
class XlTotalsCalculation(IntFlag):
  '''Specifies the type of calculation in the Totals row of a list column.'''

  xlTotalsCalculationAverage = 2
  '''Average'''
  xlTotalsCalculationCount = 3
  '''Count of non-empty cells'''
  xlTotalsCalculationCountNums = 4
  '''Count of cells with numeric values'''
  xlTotalsCalculationCustom = 9
  '''Custom calculation'''
  xlTotalsCalculationMax = 6
  '''Maximum value in the list'''
  xlTotalsCalculationMin = 5
  '''Minimum value in the list'''
  xlTotalsCalculationNone = 0
  '''No calculation'''
  xlTotalsCalculationStdDev = 7
  '''Standard deviation value'''
  xlTotalsCalculationSum = 1
  '''Sum of all values in the list column'''
  xlTotalsCalculationVar = 8
  '''Variable'''

@unique
class XlTimeUnit(IntFlag):
  '''Specifies the unit of time for chart axes and data series.'''

  xlDays = 0
  '''Days'''
  xlMonths = 1
  '''Months'''
  xlYears = 2
  '''Years'''

@unique
class XlCategoryType(IntFlag):
  '''Specifies the type of the category axis.'''

  xlAutomaticScale = -4105
  '''Excel controls the axis type.'''
  xlCategoryScale = 2
  '''Axis groups data by an arbitrary set of categories.'''
  xlTimeScale = 3
  '''Axis groups data on a time scale.'''

@unique
class XlAxisCrosses(IntFlag):
  '''Specifies the point on the specified axis where the other axis crosses.'''

  xlAxisCrossesAutomatic = -4105
  '''Microsoft Excel sets the axis crossing point.'''
  xlAxisCrossesCustom = -4114
  '''The CrossesAt property specifies the axis crossing point.'''
  xlAxisCrossesMaximum = 2
  '''The axis crosses at the maximum value.'''
  xlAxisCrossesMinimum = 4
  '''The axis crosses at the minimum value.'''

@unique
class XlDisplayUnit(IntFlag):
  '''Specifies the display unit label for an axis.'''

  xlHundredMillions = -8
  '''Hundreds of millions.'''
  xlHundreds = -2
  '''Hundreds.'''
  xlHundredThousands = -5
  '''Hundreds of thousands.'''
  xlMillionMillions = -10
  '''Millions of millions.'''
  xlMillions = -6
  '''Millions.'''
  xlTenMillions = -7
  '''Tens of millions.'''
  xlTenThousands = -4
  '''Tens of thousands.'''
  xlThousandMillions = -9
  '''Thousands of millions.'''
  xlThousands = -3
  '''Thousands.'''

@unique
class XlTickMark(IntFlag):
  '''Specifies the position of major and minor tick marks for an axis.'''

  xlTickMarkCross = 4
  '''Crosses the axis'''
  xlTickMarkInside = 2
  '''Inside the axis'''
  xlTickMarkNone = -4142
  '''No mark'''
  xlTickMarkOutside = 3
  '''Outside the axis'''

@unique
class XlScaleType(IntFlag):
  '''Specifies the scale type of the value axis.'''

  xlScaleLinear = -4132
  '''Linear'''
  xlScaleLogarithmic = -4133
  '''Logarithmic'''

@unique
class XlTickLabelPosition(IntFlag):
  '''Specifies the position of tick-mark labels on the specified axis.'''

  xlTickLabelPositionHigh = -4127
  '''Top or right side of the chart.'''
  xlTickLabelPositionLow = -4134
  '''Bottom or left side of the chart.'''
  xlTickLabelPositionNextToAxis = 4
  '''Next to axis (where axis is not at either side of the chart).'''
  xlTickLabelPositionNone = -4142
  '''No tick marks.'''

@unique
class XlAxisType(IntFlag):
  '''Specifies the axis type.'''

  xlCategory = 1
  '''Axis displays categories.'''
  xlSeriesAxis = 3
  '''Axis displays data series.'''
  xlValue = 2
  '''Axis displays values.'''

class XlBinsType(IntFlag):
  '''Constants passed to and returned by the ChartGroup.BinsType property.'''


@unique
class XlSizeRepresents(IntFlag):
  '''Specifies what the bubble size represents on a bubble chart.'''

  xlSizeIsArea = 1
  '''Area of the bubble.'''
  xlSizeIsWidth = 2
  '''Width of the bubble.'''

@unique
class XlChartSplitType(IntFlag):
  '''Specifies the values displayed in the second chart in a pie chart or a Bar of Pie chart.'''

  xlSplitByCustomSplit = 4
  '''Arbitrary slides are displayed in the second chart.'''
  xlSplitByPercentValue = 3
  '''Second chart displays values less than some percentage of the total value. The percentage is specified by the SplitValue property.'''
  xlSplitByPosition = 1
  '''Second chart displays the smallest values in the data series. The number of values to display is specified by the SplitValue property.'''
  xlSplitByValue = 2
  '''Second chart displays values less than the value specified by the SplitValue property.'''

class XlGeoMappingLevel(IntFlag):
  '''Constants passed to and returned by the Series.GeoMappingLevel property.'''


class XlGeoProjectionType(IntFlag):
  '''Constants passed to and returned by the Series.GeoProjectionType property.'''


@unique
class XlMarkerStyle(IntFlag):
  '''Specifies the marker style for a point or series in a line chart, scatter chart, or radar chart.'''

  xlMarkerStyleAutomatic = -4105
  '''Automatic markers'''
  xlMarkerStyleCircle = 8
  '''Circular markers'''
  xlMarkerStyleDash = -4115
  '''Long bar markers'''
  xlMarkerStyleDiamond = 2
  '''Diamond-shaped markers'''
  xlMarkerStyleDot = -4118
  '''Short bar markers'''
  xlMarkerStyleNone = -4142
  '''No markers'''
  xlMarkerStylePicture = -4147
  '''Picture markers'''
  xlMarkerStylePlus = 9
  '''Square markers with a plus sign'''
  xlMarkerStyleSquare = 1
  '''Square markers'''
  xlMarkerStyleStar = 5
  '''Square markers with an asterisk'''
  xlMarkerStyleTriangle = 3
  '''Triangular markers'''
  xlMarkerStyleX = -4168
  '''Square markers with an X'''

class XlParentDataLabelOptions(IntFlag):
  '''Constants passed to and returned by the Series.ParentDataLabelOption property.'''


class XlRegionLabelOptions(IntFlag):
  '''Constants passed to and returned by the Series.RegionLabelOptions property.'''


@unique
class XlFormControl(IntFlag):
  '''Specifies the type of the form control.'''

  xlButtonControl = 0
  '''Button.'''
  xlCheckBox = 1
  '''Check box.'''
  xlDropDown = 2
  '''Combo box.'''
  xlEditBox = 3
  '''Text box.'''
  xlGroupBox = 4
  '''Group box.'''
  xlLabel = 5
  '''Label.'''
  xlListBox = 6
  '''List box.'''
  xlOptionButton = 7
  '''Option button.'''
  xlScrollBar = 8
  '''Scroll bar.'''
  xlSpinner = 9
  '''Spinner.'''

@unique
class XlConnectionType(IntFlag):
  '''Specifies the type of database connection.'''

  xlConnectionTypeDATAFEED = 6
  '''Data Feed'''
  xlConnectionTypeMODEL = 7
  '''PowerPivot Model'''
  xlConnectionTypeNOSOURCE = 9
  '''No source'''
  xlConnectionTypeODBC = 2
  '''ODBC'''
  xlConnectionTypeOLEDB = 1
  '''OLEDB'''
  xlConnectionTypeTEXT = 4
  '''Text'''
  xlConnectionTypeWEB = 5
  '''Web'''
  xlConnectionTypeWORKSHEET = 8
  '''Worksheet'''
  xlConnectionTypeXMLMAP = 3
  '''XML MAP'''

@unique
class XlHtmlType(IntFlag):
  '''Specifies the type of HTML generated by Excel when you save the specified item to a webpage and whether the item is static or interactive.'''

  xlHtmlCalc = 1
  '''Use the Spreadsheet component. Deprecated.'''
  xlHtmlChart = 3
  '''Use the Chart component. Deprecated.'''
  xlHtmlList = 2
  '''Use the PivotTable component. Deprecated.'''
  xlHtmlStatic = 0
  '''Use static (noninteractive) HTML for viewing only.'''

@unique
class XlSourceType(IntFlag):
  '''Identifies the source object.'''

  xlSourceAutoFilter = 3
  '''An AutoFilter range'''
  xlSourceChart = 5
  '''A chart'''
  xlSourcePivotTable = 6
  '''A PivotTable report'''
  xlSourcePrintArea = 2
  '''A range of cells selected for printing'''
  xlSourceQuery = 7
  '''A query table (external data range)'''
  xlSourceRange = 4
  '''A range of cells'''
  xlSourceSheet = 1
  '''An entire worksheet'''
  xlSourceWorkbook = 0
  '''A workbook'''

@unique
class XlSlicerCrossFilterType(IntFlag):
  '''Specifies the type of cross filtering used by the specified slicer cache and how it is visualized.'''

  xlSlicerCrossFilterHideButtonsWithNoData = 4
  '''Cross filtering is turned on for this slicer cache, any tile with no data for a filtering selection in other slicers connected to the same data source will be dimmed. Additionally, buttons will be hidden.'''
  xlSlicerCrossFilterShowItemsWithDataAtTop = 2
  '''Cross filtering is turned on for this slicer cache, any tile with no data for a filtering selection in other slicers connected to the same data source will be dimmed. Additionally, tiles with data are moved to the top in the slicer. (Default)'''
  xlSlicerCrossFilterShowItemsWithNoData = 3
  '''Cross filtering is turned on for this slicer cache, any tile with no data for a filtering selection in other slicers connected to the same data source will be dimmed.'''
  xlSlicerNoCrossFilter = 1
  '''Cross filtering is turned off entirely, so all tiles are displayed and active (not dimmed) regardless of filtering selections in other slicers.'''

class XlSlicerCacheType(IntFlag):
  '''Designates the type of slicer or slicer cache.'''


@unique
class XlSlicerSort(IntFlag):
  '''Specifies whether items displayed in the slicer are sorted, and if they are sorted, whether they are sorted in ascending or descending order by item captions.'''

  xlSlicerSortAscending = 2
  '''Slicer items are sorted in ascending order by item captions.'''
  xlSlicerSortDataSourceOrder = 1
  '''Slicer items are displayed in the order provided by the data source.'''
  xlSlicerSortDescending = 3
  '''Slicer items are sorted in descending order by item captions.'''

@unique
class XlPivotTableSourceType(IntFlag):
  '''Specifies the source of the report data.'''

  xlConsolidation = 3
  '''Multiple consolidation ranges.'''
  xlDatabase = 1
  '''Microsoft Excel list or database.'''
  xlExternal = 2
  '''Data from another application.'''
  xlPivotTable = -4148
  '''Same source as another PivotTable report.'''
  xlScenario = 4
  '''Data is based on scenarios created using the Scenario Manager.'''

@unique
class XlSummaryColumn(IntFlag):
  '''Specifies the location of the summary columns in the outline.'''

  xlSummaryOnLeft = -4131
  '''The summary column will be positioned to the left of the detail columns in the outline.'''
  xlSummaryOnRight = -4152
  '''The summary column will be positioned to the right of the detail columns in the outline.'''

@unique
class XlSummaryRow(IntFlag):
  '''Specifies the location of the summary rows in the outline.'''

  xlSummaryAbove = 0
  '''The summary row will be positioned above the detail rows in the outline.'''
  xlSummaryBelow = 1
  '''The summary row will be positioned below the detail rows in the outline.'''

@unique
class XlYesNoGuess(IntFlag):
  '''Specifies whether or not the first row contains headers. Cannot be used when sorting PivotTable reports.'''

  xlGuess = 0
  '''Excel determines whether there is a header, and where it is, if there is one.'''
  xlNo = 2
  '''Default. The entire range should be sorted.'''
  xlYes = 1
  '''The entire range should not be sorted.'''

@unique
class XlSortOrientation(IntFlag):
  '''Specifies the sort orientation.'''

  xlSortColumns = 1
  '''Sorts by column.'''
  xlSortRows = 2
  '''Sorts by row. This is the default value.'''

@unique
class XlSortMethod(IntFlag):
  '''Specifies the type of sort.'''

  xlPinYin = 1
  '''Phonetic Chinese sort order for characters. This is the default value.'''
  xlStroke = 2
  '''Sort by the quantity of strokes in each character.'''

@unique
class XlPageBreakExtent(IntFlag):
  '''Specifies whether a page break is full screen or applies only within the print area.'''

  xlPageBreakFull = 1
  '''Full screen.'''
  xlPageBreakPartial = 2
  '''Only within print area.'''

@unique
class XlCubeFieldSubType(IntFlag):
  '''Specifies the subtype of the CubeField.'''

  xlCubeAttribute = 4
  '''Attribute'''
  xlCubeCalculatedMeasure = 5
  '''Calculated Measure'''
  xlCubeHierarchy = 1
  '''Hierarchy'''
  xlCubeImplicitMeasure = 11
  '''An implicit measure'''
  xlCubeKPIGoal = 7
  '''KPI Goal'''
  xlCubeKPIStatus = 8
  '''KPI Status'''
  xlCubeKPITrend = 9
  '''KPI Trend'''
  xlCubeKPIValue = 6
  '''KPI Value'''
  xlCubeKPIWeight = 10
  '''KPI Weight'''
  xlCubeMeasure = 2
  '''Measure'''
  xlCubeSet = 3
  '''Set'''

@unique
class XlCubeFieldType(IntFlag):
  '''Specifies whether the OLAP field is a hierarchy, set, or measure field.'''

  xlHierarchy = 1
  '''OLAP field is a hierarchy.'''
  xlMeasure = 2
  '''OLAP field is a measure.'''
  xlSet = 3
  '''OLAP field is a set.'''

@unique
class XlPivotLineType(IntFlag):
  '''Specifies the type of the PivotLine.'''

  xlPivotLineBlank = 3
  '''Blank line after each group.'''
  xlPivotLineGrandTotal = 2
  '''Grand Total line.'''
  xlPivotLineRegular = 0
  '''Regular PivotLine with pivot items.'''
  xlPivotLineSubtotal = 1
  '''Subtotal line.'''

@unique
class XlPivotTableMissingItems(IntFlag):
  '''Specifies the maximum number of unique items allowed per PivotField.'''

  xlMissingItemsDefault = -1
  '''The default number of unique items per PivotField allowed.'''
  xlMissingItemsMax = 32500
  '''The maximum number of unique items per PivotField allowed (32,500) for a pre-Excel 2007 PivotTable.'''
  xlMissingItemsMax2 = 1048576
  '''The maximum number of unique items per PivotField allowed (1,048,576) for PivotTables in Excel 2007 and later.'''
  xlMissingItemsNone = 0
  '''No unique items per PivotField allowed (zero).'''

@unique
class XlTrendlineType(IntFlag):
  '''Specifies how the trendline that smooths out fluctuations in the data is calculated.'''

  xlExponential = 5
  '''Uses an equation to calculate the least squares fit through points, for example, y=ab^x .'''
  xlLinear = -4132
  '''Uses the linear equation y = mx + b to calculate the least squares fit through points.'''
  xlLogarithmic = -4133
  '''Uses the equation y = c ln x + b to calculate the least squares fit through points.'''
  xlMovingAvg = 6
  '''Uses a sequence of averages computed from parts of the data series. The number of points equals the total number of points in the series less the number specified for the period.'''
  xlPolynomial = 3
  '''Uses an equation to calculate the least squares fit through points, for example, y = ax^6 + bx^5 + cx^4 + dx^3 + ex^2 + fx + g.'''
  xlPower = 4
  '''Uses an equation to calculate the least squares fit through points, for example, y = ax^b.'''

@unique
class XlParameterDataType(IntFlag):
  '''Specifies the data type of a query parameter.'''

  xlParamTypeBigInt = -5
  '''Big integer.'''
  xlParamTypeBinary = -2
  '''Binary.'''
  xlParamTypeBit = -7
  '''Bit.'''
  xlParamTypeChar = 1
  '''String.'''
  xlParamTypeDate = 9
  '''Date.'''
  xlParamTypeDecimal = 3
  '''Decimal.'''
  xlParamTypeDouble = 8
  '''Double.'''
  xlParamTypeFloat = 6
  '''Float.'''
  xlParamTypeInteger = 4
  '''Integer.'''
  xlParamTypeLongVarBinary = -4
  '''Long binary.'''
  xlParamTypeLongVarChar = -1
  '''Long string.'''
  xlParamTypeNumeric = 2
  '''Numeric.'''
  xlParamTypeReal = 7
  '''Real.'''
  xlParamTypeSmallInt = 5
  '''Small integer.'''
  xlParamTypeTime = 10
  '''Time.'''
  xlParamTypeTimestamp = 11
  '''Time stamp.'''
  xlParamTypeTinyInt = -6
  '''Tiny integer.'''
  xlParamTypeUnknown = 0
  '''Type unknown.'''
  xlParamTypeVarBinary = -3
  '''Variable-length binary.'''
  xlParamTypeVarChar = 12
  '''Variable-length string.'''
  xlParamTypeWChar = -8
  '''Unicode character string.'''

@unique
class XlParameterType(IntFlag):
  '''Specifies how to determine the value of the parameter for the specified query table.'''

  xlConstant = 1
  '''Uses the value specified by the Value argument.'''
  xlPrompt = 0
  '''Displays a dialog box that prompts the user for the value. The Value argument specifies the text shown in the dialog box.'''
  xlRange = 2
  '''Uses the value of the cell in the upper-left corner of the range. The Value argument specifies a Range object.'''

@unique
class XlOartHorizontalOverflow(IntFlag):
  '''Specifies the horizontal overflow setting for a text frame.'''

  xlOartHorizontalOverflowClip = 1
  '''Hide text that does not fit horizontally in the text frame.'''
  xlOartHorizontalOverflowOverflow = 0
  '''Allow text to overflow the text frame horizontally.'''

@unique
class XlOartVerticalOverflow(IntFlag):
  '''Specifies the vertical overflow setting for a text frame.'''

  xlOartVerticalOverflowClip = 1
  '''Hide text that does not fit vertically within the text frame.'''
  xlOartVerticalOverflowEllipsis = 2
  '''Hide text that does not fit vertically within the text frame, and add an ellipsis (...) at the end of the visible text.'''
  xlOartVerticalOverflowOverflow = 0
  '''Allow text to overflow the text frame vertically (can be from the top, bottom, or both depending on the text alignment).'''

@unique
class XlTickLabelOrientation(IntFlag):
  '''Specifies the text orientation for tick-mark labels.'''

  xlTickLabelOrientationAutomatic = -4105
  '''Text orientation set by Excel.'''
  xlTickLabelOrientationDownward = -4170
  '''Text runs down.'''
  xlTickLabelOrientationHorizontal = -4128
  '''Characters run horizontally.'''
  xlTickLabelOrientationUpward = -4171
  '''Text runs up.'''
  xlTickLabelOrientationVertical = -4166
  '''Characters run vertically.'''

@unique
class XlEndStyleCap(IntFlag):
  '''Specifies the end style for error bars.'''

  xlCap = 1
  '''Caps applied.'''
  xlNoCap = 2
  '''No caps applied.'''

@unique
class XlCredentialsMethod(IntFlag):
  '''Specifies the type of credentials method used.'''

  CredentialsMethodIntegrated = 0
  '''Integrated'''
  CredentialsMethodNone = 1
  '''No credentials used'''
  CredentialsMethodStored = 2
  '''Use stored credentials'''

@unique
class XlPivotFilterType(IntFlag):
  '''The type of filter applied.'''

  xlBefore = 31
  '''Filters for all dates before a specified date'''
  xlBeforeOrEqualTo = 32
  '''Filters for all dates on or before a specified date'''
  xlAfter = 33
  '''Filters for all dates after a specified date'''
  xlAfterOrEqualTo = 34
  '''Filters for all dates on or after a specified date'''
  xlAllDatesInPeriodJanuary = 57
  '''Filters for all dates in January'''
  xlAllDatesInPeriodFebruary = 58
  '''Filters for all dates in February'''
  xlAllDatesInPeriodMarch = 59
  '''Filters for all dates in March'''
  xlAllDatesInPeriodApril = 60
  '''Filters for all dates in April'''
  xlAllDatesInPeriodMay = 61
  '''Filters for all dates in May'''
  xlAllDatesInPeriodJune = 62
  '''Filters for all dates in June'''
  xlAllDatesInPeriodJuly = 63
  '''Filters for all dates in July'''
  xlAllDatesInPeriodAugust = 64
  '''Filters for all dates in August'''
  xlAllDatesInPeriodSeptember = 65
  '''Filters for all dates in September'''
  xlAllDatesInPeriodOctober = 66
  '''Filters for all dates in October'''
  xlAllDatesInPeriodNovember = 67
  '''Filters for all dates in November'''
  xlAllDatesInPeriodDecember = 68
  '''Filters for all dates in December'''
  xlAllDatesInPeriodQuarter1 = 53
  '''Filters for all dates in Quarter1'''
  xlAllDatesInPeriodQuarter2 = 54
  '''Filters for all dates in Quarter2'''
  xlAllDatesInPeriodQuarter3 = 55
  '''Filters for all dates in Quarter3'''
  xlAllDatesInPeriodQuarter4 = 56
  '''Filters for all dates in Quarter 4'''
  xlBottomCount = 2
  '''Filters for the specified number of values from the bottom of a list'''
  xlBottomPercent = 4
  '''Filters for the specified percentage of values from the bottom of a list'''
  xlBottomSum = 6
  '''Sum of the values from the bottom of the list'''
  xlCaptionBeginsWith = 17
  '''Filters for all captions beginning with the specified string'''
  xlCaptionContains = 21
  '''Filters for all captions that contain the specified string'''
  xlCaptionDoesNotBeginWith = 18
  '''Filters for all captions that don't begin with the specified string'''
  xlCaptionDoesNotContain = 22
  '''Filters for all captions that don't contain the specified string'''
  xlCaptionDoesNotEndWith = 20
  '''Filters for all captions that don't end with the specified string'''
  xlCaptionDoesNotEqual = 16
  '''Filters for all captions that don't match the specified string'''
  xlCaptionEndsWith = 19
  '''Filters for all captions that end with the specified string'''
  xlCaptionEquals = 15
  '''Filters for all captions that match the specified string'''
  xlCaptionIsBetween = 27
  '''Filters for all captions that are between a specified range of values'''
  xlCaptionIsGreaterThan = 23
  '''Filters for all captions that are greater than the specified value'''
  xlCaptionIsGreaterThanOrEqualTo = 24
  '''Filters for all captions that are greater than or match the specified value'''
  xlCaptionIsLessThan = 25
  '''Filters for all captions that are less than the specified value'''
  xlCaptionIsLessThanOrEqualTo = 26
  '''Filters for all captions that are less than or match the specified value'''
  xlCaptionIsNotBetween = 28
  '''Filters for all captions that are not between a specified range of values'''
  xlDateBetween = 35
  '''Filters for all dates that are between a specified range of dates'''
  xlDateLastMonth = 45
  '''Filters for all dates that apply to the previous month'''
  xlDateLastQuarter = 48
  '''Filters for all dates that apply to the previous quarter'''
  xlDateLastWeek = 42
  '''Filters for all dates that apply to the previous week'''
  xlDateLastYear = 51
  '''Filters for all dates that apply to the previous year'''
  xlDateNextMonth = 43
  '''Filters for all dates that apply to the next month'''
  xlDateNextQuarter = 46
  '''Filters for all dates that apply to the next quarter'''
  xlDateNextWeek = 40
  '''Filters for all dates that apply to the next week'''
  xlDateNextYear = 49
  '''Filters for all dates that apply to the next year'''
  xlDateThisMonth = 44
  '''Filters for all dates that apply to the current month'''
  xlDateThisQuarter = 47
  '''Filters for all dates that apply to the current quarter'''
  xlDateThisWeek = 41
  '''Filters for all dates that apply to the current week'''
  xlDateThisYear = 50
  '''Filters for all dates that apply to the current year'''
  xlDateToday = 38
  '''Filters for all dates that apply to the current date'''
  xlDateTomorrow = 37
  '''Filters for all dates that apply to the next day'''
  xlDateYesterday = 39
  '''Filters for all dates that apply to the previous day'''
  xlNotSpecificDate = 30
  '''Filters for all dates that don't match a specified date'''
  xlSpecificDate = 29
  '''Filters for all dates that match a specified date'''
  xlTopCount = 1
  '''Filters for the specified number of values from the top of a list'''
  xlTopPercent = 3
  '''Filters for the specified percentage of values from a list'''
  xlTopSum = 5
  '''Sum of the values from the top of the list'''
  xlValueDoesNotEqual = 8
  '''Filters for all values that don't match the specified value'''
  xlValueEquals = 7
  '''Filters for all values that match the specified value'''
  xlValueIsBetween = 13
  '''Filters for all values that are between a specified range of values'''
  xlValueIsGreaterThan = 9
  '''Filters for all values that are greater than the specified value'''
  xlValueIsGreaterThanOrEqualTo = 10
  '''Filters for all values that are greater than or match the specified value'''
  xlValueIsLessThan = 11
  '''Filters for all values that are less than the specified value'''
  xlValueIsLessThanOrEqualTo = 12
  '''Filters for all values that are less than or match the specified value'''
  xlValueIsNotBetween = 14
  '''Filters for all values that are not between a specified range of values'''
  xlYearToDate = 52
  '''Filters for all values that are within one year of a specified date'''

class XlTimelineLevel(IntFlag):
  '''One of the built-in hierarchy levels that Timeline supports.'''


@unique
class XlDataLabelPosition(IntFlag):
  '''Specifies where the data label is positioned.'''

  xlLabelPositionAbove = 0
  '''Data label is positioned above the data point.'''
  xlLabelPositionBelow = 1
  '''Data label is positioned below the data point.'''
  xlLabelPositionBestFit = 5
  '''Microsoft Office Excel 2007 sets the position of the data label.'''
  xlLabelPositionCenter = -4108
  '''Data label is centered on the data point or is inside a bar or pie chart.'''
  xlLabelPositionCustom = 7
  '''Data label is in a custom position.'''
  xlLabelPositionInsideBase = 4
  '''Data label is positioned inside the data point at the bottom edge.'''
  xlLabelPositionInsideEnd = 3
  '''Data label is positioned inside the data point at the top edge.'''
  xlLabelPositionLeft = -4131
  '''Data label is positioned to the left of the data point.'''
  xlLabelPositionMixed = 6
  '''Data labels are in multiple positions.'''
  xlLabelPositionOutsideEnd = 2
  '''Data label is positioned outside the data point at the top edge.'''
  xlLabelPositionRight = -4152
  '''Data label is positioned to the right of the data point.'''

@unique
class XlDataLabelSeparator(IntFlag):
  '''Specifies the separator used with data labels.'''

  xlDataLabelSeparatorDefault = 1
  '''Excel selects the separator.'''

@unique
class XlConditionValueTypes(IntFlag):
  '''Specifies the types of condition values that can be used.'''

  xlConditionValueAutomaticMax = 7
  '''The longest data bar is proportional to the maximum value in the range.'''
  xlConditionValueAutomaticMin = 6
  '''The shortest data bar is proportional to the minimum value in the range.'''
  xlConditionValueFormula = 4
  '''Formula is used.'''
  xlConditionValueHighestValue = 2
  '''Highest value from the list of values.'''
  xlConditionValueLowestValue = 1
  '''Lowest value from the list of values.'''
  xlConditionValueNone = -1
  '''No conditional value.'''
  xlConditionValueNumber = 0
  '''Number is used.'''
  xlConditionValuePercent = 3
  '''Percentage is used.'''
  xlConditionValuePercentile = 5
  '''Percentile is used.'''

@unique
class XlAutoFilterOperator(IntFlag):
  '''Specifies the operator to use to associate two criteria applied by a filter.'''

  xlAnd = 1
  '''Logical AND of Criteria1 and Criteria2'''
  xlBottom10Items = 4
  '''Lowest-valued items displayed (number of items specified in Criteria1)'''
  xlBottom10Percent = 6
  '''Lowest-valued items displayed (percentage specified in Criteria1)'''
  xlFilterCellColor = 8
  '''Color of the cell'''
  xlFilterDynamic = 11
  '''Dynamic filter'''
  xlFilterFontColor = 9
  '''Color of the font'''
  xlFilterIcon = 10
  '''Filter icon'''
  xlFilterValues = 7
  '''Filter values'''
  xlOr = 2
  '''Logical OR of Criteria1 or Criteria2'''
  xlTop10Items = 3
  '''Highest-valued items displayed (number of items specified in Criteria1)'''
  xlTop10Percent = 5
  '''Highest-valued items displayed (percentage specified in Criteria1)'''

@unique
class XlSortDataOption(IntFlag):
  '''Specifies how to sort text.'''

  xlSortNormal = 0
  '''default. Sorts numeric and text data separately.'''
  xlSortTextAsNumbers = 1
  '''Treat text as numeric data for the sort.'''

@unique
class XlSortOn(IntFlag):
  '''Specifies the parameter on which the data should be sorted.'''

  SortOnCellColor = 1
  '''Cell color.'''
  SortOnFontColor = 2
  '''Font color.'''
  SortOnIcon = 3
  '''Icon.'''
  SortOnValues = 0
  '''Values.'''

@unique
class XlSparkScale(IntFlag):
  '''Specifies how the minimum or maximum value of the vertical axis of the sparkline is scaled relative to other sparklines in the group.

#REMARKS:

The constants of the xlSparkScale enumeration correspond to the settings of the Vertical Axis Minimum Value Options and the Vertical Axis Maximum Value Options on the Axis drop-down list on the Sparkline Tools Design tab of the ribbon.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  xlSparkScaleCustom = 3
  '''The minimum or maximum value for the vertical axis of the sparkline has a user-defined value.'''
  xlSparkScaleGroup = 1
  '''The minimum or maximum value for the vertical axes of all of the sparklines in the group have the same value.'''
  xlSparkScaleSingle = 2
  '''The minimum or maximum value for the vertical axis of each sparkline in the group is automatically set to its own calculated value.'''



# list ole_cls_def_strs  115

class Application(_Application):
  '''Represents the entire Microsoft Excel application.

#REMARKS:

The Application object contains:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Application property to return the Application object. The following example applies the Windows property to the Application object.

Application.Windows("book1.xls").Activate

The following example creates an Excel workbook object in another application and then opens a workbook in Excel.

Set xl = CreateObject("Excel.Sheet")
xl.Application.Workbooks.Open "newbook.xls"

Many of the properties and methods that return the most common user-interface objects, such as the active cell (ActiveCell property), can be used without the Application object qualifier. For example, instead of writing:

Application.ActiveCell.Font.Bold = True

You can write:

ActiveCell.Font.Bold = True

The Application object contains:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.ActiveCell: Range
    '''Returns a Range object that represents the active cell in the active window (the window on top) or in the specified window. If the window isn't displaying a worksheet, this property fails. Read-only.

#SYNTAX:

expression.ActiveCell

expression A variable that represents an Application object.

If you don't specify an object qualifier, this property returns the active cell in the active window.

Be careful to distinguish between the active cell and the selection. The active cell is a single cell inside the current selection. The selection may contain more than one cell, but only one is the active cell.

The following expressions all return the active cell, and are all equivalent.

This example uses a message box to display the value in the active cell. Because the ActiveCell property fails if the active sheet isn't a worksheet, the example activates Sheet1 before using the ActiveCell property.

This example changes the font formatting for the active cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't specify an object qualifier, this property returns the active cell in the active window.

Be careful to distinguish between the active cell and the selection. The active cell is a single cell inside the current selection. The selection may contain more than one cell, but only one is the active cell.

The following expressions all return the active cell, and are all equivalent.

This example uses a message box to display the value in the active cell. Because the ActiveCell property fails if the active sheet isn't a worksheet, the example activates Sheet1 before using the ActiveCell property.

This example changes the font formatting for the active cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

ActiveCell 
Application.ActiveCell 
ActiveWindow.ActiveCell 
Application.ActiveWindow.ActiveCell

This example uses a message box to display the value in the active cell. Because the ActiveCell property fails if the active sheet isn't a worksheet, the example activates Sheet1 before using the ActiveCell property.

Worksheets("Sheet1").Activate 
MsgBox ActiveCell.Value

This example changes the font formatting for the active cell.

Worksheets("Sheet1").Activate 
With ActiveCell.Font 
 .Bold = True 
 .Italic = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveChart: VBA_object
    '''Returns a Chart object that represents the active chart (either an embedded chart or a chart sheet). An embedded chart is considered active when it's either selected or activated. When no chart is active, this property returns Nothing.

#SYNTAX:

expression.ActiveChart

expression A variable that represents an Application object.

If you don't specify an object qualifier, this property returns the active chart in the active workbook.

This example turns on the legend for the active chart.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't specify an object qualifier, this property returns the active chart in the active workbook.

This example turns on the legend for the active chart.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns on the legend for the active chart.

ActiveChart.HasLegend = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveEncryptionSession: int
    '''Returns a Long that represents the encryption session associated with the active document. Read-only.

#SYNTAX:

expression.ActiveEncryptionSession

expression An expression that returns an Application object.

Long

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Long
    '''

    self.ActiveMenuBar: MenuBar
    self.ActivePrinter: str
    '''Returns or sets the name of the active printer. Read/write String.

#SYNTAX:

expression.ActivePrinter

expression A variable that represents an Application object.

This example displays the name of the active printer.

The preceding example can be used to discover the proper printer and port naming conventions on your computer for use in the following example.

This example changes the active printer. The colon ":" after the port name is required.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of the active printer.

MsgBox "The name of the active printer is " & Application.ActivePrinter

The preceding example can be used to discover the proper printer and port naming conventions on your computer for use in the following example.

This example changes the active printer. The colon ":" after the port name is required.

Application.ActivePrinter = "[The name of your printer] on [port]:"  
'i.e.  
Application.ActivePrinter = "Canon Printer on Ne02:"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveProtectedViewWindow: ProtectedViewWindow | None
    '''Returns a ProtectedViewWindow object that represents the active Protected View window (the window on top). Returns Nothing if there are no Protected View windows open. Read-only.

#SYNTAX:

expression.ActiveProtectedViewWindow

expression A variable that represents an Application object.

The following code example displays the name (Caption property) of the active Protected View window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following code example displays the name (Caption property) of the active Protected View window.

MsgBox "The name of the active Protected View window is " & ActiveProtectedWindow.Caption

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveSheet: _Worksheet
    '''Returns an object that represents the active sheet (the sheet on top) in the active workbook or in the specified window or workbook. Returns Nothing if no sheet is active.

#SYNTAX:

expression.ActiveSheet

expression A variable that represents an Application object.

If you don't specify an object qualifier, this property returns the active sheet in the active workbook.

If a workbook appears in more than one window, the ActiveSheet property may be different in different windows.

This example displays the name of the active sheet.

This example creates a print preview of the active sheet that has the page number at the top of column B on each page.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't specify an object qualifier, this property returns the active sheet in the active workbook.

If a workbook appears in more than one window, the ActiveSheet property may be different in different windows.

This example displays the name of the active sheet.

This example creates a print preview of the active sheet that has the page number at the top of column B on each page.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of the active sheet.

MsgBox "The name of the active sheet is " & ActiveSheet.Name

This example creates a print preview of the active sheet that has the page number at the top of column B on each page.

Sub PrintSheets()

   'Set up your variables.
   Dim iRow As Integer, iRowL As Integer, iPage As Integer
   'Find the last row that contains data.
   iRowL = Cells(Rows.Count, 1).End(xlUp).Row
   
   'Define the print area as the range containing all the data in the first two columns of the current worksheet.
   ActiveSheet.PageSetup.PrintArea = Range("A1:B" & iRowL).Address
   
   'Select all the rows containing data.
   Rows(iRowL).Select
   
   'display the automatic page breaks
   ActiveSheet.DisplayAutomaticPageBreaks = True
   Range("B1").Value = "Page 1"
   
   'After each page break, go to the next cell in column B and write out the page number.
   For iPage = 1 To ActiveSheet.HPageBreaks.Count
      ActiveSheet.HPageBreaks(iPage) _
         .Location.Offset(0, 1).Value = "Page " & iPage + 1
   Next iPage
   
   'Show the print preview, and afterwards remove the page numbers from column B.
   ActiveSheet.PrintPreview
   Columns("B").ClearContents
   Range("A1").Select
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveWindow: Window
    '''Returns a Window object that represents the active Excel window (the window on top). Returns Nothing if there are no windows open. Read-only.

#SYNTAX:

expression.ActiveWindow

expression A variable that represents an Application object.

This example displays the name (Caption property) of the active Excel window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name (Caption property) of the active Excel window.

MsgBox "The name of the active window is " & ActiveWindow.Caption

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveWorkbook: Workbook
    '''Returns a Workbook object that represents the workbook in the active window (the window on top). Returns Nothing if there are no windows open or if either the Info window or the Clipboard window is the active window. Read-only.

#SYNTAX:

expression.ActiveWorkbook

expression A variable that represents an Application object.

This example displays the name of the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of the active workbook.

MsgBox "The name of the active workbook is " & ActiveWorkbook.Name

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AddIns: AddIns
    '''Returns an AddIns collection that represents all the add-ins listed in the Add-Ins dialog box (Add-Ins command on the Developer tab). Read-only.

#SYNTAX:

expression.AddIns

expression A variable that represents an Application object.

Using this method without an object qualifier is equivalent to Application.Addins.

This example displays the status of the Analysis ToolPak add-in. Note that the string used as the index to the AddIns collection is the title of the add-in, not the add-in's file name.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this method without an object qualifier is equivalent to Application.Addins.

This example displays the status of the Analysis ToolPak add-in. Note that the string used as the index to the AddIns collection is the title of the add-in, not the add-in's file name.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the status of the Analysis ToolPak add-in. Note that the string used as the index to the AddIns collection is the title of the add-in, not the add-in's file name.

If AddIns("Analysis ToolPak").Installed = True Then 
 MsgBox "Analysis ToolPak add-in is installed" 
Else 
 MsgBox "Analysis ToolPak add-in is not installed" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AddIns2: AddIns2
    '''Returns an AddIns2 collection that represents all the add-ins that are currently available or open in Microsoft Excel, regardless of whether they are installed. Read-only.

#SYNTAX:

expression.AddIns2

expression A variable that returns an Application object.

This example displays the status of the Analysis ToolPak add-in. Note that the string used as the index to the AddIns2 collection is the title of the add-in, not the add-in's file name.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the status of the Analysis ToolPak add-in. Note that the string used as the index to the AddIns2 collection is the title of the add-in, not the add-in's file name.

If Application.AddIns2("Analysis ToolPak").Installed = True Then 
 MsgBox "Analysis ToolPak add-in is installed" 
Else 
 MsgBox "Analysis ToolPak add-in is not installed" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AlertBeforeOverwriting: bool
    '''True if Microsoft Excel displays a message before overwriting nonblank cells during a drag-and-drop editing operation. Read/write Boolean.

#SYNTAX:

expression.AlertBeforeOverwriting

expression A variable that represents an Application object.

This example causes Microsoft Excel to display an alert before overwriting nonblank cells during drag-and-drop editing.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes Microsoft Excel to display an alert before overwriting nonblank cells during drag-and-drop editing.

Application.AlertBeforeOverwriting = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AltStartupPath: str
    '''Returns or sets the name of the alternate startup folder. Read/write String.

#SYNTAX:

expression.AltStartupPath

expression A variable that represents an Application object.

This example sets the alternate startup folder.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the alternate startup folder.

Application.AltStartupPath = "C:\EXCEL\MACROS"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AlwaysUseClearType: bool
    '''Returns or sets a Boolean that represents whether to use ClearType to display fonts in the menu, ribbon, and dialog box text. Read/write Boolean.

#SYNTAX:

expression.AlwaysUseClearType

expression A variable that represents an Application object.

Even if the Microsoft Windows setting for ClearType is turned off, setting this property to True overrides the Windows setting and uses ClearType in all Microsoft Office applications.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Even if the Microsoft Windows setting for ClearType is turned off, setting this property to True overrides the Windows setting and uses ClearType in all Microsoft Office applications.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an Application object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ArbitraryXMLSupportAvailable: bool
    '''Returns a Boolean value that indicates whether the XML features in Microsoft Excel are available. Read-only.

#SYNTAX:

expression.ArbitraryXMLSupportAvailable

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AskToUpdateLinks: bool
    '''True if Microsoft Excel asks the user to update links when opening files with links. False if links are automatically updated with no dialog box. Read/write Boolean.

#SYNTAX:

expression.AskToUpdateLinks

expression A variable that represents an Application object.

This example sets Microsoft Excel to ask the user to update links whenever a file that contains links is opened.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Microsoft Excel to ask the user to update links whenever a file that contains links is opened.

Application.AskToUpdateLinks = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Assistance: CDispatch
    '''Returns an IAssistance object for Microsoft Excel that represents the Microsoft Office Help Viewer. Read-only.

#SYNTAX:

expression.Assistance

expression A variable that represents an Application object.

The IAssistance object allows developers to show custom help and help that is installed with Office in the Office Help Viewer.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The IAssistance object allows developers to show custom help and help that is installed with Office in the Office Help Viewer.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Assistant: CDispatch
    self.AutoCorrect: AutoCorrect
    '''Returns an AutoCorrect object that represents the Microsoft Excel AutoCorrect attributes. Read-only.

#SYNTAX:

expression.AutoCorrect

expression A variable that represents an Application object.

This example substitutes the word Temp. for the word Temperature in the array of AutoCorrect replacements.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example substitutes the word Temp. for the word Temperature in the array of AutoCorrect replacements.

With Application.AutoCorrect 
 .AddReplacement "Temperature", "Temp." 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AutoFormatAsYouTypeReplaceHyperlinks: bool
    '''True (default) if Microsoft Excel automatically formats hyperlinks as you type. False if Excel does not automatically format hyperlinks as you type. Read/write Boolean.

#SYNTAX:

expression.AutoFormatAsYouTypeReplaceHyperlinks

expression A variable that represents an Application object.

In this example, Microsoft Excel determines if the ability to format hyperlinks automatically as they are typed is enabled, and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines if the ability to format hyperlinks automatically as they are typed is enabled, and notifies the user.

Sub CheckHyperlinks() 
 
 ' Determine if automatic formatting is enabled and notify user. 
 If Application.AutoFormatAsYouTypeReplaceHyperlinks = True Then 
 MsgBox "Automatic formatting for typing in hyperlinks is enabled." 
 Else 
 MsgBox "Automatic formatting for typing in hyperlinks is not enabled." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AutoPercentEntry: bool
    '''True if entries in cells formatted as percentages aren't automatically multiplied by 100 as soon as they are entered. Read/write Boolean.

#SYNTAX:

expression.AutoPercentEntry

expression A variable that represents an Application object.

This example enables automatic multiplication by 100 for subsequent entries in cells formatted as percentages.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables automatic multiplication by 100 for subsequent entries in cells formatted as percentages.

Application.AutoPercentEntry = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AutoRecover: AutoRecover
    '''Returns an AutoRecover object, which backs up all file formats on a timed interval.

#SYNTAX:

expression.AutoRecover

expression A variable that represents an Application object.

Valid time intervals are whole numbers from 1 to 120.

In this example, the Time property is used in conjunction with the AutoRecover property to set the time interval for Microsoft Excel to wait before saving another copy to five minutes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Valid time intervals are whole numbers from 1 to 120.

In this example, the Time property is used in conjunction with the AutoRecover property to set the time interval for Microsoft Excel to wait before saving another copy to five minutes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, the Time property is used in conjunction with the AutoRecover property to set the time interval for Microsoft Excel to wait before saving another copy to five minutes.

Sub UseAutoRecover() 
 
 Application.AutoRecover.Time = 5 
 
 MsgBox "The time that will elapse between each automatic " & _ 
 "save has been set to " & _ 
 Application.AutoRecover.Time & " minutes." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AutomationSecurity: MsoAutomationSecurity
    '''Returns or sets an MsoAutomationSecurity constant that represents the security mode that Microsoft Excel uses when programmatically opening files. Read/write.

#SYNTAX:

expression.AutomationSecurity

expression A variable that represents an Application object.

This property is automatically set to msoAutomationSecurityLow when the application is started. Therefore, to avoid breaking solutions that rely on the default setting, you should be careful to reset this property to msoAutomationSecurityLow after programmatically opening a file. Also, this property should be set immediately before and after opening a file programmatically to avoid malicious subversion.

MsoAutomationSecurity can be one of these MsoAutomationSecurity constants:

Setting ScreenUpdating to False does not affect alerts and will not affect security warnings.

The DisplayAlerts setting will not apply to security warnings. For example, if the user sets DisplayAlerts equal to False and AutomationSecurity to msoAutomationSecurityByUI while the user is on Medium security level, there will be security warnings while the macro is running. This allows the macro to trap file open errors, while still showing the security warning if the file open succeeds.

This example captures the current automation security setting, changes the setting to disable macros, displays the Open dialog box, and after opening the selected document, sets the automation security back to its original setting.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property is automatically set to msoAutomationSecurityLow when the application is started. Therefore, to avoid breaking solutions that rely on the default setting, you should be careful to reset this property to msoAutomationSecurityLow after programmatically opening a file. Also, this property should be set immediately before and after opening a file programmatically to avoid malicious subversion.

MsoAutomationSecurity can be one of these MsoAutomationSecurity constants:

Setting ScreenUpdating to False does not affect alerts and will not affect security warnings.

The DisplayAlerts setting will not apply to security warnings. For example, if the user sets DisplayAlerts equal to False and AutomationSecurity to msoAutomationSecurityByUI while the user is on Medium security level, there will be security warnings while the macro is running. This allows the macro to trap file open errors, while still showing the security warning if the file open succeeds.

This example captures the current automation security setting, changes the setting to disable macros, displays the Open dialog box, and after opening the selected document, sets the automation security back to its original setting.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example captures the current automation security setting, changes the setting to disable macros, displays the Open dialog box, and after opening the selected document, sets the automation security back to its original setting.

Sub Security() 
    Dim secAutomation As MsoAutomationSecurity 
 
    secAutomation = Application.AutomationSecurity 
 
    Application.AutomationSecurity = msoAutomationSecurityForceDisable 
    Application.FileDialog(msoFileDialogOpen).Show 
 
    Application.AutomationSecurity = secAutomation 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Build: int
    '''Returns the Microsoft Excel build number. Read-only Long.

#SYNTAX:

expression.Build

expression A variable that represents an Application object.

It's usually safer to test the Version property, unless you are sure that you need to know the build number.

This example tests the Build property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

It's usually safer to test the Version property, unless you are sure that you need to know the build number.

This example tests the Build property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example tests the Build property.

If Application.Build > 2500 Then 
 ' build-dependent code here 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.COMAddIns: CDispatch
    '''Returns the COMAddIns collection for Microsoft Excel, which represents the currently installed COM add-ins. Read-only.

#SYNTAX:

expression.COMAddIns

expression A variable that represents an Application object.

This example displays the number of COM add-ins that are currently installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of COM add-ins that are currently installed.

Set objAI = Application.COMAddIns 
MsgBox "Number of COM add-ins available:" & _ 
    objAI.Count

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CSVDisplayNumberConversionWarning: bool
    self.CSVKeepColumnAsTextIfMultipleEntriesAreText: bool
    self.CalculateBeforeSave: bool
    '''True if workbooks are calculated before they're saved to disk (if the Calculation property is set to xlManual). This property is preserved even if you change the Calculation property. Read/write Boolean.

#SYNTAX:

expression.CalculateBeforeSave

expression A variable that represents an Application object.

This example sets Microsoft Excel to calculate workbooks before they're saved to disk.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Microsoft Excel to calculate workbooks before they're saved to disk.

Application.Calculation = xlManual 
Application.CalculateBeforeSave = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Calculation: XlCalculation
    '''Returns or sets an XlCalculation value that represents the calculation mode.

#SYNTAX:

expression.Calculation

expression A variable that represents an Application object.

For OLAP data sources, this property can only return or be set to xlNormal.

This example causes Microsoft Excel to calculate workbooks before they are saved to disk.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

For OLAP data sources, this property can only return or be set to xlNormal.

This example causes Microsoft Excel to calculate workbooks before they are saved to disk.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes Microsoft Excel to calculate workbooks before they are saved to disk.

Application.Calculation = xlCalculationManual 
Application.CalculateBeforeSave = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CalculationInterruptKey: XlCalculationInterruptKey
    '''Sets or returns an XlCalculationInterruptKey constant that specifies the key that can interrupt Microsoft Excel when performing calculations. Read/write.

#SYNTAX:

expression.CalculationInterruptKey

expression A variable that represents an Application object.

In this example, Microsoft Excel determines the setting for the calculation interrupt key and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines the setting for the calculation interrupt key and notifies the user.

Sub CheckInterruptKey() 
 
 ' Determine the calculation interrupt key and notify the user. 
 Select Case Application.CalculationInterruptKey 
 Case xlAnyKey 
 MsgBox "The calculation interrupt key is set to any key." 
 Case xlEscKey 
 MsgBox "The calculation interrupt key is set to 'Escape'" 
 Case xlNoKey 
 MsgBox "The calculation interrupt key is set to no key." 
 End Select 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CalculationState: XlCalculationState
    '''Returns an XlCalculationState constant that indicates the calculation state of the application, for any calculations that are being performed in Microsoft Excel. Read-only.

#SYNTAX:

expression.CalculationState

expression A variable that represents an Application object.

In this example, Microsoft Excel checks to see if any calculations are being performed. If no calculations are being performed, a message displays the calculation state as Done. Otherwise, a message displays the calculation state as Not Done.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel checks to see if any calculations are being performed. If no calculations are being performed, a message displays the calculation state as Done. Otherwise, a message displays the calculation state as Not Done.

Sub StillCalculating() 
 
 If Application.CalculationState = xlDone Then 
 MsgBox "Done" 
 Else 
 MsgBox "Not Done" 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CalculationVersion: int
    '''Returns a number whose rightmost four digits are the minor calculation engine version number, and whose other digits (on the left) are the major version of Microsoft Excel. Read-only Long.

#SYNTAX:

expression.CalculationVersion

expression A variable that represents an Application object.

If the workbook was saved in an earlier version of Excel, and if the workbook hasn't been fully recalculated, this property returns 0.

This example compares the version of Microsoft Excel with the version of Excel that the workbook was last calculated in. If the two version numbers are different, the example sets the blnFullCalc variable to True.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the workbook was saved in an earlier version of Excel, and if the workbook hasn't been fully recalculated, this property returns 0.

This example compares the version of Microsoft Excel with the version of Excel that the workbook was last calculated in. If the two version numbers are different, the example sets the blnFullCalc variable to True.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example compares the version of Microsoft Excel with the version of Excel that the workbook was last calculated in. If the two version numbers are different, the example sets the blnFullCalc variable to True.

If Application.CalculationVersion <> _ 
 Workbooks(1).CalculationVersion Then 
 blnFullCalc = True 
Else 
 blnFullCalc = False 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Caller: Application
    '''Returns information about how Visual Basic was called (for more information, see the Remarks section).

#SYNTAX:

expression.Caller (Index)

expression A variable that represents an Application object.

This property returns information about how Visual Basic was called, as shown in the following table.

This example displays information about how Visual Basic was called.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns information about how Visual Basic was called, as shown in the following table.

This example displays information about how Visual Basic was called.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays information about how Visual Basic was called.

Select Case TypeName(Application.Caller) 
 Case "Range" 
 v = Application.Caller.Address 
 Case "String" 
 v = Application.Caller 
 Case "Error" 
 v = "Error" 
 Case Else 
 v = "unknown" 
End Select 
MsgBox "caller = " & v

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CanPlaySounds: Application
    '''Note
This property should not be used. Sound notes have been removed from Microsoft Excel.

#SYNTAX:

expression.CanPlaySounds

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CanRecordSounds: Application
    '''Note
This property should not be used. Sound notes have been removed from Microsoft Excel.

#SYNTAX:

expression.CanRecordSounds

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Caption: str
    '''Returns or sets a String value that represents the name that appears in the title bar of the main Microsoft Excel window.

#SYNTAX:

expression.Caption

expression A variable that represents an Application object.

If you don't set a name, or if you set the name to Empty, this property returns "Microsoft Excel."

This example sets the name that appears in the title bar of the main Microsoft Excel window to a custom name.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't set a name, or if you set the name to Empty, this property returns "Microsoft Excel."

This example sets the name that appears in the title bar of the main Microsoft Excel window to a custom name.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the name that appears in the title bar of the main Microsoft Excel window to a custom name.

Application.Caption = "Blue Sky Airlines Reservation System"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CellDragAndDrop: bool
    '''True if dragging and dropping cells is enabled. Read/write Boolean.

#SYNTAX:

expression.CellDragAndDrop

expression A variable that represents an Application object.

This example enables dragging and dropping cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables dragging and dropping cells.

Application.CellDragAndDrop = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Cells: Range
    '''Returns a Range object that represents all the cells on the active worksheet. If the active document is not a worksheet, this property fails.

#SYNTAX:

expression.Cells

expression A variable that represents an Application object.

Because the Item property is the default property for the Range object, you can specify the row and column index immediately after the Cells keyword. For more information, see the Item property and the examples for this topic.

Using this property without an object qualifier returns a Range object that represents all the cells on the active worksheet.

This example looks at data in each row and inserts a blank row each time the value in column A changes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Because the Item property is the default property for the Range object, you can specify the row and column index immediately after the Cells keyword. For more information, see the Item property and the examples for this topic.

Using this property without an object qualifier returns a Range object that represents all the cells on the active worksheet.

This example looks at data in each row and inserts a blank row each time the value in column A changes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example looks at data in each row and inserts a blank row each time the value in column A changes.

Sub ChangeInsertRows()
    Application.ScreenUpdating = False
    Dim xRow As Long
    
    For xRow = Application.Cells(Rows.Count, 1).End(xlUp).Row To 3 Step -1
        If Application.Cells(xRow, 1).Value <> Application.Cells(xRow - 1, 1).Value Then Rows(xRow).Resize(1).Insert
    Next xRow
    
    Application.ScreenUpdating = True
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ChartDataPointTrack: bool
    '''True causes all charts in newly created documents to use the cell reference tracking behavior. Boolean.

#SYNTAX:

expression.ChartDataPointTrack

expression A variable that represents an Application object.

Data labels now track the actual data point to which they are attached (as opposed to the legacy behavior of tracking the index of the data point), allowing the label-to-point relationship to persist across events such as filter and sort.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: BOOL

#REMARKS:

Data labels now track the actual data point to which they are attached (as opposed to the legacy behavior of tracking the index of the data point), allowing the label-to-point relationship to persist across events such as filter and sort.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Charts: Sheets
    '''Returns a Sheets collection that represents all the chart sheets in the active workbook.

#SYNTAX:

expression.Charts

expression A variable that represents an Application object.

This example sets the text for the title of Chart1.

This example hides Chart1, Chart3, and Chart5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the text for the title of Chart1.

With Charts("Chart1") 
 .HasTitle = True 
 .ChartTitle.Text = "First Quarter Sales" 
End With

This example hides Chart1, Chart3, and Chart5.

Charts(Array("Chart1", "Chart3", "Chart5")).Visible = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ClipboardFormats: VBA_Variant
    '''Returns the formats that are currently on the Clipboard, as an array of numeric values. To determine whether a particular format is on the Clipboard, compare each element in the array with the appropriate constant listed in the Remarks section. Read-only Variant.

#SYNTAX:

expression.ClipboardFormats (Index)

expression A variable that represents an Application object.

This property returns an array of numeric values. To determine whether a particular format is on the Clipboard, compare each element of the array with one of the XlClipboardFormat constants.

This example displays a message box if the Clipboard contains a rich-text format (RTF) object. You can create an RTF object by copying text from a Word document.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns an array of numeric values. To determine whether a particular format is on the Clipboard, compare each element of the array with one of the XlClipboardFormat constants.

This example displays a message box if the Clipboard contains a rich-text format (RTF) object. You can create an RTF object by copying text from a Word document.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message box if the Clipboard contains a rich-text format (RTF) object. You can create an RTF object by copying text from a Word document.

aFmts = Application.ClipboardFormats 
For Each fmt In aFmts 
 If fmt = xlClipboardFormatRTF Then 
 MsgBox "Clipboard contains rich text" 
 End If 
Next

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ClusterConnector: str
    '''Returns or sets the name of the High Performance Computing (HPC) Cluster Connector that is used to run user-defined functions in XLL add-ins. Read/write.

#SYNTAX:

expression.ClusterConnector

expression A variable that represents an Application object.

String

The setting of the ClusterConnector property corresponds to the Cluster type drop-down box under Formulas in the Advanced category of the Excel Options dialog box.

Before you can specify the ClusterConnector property, you must use the UseClusterConnector property to allow Excel to run user-defined functions in XLL add-ins.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: String

#REMARKS:

The setting of the ClusterConnector property corresponds to the Cluster type drop-down box under Formulas in the Advanced category of the Excel Options dialog box.

Before you can specify the ClusterConnector property, you must use the UseClusterConnector property to allow Excel to run user-defined functions in XLL add-ins.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ColorButtons: bool
    self.Columns: Range
    '''Returns a Range object that represents all the columns on the active worksheet. If the active document isn't a worksheet, the Columns property fails.

#SYNTAX:

expression.Columns

expression A variable that represents an Application object.

Using this property without an object qualifier is equivalent to using ActiveSheet.Columns.

When applied to a Range object that's a multiple-area selection, this property returns columns from only the first area of the range. For example, if the Range object has two areas—A1:B2 and C3:D4—Selection.Columns.Count returns 2, not 4. To use this property on a range that may contain a multiple-area selection, test Areas.Count to determine whether the range contains more than one area. If it does, loop over each area in the range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property without an object qualifier is equivalent to using ActiveSheet.Columns.

When applied to a Range object that's a multiple-area selection, this property returns columns from only the first area of the range. For example, if the Range object has two areas—A1:B2 and C3:D4—Selection.Columns.Count returns 2, not 4. To use this property on a range that may contain a multiple-area selection, test Areas.Count to determine whether the range contains more than one area. If it does, loop over each area in the range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CommandBars: CDispatch
    '''Returns a CommandBars object that represents the Microsoft Excel command bars. Read-only.

#SYNTAX:

expression.CommandBars

expression An expression that returns an Application object.

Used with the Application object, this property returns the set of built-in and custom command bars available to the application.

When a workbook is embedded in another application and activated by the user by double-clicking the workbook, using this property with a Workbook object returns the set of Microsoft Excel command bars available within the other application. At all other times, using this property with a Workbook object returns Nothing.

There is no programmatic way to return the set of command bars attached to a workbook.

This example deletes all custom command bars that aren't visible.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Used with the Application object, this property returns the set of built-in and custom command bars available to the application.

When a workbook is embedded in another application and activated by the user by double-clicking the workbook, using this property with a Workbook object returns the set of Microsoft Excel command bars available within the other application. At all other times, using this property with a Workbook object returns Nothing.

There is no programmatic way to return the set of command bars attached to a workbook.

This example deletes all custom command bars that aren't visible.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example deletes all custom command bars that aren't visible.

For Each bar In Application.CommandBars 
    If Not bar.BuiltIn And Not bar.Visible Then bar.Delete 
Next

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CommandUnderlines: XlCommandUnderlines | int
    '''Returns or sets the state of the command underlines in Microsoft Excel for the Macintosh. Can be one of the constants of XlCommandUnderlines. Read/write Long.

#SYNTAX:

expression.CommandUnderlines

expression A variable that represents an Application object.

In Microsoft Excel for Windows, reading this property always returns xlCommandUnderlinesOn, and setting this property to anything other than xlCommandUnderlinesOn is an error.

This example turns off command underlines in Microsoft Excel for the Macintosh.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

In Microsoft Excel for Windows, reading this property always returns xlCommandUnderlinesOn, and setting this property to anything other than xlCommandUnderlinesOn is an error.

This example turns off command underlines in Microsoft Excel for the Macintosh.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off command underlines in Microsoft Excel for the Macintosh.

Application.CommandUnderlines = xlCommandUnderlinesOff

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ConstrainNumeric: bool
    '''True if handwriting recognition is limited to numbers and punctuation only. Read/write Boolean.

#SYNTAX:

expression.ConstrainNumeric

expression A variable that represents an Application object.

This property is available only if you are using Microsoft Windows for Pen Computing. If you try to set this property under any other operating system, an error occurs.

This example limits handwriting recognition to numbers and punctuation only if Microsoft Windows for Pen Computing is running.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property is available only if you are using Microsoft Windows for Pen Computing. If you try to set this property under any other operating system, an error occurs.

This example limits handwriting recognition to numbers and punctuation only if Microsoft Windows for Pen Computing is running.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example limits handwriting recognition to numbers and punctuation only if Microsoft Windows for Pen Computing is running.

If Application.WindowsForPens Then 
 Application.ConstrainNumeric = True 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ControlCharacters: bool
    '''True if Microsoft Excel displays control characters for right-to-left languages. Read/write Boolean.

#SYNTAX:

expression.ControlCharacters

expression A variable that represents an Application object.

This property can be set only when right-to-left language support has been installed and selected.

This example sets Microsoft Excel to interpret control characters.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property can be set only when right-to-left language support has been installed and selected.

This example sets Microsoft Excel to interpret control characters.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Microsoft Excel to interpret control characters.

Application.ControlCharacters = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ConvertNumbersWithECharacter: bool
    self.CopyObjectsWithCells: bool
    '''True if objects are cut, copied, extracted, and sorted with cells. Read/write Boolean.

#SYNTAX:

expression.CopyObjectsWithCells

expression A variable that represents an Application object.

This example sets Microsoft Excel to cut, copy, extract, and sort objects with cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Microsoft Excel to cut, copy, extract, and sort objects with cells.

Application.CopyObjectsWithCells = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: XlCreator
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression An expression that returns an Application object.

XlCreator

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: XlCreator

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Cursor: XlMousePointer
    '''Returns or sets the appearance of the mouse pointer in Microsoft Excel. Read/write XlMousePointer.

#SYNTAX:

expression.Cursor

expression A variable that represents an Application object.

XlMousePointer can be one of these constants:

The Cursor property isn't reset automatically when the macro stops running. You should reset the pointer to xlDefault before your macro stops running.

This example changes the mouse pointer to an I-beam, pauses, and then changes it to the default pointer.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

XlMousePointer can be one of these constants:

The Cursor property isn't reset automatically when the macro stops running. You should reset the pointer to xlDefault before your macro stops running.

This example changes the mouse pointer to an I-beam, pauses, and then changes it to the default pointer.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example changes the mouse pointer to an I-beam, pauses, and then changes it to the default pointer.

Sub ChangeCursor() 
 
 Application.Cursor = xlIBeam 
 For x = 1 To 1000 
 For y = 1 to 1000 
 Next y 
 Next x 
 Application.Cursor = xlDefault 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CursorMovement: xlVisualCursor | xlLogicalCursor | int
    '''Returns or sets a value that indicates whether a visual cursor or a logical cursor is used. Can be one of the following constants: xlVisualCursor or xlLogicalCursor. Read/write Long.

#SYNTAX:

expression.CursorMovement

expression A variable that represents an Application object.

These constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

This example sets Microsoft Excel to use the visual cursor.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

These constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

This example sets Microsoft Excel to use the visual cursor.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Microsoft Excel to use the visual cursor.

Application.CursorMovement = xlVisualCursor

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CustomListCount: int
    '''Returns the number of defined custom lists (including built-in lists). Read-only Long.

#SYNTAX:

expression.CustomListCount

expression A variable that represents an Application object.

This example displays the number of custom lists that are currently defined.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of custom lists that are currently defined.

MsgBox "There are currently " & Application.CustomListCount & _ 
 " defined custom lists."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CutCopyMode: bool | XLCutCopyMode | int
    '''Returns or sets the status of Cut or Copy mode. Can be True, False, or an XLCutCopyMode constant, as shown in the following tables. Read/write Long.

#SYNTAX:

expression.CutCopyMode

expression A variable that represents an Application object.

This example uses a message box to display the status of Cut or Copy mode.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This example uses a message box to display the status of Cut or Copy mode.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example uses a message box to display the status of Cut or Copy mode.

Select Case Application.CutCopyMode 
 Case Is = False 
 MsgBox "Not in Cut or Copy mode" 
 Case Is = xlCopy 
 MsgBox "In Copy mode" 
 Case Is = xlCut 
 MsgBox "In Cut mode" 
End Select

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DDEAppReturnCode: int
    '''Returns the application-specific DDE return code that was contained in the last DDE acknowledge message received by Microsoft Excel. Read-only Long.

#SYNTAX:

expression.DDEAppReturnCode

expression A variable that represents an Application object.

This example sets the variable appErrorCode to the DDE return code.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the variable appErrorCode to the DDE return code.

appErrorCode = Application.DDEAppReturnCode

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DataEntryMode: int
    '''Returns or sets Data Entry mode, as shown in the following table. When in Data Entry mode, you can enter data only in the unlocked cells in the currently selected range. Read/write Long.

#SYNTAX:

expression.DataEntryMode

expression A variable that represents an Application object.

This example turns off Data Entry mode if it's on.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This example turns off Data Entry mode if it's on.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off Data Entry mode if it's on.

If (Application.DataEntryMode = xlOn) Or _ 
 (Application.DataEntryMode = xlStrict) Then 
 Application.DataEntryMode = xlOff 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DataPrivacyOptions: CDispatch
    self.DecimalSeparator: str
    '''Sets or returns the character used for the decimal separator as a String. Read/write.

#SYNTAX:

expression.DecimalSeparator

expression A variable that represents an Application object.

This example places "1,234,567.89" in cell A1, and then changes the system separators to dashes for the decimals and thousands separators.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example places "1,234,567.89" in cell A1, and then changes the system separators to dashes for the decimals and thousands separators.

Sub ChangeSystemSeparators() 
 
 Range("A1").Formula = "1,234,567.89" 
 MsgBox "The system separators will now change." 
 
 ' Define separators and apply. 
 Application.DecimalSeparator = "-" 
 Application.ThousandsSeparator = "-" 
 Application.UseSystemSeparators = False 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DefaultFilePath: str
    '''Returns or sets the default path that Microsoft Excel uses when it opens files. Read/write String.

#SYNTAX:

expression.DefaultFilePath

expression A variable that represents an Application object.

This example displays the current default file path.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the current default file path.

MsgBox "The current default file path is " & _ 
 Application.DefaultFilePath

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DefaultPivotTableLayoutOptions: DefaultPivotTableLayoutOptions
    self.DefaultSaveFormat: FileFormat | int
    '''Returns or sets the default format for saving files. For a list of valid constants, see the FileFormat property. Read/write Long.

#SYNTAX:

expression.DefaultSaveFormat

expression A variable that represents an Application object.

This example sets the default format for saving files.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the default format for saving files.

Application.DefaultSaveFormat = xlExcel4Workbook

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DefaultSheetDirection: XlReadingOrder | xlRTL | xlLTR | int
    '''Returns or sets the default direction in which Microsoft Excel displays new windows and worksheets. Can be one of the following XlReadingOrder constants: xlRTL (right to left) or xlLTR (left to right). Read/write Long.

#SYNTAX:

expression.DefaultSheetDirection

expression A variable that represents an Application object.

Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

This example sets right to left as the default direction.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

This example sets right to left as the default direction.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets right to left as the default direction.

Application.DefaultSheetDirection = xlRTL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DefaultWebOptions: DefaultWebOptions
    '''Returns the DefaultWebOptions object that contains global application-level attributes used by Microsoft Excel whenever you save a document as a webpage or open a webpage. Read-only.

#SYNTAX:

expression.DefaultWebOptions

expression A variable that represents an Application object.

This example checks to see whether the default setting for document encoding is Western, and then it sets the string strDocEncoding accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example checks to see whether the default setting for document encoding is Western, and then it sets the string strDocEncoding accordingly.

If Application.DefaultWebOptions.Encoding = msoEncodingWestern Then 
 strDocEncoding = "Western" 
Else 
 strDocEncoding = "Other" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DeferAsyncQueries: bool
    '''Gets or sets whether asynchronous queries to OLAP data sources are executed when a worksheet is calculated by VBA code. Read/write Boolean.

#SYNTAX:

expression.DeferAsyncQueries

expression A variable that represents an Application object.

Setting the DeferAsyncQueries property to True prevents any asynchronous queries from executing until the CalculateUntilAsyncQueriesDone method is called.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Setting the DeferAsyncQueries property to True prevents any asynchronous queries from executing until the CalculateUntilAsyncQueriesDone method is called.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DialogSheets: Sheets
    self.Dialogs: Dialogs
    '''Returns a Dialogs collection that represents all built-in dialog boxes. Read-only.

#SYNTAX:

expression.Dialogs

expression A variable that represents an Application object.

This example displays the Open dialog box (File menu).

The following code example opens an email message in Microsoft Outlook with the current workbook attached.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the Open dialog box (File menu).

Application.Dialogs(xlDialogOpen).Show

The following code example opens an email message in Microsoft Outlook with the current workbook attached.

Sub SendIt() 
    Application.Dialogs(xlDialogSendMail).Show arg1:="ask@mrexcel.com", arg2:="This goes in the subject line" 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayAlerts: bool
    '''True if Microsoft Excel displays certain alerts and messages while a macro is running. Read/write Boolean.

#SYNTAX:

expression.DisplayAlerts

expression A variable that represents an Application object.

The default value is True. Set this property to False to suppress prompts and alert messages while a macro is running; when a message requires a response, Microsoft Excel chooses the default response.

If you set this property to False, Excel sets this property to True when the code is finished, unless you are running cross-process code.

This example closes the Workbook Book1.xls and does not prompt the user to save changes. Changes to Book1.xls are not saved.

This example suppresses the message that otherwise appears when you initiate a DDE channel to an application that is not running.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The default value is True. Set this property to False to suppress prompts and alert messages while a macro is running; when a message requires a response, Microsoft Excel chooses the default response.

If you set this property to False, Excel sets this property to True when the code is finished, unless you are running cross-process code.

This example closes the Workbook Book1.xls and does not prompt the user to save changes. Changes to Book1.xls are not saved.

This example suppresses the message that otherwise appears when you initiate a DDE channel to an application that is not running.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example closes the Workbook Book1.xls and does not prompt the user to save changes. Changes to Book1.xls are not saved.

Application.DisplayAlerts = False 
Workbooks("BOOK1.XLS").Close 
Application.DisplayAlerts = True

This example suppresses the message that otherwise appears when you initiate a DDE channel to an application that is not running.

Application.DisplayAlerts = False 
channelNumber = Application.DDEInitiate( _ 
 app:="WinWord", _ 
 topic:="C:\WINWORD\FORMLETR.DOC") 
Application.DisplayAlerts = True 
Application.DDEExecute channelNumber, "[FILEPRINT]" 
Application.DDETerminate channelNumber 
Application.DisplayAlerts = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayClipboardWindow: bool
    '''Returns True if the Microsoft Office Clipboard can be displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayClipboardWindow

expression A variable that represents an Application object.

In this example, Microsoft Excel determines if the Office Clipboard can be displayed, and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines if the Office Clipboard can be displayed, and notifies the user.

Sub SeeClipboard() 
 
 ' Determine if Office Clipboard can be displayed. 
 If Application.DisplayClipboardWindow = True Then 
 MsgBox "Office Clipboard can be displayed." 
 Else 
 MsgBox "Office Clipboard cannot be displayed." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayCommentIndicator: XlCommentDisplayMode
    '''Returns or sets the way cells display comments and indicators. Can be one of the XlCommentDisplayMode constants.

#SYNTAX:

expression.DisplayCommentIndicator

expression A variable that represents an Application object.

This example hides cell tips but retains comment indicators.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example hides cell tips but retains comment indicators.

Application.DisplayCommentIndicator = xlCommentIndicatorOnly

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayDocumentActionTaskPane: bool
    '''Set to True to display the Document Actions task pane; set to False to hide the Document Actions task pane. Read/write Boolean.

#SYNTAX:

expression.DisplayDocumentActionTaskPane

expression A variable that represents an Application object.

Setting this property to True will result in a run-time error if the active workbook is not a smart document.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Setting this property to True will result in a run-time error if the active workbook is not a smart document.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayDocumentInformationPanel: bool
    '''Returns or sets a Boolean that represents whether the document properties panel is displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayDocumentInformationPanel

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayExcel4Menus: bool
    '''True if Microsoft Excel displays version 4.0 menu bars. Read/write Boolean.

#SYNTAX:

expression.DisplayExcel4Menus

expression A variable that represents an Application object.

This example switches the display to Microsoft Excel version 4.0 menus.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example switches the display to Microsoft Excel version 4.0 menus.

Application.DisplayExcel4Menus = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayFormulaAutoComplete: bool
    '''Gets or sets whether to show a list of relevant functions and defined names when building cell formulas. Read/write Boolean.

#SYNTAX:

expression.DisplayFormulaAutoComplete

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayFormulaBar: bool
    '''True if the formula bar is displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayFormulaBar

expression A variable that represents an Application object.

This example hides the formula bar.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example hides the formula bar.

Application.DisplayFormulaBar = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayFullScreen: bool
    '''True if Microsoft Excel is in full-screen mode. Read/write Boolean.

#SYNTAX:

expression.DisplayFullScreen

expression A variable that represents an Application object.

Full-screen mode maximizes the application window so that it fills the entire screen and hides the application title bar. Toolbars, the status bar, and the formula bar maintain separate display settings for full-screen mode and normal mode.

This example sets Microsoft Excel to be displayed in full-screen mode.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Full-screen mode maximizes the application window so that it fills the entire screen and hides the application title bar. Toolbars, the status bar, and the formula bar maintain separate display settings for full-screen mode and normal mode.

This example sets Microsoft Excel to be displayed in full-screen mode.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Microsoft Excel to be displayed in full-screen mode.

Application.DisplayFullScreen = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayFunctionToolTips: bool
    '''True if function ToolTips can be displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayFunctionToolTips

expression A variable that represents an Application object.

In this example, Microsoft Excel notifies the user of the status of displaying function ToolTips.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel notifies the user of the status of displaying function ToolTips.

Sub CheckToolTip() 
 
 ' Notify the user of the ability to display function ToolTips. 
 If Application.DisplayFunctionToolTips = True Then 
 MsgBox "The ability to display function ToolTips is on." 
 Else 
 MsgBox "The ability to display function ToolTips is off." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayInfoWindow: bool
    self.DisplayInsertOptions: bool
    '''True if the Insert Options button should be displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayInsertOptions

expression A variable that represents an Application object.

In this example, Microsoft Excel notifies the user of the status of displaying the Insert Options button.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel notifies the user of the status of displaying the Insert Options button.

Sub SettingToolTip() 
 
 ' Notify the user of the ability to display the Insert Options button. 
 If Application.DisplayInsertOptions = True Then 
 MsgBox "The ability to display the Insert Options button is on." 
 Else 
 MsgBox "The ability to display the Insert Options button is off." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayNoteIndicator: bool
    '''True if cells containing notes display cell tips and contain note indicators (small dots in their upper-right corners). Read/write Boolean.

#SYNTAX:

expression.DisplayNoteIndicator

expression A variable that represents an Application object.

This example hides note indicators.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example hides note indicators.

Application.DisplayNoteIndicator = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayPasteOptions: bool
    '''True if the Paste Options button can be displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayPasteOptions

expression A variable that represents an Application object.

This is a Microsoft Office-wide setting. This setting affects all other Microsoft Office applications. Setting the DisplayPasteOptions property to True turns off the Auto Fill Options button in Microsoft Excel. The Auto Fill Options button is only in Excel, but the Paste Options button is in all the other Microsoft Office applications.

In this example, Microsoft Excel notifies the user of the status of displaying the Paste Options button.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This is a Microsoft Office-wide setting. This setting affects all other Microsoft Office applications. Setting the DisplayPasteOptions property to True turns off the Auto Fill Options button in Microsoft Excel. The Auto Fill Options button is only in Excel, but the Paste Options button is in all the other Microsoft Office applications.

In this example, Microsoft Excel notifies the user of the status of displaying the Paste Options button.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel notifies the user of the status of displaying the Paste Options button.

Sub CheckDisplayFeature() 
 
 ' Check if the options button can be displayed. 
 If Application.DisplayPasteOptions = True Then 
 MsgBox "The ability to display the Paste Options button is on." 
 Else 
 MsgBox "The ability to display the Paste Options button is off." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayRecentFiles: bool
    '''True if the list of recently used files is displayed in the UI. Read/write Boolean.

#SYNTAX:

expression.DisplayRecentFiles

expression A variable that represents an Application object.

This example turns off the list of recently used files.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off the list of recently used files.

Application.DisplayRecentFiles = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayScrollBars: bool
    '''True if scroll bars are visible for all workbooks. Read/write Boolean.

#SYNTAX:

expression.DisplayScrollBars

expression A variable that represents an Application object.

This example turns off scroll bars for all workbooks.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off scroll bars for all workbooks.

Application.DisplayScrollBars = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayStatusBar: bool
    '''True if the status bar is displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayStatusBar

expression A variable that represents an Application object.

This example saves the current state of the DisplayStatusBar property, and then sets the property to True so that the status bar is visible.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example saves the current state of the DisplayStatusBar property, and then sets the property to True so that the status bar is visible.

saveStatusBar = Application.DisplayStatusBar 
Application.DisplayStatusBar = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EditDirectlyInCell: bool
    '''True if Microsoft Excel allows editing in cells. Read/write Boolean.

#SYNTAX:

expression.EditDirectlyInCell

expression A variable that represents an Application object.

This example enables editing in cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables editing in cells.

Application.EditDirectlyInCell = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableAnimations: __DEPRECATED_WARNNING__
    '''Note
This object, member, or enumeration is deprecated and is not intended to be used in your code.

#SYNTAX:

expression.EnableAnimations

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableAutoComplete: bool
    '''True if the AutoComplete feature is enabled. Read/write Boolean.

#SYNTAX:

expression.EnableAutoComplete

expression A variable that represents an Application object.

This example enables the AutoComplete feature.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables the AutoComplete feature.

Application.EnableAutoComplete = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableCancelKey: XlEnableCancelKey
    '''Controls how Microsoft Excel handles Ctrl+Break (or Esc or Command+Period) user interruptions to the running procedure. Read/write XlEnableCancelKey.

#SYNTAX:

expression.EnableCancelKey

expression A variable that represents an Application object.

XlEnableCancelKey can be one of these constants:

Use this property very carefully. If you use xlDisabled, there's no way to interrupt a runaway loop or other non-self-terminating code. Likewise, if you use xlErrorHandler but your error handler always returns by using the Resume statement, there's no way to stop runaway code.

The EnableCancelKey property is always reset to xlInterrupt whenever Microsoft Excel returns to the idle state and there's no code running. To trap or disable cancellation in your procedure, you must explicitly change the EnableCancelKey property every time the procedure is called.

This example shows how you can use the EnableCancelKey property to set up a custom cancellation handler.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

XlEnableCancelKey can be one of these constants:

Use this property very carefully. If you use xlDisabled, there's no way to interrupt a runaway loop or other non-self-terminating code. Likewise, if you use xlErrorHandler but your error handler always returns by using the Resume statement, there's no way to stop runaway code.

The EnableCancelKey property is always reset to xlInterrupt whenever Microsoft Excel returns to the idle state and there's no code running. To trap or disable cancellation in your procedure, you must explicitly change the EnableCancelKey property every time the procedure is called.

This example shows how you can use the EnableCancelKey property to set up a custom cancellation handler.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example shows how you can use the EnableCancelKey property to set up a custom cancellation handler.

On Error GoTo handleCancel 
Application.EnableCancelKey = xlErrorHandler 
MsgBox "This may take a long time: press ESC to cancel" 
For x = 1 To 1000000 ' Do something 1,000,000 times (long!) 
 ' do something here 
Next x 
 
handleCancel: 
If Err = 18 Then 
 MsgBox "You cancelled" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableCheckFileExtensions: bool
    '''True to enable the Tell me if Microsoft Excel isn't the default program for viewing and editing spreadsheets dialog box. Read/write Boolean.

#SYNTAX:

expression.EnableCheckFileExtensions

expression A variable that represents an Application object.

This example disables the dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example disables the dialog box.

Application.EnableCheckFileExtensions = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableEvents: bool
    '''True if events are enabled for the specified object. Read/write Boolean.

#SYNTAX:

expression.EnableEvents

expression A variable that represents an Application object.

This example disables events before a file is saved so that the BeforeSave event doesn't occur.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example disables events before a file is saved so that the BeforeSave event doesn't occur.

Application.EnableEvents = False 
ActiveWorkbook.Save 
Application.EnableEvents = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableLargeOperationAlert: bool
    '''Sets or returns a Boolean that represents whether to display an alert message when a user attempts to perform an operation that affects a larger number of cells than is specified in the Office Center UI. Read/write Boolean.

#SYNTAX:

expression.EnableLargeOperationAlert

expression A variable that represents an Application object.

The default value of this property is True.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The default value of this property is True.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableLivePreview: bool
    '''Sets or returns a Boolean that represents whether to show or hide gallery previews that appear when using galleries that support previewing. Setting this property to True shows a preview of your workbook before applying the command. Read/write Boolean.

#SYNTAX:

expression.EnableLivePreview

expression A variable that represents an Application object.

This property corresponds to the Enable Live Preview check box in the Excel Options dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property corresponds to the Enable Live Preview check box in the Excel Options dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableMacroAnimations: bool
    '''Controls whether macro animations are enabled. True if user interface animations or chart animations are enabled. Is set to False (no animation) by default. If it is set to True during the running of a macro, it will enable animation, and then will reset to False after the macro runs. Read/write Boolean.

#SYNTAX:

expression.EnableMacroAnimations

expression A variable that represents an Application object.

This example disables animation.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: BOOL

#EXAMPLE:

This example disables animation.

Application.EnableMacroAnimations = False

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableSound: bool
    '''True if sound is enabled for Microsoft Office. Read/write Boolean.

#SYNTAX:

expression.EnableSound

expression A variable that represents an Application object.

This example disables sound feedback.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example disables sound feedback.

Application.EnableSound = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableTipWizard: bool
    self.ErrorCheckingOptions: ErrorCheckingOptions
    '''Returns an ErrorCheckingOptions object, which represents the error checking options for an application.

#SYNTAX:

expression.ErrorCheckingOptions

expression A variable that represents an Application object.

In this example, the TextDate property is used in conjunction with the ErrorCheckingOptions property. When the user selects a cell containing a two-digit year in the date, the AutoCorrect Options button appears.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, the TextDate property is used in conjunction with the ErrorCheckingOptions property. When the user selects a cell containing a two-digit year in the date, the AutoCorrect Options button appears.

Sub CheckTextDate() 
 
 ' Enable Microsoft Excel to identify dates written as text. 
 Application.ErrorCheckingOptions.TextDate = True 
 
 Range("A1").Formula = "'April 23, 00" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Excel4IntlMacroSheets: Sheets
    '''Returns a Sheets collection that represents all the Microsoft Excel 4.0 international macro sheets in the specified workbook. Read-only.

#SYNTAX:

expression.Excel4IntlMacroSheets

expression A variable that represents an Application object.

Using this property with the Application object or without an object qualifier is equivalent to using ActiveWorkbook.Excel4IntlMacroSheets.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property with the Application object or without an object qualifier is equivalent to using ActiveWorkbook.Excel4IntlMacroSheets.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Excel4MacroSheets: Sheets
    '''Returns a Sheets collection that represents all the Microsoft Excel 4.0 macro sheets in the specified workbook. Read-only.

#SYNTAX:

expression.Excel4MacroSheets

expression A variable that represents an Application object.

Using this property with the Application object or without an object qualifier is equivalent to using ActiveWorkbook.Excel4MacroSheets.

This example displays the number of Microsoft Excel 4.0 macro sheets in the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property with the Application object or without an object qualifier is equivalent to using ActiveWorkbook.Excel4MacroSheets.

This example displays the number of Microsoft Excel 4.0 macro sheets in the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of Microsoft Excel 4.0 macro sheets in the active workbook.

MsgBox "There are " & ActiveWorkbook.Excel4MacroSheets.Count & _ 
 " Microsoft Excel 4.0 macro sheets in this workbook."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ExtendList: bool
    '''True if Microsoft Excel automatically extends formatting and formulas to new data that is added to a list. Read/write Boolean.

#SYNTAX:

expression.ExtendList

expression A variable that represents an Application object.

To be extended, formats and formulas must appear in at least three of the five list rows or columns preceding the new row or column, and you must add the data to the bottom or to the right side of the list.

This example sets Excel to not apply formatting and formulas to data subsequently added to an existing list.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

To be extended, formats and formulas must appear in at least three of the five list rows or columns preceding the new row or column, and you must add the data to the bottom or to the right side of the list.

This example sets Excel to not apply formatting and formulas to data subsequently added to an existing list.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Excel to not apply formatting and formulas to data subsequently added to an existing list.

Application.ExtendList = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FeatureInstall: MsoFeatureInstall
    '''Returns or sets a value (constant) that specifies how Microsoft Excel handles calls to methods and properties that require features that aren't yet installed. Can be one of the MsoFeatureInstall constants listed in the following table. Read/write MsoFeatureInstall.

#SYNTAX:

expression.FeatureInstall

expression A variable that represents an Application object.

MsoFeatureInstall can be one of these constants:

Use the msoFeatureInstallOnDemandWithUI constant to prevent users from thinking that the application isn't responding while a feature is being installed. Use the msoFeatureInstallNone constant if you want the developer to be the only one who can install features.

If you have the DisplayAlerts property set to False, users won't be prompted to install new features even if the FeatureInstall property is set to msoFeatureInstallOnDemand. If the DisplayAlerts property is set to True, an installation progress meter will appear if the FeatureInstall property is set to msoFeatureInstallOnDemand.

This example activates a new instance of Microsoft Word and checks the value of the FeatureInstall property. Be sure to set a reference to the Microsoft Word object library. If the FeatureInstall property is set to msoFeatureInstallNone, the code displays a message box that asks the user whether they want to change the property setting. If the user responds Yes, the property is set to msoFeatureInstallOnDemand.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

MsoFeatureInstall can be one of these constants:

Use the msoFeatureInstallOnDemandWithUI constant to prevent users from thinking that the application isn't responding while a feature is being installed. Use the msoFeatureInstallNone constant if you want the developer to be the only one who can install features.

If you have the DisplayAlerts property set to False, users won't be prompted to install new features even if the FeatureInstall property is set to msoFeatureInstallOnDemand. If the DisplayAlerts property is set to True, an installation progress meter will appear if the FeatureInstall property is set to msoFeatureInstallOnDemand.

This example activates a new instance of Microsoft Word and checks the value of the FeatureInstall property. Be sure to set a reference to the Microsoft Word object library. If the FeatureInstall property is set to msoFeatureInstallNone, the code displays a message box that asks the user whether they want to change the property setting. If the user responds Yes, the property is set to msoFeatureInstallOnDemand.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example activates a new instance of Microsoft Word and checks the value of the FeatureInstall property. Be sure to set a reference to the Microsoft Word object library. If the FeatureInstall property is set to msoFeatureInstallNone, the code displays a message box that asks the user whether they want to change the property setting. If the user responds Yes, the property is set to msoFeatureInstallOnDemand.

Dim WordApp As New Word.Application, Reply As Integer 
Application.ActivateMicrosoftApp xlMicrosoftWord With WordApp 
    If .FeatureInstall = msoFeatureInstallNone Then 
        Reply = MsgBox("Uninstalled features for this " _ 
            & "application " & vbCrLf _ 
            & "may cause a run-time error when called." & vbCrLf _ 
            & vbCrLf _ 
            & "Would you like to change this setting" & vbCrLf _ 
            & "to automatically install missing features?" _ 
            , 52, "Feature Install Setting") 
        If Reply = 6 Then 
            .FeatureInstall = msoFeatureInstallOnDemand 
        End If 
    End If 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FileConverters: VBA_Variant
    '''Returns information about installed file converters. Returns null if there are no converters installed. Read-only Variant.

#SYNTAX:

expression.FileConverters (Index1, Index2)

expression A variable that represents an Application object.

If you don't specify the index arguments, this property returns an array that contains information about all the installed file converters. Each row in the array contains information about a single file converter, as shown in the following table.

This example displays a message if the Multiplan file converter is installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't specify the index arguments, this property returns an array that contains information about all the installed file converters. Each row in the array contains information about a single file converter, as shown in the following table.

This example displays a message if the Multiplan file converter is installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message if the Multiplan file converter is installed.

installedCvts = Application.FileConverters 
foundMultiplan = False 
If Not IsNull(installedCvts) Then 
 For arrayRow = 1 To UBound(installedCvts, 1) 
 If installedCvts(arrayRow, 1) Like "*Multiplan*" Then 
 foundMultiplan = True 
 Exit For 
 End If 
 Next arrayRow 
End If 
If foundMultiplan = True Then 
 MsgBox "Multiplan converter is installed" 
Else 
 MsgBox "Multiplan converter is not installed" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FileExportConverters: FileExportConverters
    '''Returns a FileExportConverters collection that represents all the file converters for saving files available to Microsoft Excel. Read-only.

#SYNTAX:

expression.FileExportConverters

expression A variable that represents an Application object.

For more information about returning a single member of a collection, see Returning an object from a collection.

The following example displays the description for the first file converter in the FileExportConverters collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

For more information about returning a single member of a collection, see Returning an object from a collection.

The following example displays the description for the first file converter in the FileExportConverters collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example displays the description for the first file converter in the FileExportConverters collection.

Dim fcTemp As FileExportConverter 
Set fcTemp = FileExportConverter(1) 
 
MsgBox fcTemp.Description

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FileValidation: MsoFileValidationMode
    '''Returns or sets how Excel will validate files before opening them. Read/write.

#SYNTAX:

expression.FileValidation

expression A variable that represents an Application object.

MsoFileValidationMode

Files that don't pass validation will be opened in a Protected View window. If you set the FileValidation property, that setting will remain in effect for the entire session that the application is open.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: MsoFileValidationMode

#REMARKS:

Files that don't pass validation will be opened in a Protected View window. If you set the FileValidation property, that setting will remain in effect for the entire session that the application is open.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FileValidationPivot: XlFileValidationPivotMode
    '''Returns or sets how Excel will validate the contents of the data caches for PivotTable reports. Read/write.

#SYNTAX:

expression.FileValidationPivot

expression A variable that represents an Application object.

XlFileValidationPivotMode

Files that contain data caches that don't validate will be opened in a Protected View window. If you set the FileValidationPivot property, that setting will remain in effect for the entire session that the application is open.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: XlFileValidationPivotMode

#REMARKS:

Files that contain data caches that don't validate will be opened in a Protected View window. If you set the FileValidationPivot property, that setting will remain in effect for the entire session that the application is open.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FindFormat: CellFormat
    '''Sets or returns the search criteria for the type of cell formats to find.

#SYNTAX:

expression.FindFormat

expression A variable that represents an Application object.

In this example, the search criteria is set to look for Arial, Regular, Size 10 font cells, and the user is notified.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, the search criteria is set to look for Arial, Regular, Size 10 font cells, and the user is notified.

Sub UseFindFormat() 
 
 ' Establish search criteria. 
 With Application.FindFormat.Font 
 .Name = "Arial" 
 .FontStyle = "Regular" 
 .Size = 10 
 End With 
 
 ' Notify user. 
 With Application.FindFormat.Font 
 MsgBox .Name & "-" & .FontStyle & "-" & .Size & _ 
 " font is what the search criteria is set to." 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FixedDecimal: bool
    '''All data entered after this property is set to True will be formatted with the number of fixed decimal places set by the FixedDecimalPlaces property. Read/write Boolean.

#SYNTAX:

expression.FixedDecimal

expression A variable that represents an Application object.

This example sets the FixedDecimal property to True and then sets the FixedDecimalPlaces property to 4. Entering "30000" after running this example produces "3" on the worksheet, and entering "12500" produces "1.25."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the FixedDecimal property to True and then sets the FixedDecimalPlaces property to 4. Entering "30000" after running this example produces "3" on the worksheet, and entering "12500" produces "1.25."

Application.FixedDecimal = True 
Application.FixedDecimalPlaces = 4

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FixedDecimalPlaces: FixedDecimal | bool | int
    '''Returns or sets the number of fixed decimal places used when the FixedDecimal property is set to True. Read/write Long.

#SYNTAX:

expression.FixedDecimalPlaces

expression A variable that represents an Application object.

This example sets the FixedDecimal property to True and then sets the FixedDecimalPlaces property to 4. Entering "30000" after running this example produces "3" on the worksheet, and entering "12500" produces "1.25."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the FixedDecimal property to True and then sets the FixedDecimalPlaces property to 4. Entering "30000" after running this example produces "3" on the worksheet, and entering "12500" produces "1.25."

Application.FixedDecimal = True 
Application.FixedDecimalPlaces = 4

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FlashFill: bool
    '''True indicates that the Excel Flash Fill feature has been enabled and active. Read/write Boolean.

#SYNTAX:

expression.FlashFill

expression A variable that represents an Application object.

Flash Fill detects when you are modifying data that fits a pattern that can be filled down and applied to additional data in the workbook, and then automatically fills down the column with the results.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: BOOL

#REMARKS:

Flash Fill detects when you are modifying data that fits a pattern that can be filled down and applied to additional data in the workbook, and then automatically fills down the column with the results.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FlashFillMode: bool
    '''True if the Flash Fill feature is enabled. Read/write Boolean.

#SYNTAX:

expression.FlashFillMode

expression A variable that represents an Application object.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: BOOL
    '''

    self.FormulaBarHeight: int
    '''Allows the user to specify the height of the formula bar in lines. Read/write Long.

#SYNTAX:

expression.FormulaBarHeight

expression A variable that represents an Application object.

If the specified value of FormulaBarHeight is greater than the viewable window space, the formula bar is resized to be equal to the window height.

In the following example, the height of the formula bar is set to five lines.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the specified value of FormulaBarHeight is greater than the viewable window space, the formula bar is resized to be equal to the window height.

In the following example, the height of the formula bar is set to five lines.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, the height of the formula bar is set to five lines.

Application.FormulaBarHeight = 5

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.GenerateGetPivotData: bool
    '''Returns True when Microsoft Excel can get PivotTable report data. Read/write Boolean.

#SYNTAX:

expression.GenerateGetPivotData

expression A variable that represents an Application object.

In the following example, Microsoft Excel determines the status of getting PivotTable report data and notifies the user. This example assumes a PivotTable report exists on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, Microsoft Excel determines the status of getting PivotTable report data and notifies the user. This example assumes a PivotTable report exists on the active worksheet.

Sub PivotTableInfo() 
 
 ' Determine the ability to get PivotTable report data and notify user. 
 If Application.GenerateGetPivotData = True Then 
 MsgBox "The ability to get PivotTable report data is enabled." 
 Else 
 Msgbox "The ability to get PivotTable report data is disabled." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.GenerateTableRefs: GenerateTableRefs
    '''The GenerateTableRefs property determines whether the traditional notation method or the new structured referencing notation method is used for referencing tables in formulas. Read/write.

#SYNTAX:

expression.GenerateTableRefs

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Height: float
    '''Returns or sets a Double value that represents the height, in points, of the main application window.

#SYNTAX:

expression.Height

expression A variable that represents an Application object.

If the window is minimized, this property is read-only and refers to the height of the icon. If the window is maximized, this property cannot be set. Use the WindowState property to determine the window state.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the window is minimized, this property is read-only and refers to the height of the icon. If the window is maximized, this property cannot be set. Use the WindowState property to determine the window state.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HighQualityModeForGraphics: Application
    '''Returns or sets whether Excel uses high quality mode to print graphics. Read/write.

#SYNTAX:

expression.HighQualityModeForGraphics

expression A variable that represents an Application object.

This property corresponds to the setting of the High quality mode for graphics check box in the Print section of the Advanced category of the Excel Options dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property corresponds to the setting of the High quality mode for graphics check box in the Print section of the Advanced category of the Excel Options dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HinstancePtr: VBA_Variant
    '''Returns a handle to the instance of Excel represented by the specified Application object. Read-only Variant.

#SYNTAX:

expression.HinstancePtr

expression A variable that represents an Application object.

This property returns a correct handle in both the 32-bit and 64-bit versions of Excel. It extends the functionality of the Hinstance property of the Application object, which only works correctly in the 32-bit version of Excel.

The ideal data type to use with this property is the LongPtr data type. Assigning the value returned by this property to a LongPtr variable will work as expected in both 32-bit and 64-bit versions of Excel. The property is defined as Variant for internal implementation reasons. However, it always returns a 32-bit value on 32-bit systems and a 64-bit value on 64-bit systems.

This property only works starting with Excel, and is only required with the 64-bit version of Excel. If you must write code that will also work with earlier versions of Excel, in order to avoid compilation errors, read this property under an #if Win64 conditional compilation directive, and use the Hinstance property under the #else directive.

Note that this property works fine in both 32-bit and 64-bit environments starting with Excel. Therefore, if your code is intended to be used only with Excel or later, either 32-bit or 64-bit, it can read this property without conditional compilation.

For more information about how to use VBA in 64-bit environments, see 64-bit Visual Basic for Applications overview.

In this example, a message box displays the Excel instance handle to the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns a correct handle in both the 32-bit and 64-bit versions of Excel. It extends the functionality of the Hinstance property of the Application object, which only works correctly in the 32-bit version of Excel.

The ideal data type to use with this property is the LongPtr data type. Assigning the value returned by this property to a LongPtr variable will work as expected in both 32-bit and 64-bit versions of Excel. The property is defined as Variant for internal implementation reasons. However, it always returns a 32-bit value on 32-bit systems and a 64-bit value on 64-bit systems.

This property only works starting with Excel, and is only required with the 64-bit version of Excel. If you must write code that will also work with earlier versions of Excel, in order to avoid compilation errors, read this property under an #if Win64 conditional compilation directive, and use the Hinstance property under the #else directive.

Note that this property works fine in both 32-bit and 64-bit environments starting with Excel. Therefore, if your code is intended to be used only with Excel or later, either 32-bit or 64-bit, it can read this property without conditional compilation.

For more information about how to use VBA in 64-bit environments, see 64-bit Visual Basic for Applications overview.

In this example, a message box displays the Excel instance handle to the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, a message box displays the Excel instance handle to the user.

Sub CheckHinstance() 
    MsgBox Application.HinstancePtr 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Hwnd: int
    self.IgnoreRemoteRequests: bool
    '''True if remote DDE requests are ignored. Read/write Boolean.

#SYNTAX:

expression.IgnoreRemoteRequests

expression A variable that represents an Application object.

This example sets the IgnoreRemoteRequests property to True so that remote DDE requests are ignored.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the IgnoreRemoteRequests property to True so that remote DDE requests are ignored.

Application.IgnoreRemoteRequests = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Interactive: bool
    '''True if Microsoft Excel is in interactive mode; this property is usually True. If you set this property to False, Excel blocks all input from the keyboard and mouse (except input to dialog boxes that are displayed by your code). Read/write Boolean.

#SYNTAX:

expression.Interactive

expression A variable that represents an Application object.

Blocking user input prevents the user from interfering with the macro as it moves or activates Excel objects.

This property is useful if you are using DDE or OLE Automation to communicate with Excel from another application.

If you set this property to False, don't forget to set it back to True. Excel won't automatically set this property back to True when your macro stops running.

This example sets the Interactive property to False while it's using DDE in Windows and then sets this property back to True when it's finished. This prevents the user from interfering with the macro.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Blocking user input prevents the user from interfering with the macro as it moves or activates Excel objects.

This property is useful if you are using DDE or OLE Automation to communicate with Excel from another application.

If you set this property to False, don't forget to set it back to True. Excel won't automatically set this property back to True when your macro stops running.

This example sets the Interactive property to False while it's using DDE in Windows and then sets this property back to True when it's finished. This prevents the user from interfering with the macro.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the Interactive property to False while it's using DDE in Windows and then sets this property back to True when it's finished. This prevents the user from interfering with the macro.

Application.Interactive = False 
Application.DisplayAlerts = False 
channelNumber = Application.DDEInitiate( _ 
 app:="WinWord", _ 
 topic:="C:\WINWORD\FORMLETR.DOC") 
Application.DDEExecute channelNumber, "[FILEPRINT]" 
Application.DDETerminate channelNumber 
Application.DisplayAlerts = True 
Application.Interactive = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.International: VBA_Variant
    '''Returns information about the current country/region and international settings. Read-only Variant.

#SYNTAX:

expression.International (Index)

expression A variable that represents an Application object.

Symbols, separators, and currency formats shown in the preceding table may differ from those used in your language or geographic location and may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed.

This example displays the international decimal separator.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Symbols, separators, and currency formats shown in the preceding table may differ from those used in your language or geographic location and may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed.

This example displays the international decimal separator.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the international decimal separator.

MsgBox "The decimal separator is " & _ 
 Application.International(xlDecimalSeparator)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IsSandboxed: bool
    '''Returns True if the specified workbook is open in a Protected View window. Read-only.

#SYNTAX:

expression.IsSandboxed

expression A variable that represents an Application object.

Boolean

Use the IsSandboxed property to determine if a workbook is open in a Protected View window.

The following code example displays whether the specified workbook is open in a Protected View window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Boolean

#REMARKS:

Use the IsSandboxed property to determine if a workbook is open in a Protected View window.

The following code example displays whether the specified workbook is open in a Protected View window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following code example displays whether the specified workbook is open in a Protected View window.

Sub CheckIfSandboxed(wbk As Workbook) 
 MsgBox wbk.Application.IsSandboxed 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Iteration: bool
    '''True if Microsoft Excel uses iteration to resolve circular references. Read/write Boolean.

#SYNTAX:

expression.Iteration

expression A variable that represents an Application object.

This example sets the Iteration property to True so that circular references are resolved by iteration.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the Iteration property to True so that circular references are resolved by iteration.

Application.Iteration = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LanguageSettings: CDispatch
    '''Returns the LanguageSettings object, which contains information about the language settings in Microsoft Excel. Read-only.

#SYNTAX:

expression.LanguageSettings

expression A variable that represents an Application object.

This example returns the language identifier for the language that you selected when you installed Microsoft Excel.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example returns the language identifier for the language that you selected when you installed Microsoft Excel.

Set objLangSet = Application.LanguageSettings 
MsgBox objLangSet.LanguageID(msoLanguageIDInstall)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LargeButtons: bool
    self.LargeOperationCellThousandCount: int
    '''Returns or sets the maximum number of cells needed in an operation beyond which an alert is triggered. Read/write Long.

#SYNTAX:

expression.LargeOperationCellThousandCount

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Left: float
    '''Returns or sets a Double value that represents the distance, in points, from the left edge of the screen to the left edge of the main Microsoft Excel window.

#SYNTAX:

expression.Left

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LibraryPath: str
    '''Returns the path to the Library folder, but without the final separator. Read-only String.

#SYNTAX:

expression.LibraryPath

expression A variable that represents an Application object.

This example opens the file Oscar.xla in the Library folder.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example opens the file Oscar.xla in the Library folder.

pathSep = Application.PathSeparator 
f = Application.LibraryPath & pathSep & "Oscar.xla" 
Workbooks.Open filename:=f

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MailSession: VBA_Variant
    '''Returns the MAPI mail session number as a hexadecimal string (if there's an active session), or returns null if there's no session. Read-only Variant.

#SYNTAX:

expression.MailSession

expression A variable that represents an Application object.

This property applies only to mail sessions created by Microsoft Excel (it doesn't return a mail session number for Microsoft Mail).

This property isn't used on PowerTalk mail systems.

This example closes the established mail session if there is one.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property applies only to mail sessions created by Microsoft Excel (it doesn't return a mail session number for Microsoft Mail).

This property isn't used on PowerTalk mail systems.

This example closes the established mail session if there is one.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example closes the established mail session if there is one.

If Not IsNull(Application.MailSession) Then Application.MailLogoff

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MailSystem: XlMailSystem
    '''Returns the mail system that's installed on the host machine. Read-only XlMailSystem.

#SYNTAX:

expression.MailSystem

expression A variable that represents an Application object.

xlMailSystem can be one of these constants:

This example displays the name of the mail system that's installed on the computer.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

xlMailSystem can be one of these constants:

This example displays the name of the mail system that's installed on the computer.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of the mail system that's installed on the computer.

Select Case Application.MailSystem 
 Case xlMAPI 
 MsgBox "Mail system is Microsoft Mail" 
 Case xlPowerTalk 
 MsgBox "Mail system is PowerTalk" 
 Case xlNoMailSystem 
 MsgBox "No mail system installed" 
End Select

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MapPaperSize: bool
    '''True if documents formatted for the standard paper size of another country/region (for example, A4) are automatically adjusted so that they're printed correctly on the standard paper size (for example, Letter) of your country/region. Read/write Boolean.

#SYNTAX:

expression.MapPaperSize

expression A variable that represents an Application object.

This example determines if Microsoft Excel can adjust the paper size according to the country/region setting, and then notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example determines if Microsoft Excel can adjust the paper size according to the country/region setting, and then notifies the user.

Sub UseMapPaperSize() 
 
 ' Determine setting and notify user. 
 If Application.MapPaperSize = True Then 
 MsgBox "Microsoft Excel automatically " & _ 
 "adjusts the paper size according to the country/region setting." 
 Else 
 MsgBox "Microsoft Excel does not " & _ 
 "automatically adjusts the paper size according to the country/region setting." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MathCoprocessorAvailable: bool
    '''True if a math coprocessor is available. Read-only Boolean.

#SYNTAX:

expression.MathCoprocessorAvailable

expression A variable that represents an Application object.

This example displays a message box if a math coprocessor isn't available.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message box if a math coprocessor isn't available.

If Not Application.MathCoprocessorAvailable Then 
 MsgBox "This macro requires a math coprocessor" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MaxChange: float
    '''Returns or sets the maximum amount of change between each iteration as Microsoft Excel resolves circular references. Read/write Double.

#SYNTAX:

expression.MaxChange

expression A variable that represents an Application object.

The MaxIterations property sets the maximum number of iterations that Excel can use when resolving circular references.

This example sets the maximum amount of change for each iteration to 0.1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The MaxIterations property sets the maximum number of iterations that Excel can use when resolving circular references.

This example sets the maximum amount of change for each iteration to 0.1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the maximum amount of change for each iteration to 0.1.

Application.MaxChange = 0.1

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MaxIterations: int
    '''Returns or sets the maximum number of iterations that Microsoft Excel can use to resolve a circular reference. Read/write Long.

#SYNTAX:

expression.MaxIterations

expression A variable that represents an Application object.

The MaxChange property sets the maximum amount of change between each iteration when Excel is resolving circular references.

This example sets the maximum number of iterations at 1000.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The MaxChange property sets the maximum amount of change between each iteration when Excel is resolving circular references.

This example sets the maximum number of iterations at 1000.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the maximum number of iterations at 1000.

Application.MaxIterations = 1000

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MeasurementUnit: XlMeasurementUnits
    '''Specifies the measurement unit used in the application. Read/write XlMeasurementUnits.

#SYNTAX:

expression.MeasurementUnit

expression A variable that represents an Application object.

In the following example, the measurement unit for the application is set to inches.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, the measurement unit for the application is set to inches.

Application.MeasurementUnit = xlInches

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MemoryFree: int
    self.MemoryTotal: int
    self.MemoryUsed: int
    self.MenuBars: MenuBars
    self.MergeInstances: bool
    '''True to merge multiple instances of the application into a single instance. Read/write Boolean.

#SYNTAX:

expression.MergeInstances

expression A variable that represents an Application object.

This example causes multiple instances of the application to be merged into a single instance.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes multiple instances of the application to be merged into a single instance.

Application.MergeInstances = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Modules: Modules
    self.MouseAvailable: bool
    '''True if a mouse is available. Read-only Boolean.

#SYNTAX:

expression.MouseAvailable

expression A variable that represents an Application object.

This example displays a message if a mouse isn't available.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message if a mouse isn't available.

If Application.MouseAvailable = False Then 
 MsgBox "Your system does not have a mouse" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MoveAfterReturn: bool
    '''True if the active cell is moved as soon as the Enter (Return) key is pressed. Read/write Boolean.

#SYNTAX:

expression.MoveAfterReturn

expression A variable that represents an Application object.

Use the MoveAfterReturnDirection property to specify the direction in which the active cell is to be moved.

This example sets the MoveAfterReturn property to True.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use the MoveAfterReturnDirection property to specify the direction in which the active cell is to be moved.

This example sets the MoveAfterReturn property to True.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the MoveAfterReturn property to True.

Application.MoveAfterReturn = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MoveAfterReturnDirection: XlDirection
    '''Returns or sets the direction in which the active cell is moved when the user presses Enter. Read/write XlDirection.

#SYNTAX:

expression.MoveAfterReturnDirection

expression A variable that represents an Application object.

XlDirection can be one of these constants:

If the MoveAfterReturn property is False, the selection doesn't move at all, regardless of how the MoveAfterReturnDirection property is set.

This example causes the active cell to move to the right when the user presses Enter.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

XlDirection can be one of these constants:

If the MoveAfterReturn property is False, the selection doesn't move at all, regardless of how the MoveAfterReturnDirection property is set.

This example causes the active cell to move to the right when the user presses Enter.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes the active cell to move to the right when the user presses Enter.

Application.MoveAfterReturn = True 
Application.MoveAfterReturnDirection = xlToRight

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MultiThreadedCalculation: MultiThreadedCalculation
    '''Returns a MultiThreadedCalculation object that controls the multi-threaded recalculation settings. Read-only.

#SYNTAX:

expression.MultiThreadedCalculation

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Name: str
    '''Returns a String value that represents the name of the object.

#SYNTAX:

expression.Name

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Names: Names
    '''Returns a Names collection that represents all the names in the active workbook. Read-only Names object.

#SYNTAX:

expression.Names

expression A variable that represents an Application object.

Using this property without an object qualifier is equivalent to using ActiveWorkbook.Names.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property without an object qualifier is equivalent to using ActiveWorkbook.Names.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NetworkTemplatesPath: str
    '''Returns the network path where templates are stored. If the network path doesn't exist, this property returns an empty string. Read-only String.

#SYNTAX:

expression.NetworkTemplatesPath

expression A variable that represents an Application object.

This example displays the network path where templates are stored.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the network path where templates are stored.

Msgbox Application.NetworkTemplatesPath

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NewWorkbook: CDispatch
    '''Returns a NewFile object.

#SYNTAX:

expression.NewWorkbook

expression An expression that returns an Application object.

NewFile

In this example, Microsoft Excel sets the variable wkbOne to a NewFile object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: NewFile

#EXAMPLE:

In this example, Microsoft Excel sets the variable wkbOne to a NewFile object.

Sub SetStartWorking() 
 
    Dim wkbOne As NewFile 
 
    ' Create a reference to an instance of the NewFile object. 
    Set wkbOne = Application.NewWorkbook 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ODBCErrors: ODBCErrors
    '''Returns an ODBCErrors collection that contains all the ODBC errors generated by the most recent query table or PivotTable report operation. Read-only.

#SYNTAX:

expression.ODBCErrors

expression A variable that represents an Application object.

If there's more than one query running at the same time, the ODBCErrors collection contains the ODBC errors from the query that finished last.

This example refreshes query table one and displays any ODBC errors that occur.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If there's more than one query running at the same time, the ODBCErrors collection contains the ODBC errors from the query that finished last.

This example refreshes query table one and displays any ODBC errors that occur.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example refreshes query table one and displays any ODBC errors that occur.

With Worksheets(1).QueryTables(1) 
 .Refresh 
 Set errs = Application.ODBCErrors 
 If errs.Count > 0 Then 
 Set r = .Destination.Cells(1) 
 r.Value = "The following errors occurred:" 
 c = 0 
 For Each er In errs 
 c = c + 1 
 r.offset(c, 0).value = er.ErrorString 
 r.offset(c, 1).value = er.SqlState 
 Next 
 Else 
 MsgBox "Query complete: all records returned." 
 End If 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ODBCTimeout: int
    '''Returns or sets the ODBC query time limit, in seconds. The default value is 45 seconds. Read/write Long.

#SYNTAX:

expression.ODBCTimeout

expression A variable that represents an Application object.

The value 0 (zero) indicates an indefinite time limit.

This example sets the ODBC query time limit to 15 seconds.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The value 0 (zero) indicates an indefinite time limit.

This example sets the ODBC query time limit to 15 seconds.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the ODBC query time limit to 15 seconds.

Application.ODBCTimeout = 15

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OLEDBErrors: OLEDBErrors
    '''Returns the OLEDBErrors collection, which represents the error information returned by the most recent OLE DB query. Read-only.

#SYNTAX:

expression.OLEDBErrors

expression A variable that represents an Application object.

This example displays the error description and SqlState property value for an OLE DB error returned by the most recent OLE DB query.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the error description and SqlState property value for an OLE DB error returned by the most recent OLE DB query.

Set objEr = Application.OLEDBErrors.Item(1) 
MsgBox "The following error occurred:" & _ 
 objEr.ErrorString & " : " & objEr.SqlState

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OnWindow: str
    '''Returns or sets the name of the procedure that's run whenever you activate a window. Read/write String.

#SYNTAX:

expression.OnWindow

expression A variable that represents an Application object.

The procedure specified by this property isn't run when other procedures switch to the window or when a command to switch to a window is received through a DDE channel. Instead, the procedure responds to the user's actions, such as clicking a window with the mouse.

If a worksheet or macro sheet has an Auto_Activate or Auto_Deactivate macro defined for it, those macros will be run after the procedure specified by the OnWindow property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The procedure specified by this property isn't run when other procedures switch to the window or when a command to switch to a window is received through a DDE channel. Instead, the procedure responds to the user's actions, such as clicking a window with the mouse.

If a worksheet or macro sheet has an Auto_Activate or Auto_Deactivate macro defined for it, those macros will be run after the procedure specified by the OnWindow property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OperatingSystem: str
    '''Returns the name and version number of the current operating system. Read-only String.

#SYNTAX:

expression.OperatingSystem

expression A variable that represents an Application object.

This example displays the name of the operating system.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of the operating system.

MsgBox "Microsoft Excel is using " & Application.OperatingSystem

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OrganizationName: str
    '''Returns the registered organization name. Read-only String.

#SYNTAX:

expression.OrganizationName

expression A variable that represents an Application object.

This example displays the registered organization name.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the registered organization name.

MsgBox "The registered organization is " & _ 
 Application.OrganizationName

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Path: str
    '''Returns a String value that represents the complete path to the application, excluding the final separator and name of the application.

#SYNTAX:

expression.Path

expression A variable that represents an Application object.

This example displays the complete path to Microsoft Excel.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the complete path to Microsoft Excel.

Sub TotalPath() 
 
 MsgBox "The path is " & Application.Path 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PathSeparator: str
    '''Returns the path separator character (\). Read-only String.

#SYNTAX:

expression.PathSeparator

expression A variable that represents an Application object.

This example displays the current path separator.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the current path separator.

MsgBox "The path separator character is " & _ 
 Application.PathSeparator

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PivotTableSelection: bool
    '''True if PivotTable reports use structured selection. Read/write Boolean.

#SYNTAX:

expression.PivotTableSelection

expression A variable that represents an Application object.

This example enables structured selection mode and then sets the first PivotTable report on worksheet one to allow only data to be selected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables structured selection mode and then sets the first PivotTable report on worksheet one to allow only data to be selected.

Application.PivotTableSelection = True 
Worksheets(1).PivotTables(1).SelectionMode = xlDataOnly

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PreviousSelections: VBA_Variant
    '''Returns an array of the last four ranges or names selected. Each element in the array is a Range object. Read-only Variant.

#SYNTAX:

expression.PreviousSelections (Index)

expression A variable that represents an Application object.

Each time you go to a range or cell by using the Name box or the Go To command (Edit menu), or each time a macro calls the Goto method, the previous range is added to this array as element number 1, and the other items in the array are moved down.

This example displays the cell addresses of all items in the array of previous selections. If there are no previous selections, the LBound function returns an error. This error is trapped, and a message box appears.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Each time you go to a range or cell by using the Name box or the Go To command (Edit menu), or each time a macro calls the Goto method, the previous range is added to this array as element number 1, and the other items in the array are moved down.

This example displays the cell addresses of all items in the array of previous selections. If there are no previous selections, the LBound function returns an error. This error is trapped, and a message box appears.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the cell addresses of all items in the array of previous selections. If there are no previous selections, the LBound function returns an error. This error is trapped, and a message box appears.

On Error GoTo noSelections 
For i = LBound(Application.PreviousSelections) To _ 
 UBound(Application.PreviousSelections) 
 MsgBox Application.PreviousSelections(i).Address 
Next i 
Exit Sub 
On Error GoTo 0 
 
noSelections: 
 MsgBox "There are no previous selections"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintCommunication: bool
    '''Specifies whether communication with the printer is turned on. Read/write Boolean.

#SYNTAX:

expression.PrintCommunication

expression A variable that returns an Application object.

True if communication with the printer is turned on; otherwise, False.

Set the PrintCommunication property to False to speed up the execution of code that sets PageSetup properties.

Set the PrintCommunication property to True after setting properties to commit all cached PageSetup commands.

The following example suspends communication with the printer while setting PageSetup properties.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: True if communication with the printer is turned on; otherwise, False.

#REMARKS:

Set the PrintCommunication property to False to speed up the execution of code that sets PageSetup properties.

Set the PrintCommunication property to True after setting properties to commit all cached PageSetup commands.

The following example suspends communication with the printer while setting PageSetup properties.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example suspends communication with the printer while setting PageSetup properties.

Application.PrintCommunication = False 
 With ActiveSheet.PageSetup 
 .PrintTitleRows = "" 
 .PrintTitleColumns = "" 
 End With 
Application.PrintCommunication = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ProductCode: str
    '''Returns the globally unique identifier (GUID) for Microsoft Excel. Read-only String.

#SYNTAX:

expression.ProductCode

expression A variable that represents an Application object.

This example displays the GUID for Excel.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the GUID for Excel.

MsgBox Application.ProductCode

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PromptForSummaryInfo: bool
    '''True if Microsoft Excel asks for summary information when files are first saved. Read/write Boolean.

#SYNTAX:

expression.PromptForSummaryInfo

expression A variable that represents an Application object.

This example displays a prompt that asks for summary information when files are first saved.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a prompt that asks for summary information when files are first saved.

Application.PromptForSummaryInfo = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ProtectedViewWindows: ProtectedViewWindows
    '''Returns a ProtectedViewWindows collection that represents all the Protected View windows that are open in the application. Read-only.

#SYNTAX:

expression.ProtectedViewWindows

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.QuickAnalysis: QuickAnalysis
    '''Returns a QuickAnalysis object that represents the Quick Analysis options of the application.

#SYNTAX:

expression.QuickAnalysis

expression A variable that represents an Application object.

QUICKANALYSIS

The following example displays the Quick Analysis contextual UI with the Sparklines option highlighted.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: QUICKANALYSIS

#EXAMPLE:

The following example displays the Quick Analysis contextual UI with the Sparklines option highlighted.

Sub ShowQuickAnalysisOptions()

'Displays the Quick Analysis contextual UI with the Sparklines option highlighted.
  Application.QuickAnalysis.Show (xlSparklines)

End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Quitting: bool
    self.RTD: RTD
    '''Returns an RTD object.

#SYNTAX:

expression.RTD

expression An expression that returns an Application object.

RTD

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: RTD
    '''

    self.Ready: bool
    '''Returns True when the Microsoft Excel application is ready; False when the Excel application is not ready. Read-only Boolean.

#SYNTAX:

expression.Ready

expression A variable that represents an Application object.

In this example, Excel checks to see if the Ready property is set to True, and if so, a message displays "Application is ready." Otherwise, Excel displays the message "Application is not ready."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Excel checks to see if the Ready property is set to True, and if so, a message displays "Application is ready." Otherwise, Excel displays the message "Application is not ready."

Sub UseReady() 
 
 If Application.Ready = True Then 
 MsgBox "Application is ready." 
 Else 
 MsgBox "Application is not ready." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RecentFiles: RecentFiles
    '''Returns a RecentFiles collection that represents the list of recently used files.

#SYNTAX:

expression.RecentFiles

expression A variable that represents an Application object.

This example sets the maximum number of files in the list of recently used files to 6.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the maximum number of files in the list of recently used files to 6.

Application.RecentFiles.Maximum = 6

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RecordRelative: bool
    '''True if macros are recorded by using relative references; False if recording is absolute. Read-only Boolean.

#SYNTAX:

expression.RecordRelative

expression A variable that represents an Application object.

This example displays the address of the active cell on Sheet1 in A1 style if RecordRelative is False; otherwise, it displays the address in R1C1 style.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the address of the active cell on Sheet1 in A1 style if RecordRelative is False; otherwise, it displays the address in R1C1 style.

Worksheets("Sheet1").Activate 
If Application.RecordRelative = False Then 
 MsgBox ActiveCell.Address(ReferenceStyle:=xlA1) 
Else 
 MsgBox ActiveCell.Address(ReferenceStyle:=xlR1C1) 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ReferenceStyle: XlReferenceStyle
    '''Returns or sets how Microsoft Excel displays cell references and row and column headings in either A1 or R1C1 reference style. Read/write XlReferenceStyle.

#SYNTAX:

expression.ReferenceStyle

expression A variable that represents an Application object.

XlReferenceStyle can be one of these constants:

This example displays the current reference style.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

XlReferenceStyle can be one of these constants:

This example displays the current reference style.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the current reference style.

If Application.ReferenceStyle = xlR1C1 Then 
 MsgBox ("Microsoft Excel is using R1C1 references") 
Else 
 MsgBox ("Microsoft Excel is using A1 references") 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RegisteredFunctions: VBA_Variant
    '''Returns information about functions in either dynamic-link libraries (DLLs) or code resources that were registered with the REGISTER or REGISTER.ID macro functions. Read-only Variant.

#SYNTAX:

expression.RegisteredFunctions (Index1, Index2)

expression A variable that represents an Application object.

If you don't specify the index arguments, this property returns an array that contains a list of all registered functions. Each row in the array contains information about a single function, as shown in the following table.

If there are no registered functions, this property returns null.

This example creates a list of registered functions, placing one registered function in each row on Sheet1. Column A contains the full path and file name of the DLL or code resource, column B contains the function name, and column C contains the argument data type code.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't specify the index arguments, this property returns an array that contains a list of all registered functions. Each row in the array contains information about a single function, as shown in the following table.

If there are no registered functions, this property returns null.

This example creates a list of registered functions, placing one registered function in each row on Sheet1. Column A contains the full path and file name of the DLL or code resource, column B contains the function name, and column C contains the argument data type code.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates a list of registered functions, placing one registered function in each row on Sheet1. Column A contains the full path and file name of the DLL or code resource, column B contains the function name, and column C contains the argument data type code.

theArray = Application.RegisteredFunctions 
If IsNull(theArray) Then 
 MsgBox "No registered functions" 
Else 
 For i = LBound(theArray) To UBound(theArray) 
 For j = 1 To 3 
 Worksheets("Sheet1").Cells(i, j). _ 
 Formula = theArray(i, j) 
 Next j 
 Next i 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ReplaceFormat: CellFormat
    '''Sets the replacement criteria to use in replacing cell formats. The replacement criteria is then used in a subsequent call to the Replace method of the Range object.

#SYNTAX:

expression.ReplaceFormat

expression A variable that represents an Application object.

The following example sets the search criteria to find cells containing Arial, Regular, Size 10 font, replaces their formats with Arial, Bold, Size 8 font, and then calls the Replace method, with the optional arguments of SearchFormat and ReplaceFormat set to True to actually make the changes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example sets the search criteria to find cells containing Arial, Regular, Size 10 font, replaces their formats with Arial, Bold, Size 8 font, and then calls the Replace method, with the optional arguments of SearchFormat and ReplaceFormat set to True to actually make the changes.

Sub MakeBold() 
 
 ' Establish search criteria. 
 With Application.FindFormat.Font 
 .Name = "Arial" 
 .FontStyle = "Regular" 
 .Size = 10 
 End With 
 
 ' Establish replacement criteria. 
 With Application.ReplaceFormat.Font 
 .Name = "Arial" 
 .FontStyle = "Bold" 
 .Size = 8 
 End With 
 
 ' Notify user. 
 With Application.ReplaceFormat.Font 
 MsgBox .Name & "-" & .FontStyle & "-" & .Size & _ 
 " font is what the search criteria will replace cell formats with." 
 End With 
 
 ' Make the replacements on the worksheet. 
 Cells.Replace What:="", Replacement:="", _ 
 SearchFormat:=True, ReplaceFormat:=True 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RollZoom: bool
    '''True if the IntelliMouse zooms instead of scrolling. Read/write Boolean.

#SYNTAX:

expression.RollZoom

expression A variable that represents an Application object.

This example enables the IntelliMouse to zoom instead of scroll.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables the IntelliMouse to zoom instead of scroll.

Application.RollZoom = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Rows: Range
    '''Returns a Range object that represents all the rows on the active worksheet. If the active document isn't a worksheet, the Rows property fails. Read-only Range object.

#SYNTAX:

expression.Rows

expression A variable that represents an Application object.

Using this property without an object qualifier is equivalent to using ActiveSheet.Rows.

When applied to a Range object that's a multiple selection, this property returns rows from only the first area of the range. For example, if the Range object has two areas—A1:B2 and C3:D4, Selection.Rows.Count returns 2, not 4.

To use this property on a range that may contain a multiple selection, test Areas.Count to determine whether the range is a multiple selection. If it is, loop over each area in the range, as shown in the third example.

This example deletes row three on Sheet1.

This example deletes rows in the current region on worksheet one where the value of cell one in the row is the same as the value in cell one in the previous row.

This example displays the number of rows in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property without an object qualifier is equivalent to using ActiveSheet.Rows.

When applied to a Range object that's a multiple selection, this property returns rows from only the first area of the range. For example, if the Range object has two areas—A1:B2 and C3:D4, Selection.Rows.Count returns 2, not 4.

To use this property on a range that may contain a multiple selection, test Areas.Count to determine whether the range is a multiple selection. If it is, loop over each area in the range, as shown in the third example.

This example deletes row three on Sheet1.

This example deletes rows in the current region on worksheet one where the value of cell one in the row is the same as the value in cell one in the previous row.

This example displays the number of rows in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example deletes row three on Sheet1.

Worksheets("Sheet1").Rows(3).Delete

This example deletes rows in the current region on worksheet one where the value of cell one in the row is the same as the value in cell one in the previous row.

For Each rw In Worksheets(1).Cells(1, 1).CurrentRegion.Rows 
 this = rw.Cells(1, 1).Value 
 If this = last Then rw.Delete 
 last = this 
Next

This example displays the number of rows in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Worksheets("Sheet1").Activate 
areaCount = Selection.Areas.Count 
If areaCount <= 1 Then 
 MsgBox "The selection contains " & _ 
 Selection.Rows.Count & " rows." 
Else 
 i = 1 
 For Each a In Selection.Areas 
 MsgBox "Area " & i & " of the selection contains " & _ 
 a.Rows.Count & " rows." 
 i = i + 1 
 Next a 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SaveISO8601Dates: bool
    self.ScreenUpdating: bool
    '''True if screen updating is turned on. Read/write Boolean.

#SYNTAX:

expression.ScreenUpdating

expression A variable that represents an Application object.

Turn screen updating off to speed up your macro code. You won't be able to see what the macro is doing, but it will run faster.

Remember to set the ScreenUpdating property back to True when your macro ends.

This example demonstrates how turning off screen updating can make your code run faster. The example hides every other column on Sheet1, while keeping track of the time it takes to do so. The first time the example hides the columns, screen updating is turned on; the second time, screen updating is turned off. When you run this example, you can compare the respective running times, which are displayed in the message box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Turn screen updating off to speed up your macro code. You won't be able to see what the macro is doing, but it will run faster.

Remember to set the ScreenUpdating property back to True when your macro ends.

This example demonstrates how turning off screen updating can make your code run faster. The example hides every other column on Sheet1, while keeping track of the time it takes to do so. The first time the example hides the columns, screen updating is turned on; the second time, screen updating is turned off. When you run this example, you can compare the respective running times, which are displayed in the message box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example demonstrates how turning off screen updating can make your code run faster. The example hides every other column on Sheet1, while keeping track of the time it takes to do so. The first time the example hides the columns, screen updating is turned on; the second time, screen updating is turned off. When you run this example, you can compare the respective running times, which are displayed in the message box.

Dim elapsedTime(2) 
Application.ScreenUpdating = True 
For i = 1 To 2 
 If i = 2 Then Application.ScreenUpdating = False 
 startTime = Time 
 Worksheets("Sheet1").Activate 
 For Each c In ActiveSheet.Columns 
 If c.Column Mod 2 = 0 Then 
 c.Hidden = True 
 End If 
 Next c 
 stopTime = Time 
 elapsedTime(i) = (stopTime - startTime) * 24 * 60 * 60 
Next i 
Application.ScreenUpdating = True 
MsgBox "Elapsed time, screen updating on: " & elapsedTime(1) & _ 
 " sec." & Chr(13) & _ 
 "Elapsed time, screen updating off: " & elapsedTime(2) & _ 
 " sec."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Selection: Range
    '''Returns the currently selected object on the active worksheet for an Application object. Returns Nothing if no objects are selected. Use the Select method to set the selection, and use the TypeName function to discover the kind of object that is selected.

#SYNTAX:

expression.Selection

expression A variable that represents an Application object.

The returned object type depends on the current selection (for example, if a cell is selected, this property returns a Range object). The Selection property returns Nothing if nothing is selected.

Using this property with no object qualifier is equivalent to using Application.Selection.

This example clears the selection on Sheet1 (assuming that the selection is a range of cells).

This example displays the Visual Basic object type of the selection.

This example displays information about the current selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The returned object type depends on the current selection (for example, if a cell is selected, this property returns a Range object). The Selection property returns Nothing if nothing is selected.

Using this property with no object qualifier is equivalent to using Application.Selection.

This example clears the selection on Sheet1 (assuming that the selection is a range of cells).

This example displays the Visual Basic object type of the selection.

This example displays information about the current selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example clears the selection on Sheet1 (assuming that the selection is a range of cells).

Worksheets("Sheet1").Activate 
Selection.Clear

This example displays the Visual Basic object type of the selection.

Worksheets("Sheet1").Activate 
MsgBox "The selection object type is " & TypeName(Selection)

This example displays information about the current selection.

Sub TestSelection(  )
    Dim str As String
    Select Case TypeName(Selection)
    Case "Nothing"
        str = "No selection made."
    Case "Range"
        str = "You selected the range: " & Selection.Address
    Case "Picture"
        str = "You selected a picture."
    Case Else
        str = "You selected a " & TypeName(Selection) & "."
    End Select
    MsgBox str
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Sheets: Sheets
    '''Returns a Sheets collection that represents all the sheets in the active workbook. Read-only Sheets object.

#SYNTAX:

expression.Sheets

expression An expression that returns an Application object.

Using this property without an object qualifier is equivalent to using ActiveWorkbook.Sheets.

This example creates a new worksheet, and then places a list of the active workbook's sheet names in the first column.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property without an object qualifier is equivalent to using ActiveWorkbook.Sheets.

This example creates a new worksheet, and then places a list of the active workbook's sheet names in the first column.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates a new worksheet, and then places a list of the active workbook's sheet names in the first column.

Set newSheet = Sheets.Add(Type:=xlWorksheet) 
For i = 1 To Sheets.Count 
 newSheet.Cells(i, 1).Value = Sheets(i).Name 
Next i

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SheetsInNewWorkbook: int
    '''Returns or sets the number of sheets that Microsoft Excel automatically inserts into new workbooks. Read/write Long.

#SYNTAX:

expression.SheetsInNewWorkbook

expression A variable that represents an Application object.

This example displays the number of sheets automatically inserted into new workbooks.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of sheets automatically inserted into new workbooks.

MsgBox "Microsoft Excel inserts " & _ 
 Application.SheetsInNewWorkbook & _ 
 " sheet(s) in each new workbook"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowChartTipNames: bool
    '''True if charts show chart tip names. The default value is True. Read/write Boolean.

#SYNTAX:

expression.ShowChartTipNames

expression A variable that represents an Application object.

This example turns off chart tip names and values.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off chart tip names and values.

With Application 
 .ShowChartTipNames = False 
 .ShowChartTipValues = False 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowChartTipValues: bool
    '''True if charts show chart tip values. The default value is True. Read/write Boolean.

#SYNTAX:

expression.ShowChartTipValues

expression A variable that represents an Application object.

This example turns off chart tip names and values.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off chart tip names and values.

With Application 
 .ShowChartTipNames = False 
 .ShowChartTipValues = False 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowConvertToDataType: bool
    self.ShowDevTools: bool
    '''Returns or sets a Boolean that represents whether the Developer tab is displayed in the ribbon. Read/write Boolean.

#SYNTAX:

expression.ShowDevTools

expression A variable that represents an Application object.

This property corresponds to the Show Developer tab in the Ribbon check box in the Excel Options dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property corresponds to the Show Developer tab in the Ribbon check box in the Excel Options dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowMenuFloaties: bool
    '''Returns or sets a Boolean that represents whether to display Mini toolbars when the user right-clicks in the workbook window. False if Mini toolbars are displayed. Read/write Boolean.

#SYNTAX:

expression.ShowMenuFloaties

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowQuickAnalysis: bool
    '''Controls whether the Quick Analysis contextual user interface is displayed on selection. True means that the Quick Analysis button will show.

#SYNTAX:

expression.ShowQuickAnalysis

expression A variable that represents an Application object.

BOOL

This example hides the Quick Analysis button on selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: BOOL

#EXAMPLE:

This example hides the Quick Analysis button on selection.

Application.ShowQuickAnalysis = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowSelectionFloaties: bool
    '''Returns or sets a Boolean that represents whether Mini toolbars displays when a user selects text. False if Mini toolbars are displayed. Read/write Boolean.

#SYNTAX:

expression.ShowSelectionFloaties

expression A variable that represents an Application object.

Corresponds with the Show MiniBar on selection check box in the Excel Options dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Corresponds with the Show MiniBar on selection check box in the Excel Options dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowStartupDialog: bool
    '''Returns True (default is False) when the New Workbook task pane appears for a Microsoft Excel application. Read/write Boolean.

#SYNTAX:

expression.ShowStartupDialog

expression A variable that represents an Application object.

In this example, Excel determines if the New Workbook task pane appears and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Excel determines if the New Workbook task pane appears and notifies the user.

Sub CheckStartupDialog() 
 
 ' Determine if the New Workbook task pane is enabled. 
 If Application.ShowStartupDialog = False Then 
 MsgBox "ShowStartupDialog is set to False." 
 Else 
 MsgBox "ShowStartupDialog is set to True." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowToolTips: bool
    '''True if ToolTips are turned on. Read/write Boolean.

#SYNTAX:

expression.ShowToolTips

expression A variable that represents an Application object.

This example causes Microsoft Excel to display ToolTips.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes Microsoft Excel to display ToolTips.

Application.ShowToolTips = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShowWindowsInTaskbar: bool
    self.SmartArtColors: CDispatch
    '''Returns the set of SmartArtColors styles that are currently loaded in the application. Read-only.

#SYNTAX:

expression.SmartArtColors

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SmartArtLayouts: CDispatch
    '''Returns the set of SmartArtLayouts that are currently loaded in the application. Read-only.

#SYNTAX:

expression.SmartArtLayouts

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SmartArtQuickStyles: CDispatch
    '''Returns the set of SmartArtQuickStyles that are currently loaded in the application. Read-only.

#SYNTAX:

expression.SmartArtQuickStyles

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SmartTagRecognizers: SmartTagRecognizers
    self.Speech: Speech
    '''Returns a Speech object.

#SYNTAX:

expression.Speech

expression A variable that represents an Application object.

In the following example, Microsoft Excel plays back Hello. This example assumes speech features have been installed on the host system.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, Microsoft Excel plays back Hello. This example assumes speech features have been installed on the host system.

Sub UseSpeech() 
 
 Application.Speech.Speak "Hello" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SpellingOptions: SpellingOptions
    '''Returns a SpellingOptions object that represents the spelling options of the application.

#SYNTAX:

expression.SpellingOptions

expression A variable that represents an Application object.

In this example, Microsoft Excel checks the setting on the spelling options for ignoring mixed digits, and notifies the user of its status.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel checks the setting on the spelling options for ignoring mixed digits, and notifies the user of its status.

Sub MixedDigitCheck() 
 
 ' Determine the setting on spell checking for mixed digits. 
 If Application.SpellingOptions.IgnoreMixedDigits = True Then 
 MsgBox "The spelling options are set to ignore mixed digits." 
 Else 
 MsgBox "The spelling options are set to check for mixed digits." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.StandardFont: str
    '''Returns or sets the name of the standard font. Read/write String.

#SYNTAX:

expression.StandardFont

expression A variable that represents an Application object.

If you change the standard font by using this property, the change doesn't take effect until you restart Microsoft Excel.

This example sets the standard font to Geneva (on the Macintosh) or Arial (in Windows).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you change the standard font by using this property, the change doesn't take effect until you restart Microsoft Excel.

This example sets the standard font to Geneva (on the Macintosh) or Arial (in Windows).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the standard font to Geneva (on the Macintosh) or Arial (in Windows).

If Application.OperatingSystem Like "*Macintosh*" Then 
 Application.StandardFont = "Geneva" 
Else 
 Application.StandardFont = "Arial" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.StandardFontSize: int
    '''Returns or sets the standard font size, in points. Read/write Long.

#SYNTAX:

expression.StandardFontSize

expression A variable that represents an Application object.

If you change the standard font size by using this property, the change doesn't take effect until you restart Microsoft Excel.

This example sets the standard font size to 12 points.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you change the standard font size by using this property, the change doesn't take effect until you restart Microsoft Excel.

This example sets the standard font size to 12 points.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the standard font size to 12 points.

Application.StandardFontSize = 12

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.StartupPath: str
    '''Returns the complete path of the startup folder, excluding the final separator. Read-only String.

#SYNTAX:

expression.StartupPath

expression A variable that represents an Application object.

This example displays the full path to the Microsoft Excel startup folder.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the full path to the Microsoft Excel startup folder.

MsgBox Application.StartupPath

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.StatusBar: str
    '''Returns or sets the text in the status bar. Read/write String.

#SYNTAX:

expression.StatusBar

expression A variable that represents an Application object.

This property returns False if Microsoft Excel has control of the status bar. To restore the default status bar text, set the property to False; this works even if the status bar is hidden.

This example sets the status bar text to "Please be patient..." before it opens the workbook Large.xls, and then it restores the default text.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns False if Microsoft Excel has control of the status bar. To restore the default status bar text, set the property to False; this works even if the status bar is hidden.

This example sets the status bar text to "Please be patient..." before it opens the workbook Large.xls, and then it restores the default text.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the status bar text to "Please be patient..." before it opens the workbook Large.xls, and then it restores the default text.

oldStatusBar = Application.DisplayStatusBar 
Application.DisplayStatusBar = True 
Application.StatusBar = "Please be patient..." 
Workbooks.Open filename:="LARGE.XLS" 
Application.StatusBar = False 
Application.DisplayStatusBar = oldStatusBar

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TemplatesPath: str
    '''Returns the local path where templates are stored. Read-only String.

#SYNTAX:

expression.TemplatesPath

expression A variable that represents an Application object.

This example returns the local path where templates are stored.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example returns the local path where templates are stored.

Msgbox Application.TemplatesPath

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ThousandsSeparator: str
    '''Sets or returns the character used for the thousands separator as a String. Read/write.

#SYNTAX:

expression.ThousandsSeparator

expression A variable that represents an Application object.

This example places "1,234,567.89" in cell A1, and then changes the system separators to dashes for the decimals and thousands separators.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example places "1,234,567.89" in cell A1, and then changes the system separators to dashes for the decimals and thousands separators.

Sub ChangeSystemSeparators() 
 
 Range("A1").Formula = "1,234,567.89" 
 MsgBox "The system separators will now change." 
 
 ' Define separators and apply. 
 Application.DecimalSeparator = "-" 
 Application.ThousandsSeparator = "-" 
 Application.UseSystemSeparators = False 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Toolbars: Toolbars
    self.Top: float
    '''Returns or sets a Double value that represents the distance, in points, from the top edge of the screen to the top edge of the main Microsoft Excel window.

#SYNTAX:

expression.Top

expression A variable that represents an Application object.

If the application window is minimized, this property controls the position of the window icon (anywhere on the screen).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the application window is minimized, this property controls the position of the window icon (anywhere on the screen).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TransitionMenuKey: str
    '''Returns or sets the Microsoft Excel menu or help key, which is usually /. Read/write String.

#SYNTAX:

expression.TransitionMenuKey

expression A variable that represents an Application object.

This example sets the transition menu key to / (which is the default).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the transition menu key to / (which is the default).

Application.TransitionMenuKey = "/"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TransitionMenuKeyAction: xlExcelMenus | xlLotusHelp | int
    '''Returns or sets the action taken when the Microsoft Excel menu key is pressed. Can be either xlExcelMenus or xlLotusHelp (see the Excel constants enumeration). Read/write Long.

#SYNTAX:

expression.TransitionMenuKeyAction

expression A variable that represents an Application object.

This example sets the Microsoft Excel menu key to run Lotus 1-2-3 Help when it is pressed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the Microsoft Excel menu key to run Lotus 1-2-3 Help when it is pressed.

Application.TransitionMenuKeyAction = xlLotusHelp

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TransitionNavigKeys: bool
    '''True if transition navigation keys are active. Read/write Boolean.

#SYNTAX:

expression.TransitionNavigKeys

expression A variable that represents an Application object.

This example displays the current state of the Transition navigation keys option.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the current state of the Transition navigation keys option.

If Application.TransitionNavigKeys Then 
 keyState = "On" 
Else 
 keyState = "Off" 
End If 
MsgBox "The Transition Navigation Keys option is " & keyState

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TruncateLargeNumbers: bool
    self.TruncateLeadingZeros: bool
    self.UILanguage: int
    self.UsableHeight: float
    '''Returns the maximum height of the space that a window can occupy in the application window area, in points. Read-only Double.

#SYNTAX:

expression.UsableHeight

expression A variable that represents an Application object.

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

With ActiveWindow 
 .WindowState = xlNormal 
 .Top = 1 
 .Left = 1 
 .Height = Application.UsableHeight 
 .Width = Application.UsableWidth 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UsableWidth: float
    '''Returns the maximum width of the space that a window can occupy in the application window area, in points. Read-only Double.

#SYNTAX:

expression.UsableWidth

expression A variable that represents an Application object.

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

With ActiveWindow 
 .WindowState = xlNormal 
 .Top = 1 
 .Left = 1 
 .Height = Application.UsableHeight 
 .Width = Application.UsableWidth 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseClusterConnector: bool
    '''Returns or sets whether Excel allows user-defined functions in XLL add-ins to be run on a compute cluster. Read/write.

#SYNTAX:

expression.UseClusterConnector

expression A variable that represents an Application object.

Boolean

True if Excel allows user-defined functions in XLL add-ins to be run on a compute cluster; otherwise, False.

The setting of the UseClusterConnector property corresponds to the Allow user-defined XLL functions to run on a compute cluster check box under Formulas in the Advanced category of the Excel Options dialog box.

After setting the UseClusterConnector property, use the ClusterConnector property to specify the HPC Cluster Connector to use.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Boolean

#REMARKS:

True if Excel allows user-defined functions in XLL add-ins to be run on a compute cluster; otherwise, False.

The setting of the UseClusterConnector property corresponds to the Allow user-defined XLL functions to run on a compute cluster check box under Formulas in the Advanced category of the Excel Options dialog box.

After setting the UseClusterConnector property, use the ClusterConnector property to specify the HPC Cluster Connector to use.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseSystemSeparators: bool
    '''True (default) if the system separators of Microsoft Excel are enabled. Read/write Boolean.

#SYNTAX:

expression.UseSystemSeparators

expression A variable that represents an Application object.

In this example, "1,234,567.89" is placed in cell A1. The system separators are then changed to dashes for the decimals and thousands separators.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, "1,234,567.89" is placed in cell A1. The system separators are then changed to dashes for the decimals and thousands separators.

Sub ChangeSystemSeparators() 
 
 Range("A1").Formula = "1,234,567.89" 
 MsgBox "The system separators will now change." 
 
 ' Define separators and apply. 
 Application.DecimalSeparator = "-" 
 Application.ThousandsSeparator = "-" 
 Application.UseSystemSeparators = False 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UsedObjects: UsedObjects
    '''Returns a UsedObjects object representing objects allocated in a workbook. Read-only.

#SYNTAX:

expression.UsedObjects

expression A variable that represents an Application object.

In this example, Microsoft Excel determines the quantity of objects that have been allocated and notifies the user. This example assumes a recalculation was performed in the application and was interrupted before finishing.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines the quantity of objects that have been allocated and notifies the user. This example assumes a recalculation was performed in the application and was interrupted before finishing.

Sub CountUsedObjects() 
 
 MsgBox "The number of used objects in this application is: " & _ 
 Application.UsedObjects.Count 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UserControl: bool
    '''True if the application is visible or if it was created or started by the user. False if you created or started the application programmatically by using the CreateObject or GetObject functions, and the application is hidden. Read/write Boolean.

#SYNTAX:

expression.UserControl

expression A variable that represents an Application object.

When the UserControl property is False for an object, that object is released when the last programmatic reference to the object is released. If this property is False, Microsoft Excel quits when the last object in the session is released.

This example displays the status of the UserControl property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

When the UserControl property is False for an object, that object is released when the last programmatic reference to the object is released. If this property is False, Microsoft Excel quits when the last object in the session is released.

This example displays the status of the UserControl property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the status of the UserControl property.

If Application.UserControl Then 
 MsgBox "This workbook was created by the user" 
Else 
 MsgBox "This workbook was created programmatically" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UserLibraryPath: str
    '''Returns the path to the location on the user's computer where the COM add-ins are installed. Read-only String.

#SYNTAX:

expression.UserLibraryPath

expression A variable that represents an Application object.

This example determines where the COM add-ins are installed on the user's computer and assigns the string to the variable strLibPath.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example determines where the COM add-ins are installed on the user's computer and assigns the string to the variable strLibPath.

strLibPath = Application.UserLibraryPath

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UserName: str
    '''Returns or sets the name of the current user. Read/write String.

#SYNTAX:

expression.UserName

expression A variable that represents an Application object.

This example displays the name of the current user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of the current user.

MsgBox "Current user is " & Application.UserName

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Value: str
    '''Returns a String value that represents the name of the application.

#SYNTAX:

expression.Value

expression A variable that represents an Application object.

This property always returns "Microsoft Excel."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property always returns "Microsoft Excel."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Version: str
    '''Returns a String value that represents the Microsoft Excel version number.

#SYNTAX:

expression.Version

expression A variable that represents an Application object.

This example displays a message box that contains the Microsoft Excel version number and the name of the operating system.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message box that contains the Microsoft Excel version number and the name of the operating system.

MsgBox "Welcome to Microsoft Excel version " & _ 
 Application.Version & " running on " & _ 
 Application.OperatingSystem & "!"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Visible: bool
    '''Returns or sets a Boolean value that determines whether the object is visible. Read/write.

#SYNTAX:

expression.Visible

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

'When used in a workbook this makes Excel invisible.
Application.Visible = False

'Waiting  five seconds, then showing Excel again.
Application.Wait Now + TimeValue("00:00:05")

'Makes Excel visible again.
Application.Visible = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.WarnOnFunctionNameConflict: bool
    '''The WarnOnFunctionNameConflict property, when set to True, raises an alert if a developer tries to create a new function by using an existing function name. Read/write Boolean.

#SYNTAX:

expression.WarnOnFunctionNameConflict

expression A variable that represents an Application object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Watches: Watches
    '''Returns a Watches object representing a range that is tracked when the worksheet is recalculated.

#SYNTAX:

expression.Watches

expression A variable that represents an Application object.

This example creates a summation formula in cell A3, and then adds this cell to the Watch window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates a summation formula in cell A3, and then adds this cell to the Watch window.

Sub AddWatch() 
 With Application 
 .Range("A1").Formula = 1 
 .Range("A2").Formula = 2 
 .Range("A3").Formula = "=Sum(A1:A2)" 
 .Range("A3").Select 
 .Watches.Add Source:=ActiveCell 
 End With 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Width: float
    '''Returns or sets a Double value that represents the distance, in points, from the left edge of the application window to its right edge.

#SYNTAX:

expression.Width

expression A variable that represents an Application object.

If the window is minimized, Width is read-only and returns the width of the window icon.

This example expands the active window to the maximum size available (assuming that the window isn't maximized).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the window is minimized, Width is read-only and returns the width of the window icon.

This example expands the active window to the maximum size available (assuming that the window isn't maximized).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example expands the active window to the maximum size available (assuming that the window isn't maximized).

With ActiveWindow 
 .WindowState = xlNormal 
 .Top = 1 
 .Left = 1 
 .Height = Application.UsableHeight 
 .Width = Application.UsableWidth 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.WindowState: XlWindowState
    '''Returns or sets the state of the window. Read/write XlWindowState.

#SYNTAX:

expression.WindowState

expression A variable that represents an Application object.

This example maximizes the application window in Microsoft Excel.

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example maximizes the application window in Microsoft Excel.

Application.WindowState = xlMaximized

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

With ActiveWindow 
 .WindowState = xlNormal 
 .Top = 1 
 .Left = 1 
 .Height = Application.UsableHeight 
 .Width = Application.UsableWidth 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Windows: Windows
    '''Returns a Windows collection that represents all the windows in all the workbooks. Read-only Windows object.

#SYNTAX:

expression.Windows

expression A variable that represents an Application object.

Using this property without an object qualifier is equivalent to using Application.Windows.

This property returns a collection of both visible and hidden windows.

This example closes the first open or hidden window in Microsoft Excel.

This example names window one in the active workbook Consolidated Balance Sheet. This name is then used as the index to the Windows collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property without an object qualifier is equivalent to using Application.Windows.

This property returns a collection of both visible and hidden windows.

This example closes the first open or hidden window in Microsoft Excel.

This example names window one in the active workbook Consolidated Balance Sheet. This name is then used as the index to the Windows collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example closes the first open or hidden window in Microsoft Excel.

Application.Windows(1).Close

This example names window one in the active workbook Consolidated Balance Sheet. This name is then used as the index to the Windows collection.

ActiveWorkbook.Windows(1).Caption = "Consolidated Balance Sheet" 
ActiveWorkbook.Windows("Consolidated Balance Sheet") _ 
 .ActiveSheet.Calculate

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.WindowsForPens: bool
    '''True if the computer is running under Microsoft Windows for Pen Computing. Read-only Boolean.

#SYNTAX:

expression.WindowsForPens

expression A variable that represents an Application object.

This example shows how to limit handwriting recognition to numbers and punctuation only if Windows for Pen Computing is running.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example shows how to limit handwriting recognition to numbers and punctuation only if Windows for Pen Computing is running.

If Application.WindowsForPens Then 
 Application.ConstrainNumeric = True 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Workbooks: Workbooks
    '''Returns a Workbooks collection that represents all the open workbooks. Read-only.

#SYNTAX:

expression.Workbooks

expression A variable that represents an Application object.

Using this property without an object qualifier is equivalent to using Application.Workbooks.

The collection returned by the Workbooks property doesn't include open add-ins, which are a special kind of hidden workbook. You can, however, return a single open add-in if you know the file name. For example, Workbooks("Oscar.xla") returns the open add-in named "Oscar.xla" as a Workbook object.

This example activates the workbook Book1.xls.

This example opens the workbook Large.xls.

This example saves changes to and closes all workbooks except the one that's running the example.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property without an object qualifier is equivalent to using Application.Workbooks.

The collection returned by the Workbooks property doesn't include open add-ins, which are a special kind of hidden workbook. You can, however, return a single open add-in if you know the file name. For example, Workbooks("Oscar.xla") returns the open add-in named "Oscar.xla" as a Workbook object.

This example activates the workbook Book1.xls.

This example opens the workbook Large.xls.

This example saves changes to and closes all workbooks except the one that's running the example.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example activates the workbook Book1.xls.

Workbooks("BOOK1").Activate

This example opens the workbook Large.xls.

Workbooks.Open filename:="LARGE.XLS"

This example saves changes to and closes all workbooks except the one that's running the example.

For Each w In Workbooks 
    If w.Name <> ThisWorkbook.Name Then 
        w.Close savechanges:=True 
    End If 
Next w

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.WorksheetFunction: WorksheetFunction
    '''Returns the WorksheetFunction object. Read-only.

#SYNTAX:

expression.WorksheetFunction

expression A variable that represents an Application object.

This example displays the result of applying the Min worksheet function to the range A1:A10.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the result of applying the Min worksheet function to the range A1:A10.

Set myRange = Worksheets("Sheet1").Range("A1:C10") 
answer = Application.WorksheetFunction.Min(myRange) 
MsgBox answer

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Worksheets: Sheets
    '''For an Application object, returns a Sheets collection that represents all the worksheets in the active workbook.

#SYNTAX:

expression.Worksheets

expression A variable that represents an Application object.

Using this property without an object qualifier returns all the worksheets in the active workbook.

This property doesn't return macro sheets; use the Excel4MacroSheets property or the Excel4IntlMacroSheets property to return those sheets.

This example displays the value in cell A1 on Sheet1 in the active workbook.

This example displays the name of each worksheet in the active workbook.

This example adds a new worksheet to the active workbook, and then sets the name of the worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property without an object qualifier returns all the worksheets in the active workbook.

This property doesn't return macro sheets; use the Excel4MacroSheets property or the Excel4IntlMacroSheets property to return those sheets.

This example displays the value in cell A1 on Sheet1 in the active workbook.

This example displays the name of each worksheet in the active workbook.

This example adds a new worksheet to the active workbook, and then sets the name of the worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the value in cell A1 on Sheet1 in the active workbook.

MsgBox Worksheets("Sheet1").Range("A1").Value

This example displays the name of each worksheet in the active workbook.

For Each ws In Worksheets 
 MsgBox ws.Name 
Next ws

This example adds a new worksheet to the active workbook, and then sets the name of the worksheet.

Set newSheet = Worksheets.Add 
newSheet.Name = "current Budget"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self._Default: str
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def ActivateMicrosoftApp(self, Index) -> None:
    '''Activates a Microsoft application. If the application is already running, this method activates the running application. If the application isn't running, this method starts a new instance of the application.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required XlMSApplication Specifies the Microsoft application to activate.

#EXAMPLE:

This example starts and activates Word.

Application.ActivateMicrosoftApp xlMicrosoftWord

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddChartAutoFormat(self, Chart, Name, Description):  pass

  def AddCustomList(self, ListArray, ByRow) -> None:
    '''Adds a custom list for custom autofill and/or custom sort.

#PARAMETERS:

Name Required/Optional Data type Description

ListArray Required Variant Specifies the source data, as either an array of strings or a Range object.

ByRow Optional Variant Only used if ListArray is a Range object. True to create a custom list from each row in the range. False to create a custom list from each column in the range.If this argument is omitted and there are more rows than columns (or an equal number of rows and columns) in the range, Microsoft Excel creates a custom list from each column in the range.If this argument is omitted and there are more columns than rows in the range, Excel creates a custom list from each row in the range.

#REMARKS:

If the list that you are trying to add already exists, this method throws a run-time error 1004. Catch the error with an On Error statement.

This example adds an array of strings as a custom list.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds an array of strings as a custom list.

On Error Resume Next  ' if the list already exists, don'thing
Application.AddCustomList Array("cogs", "sprockets", _ 
 "widgets", "gizmos")
On Error Goto 0       ' resume regular error handling

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Calculate(self) -> None:
    '''Calculates all open workbooks, a specific worksheet in a workbook, or a specified range of cells on a worksheet, as shown in the following table.

#REMARKS:

This example calculates the formulas in columns A, B, and C in the used range on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example calculates the formulas in columns A, B, and C in the used range on Sheet1.

Worksheets("Sheet1").UsedRange.Columns("A:C").Calculate

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CalculateFull(self) -> None:
    '''Forces a full calculation of the data in all open workbooks.

#EXAMPLE:

This example compares the version of Microsoft Excel with the version of Excel that the workbook was last calculated in. If the two version numbers are different, a full calculation of the data in all open workbooks is performed.

If Application.CalculationVersion <> _ 
 Workbooks(1).CalculationVersion Then 
 Application.CalculateFull 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CalculateFullRebuild(self) -> None:
    '''For all open workbooks, forces a full calculation of the data and rebuilds the dependencies.

#REMARKS:

Dependencies are the formulas that depend on other cells. For example, the formula "=A1" depends on cell A1. The CalculateFullRebuild method is similar to re-entering all formulas.

This example compares the version of Microsoft Excel with the version of Excel in which the workbook was last calculated. If the two version numbers are different, a full calculation of the data in all open workbooks is performed, and the dependencies are rebuilt.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example compares the version of Microsoft Excel with the version of Excel in which the workbook was last calculated. If the two version numbers are different, a full calculation of the data in all open workbooks is performed, and the dependencies are rebuilt.

Sub UseCalculateFullRebuild() 
 
 If Application.CalculationVersion <> _ 
 Workbooks(1).CalculationVersion Then 
 Application.CalculateFullRebuild 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CalculateUntilAsyncQueriesDone(self) -> None:
    '''Runs all pending queries to OLEDB and OLAP data sources.'''

  def CentimetersToPoints(self, Centimeters) -> float:
    '''Converts a measurement from centimeters to points (one point equals 0.035 centimeters).

#PARAMETERS:

Name Required/Optional Data type Description

Centimeters Required Double Specifies the centimeter value to be converted to points.

#RETURN-VALUE: Double

#EXAMPLE:

This example sets the left margin of Sheet1 to 5 centimeters.

Worksheets("Sheet1").PageSetup.LeftMargin = _ 
 Application.CentimetersToPoints(5)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CheckAbort(self, KeepAbort) -> None:
    '''Stops recalculation in a Microsoft Excel application.

#PARAMETERS:

Name Required/Optional Data type Description

KeepAbort Optional Boolean Allows recalculation to be performed for a range.

#EXAMPLE:

In this example, Excel stops recalculation in the application, except for cell A10. For you to be able to see the results of this example, other calculations should exist in the application that will allow you to see the differences between the cell designated to continue recalculating and other cells.

Sub UseCheckAbort() 
 
 Dim rngSubtotal As Variant 
 Set rngSubtotal = Application.Range("A10") 
 
 ' Stop recalculation except for designated cell. 
 Application.CheckAbort KeepAbort:=rngSubtotal 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CheckSpelling(self, Word, CustomDictionary, IgnoreUppercase) -> bool:
    '''Checks the spelling of a single word.

#PARAMETERS:

Name Required/Optional Data type Description

Word Required String (used only with the Application object). The word that you want to check.

CustomDictionary Optional Variant A string that indicates the file name of the custom dictionary to be examined if the word isn't found in the main dictionary. If this argument is omitted, the currently specified dictionary is used.

IgnoreUppercase Optional Variant True to have Microsoft Excel ignore words that are all uppercase. False to have Microsoft Excel check words that are all uppercase. If this argument is omitted, the current setting will be used.

#RETURN-VALUE: True if the word is found in one of the dictionaries; otherwise, False.

#REMARKS:

To check headers, footers, and objects on a worksheet, use this method on a Worksheet object.

To check only cells and notes, use this method with the object returned by the Cells property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ConvertFormula(self, Formula, FromReferenceStyle, ToReferenceStyle, ToAbsolute, RelativeTo) -> VBA_Variant:
    '''Converts cell references in a formula between the A1 and R1C1 reference styles, between relative and absolute references, or both. Variant.

#PARAMETERS:

Name Required/Optional Data type Description

Formula Required Variant A string that contains the formula that you want to convert. This must be a valid formula, and it must begin with an equal sign.

FromReferenceStyle Required XlReferenceStyle The reference style of the formula.

ToReferenceStyle Optional Variant A constant of XlReferenceStyle specifying the reference style that you want returned. If this argument is omitted, the reference style isn't changed; the formula stays in the style specified by FromReferenceStyle.

ToAbsolute Optional Variant A constant of XlReferenceType that specifies the converted reference type. If this argument is omitted, the reference type isn't changed.

RelativeTo Optional Variant A Range object that contains one cell. Relative references relate to this cell.

#RETURN-VALUE: Variant

#REMARKS:

There is a 255 character limit for the formula.

This example converts a SUM formula that contains R1C1-style references to an equivalent formula that contains A1-style references, and then it displays the result.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example converts a SUM formula that contains R1C1-style references to an equivalent formula that contains A1-style references, and then it displays the result.

inputFormula = "=SUM(R10C2:R15C2)" 
MsgBox Application.ConvertFormula( _ 
 formula:=inputFormula, _ 
 fromReferenceStyle:=xlR1C1, _ 
 toReferenceStyle:=xlA1)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DDEExecute(self, Channel, String) -> None:
    '''Runs a command or performs some other action or actions in another application by way of the specified DDE channel.

#PARAMETERS:

Name Required/Optional Data type Description

Channel Required Long The channel number returned by the DDEInitiate method.

String Required String The message defined in the receiving application.

#REMARKS:

The DDEExecute method is designed to send commands to another application. You can also use it to send keystrokes to another application, although the SendKeys method is the preferred way to send keystrokes.

The String argument can specify any single key combined with Alt, Ctrl, or Shift, or any combination of those keys. Each key is represented by one or more characters, such as "a" for the character a, or "{ENTER}" for the Enter key.

To specify characters that aren't displayed when you press the corresponding key (for example, Enter or Tab), use the codes listed in the following table. Each code in the table represents one key on the keyboard.

You can also specify keys combined with Shift and/or Ctrl and/or Alt. To specify a key combined with one or more of the keys just mentioned, use the following table.

This example opens a channel to Word, opens the Word document Formletr.doc, and then sends the FilePrint command to WordBasic.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example opens a channel to Word, opens the Word document Formletr.doc, and then sends the FilePrint command to WordBasic.

channelNumber = Application.DDEInitiate( _ 
 app:="WinWord", _ 
 topic:="C:\WINWORD\FORMLETR.DOC") 
Application.DDEExecute channelNumber, "[FILEPRINT]" 
Application.DDETerminate channelNumber

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DDEInitiate(self, App, Topic) -> int:
    '''Opens a DDE channel to an application.

#PARAMETERS:

Name Required/Optional Data type Description

App Required String The application name.

Topic Required String Describes something in the application to which you are opening a channel, usually a document of that application.

#RETURN-VALUE: Long

#REMARKS:

If successful, the DDEInitiate method returns the number of the open channel. All subsequent DDE functions use this number to specify the channel.

This example opens a channel to Word, opens the Word document Formletr.doc, and then sends the FilePrint command to WordBasic.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example opens a channel to Word, opens the Word document Formletr.doc, and then sends the FilePrint command to WordBasic.

channelNumber = Application.DDEInitiate( _ 
 app:="WinWord", _ 
 topic:="C:\WINWORD\FORMLETR.DOC") 
Application.DDEExecute channelNumber, "[FILEPRINT]" 
Application.DDETerminate channelNumber

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DDEPoke(self, Channel, Item, Data) -> None:
    '''Sends data to an application.

#PARAMETERS:

Name Required/Optional Data type Description

Channel Required Long The channel number returned by the DDEInitiate method.

Item Required Variant The item to which the data is to be sent.

Data Required Variant The data to be sent to the application.

#REMARKS:

An error occurs if the method call doesn't succeed.

This example opens a channel to Word, opens the Word document Sales.doc, and then inserts the contents of cell A1 (on Sheet1) at the beginning of the document.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example opens a channel to Word, opens the Word document Sales.doc, and then inserts the contents of cell A1 (on Sheet1) at the beginning of the document.

channelNumber = Application.DDEInitiate( _ 
 app:="WinWord", _ 
 topic:="C:\WINWORD\SALES.DOC") 
Set rangeToPoke = Worksheets("Sheet1").Range("A1") 
Application.DDEPoke channelNumber, "\StartOfDoc", rangeToPoke 
Application.DDETerminate channelNumber

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DDERequest(self, Channel, Item) -> VBA_Variant:
    '''Requests information from the specified application. This method always returns an array.

#PARAMETERS:

Name Required/Optional Data type Description

Channel Required Long The channel number returned by the DDEInitiate method.

Item Required String The item to be requested.

#RETURN-VALUE: Variant

#EXAMPLE:

This example opens a channel to the System topic in Word, and then uses the Topics item to return a list of all open documents. The list is returned in column A on Sheet1.

channelNumber = Application.DDEInitiate( _ 
 app:="WinWord", _ 
 topic:="System") 
returnList = Application.DDERequest(channelNumber, "Topics") 
For i = LBound(returnList) To UBound(returnList) 
 Worksheets("Sheet1").Cells(i, 1).Formula = returnList(i) 
Next i 
Application.DDETerminate channelNumber

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DDETerminate(self, Channel) -> None:
    '''Closes a channel to another application.

#PARAMETERS:

Name Required/Optional Data type Description

Channel Required Long The channel number returned by the DDEInitiate method.

#EXAMPLE:

This example opens a channel to Word, opens the Word document Formletr.doc, and then sends the FilePrint command to WordBasic.

channelNumber = Application.DDEInitiate( _ 
 app:="WinWord", _ 
 topic:="C:\WINWORD\FORMLETR.DOC") 
Application.DDEExecute channelNumber, "[FILEPRINT]" 
Application.DDETerminate channelNumber

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DeleteChartAutoFormat(self, Name):  pass

  def DeleteCustomList(self, ListNum) -> None:
    '''Deletes a custom list.

#PARAMETERS:

Name Required/Optional Data type Description

ListNum Required Long The custom list number. This number must be greater than or equal to 5 (Microsoft Excel has four built-in custom lists that cannot be deleted).

#REMARKS:

This method generates an error if the list number is less than 5 or if there's no matching custom list.

This example deletes a custom list.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example deletes a custom list.

n = Application.GetCustomListNum(Array("cogs", "sprockets", _ 
 "widgets", "gizmos")) 
Application.DeleteCustomList n

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DisplayXMLSourcePane(self, XmlMap) -> None:
    '''Opens the XML Source task pane and displays the XML map specified by the XmlMap argument.

#PARAMETERS:

Name Required/Optional Data type Description

XmlMap Optional Variant The XML map to display in the task pane.

#REMARKS:

Use the following code to hide the XML Source task pane.

The following example adds an XML map named Customers to the active workbook, and then displays the XML map in the XML Source task pane.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Application.CommandBars("XML Source").Visible = False

The following example adds an XML map named Customers to the active workbook, and then displays the XML map in the XML Source task pane.

Sub DisplayXMLMap() 
 Dim objCustomer As XmlMap 
 
 Set objCustomer = ActiveWorkbook.XmlMaps.Add( _ 
 "Customers.xsd", "Root") 
 
 objCustomer.Name = "Customers" 
 
 Application.DisplayXMLSourcePane 
 objCustomer 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DoubleClick(self) -> None:
    '''Equivalent to double-clicking the active cell.

#EXAMPLE:

This example double-clicks the active cell on Sheet1.

Worksheets("Sheet1").Activate 
Application.DoubleClick

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Dummy1(self, Arg1, Arg2, Arg3, Arg4):  pass

  def Dummy10(self, arg):  pass

  def Dummy11(self):  pass

  def Dummy12(self, p1, p2):  pass

  def Dummy13(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def Dummy14(self):  pass

  def Dummy2(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8):  pass

  def Dummy20(self, grfCompareFunctions):  pass

  def Dummy3(self):  pass

  def Dummy4(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15):  pass

  def Dummy5(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13):  pass

  def Dummy6(self):  pass

  def Dummy7(self):  pass

  def Dummy8(self, Arg1):  pass

  def Dummy9(self):  pass

  def Evaluate(self, Name) -> VBA_Variant:
    '''Converts a Microsoft Excel name to an object or a value.

#PARAMETERS:

Name Required/Optional Data type Description

Name Required Variant A formula or the name of the object, using the naming convention of Microsoft Excel. The length of the name must be less than or equal to 255 characters.

#RETURN-VALUE: Variant

#REMARKS:

The following types of names in Microsoft Excel can be used with this method:

Using square brackets (for example, "[A1:C5]") is identical to calling the Evaluate method with a string argument. For example, the following expression pairs are equivalent.

The advantage of using square brackets is that the code is shorter. The advantage of using Evaluate is that the argument is a string, so you can either construct the string in your code or use a Visual Basic variable.

This example turns on bold formatting in cell A1 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

[a1].Value = 25 
Evaluate("A1").Value = 25 
 
trigVariable = [SIN(45)] 
trigVariable = Evaluate("SIN(45)") 
 
Set firstCellInSheet = Workbooks("BOOK1.XLS").Sheets(4).[A1] 
Set firstCellInSheet = _ 
    Workbooks("BOOK1.XLS").Sheets(4).Evaluate("A1")

This example turns on bold formatting in cell A1 on Sheet1.

Worksheets("Sheet1").Activate 
boldCell = "A1" 
Application.Evaluate(boldCell).Font.Bold = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ExecuteExcel4Macro(self, String) -> VBA_Variant:
    '''Runs a Microsoft Excel 4.0 macro function and then returns the result of the function. The return type depends on the function.

#PARAMETERS:

Name Required/Optional Data type Description

String Required String A Microsoft Excel 4.0 macro language function without the equal sign. All references must be given as R1C1 strings. If String contains embedded double quotation marks, you must double them. For example, to run the macro function =MID("sometext",1,4), String would have to be "MID(""sometext"",1,4)".

#RETURN-VALUE: Variant

#REMARKS:

The Microsoft Excel 4.0 macro isn't evaluated in the context of the current workbook or sheet. This means that any references should be external and should specify an explicit workbook name. For example, to run the Microsoft Excel 4.0 macro "My_Macro" in Book1 you must use "Book1!My_Macro()". If you don't specify the workbook name, this method fails.

This example runs the GET.CELL(42) macro function on cell C3 on Sheet1 and then displays the result in a message box. The GET.CELL(42) macro function returns the horizontal distance from the left edge of the active window to the left edge of the active cell. This macro function has no direct Visual Basic equivalent.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example runs the GET.CELL(42) macro function on cell C3 on Sheet1 and then displays the result in a message box. The GET.CELL(42) macro function returns the horizontal distance from the left edge of the active window to the left edge of the active cell. This macro function has no direct Visual Basic equivalent.

Worksheets("Sheet1").Activate 
Range("C3").Select 
MsgBox ExecuteExcel4Macro("GET.CELL(42)")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FileDialog(self, fileDialogType):  pass

  def FindFile(self) -> bool:
    '''Displays the Open dialog box.

#RETURN-VALUE: Boolean

#REMARKS:

This method displays the Open dialog box and allows the user to open a file. If a new file is opened successfully, this method returns True. If the user cancels the dialog box, this method returns False.

This example displays the Open dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the Open dialog box.

Application.FindFile

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GetCaller(self, Index):  pass

  def GetClipboardFormats(self, Index):  pass

  def GetCustomListContents(self, ListNum) -> VBA_Variant:
    '''Returns a custom list (an array of strings).

#PARAMETERS:

Name Required/Optional Data type Description

ListNum Required Long The list number.

#RETURN-VALUE: Variant

#EXAMPLE:

This example writes the elements of the first custom list in column one on Sheet1.

listArray = Application.GetCustomListContents(1) 
For i = LBound(listArray, 1) To UBound(listArray, 1) 
 Worksheets("sheet1").Cells(i, 1).Value = listArray(i) 
Next i

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GetCustomListNum(self, ListArray) -> int:
    '''Returns the custom list number for an array of strings. Use this method to match both built-in lists and custom-defined lists.

#PARAMETERS:

Name Required/Optional Data type Description

ListArray Required Variant An array of strings.

#RETURN-VALUE: Long

#REMARKS:

This method generates an error if there's no corresponding list.

This example deletes a custom list.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example deletes a custom list.

n = Application.GetCustomListNum(Array("cogs", "sprockets", _ 
 "widgets", "gizmos")) 
Application.DeleteCustomList n

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GetFileConverters(self, Index1, Index2):  pass

  def GetInternational(self, Index):  pass

  def GetOpenFilename(self, FileFilter, FilterIndex, Title, ButtonText, MultiSelect) -> VBA_Variant:
    '''Displays the standard Open dialog box and gets a file name from the user without actually opening any files.

#PARAMETERS:

Name Required/Optional Data type Description

FileFilter Optional Variant A string specifying file filtering criteria.

FilterIndex Optional Variant Specifies the index numbers of the default file filtering criteria, from 1 to the number of filters specified in FileFilter. If this argument is omitted or greater than the number of filters present, the first file filter is used.

Title Optional Variant Specifies the title of the dialog box. If this argument is omitted, the title is "Open."

ButtonText Optional Variant Macintosh only.

MultiSelect Optional Variant True to allow multiple file names to be selected. False to allow only one file name to be selected. The default value is False.

#RETURN-VALUE: Variant

#REMARKS:

This string passed in the FileFilter argument consists of pairs of file filter strings followed by the MS-DOS wildcard file filter specification, with each part and each pair separated by commas. Each separate pair is listed in the Files of type drop-down list box. For example, the following string specifies two file filters—text and addin:

"Text Files (*.txt), *.txt,Add-In Files (*.xla), *.xla"

To use multiple MS-DOS wildcard expressions for a single file filter type, separate the wildcard expressions with semicolons; for example: "Visual Basic Files (*.bas; *.txt), *.bas;*.txt".

If FileFilter is omitted, this argument defaults to "All Files (*.*), *.*".

This method returns the selected file name or the name entered by the user. The returned name may include a path specification. If MultiSelect is True, the return value is an array of the selected file names (even if only one file name is selected). Returns False if the user cancels the dialog box.

This method may change the current drive or folder.

This example displays the Open dialog box, with the file filter set to text files. If the user chooses a file name, the code displays that file name in a message box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the Open dialog box, with the file filter set to text files. If the user chooses a file name, the code displays that file name in a message box.

fileToOpen = Application _ 
 .GetOpenFilename("Text Files (*.txt), *.txt") 
If fileToOpen <> False Then 
 MsgBox "Open " & fileToOpen 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GetPhonetic(self, Text) -> str:
    '''Returns the Japanese phonetic text of the specified text string. This method is available to you only if you have selected or installed Japanese language support for Microsoft Office.

#PARAMETERS:

Name Required/Optional Data type Description

Text Optional Variant Specifies the text to be converted to phonetic text. If you omit this argument, the next possible phonetic text string (if any) of the previously specified Text is returned. If there are no more possible phonetic text strings, an empty string is returned.

#RETURN-VALUE: String

#EXAMPLE:

This example displays all the possible phonetic text strings from the specified string.

strPhoText = Application.GetPhonetic("??") 
While strPhoText <> "" 
    MsgBox strPhoText 
    strPhoText = Application.GetPhonetic() 
Wend

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GetPreviousSelections(self, Index):  pass

  def GetRegisteredFunctions(self, Index1, Index2):  pass

  def GetSaveAsFilename(self, InitialFilename, FileFilter, FilterIndex, Title, ButtonText) -> VBA_Variant:
    '''Displays the standard Save As dialog box and gets a file name from the user without actually saving any files.

#PARAMETERS:

Name Required/Optional Data type Description

InitialFilename Optional Variant Specifies the suggested file name. If this argument is omitted, Microsoft Excel uses the active workbook's name.

FileFilter Optional Variant A string specifying file filtering criteria. Max length is 255 characters, otherwise the method returns Error 2015.

FilterIndex Optional Variant Specifies the index number of the default file filtering criteria, from 1 to the number of filters specified in  FileFilter. If this argument is omitted or greater than the number of filters present, the first file filter is used.

Title Optional Variant Specifies the title of the dialog box. If this argument is omitted, the default title is used.

ButtonText Optional Variant Macintosh only.

#RETURN-VALUE: Variant

#REMARKS:

This string passed in the FileFilter argument consists of pairs of file filter strings followed by the MS-DOS wildcard file filter specification, with each part and each pair separated by commas. Each separate pair is listed in the Files of type drop-down list box. For example, the following string specifies two file filters—text and addin:

"Text Files (*.txt), *.txt, Add-In Files (*.xla), *.xla"

To use multiple MS-DOS wildcard expressions for a single file filter type, separate the wildcard expressions with semicolons; for example, "Visual Basic Files (*.bas; *.txt), *.bas;*.txt".

This method returns the selected file name or the name entered by the user. The returned name may include a path specification. Returns False if the user cancels the dialog box.

This method may change the current drive or folder.

When InitialFilename is used with an extension and a filter is applied, this extension must match the filter extension, otherwise the effective InitialFilename displayed in the dialog box will be an empty string.

This example displays the Save As dialog box, with the file filter set to text files. If the user chooses a file name, the example displays that file name in a message box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the Save As dialog box, with the file filter set to text files. If the user chooses a file name, the example displays that file name in a message box.

fileSaveName = Application.GetSaveAsFilename( _ 
 fileFilter:="Text Files (*.txt), *.txt") 
If fileSaveName <> False Then 
 MsgBox "Save as " & fileSaveName 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Goto(self, Reference, Scroll) -> None:
    '''Selects any range or Visual Basic procedure in any workbook, and activates that workbook if it's not already active.

#PARAMETERS:

Name Required/Optional Data type Description

Reference Optional Variant The destination. Can be a Range object, a string that contains a cell reference in R1C1-style notation, or a string that contains a Visual Basic procedure name. If this argument is omitted, the destination is the last range you used the Goto method to select.

Scroll Optional Variant True to scroll through the window so that the upper-left corner of the range appears in the upper-left corner of the window. False to not scroll through the window. The default is False.

#REMARKS:

This method differs from the Select method in the following ways:

This example selects cell A154 on Sheet1 and then scrolls through the worksheet to display the range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example selects cell A154 on Sheet1 and then scrolls through the worksheet to display the range.

Application.Goto Reference:=Worksheets("Sheet1").Range("A154"), _ 
 scroll:=True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Help(self, HelpFile, HelpContextID) -> None:
    '''Displays a Help topic.

#PARAMETERS:

Name Required/Optional Data type Description

HelpFile Optional Variant The name of the online Help file that you want to display. If this argument isn't specified, Microsoft Excel Help is used.

HelpContextID Optional Variant Specifies the context ID number for the Help topic. If this argument isn't specified, the Help Topics dialog box is displayed.
    '''

  def InchesToPoints(self, Inches) -> float:
    '''Converts a measurement from inches to points.

#PARAMETERS:

Name Required/Optional Data type Description

Inches Required Double Specifies the inch value to be converted to points.

#RETURN-VALUE: Double

#EXAMPLE:

This example sets the left margin of Sheet1 to 2.5 inches.

Worksheets("Sheet1").PageSetup.LeftMargin = _ 
 Application.InchesToPoints(2.5)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def InputBox(self, Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type) -> VBA_Variant:
    '''Displays a dialog box for user input. Returns the information entered in the dialog box.

#PARAMETERS:

Name Required/Optional Data type Description

Prompt Required String The message to be displayed in the dialog box. This can be a string, a number, a date, or a Boolean value (Microsoft Excel automatically coerces the value to a String before it is displayed). Maximum length is 255 characters, otherwise there is no prompt, and Application's method immediately returns Error 2015.

Title Optional Variant The title for the input box. If this argument is omitted, the default title is Input.

Default Optional Variant Specifies a value that will appear in the text box when the dialog box is initially displayed. If this argument is omitted, the text box is left empty. This value can be a Range object.

Left Optional Variant Specifies an x position for the dialog box in relation to the upper-left corner of the screen, in points.

Top Optional Variant Specifies a y position for the dialog box in relation to the upper-left corner of the screen, in points.

HelpFile Optional Variant The name of the Help file for this input box. If the HelpFile and HelpContextID arguments are present, a Help button will appear in the dialog box.

HelpContextID Optional Variant The context ID number of the Help topic in HelpFile.

Type Optional Variant Specifies the return data type. If this argument is omitted, the dialog box returns text.

#RETURN-VALUE: Variant

#REMARKS:

The following table lists the values that can be passed in the Type argument. Can be one or a sum of the values. For example, for an input box that can accept both text and numbers, set Type to 1 + 2.

Use InputBox to display a simple dialog box so that you can enter information to be used in a macro. The dialog box has an OK button and a Cancel button. If you select the OK button, InputBox returns the value entered in the dialog box. If you select the Cancel button, InputBox returns False.

If Type is 0, InputBox returns the formula in the form of text; for example, =2*PI()/360. If there are any references in the formula, they are returned as A1-style references. (Use ConvertFormula to convert between reference styles.)

If Type is 8, InputBox returns a Range object. You must use the Set statement to assign the result to a Range object, as shown in the following example.

If you don't use the Set statement, the variable is set to the value in the range, rather than the Range object itself.

If you use the InputBox method to ask the user for a formula, you must use the FormulaLocal property to assign the formula to a Range object. The input formula will be in the user's language.

The InputBox method differs from the InputBox function in that it allows selective validation of the user's input, and it can be used with Excel objects, error values, and formulas. Notice that Application.InputBox calls the InputBox method; InputBox with no object qualifier calls the InputBox function.

This example prompts the user for a number.

This example prompts the user to select a cell on Sheet1. The example uses the Type argument to ensure that the return value is a valid cell reference (a Range object).

This example uses an InputBox for the user to select a range to pass to the user-defined function MyFunction, which multiplies three values in a range together and returns the result.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Set myRange = Application.InputBox(prompt := "Sample", type := 8)

This example prompts the user for a number.

myNum = Application.InputBox("Enter a number")

This example prompts the user to select a cell on Sheet1. The example uses the Type argument to ensure that the return value is a valid cell reference (a Range object).

Worksheets("Sheet1").Activate 
Set myCell = Application.InputBox( _ 
    prompt:="Select a cell", Type:=8)

This example uses an InputBox for the user to select a range to pass to the user-defined function MyFunction, which multiplies three values in a range together and returns the result.

Sub Cbm_Value_Select()
   'Set up the variables.
   Dim rng As Range
   
   'Use the InputBox dialog to set the range for MyFunction, with some simple error handling.
   Set rng = Application.InputBox("Range:", Type:=8)
   If rng.Cells.Count <> 3 Then
     MsgBox "Length, width and height are needed -" & _
         vbLf & "please select three cells!"
      Exit Sub
   End If
   
   'Call MyFunction by value using the active cell.
   ActiveCell.Value = MyFunction(rng)
End Sub

Function MyFunction(rng As Range) As Double
   MyFunction = rng(1) * rng(2) * rng(3)
End Function

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Intersect(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> Range:
    '''Returns a Range object that represents the rectangular intersection of two or more ranges. If one or more ranges from a different worksheet are specified, an error is returned.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range The intersecting ranges. At least two Range objects must be specified.

Arg2 Required Range The intersecting ranges. At least two Range objects must be specified.

Arg3–Arg30 Optional Variant An intersecting range.

#RETURN-VALUE: Range

#EXAMPLE:

The following example selects the intersection of two named ranges, rg1 and rg2, on Sheet1. If the ranges don't intersect, the example displays a message.

Worksheets("Sheet1").Activate 
Set isect = Application.Intersect(Range("rg1"), Range("rg2")) 
If isect Is Nothing Then 
 MsgBox "Ranges don't intersect" 
Else 
 isect.Select 
End If

The following example compares the Worksheet.Range property, the Application.Union method, and the Intersect method.

Range("A1:A10").Select                            'Selects cells A1 to A10.
Range(Range("A1"), Range("A10")).Select           'Selects cells A1 to A10.
Range("A1, A10").Select                           'Selects cells A1 and A10.
Union(Range("A1"), Range("A10")).Select           'Selects cells A1 and A10.
Range("A1:A5 A5:A10").Select                      'Selects cell A5.
Intersect(Range("A1:A5"), Range("A5:A10")).Select 'Selects cell A5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MacroOptions(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile, ArgumentDescriptions) -> None:
    '''Corresponds to options in the Macro Options dialog box. You can also use this method to display a user-defined function (UDF) in a built-in or new category within the Insert Function dialog box.

#PARAMETERS:

Name Required/Optional Data type Description

Macro Optional Variant The macro name or the name of a user-defined function (UDF).

Description Optional Variant The macro description.

HasMenu Optional Variant This argument is ignored.

MenuText Optional Variant This argument is ignored.

HasShortcutKey Optional Variant True to assign a shortcut key to the macro (ShortcutKey must also be specified). If this argument is False, no shortcut key is assigned to the macro. If the macro already has a shortcut key, setting this argument to False removes the shortcut key. The default value is False.

ShortcutKey Optional Variant Required if HasShortcutKey is True; ignored otherwise. The shortcut key.

Category Optional Variant An integer that specifies an existing macro function category (Financial, Date & Time, or User Defined, for example). See the Remarks section to determine the integers that are mapped to the built-in categories.You can also specify a string for a custom category. If you provide a string, it is treated as the category name that is displayed in the Insert Function dialog box. If the category name has never been used, a new category is defined with that name. If you use a category name that is the same as a built-in name (see list in Remarks section), Excel maps the user-defined function to that built-in category.

StatusBar Optional Variant The status bar text for the macro.

HelpContextID Optional Variant An integer that specifies the context ID for the Help topic assigned to the macro.

HelpFile Optional Variant The name of the Help file that contains the Help topic defined by  HelpContextId.

ArgumentDescriptions Optional Array A one-dimensional array that contains the descriptions for the arguments to a UDF that are displayed in the Function Arguments dialog box.

#REMARKS:

The following table lists which integers are mapped to the built-in categories that can be used in the Category parameter.

This example adds a user-defined macro called TestMacro to a custom category named My Custom Category. After you run this example, you should see My Custom Category, which contains the TestMacro user-defined function, in the Or select a category drop-down list in the Insert Function dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a user-defined macro called TestMacro to a custom category named My Custom Category. After you run this example, you should see My Custom Category, which contains the TestMacro user-defined function, in the Or select a category drop-down list in the Insert Function dialog box.

Function TestMacro() 
    MsgBox ActiveWorkbook.Name 
End Function 
 
Sub AddUDFToCustomCategory() 
    Application.MacroOptions Macro:="TestMacro", Category:="My Custom Category" 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MailLogoff(self) -> None:
    '''Closes a MAPI mail session established by Microsoft Excel.

#REMARKS:

You cannot use this method to close or log off from Microsoft Mail.

This example closes the established mail session if there is one.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example closes the established mail session if there is one.

If Not IsNull(Application.MailSession) Then Application.MailLogoff

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MailLogon(self, Name, Password, DownloadNewMail) -> None:
    '''Logs on to MAPI Mail or Microsoft Exchange and establishes a mail session. If Microsoft Mail isn't already running, you must use this method to establish a mail session before mail or document routing functions can be used.

#PARAMETERS:

Name Required/Optional Data type Description

Name Optional Variant The mail account name or Microsoft Exchange profile name. If this argument is omitted, the default mail account name is used.

Password Optional Variant The mail account password. This argument is ignored in Microsoft Exchange.

DownloadNewMail Optional Variant True to download new mail immediately.

#REMARKS:

Microsoft Excel logs off from any mail sessions it previously established before attempting to establish the new session.

To piggyback on the system default mail session, omit both the name and password parameters.

This example logs on to the default mail account.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example logs on to the default mail account.

If IsNull(Application.MailSession) Then 
 Application.MailLogon 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NextLetter(self) -> Workbook:
    '''You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.

#RETURN-VALUE: Workbook
    '''

  def OnKey(self, Key, Procedure) -> None:
    '''Runs a specified procedure when a particular key or key combination is pressed.

#PARAMETERS:

Name Required/Optional Data type Description

Key Required String A string indicating the key to be pressed.

Procedure Optional Variant A string indicating the name of the procedure to be run. If Procedure is "" (empty text), nothing happens when Key is pressed. This form of OnKey changes the normal result of keystrokes in Microsoft Excel.If Procedure is omitted, Key reverts to its normal result in Microsoft Excel, and any special key assignments made with previous OnKey methods are cleared.

#REMARKS:

The Key argument can specify any single key combined with Alt, Ctrl, or Shift, or any combination of these keys. Each key is represented by one or more characters, such as a for the character a, or {ENTER} for the Enter key.

To specify characters that aren't displayed when you press the corresponding key (for example: Enter or Tab), use the codes listed in the following table. Each code in the table represents one key on the keyboard.

You can also specify keys combined with Shift and/or Ctrl and/or Alt and/or Command. To specify a key combined with another key or keys, use the following table.

To assign a procedure to one of the special characters (+, ^, %, and so on), enclose the character in braces. For details, see the example.

This example assigns InsertProc to the key sequence Ctrl+Plus Sign, and assigns SpecialPrintProc to the key sequence Shift+Ctrl+Right Arrow.

This example returns Shift+Ctrl+Right Arrow to its normal meaning.

This example disables the Shift+Ctrl+Right Arrow key sequence.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example assigns InsertProc to the key sequence Ctrl+Plus Sign, and assigns SpecialPrintProc to the key sequence Shift+Ctrl+Right Arrow.

Application.OnKey "^{+}", "InsertProc" 
Application.OnKey "+^{RIGHT}", "SpecialPrintProc"

This example returns Shift+Ctrl+Right Arrow to its normal meaning.

Application.OnKey "+^{RIGHT}"

This example disables the Shift+Ctrl+Right Arrow key sequence.

Application.OnKey "+^{RIGHT}", ""

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OnRepeat(self, Text, Procedure) -> None:
    '''Sets the Repeat item and the name of the procedure that will run if you choose the Repeat command after running the procedure that sets this property.

#PARAMETERS:

Name Required/Optional Data type Description

Text Required String The text that appears with the Repeat command.

Procedure Required String The name of the procedure that will be run when you choose the Repeat command.

#REMARKS:

If a procedure doesn't use the OnRepeat method, the Repeat command repeats the procedure that was run most recently.

The procedure must use the OnRepeat and OnUndo methods last to prevent the repeat and undo procedures from being overwritten by subsequent actions in the procedure.

This example sets the repeat and undo procedures.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the repeat and undo procedures.

Application.OnRepeat "Repeat VB Procedure", _ 
 "Book1.xls!My_Repeat_Sub" 
Application.OnUndo "Undo VB Procedure", _ 
 "Book1.xls!My_Undo_Sub"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OnTime(self, EarliestTime, Procedure, LatestTime, Schedule) -> None:
    '''Schedules a procedure to be run at a specified time in the future (either at a specific time of day or after a specific amount of time has passed).

#PARAMETERS:

Name Required/Optional Data type Description

EarliestTime Required Variant The time when you want this procedure to be run.

Procedure Required String The name of the procedure to be run.

LatestTime Optional Variant The latest time at which the procedure can be run. For example, if  LatestTime is set to EarliestTime + 30 and Microsoft Excel is not in Ready, Copy, Cut, or Find mode at EarliestTime because another procedure is running, Excel will wait 30 seconds for the first procedure to complete. If Excel is not in Ready mode within 30 seconds, the procedure won't be run. If this argument is omitted, Excel will wait until the procedure can be run.

Schedule Optional Variant True to schedule a new OnTime procedure. False to clear a previously set procedure. The default value is True.

#REMARKS:

Use Now + TimeValue(time) to schedule something to be run when a specific amount of time (counting from now) has elapsed. Use TimeValue(time) to schedule something to be run a specific time.

The value of EarliestTime is rounded to the closest second.

Set Schedule to False to clear a procedure previously set with the same Procedure and EarliestTime values.

Procedure must take no arguments and cannot be declared in a custom class or form.

This example runs my_Procedure 15 seconds from now.

This example runs my_Procedure at 5 P.M.

This example cancels the OnTime setting from the previous example.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example runs my_Procedure 15 seconds from now.

Application.OnTime Now + TimeValue("00:00:15"), "my_Procedure"

This example runs my_Procedure at 5 P.M.

Application.OnTime TimeValue("17:00:00"), "my_Procedure"

This example cancels the OnTime setting from the previous example.

Application.OnTime EarliestTime:=TimeValue("17:00:00"), _ 
 Procedure:="my_Procedure", Schedule:=False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OnUndo(self, Text, Procedure) -> None:
    '''Sets the text of the Undo command and the name of the procedure that's run if you choose the Undo command after running the procedure that sets this property.

#PARAMETERS:

Name Required/Optional Data type Description

Text Required String The text that appears with the Undo command.

Procedure Required String The name of the procedure that's run when you choose the Undo command.

#REMARKS:

If a procedure doesn't use the OnUndo method, the Undo command is disabled.

The procedure must use the OnRepeat and OnUndo methods last to prevent the repeat and undo procedures from being overwritten by subsequent actions in the procedure.

This example sets the repeat and undo procedures.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the repeat and undo procedures.

Application.OnRepeat "Repeat VB Procedure", _ 
 "Book1.xls!My_Repeat_Sub" 
Application.OnUndo "Undo VB Procedure", _ 
 "Book1.xls!My_Undo_Sub"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Quit(self) -> None:
    '''Quits Microsoft Excel.

#REMARKS:

If unsaved workbooks are open when you use this method, Excel displays a dialog box asking whether you want to save the changes. You can prevent this by saving all workbooks before using the Quit method or by setting the DisplayAlerts property to False. When this property is False, Excel doesn't display the dialog box when you quit with unsaved workbooks; it quits without saving them.

If you set the Saved property for a workbook to True without saving the workbook to the disk, Excel will quit without asking you to save the workbook.

This example saves all open workbooks and then quits Excel.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example saves all open workbooks and then quits Excel.

For Each w In Application.Workbooks 
 w.Save 
Next w 
Application.Quit

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Range(self, Cell1, Cell2):  pass

  def RecordMacro(self, BasicCode, XlmCode) -> None:
    '''Records code if the macro recorder is on.

#PARAMETERS:

Name Required/Optional Data type Description

BasicCode Optional Variant A string that specifies the Visual Basic code that will be recorded if the macro recorder is recording into a Visual Basic module. The string will be recorded on one line. If the string contains a carriage return (ASCII character 10, or Chr$(10) in code), it will be recorded on more than one line.

XlmCode Optional Variant This argument is ignored.

#REMARKS:

The RecordMacro method cannot record into the active module (the module in which the RecordMacro method exists).

If BasicCode is omitted and the application is recording into Visual Basic, Microsoft Excel will record a suitable Application.Run statement.

To prevent recording (for example, if the user cancels your dialog box), call this function with two empty strings.

This example records Visual Basic code.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example records Visual Basic code.

Application.RecordMacro BasicCode:="Application.Run ""MySub"" "

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RegisterXLL(self, Filename) -> bool:
    '''Loads an XLL code resource and automatically registers the functions and commands contained in the resource.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String Specifies the name of the XLL to be loaded.

#RETURN-VALUE: Boolean

#REMARKS:

This method returns True if the code resource is successfully loaded; otherwise, the method returns False.

This example loads an XLL file and registers the functions and commands in the file.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example loads an XLL file and registers the functions and commands in the file.

Application.RegisterXLL "XLMAPI.XLL"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Repeat(self) -> None:
    '''Repeats the last user-interface action.

#REMARKS:

This method repeats only the last action taken by the user before running the macro, and it must be the first line in the macro. It cannot be used to repeat Visual Basic commands.

This example repeats the last user-interface command. The example must be the first line in a macro.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example repeats the last user-interface command. The example must be the first line in a macro.

Application.Repeat

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ResetTipWizard(self):  pass

  def Run(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> VBA_Variant:
    '''Runs a macro or calls a function. This can be used to run a macro written in Visual Basic or the Microsoft Excel macro language, or to run a function in a DLL or XLL.

#PARAMETERS:

Name Required/Optional Data type Description

Macro Optional Variant The macro to run.This can be either a string with the macro name, a Range object indicating where the function is, or a register ID for a registered DLL (XLL) function.If a string is used, the string will be evaluated in the context of the active sheet.

Arg1–Arg30 Optional Variant An argument that should be passed to the function.

#RETURN-VALUE: Variant

#REMARKS:

You cannot use named arguments with this method. Arguments must be passed by position.

The Run method returns whatever the called macro returns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Save(self, Filename):  pass

  def SaveWorkspace(self, Filename):  pass

  def SendKeys(self, Keys, Wait) -> None:
    '''Sends keystrokes to the active application.

#PARAMETERS:

Name Required/Optional Data type Description

Keys Required Variant The key or key combination that you want to send to the application, as text.

Wait Optional Variant True to have Microsoft Excel wait for the keys to be processed before returning control to the macro. False (or omitted) to continue running the macro without waiting for the keys to be processed.

#REMARKS:

This method places keystrokes in a key buffer. In some cases, you must call this method before you call the method that will use the keystrokes. For example, to send a password to a dialog box, you must call the SendKeys method before you display the dialog box.

The Keys argument can specify any single key or any key combined with Alt, Ctrl, or Shift (or any combination of those keys). Each key is represented by one or more characters, such as "a" for the character a, or "{ENTER}" for the Enter key.

To specify characters that aren't displayed when you press the corresponding key (for example, Enter or Tab), use the codes listed in the following table. Each code in the table represents one key on the keyboard.

You can also specify keys combined with Shift and/or Ctrl and/or Alt. To specify a key combined with another key or keys, use the following table.

The following example creates a new workbook.

The following example displays the Name Manager.

The following example enters the value 1234 into the Active Cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example creates a new workbook.

Application.SendKeys("^n")

The following example displays the Name Manager.

Application.SendKeys("%mn")

The following example enters the value 1234 into the Active Cell.

Application.SendKeys ("1234{Enter}")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SetDefaultChart(self, FormatName, Gallery):  pass

  def SharePointVersion(self, bstrUrl) -> int:
    '''Returns the version number of SharePoint Foundation instances running at the site for the specified URL.

#PARAMETERS:

Name Required/Optional Data type Description

bstrUrl Required String The URL of the site to check.

#RETURN-VALUE: Long
    '''

  def ShortcutMenus(self, Index):  pass

  def Support(self, Object, ID, arg):  pass

  def Undo(self) -> None:
    '''Cancels the last user-interface action.

#REMARKS:

This method undoes only the last action taken by the user before running the macro, and it must be the first line in the macro. It cannot be used to undo Visual Basic commands.

This example cancels the last user-interface action. The example must be the first line in a macro.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example cancels the last user-interface action. The example must be the first line in a macro.

Application.Undo

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Union(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> Range:
    '''Returns the union of two or more ranges.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range At least two Range objects must be specified.

Arg2 Required Range At least two Range objects must be specified.

Arg3 – Arg30 Optional Variant A range.

#RETURN-VALUE: Range

#EXAMPLE:

This example fills the union of two named ranges, Range1 and Range2, with the formula =RAND().

Worksheets("Sheet1").Activate 
Set bigRange = Application.Union(Range("Range1"), Range("Range2")) 
bigRange.Formula = "=RAND()"

This example compares the Worksheet.Range property, Application.Union method, and Application.Intersect method.

Range("A1:A10").Select                            'Selects cells A1 to A10.
Range(Range("A1"), Range("A10")).Select           'Selects cells A1 to A10.
Range("A1, A10").Select                          'Selects cells A1 and A10.
Union(Range("A1"), Range("A10")).Select           'Selects cells A1 and A10.
Range("A1:A5 A5:A10").Select                     'Selects cell A5.
Intersect(Range("A1:A5"), Range("A5:A10")).Select 'Selects cell A5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Volatile(self, Volatile) -> None:
    '''Marks a user-defined function as volatile. A volatile function must be recalculated whenever calculation occurs in any cells on the worksheet. A nonvolatile function is recalculated only when the input variables change. This method has no effect if it's not inside a user-defined function used to calculate a worksheet cell.

#PARAMETERS:

Name Required/Optional Data type Description

Volatile Optional Variant True to mark the function as volatile. False to mark the function as nonvolatile. The default value is True.

#EXAMPLE:

This example marks the user-defined function My_Func as volatile. The function will be recalculated when any cell in any workbook in the application window changes value. Recalculation of the function is not restricted to changes or calculation cycles on the worksheet for which this function applies. Therefore, use it moderately to avoid calculation lag.

Function My_Func() 
 Application.Volatile 
 ' 
 ' Remainder of the function 
 ' 
End Function

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Wait(self, Time) -> bool:
    '''Pauses a running macro until a specified time. Returns True if the specified time has arrived.

#PARAMETERS:

Name Required/Optional Data type Description

Time Required Variant The time at which you want the macro to resume, in Microsoft Excel date format.

#RETURN-VALUE: Boolean

#REMARKS:

The Wait method suspends all Microsoft Excel activity and may prevent you from performing other operations on your computer while Wait is in effect. However, background processes such as printing and recalculation continue.

This example pauses a running macro until 6:23 P.M. today.

This example pauses a running macro for approximately 10 seconds.

This example displays a message indicating whether 10 seconds have passed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example pauses a running macro until 6:23 P.M. today.

Application.Wait "18:23:00"

This example pauses a running macro for approximately 10 seconds.

newHour = Hour(Now()) 
newMinute = Minute(Now()) 
newSecond = Second(Now()) + 10 
waitTime = TimeSerial(newHour, newMinute, newSecond) 
Application.Wait waitTime

This example displays a message indicating whether 10 seconds have passed.

If Application.Wait(Now + TimeValue("0:00:10")) Then 
 MsgBox "Time expired" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Evaluate(self, Name):  pass

  def _FindFile(self):  pass

  def _MacroOptions(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile):  pass

  def _Run2(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def _WSFunction(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def _Wait(self, Time):  pass

  def __call__(self):  pass

  def __getattr__(self, attr):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #unknown:
    # ActiveDialog:  <class 'NoneType'>
    # OnCalculate:  <class 'NoneType'>
    # OnData:  <class 'NoneType'>
    # OnDoubleClick:  <class 'NoneType'>
    # OnEntry:  <class 'NoneType'>
    # OnSheetActivate:  <class 'NoneType'>
    # OnSheetDeactivate:  <class 'NoneType'>

  #getattr Exception:
    # AnswerWizard:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Dummy101:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Dummy22:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # Dummy23:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # FileFind:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # FileSearch:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # FormatStaleValues:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # Hinstance:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147418113), None)
    # SensitivityLabelPolicy:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147220726), None)
    # ThisCell:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ThisWorkbook:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # VBE:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不信任到 Visual Basic Project 的程序连接\n', 'xlmain11.chm', 0, -2146827284), None)



class Range:
  '''Represents a cell, a row, a column, a selection of cells containing one or more contiguous blocks of cells, or a 3D range.

#REMARKS:

The default member of Range forwards calls without parameters to the Value property and calls with parameters to the Item member. Accordingly, someRange = someOtherRange is equivalent to someRange.Value = someOtherRange.Value, someRange(1) to someRange.Item(1) and someRange(1,1) to someRange.Item(1,1).

The following properties and methods for returning a Range object are described in the Example section:

Use Range (arg), where arg names the range, to return a Range object that represents a single cell or a range of cells. The following example places the value of cell A1 in cell A5.

The following example fills the range A1:H8 with random numbers by setting the formula for each cell in the range. When it's used without an object qualifier (an object to the left of the period), the Range property returns a range on the active sheet. If the active sheet isn't a worksheet, the method fails.

Use the Activate method of the Worksheet object to activate a worksheet before you use the Range property without an explicit object qualifier.

The following example clears the contents of the range named Criteria.

Use Cells on a worksheet to obtain a range consisting all single cells on the worksheet. You can access single cells via Item(row, column), where row is the row index and column is the column index.
Item can be omitted since the call is forwarded to it by the default member of Range.
The following example sets the value of cell A1 to 24 and of cell B1 to 42 on the first sheet of the active workbook.

The following example sets the formula for cell A2.

Although you can also use Range("A1") to return cell A1, there may be times when the Cells property is more convenient because you can use a variable for the row or column. The following example creates column and row headings on Sheet1. Be aware that after the worksheet has been activated, the Cells property can be used without an explicit sheet declaration (it returns a cell on the active sheet).

Use_expression_.Cells, where expression is an expression that returns a Range object, to obtain a range with the same address consisting of single cells.
On such a range, you access single cells via Item(row, column), where are relative to the upper-left corner of the first area of the range.
Item can be omitted since the call is forwarded to it by the default member of Range.
The following example sets the formula for cell C5 and D5 of the first sheet of the active workbook.

Use Range (cell1, cell2), where cell1 and cell2 are Range objects that specify the start and end cells, to return a Range object. The following example sets the border line style for cells A1:J10.

Use Rows on a worksheet to obtain a range consisting all rows on the worksheet. You can access single rows via Item(row), where row is the row index.
Item can be omitted since the call is forwarded to it by the default member of Range.

The following example deletes row 5 and 10 of the first sheet of the active workbook.

Use Columns on a worksheet to obtain a range consisting all columns on the worksheet. You can access single columns via Item(row) [sic], where row is the column index given as a number or as an A1-style column address.
Item can be omitted since the call is forwarded to it by the default member of Range.

The following example deletes column "B", "C", "E", and "J" of the first sheet of the active workbook.

Use_expression_.Rows, where expression is an expression that returns a Range object, to obtain a range consisting of the rows in the first area of the range.
You can access single rows via Item(row), where row is the relative row index from the top of the first area of the range.
Item can be omitted since the call is forwarded to it by the default member of Range.

The following example deletes the ranges C8:D8 and C6:D6 of the first sheet of the active workbook.

Use_expression_.Columns, where expression is an expression that returns a Range object, to obtain a range consisting of the columns in the first area of the range.
You can access single columns via Item(row) [sic], where row is the relative column index from the left of the first area of the range given as a number or as an A1-style column address.
Item can be omitted since the call is forwarded to it by the default member of Range.

The following example deletes the ranges L2:L10, G2:G10, F2:F10 and D2:D10 of the first sheet of the active workbook.

Use Offset (row, column), where row and column are the row and column offsets, to return a range at a specified offset to another range. The following example selects the cell three rows down from and one column to the right of the cell in the upper-left corner of the current selection. You cannot select a cell that is not on the active sheet, so you must first activate the worksheet.

Use Union (range1, range2, ...) to return multiple-area ranges—that is, ranges composed of two or more contiguous blocks of cells. The following example creates an object defined as the union of ranges A1:B2 and C3:D4, and then selects the defined range.

If you work with selections that contain more than one area, the Areas property is useful. It divides a multiple-area selection into individual Range objects and then returns the objects as a collection. Use the Count property on the returned collection to verify a selection that contains more than one area, as shown in the following example.

This example uses the AdvancedFilter method of the Range object to create a list of the unique values, and the number of times those unique values occur, in the range of column A.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use Range (arg), where arg names the range, to return a Range object that represents a single cell or a range of cells. The following example places the value of cell A1 in cell A5.

Worksheets("Sheet1").Range("A5").Value = _ 
    Worksheets("Sheet1").Range("A1").Value

The following example fills the range A1:H8 with random numbers by setting the formula for each cell in the range. When it's used without an object qualifier (an object to the left of the period), the Range property returns a range on the active sheet. If the active sheet isn't a worksheet, the method fails.

Use the Activate method of the Worksheet object to activate a worksheet before you use the Range property without an explicit object qualifier.

Worksheets("Sheet1").Activate 
Range("A1:H8").Formula = "=Rand()"    'Range is on the active sheet

The following example clears the contents of the range named Criteria.

Worksheets(1).Range("Criteria").ClearContents

Use Cells on a worksheet to obtain a range consisting all single cells on the worksheet. You can access single cells via Item(row, column), where row is the row index and column is the column index.
Item can be omitted since the call is forwarded to it by the default member of Range.
The following example sets the value of cell A1 to 24 and of cell B1 to 42 on the first sheet of the active workbook.

Worksheets(1).Cells(1, 1).Value = 24
Worksheets(1).Cells.Item(1, 2).Value = 42

The following example sets the formula for cell A2.

ActiveSheet.Cells(2, 1).Formula = "=Sum(B1:B5)"

Although you can also use Range("A1") to return cell A1, there may be times when the Cells property is more convenient because you can use a variable for the row or column. The following example creates column and row headings on Sheet1. Be aware that after the worksheet has been activated, the Cells property can be used without an explicit sheet declaration (it returns a cell on the active sheet).

Sub SetUpTable() 
Worksheets("Sheet1").Activate 
For TheYear = 1 To 5 
    Cells(1, TheYear + 1).Value = 1990 + TheYear 
Next TheYear 
For TheQuarter = 1 To 4 
    Cells(TheQuarter + 1, 1).Value = "Q" & TheQuarter 
Next TheQuarter 
End Sub

Use_expression_.Cells, where expression is an expression that returns a Range object, to obtain a range with the same address consisting of single cells.
On such a range, you access single cells via Item(row, column), where are relative to the upper-left corner of the first area of the range.
Item can be omitted since the call is forwarded to it by the default member of Range.
The following example sets the formula for cell C5 and D5 of the first sheet of the active workbook.

Worksheets(1).Range("C5:C10").Cells(1, 1).Formula = "=Rand()"
Worksheets(1).Range("C5:C10").Cells.Item(1, 2).Formula = "=Rand()"

Use Range (cell1, cell2), where cell1 and cell2 are Range objects that specify the start and end cells, to return a Range object. The following example sets the border line style for cells A1:J10.

With Worksheets(1) 
    .Range(.Cells(1, 1), _ 
        .Cells(10, 10)).Borders.LineStyle = xlThick 
End With

Use Rows on a worksheet to obtain a range consisting all rows on the worksheet. You can access single rows via Item(row), where row is the row index.
Item can be omitted since the call is forwarded to it by the default member of Range.

The following example deletes row 5 and 10 of the first sheet of the active workbook.

Worksheets(1).Rows(10).Delete
Worksheets(1).Rows.Item(5).Delete

Use Columns on a worksheet to obtain a range consisting all columns on the worksheet. You can access single columns via Item(row) [sic], where row is the column index given as a number or as an A1-style column address.
Item can be omitted since the call is forwarded to it by the default member of Range.

The following example deletes column "B", "C", "E", and "J" of the first sheet of the active workbook.

Worksheets(1).Columns(10).Delete
Worksheets(1).Columns.Item(5).Delete
Worksheets(1).Columns("C").Delete
Worksheets(1).Columns.Item("B").Delete

Use_expression_.Rows, where expression is an expression that returns a Range object, to obtain a range consisting of the rows in the first area of the range.
You can access single rows via Item(row), where row is the relative row index from the top of the first area of the range.
Item can be omitted since the call is forwarded to it by the default member of Range.

The following example deletes the ranges C8:D8 and C6:D6 of the first sheet of the active workbook.

Worksheets(1).Range("C5:D10").Rows(4).Delete
Worksheets(1).Range("C5:D10").Rows.Item(2).Delete

Use_expression_.Columns, where expression is an expression that returns a Range object, to obtain a range consisting of the columns in the first area of the range.
You can access single columns via Item(row) [sic], where row is the relative column index from the left of the first area of the range given as a number or as an A1-style column address.
Item can be omitted since the call is forwarded to it by the default member of Range.

The following example deletes the ranges L2:L10, G2:G10, F2:F10 and D2:D10 of the first sheet of the active workbook.

Worksheets(1).Range("C5:Z10").Columns(10).Delete
Worksheets(1).Range("C5:Z10").Columns.Item(5).Delete
Worksheets(1).Range("C5:Z10").Columns("D").Delete
Worksheets(1).Range("C5:Z10").Columns.Item("B").Delete

Use Offset (row, column), where row and column are the row and column offsets, to return a range at a specified offset to another range. The following example selects the cell three rows down from and one column to the right of the cell in the upper-left corner of the current selection. You cannot select a cell that is not on the active sheet, so you must first activate the worksheet.

Worksheets("Sheet1").Activate 
  'Can't select unless the sheet is active 
Selection.Offset(3, 1).Range("A1").Select

Use Union (range1, range2, ...) to return multiple-area ranges—that is, ranges composed of two or more contiguous blocks of cells. The following example creates an object defined as the union of ranges A1:B2 and C3:D4, and then selects the defined range.

Dim r1 As Range, r2 As Range, myMultiAreaRange As Range 
Worksheets("sheet1").Activate 
Set r1 = Range("A1:B2") 
Set r2 = Range("C3:D4") 
Set myMultiAreaRange = Union(r1, r2) 
myMultiAreaRange.Select

If you work with selections that contain more than one area, the Areas property is useful. It divides a multiple-area selection into individual Range objects and then returns the objects as a collection. Use the Count property on the returned collection to verify a selection that contains more than one area, as shown in the following example.

Sub NoMultiAreaSelection() 
    NumberOfSelectedAreas = Selection.Areas.Count 
    If NumberOfSelectedAreas > 1 Then 
        MsgBox "You cannot carry out this command " & _ 
            "on multi-area selections" 
    End If 
End Sub

This example uses the AdvancedFilter method of the Range object to create a list of the unique values, and the number of times those unique values occur, in the range of column A.

Sub Create_Unique_List_Count()
    'Excel workbook, the source and target worksheets, and the source and target ranges.
    Dim wbBook As Workbook
    Dim wsSource As Worksheet
    Dim wsTarget As Worksheet
    Dim rnSource As Range
    Dim rnTarget As Range
    Dim rnUnique As Range
    'Variant to hold the unique data
    Dim vaUnique As Variant
    'Number of unique values in the data
    Dim lnCount As Long
    
    'Initialize the Excel objects
    Set wbBook = ThisWorkbook
    With wbBook
        Set wsSource = .Worksheets("Sheet1")
        Set wsTarget = .Worksheets("Sheet2")
    End With
    
    'On the source worksheet, set the range to the data stored in column A
    With wsSource
        Set rnSource = .Range(.Range("A1"), .Range("A100").End(xlDown))
    End With
    
    'On the target worksheet, set the range as column A.
    Set rnTarget = wsTarget.Range("A1")
    
    'Use AdvancedFilter to copy the data from the source to the target,
    'while filtering for duplicate values.
    rnSource.AdvancedFilter Action:=xlFilterCopy, _
                            CopyToRange:=rnTarget, _
                            Unique:=True
                            
    'On the target worksheet, set the unique range on Column A, excluding the first cell
    '(which will contain the "List" header for the column).
    With wsTarget
        Set rnUnique = .Range(.Range("A2"), .Range("A100").End(xlUp))
    End With
    
    'Assign all the values of the Unique range into the Unique variant.
    vaUnique = rnUnique.Value
    
    'Count the number of occurrences of every unique value in the source data,
    'and list it next to its relevant value.
    For lnCount = 1 To UBound(vaUnique)
        rnUnique(lnCount, 1).Offset(0, 1).Value = _
            Application.Evaluate("COUNTIF(" & _
            rnSource.Address(External:=True) & _
            ",""" & rnUnique(lnCount, 1).Text & """)")
    Next lnCount
    
    'Label the column of occurrences with "Occurrences"
    With rnTarget.Offset(0, 1)
        .Value = "Occurrences"
        .Font.Bold = True
    End With

End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.AddIndent: VBA_Variant
    '''Returns or sets a Variant value that indicates if text is automatically indented when the text alignment in a cell is set to equal distribution (either horizontally or vertically).

#SYNTAX:

expression.AddIndent

expression A variable that represents a Range object.

Set the value of this property to True to automatically indent text when the text alignment in the cell is set, either horizontally or vertically, to equal distribution.

To set text alignment to equal distribution, you can set the VerticalAlignment property to xlVAlignDistributed when the value of the Orientation property is xlVertical, and you can set the HorizontalAlignment property to xlHAlignDistributed when the value of the Orientation property is xlHorizontal.

This example sets the horizontal alignment for text in cell A1 on Sheet1 to equal distribution and then indents the text.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Set the value of this property to True to automatically indent text when the text alignment in the cell is set, either horizontally or vertically, to equal distribution.

To set text alignment to equal distribution, you can set the VerticalAlignment property to xlVAlignDistributed when the value of the Orientation property is xlVertical, and you can set the HorizontalAlignment property to xlHAlignDistributed when the value of the Orientation property is xlHorizontal.

This example sets the horizontal alignment for text in cell A1 on Sheet1 to equal distribution and then indents the text.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the horizontal alignment for text in cell A1 on Sheet1 to equal distribution and then indents the text.

With Worksheets("Sheet1").Range("A1") 
 .HorizontalAlignment = xlHAlignDistributed 
 .AddIndent = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Address: str
    '''Returns a String value that represents the range reference in the language of the macro.

#SYNTAX:

expression.Address (RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo)

expression A variable that represents a Range object.

If the reference contains more than one cell, RowAbsolute and ColumnAbsolute apply to all rows and columns.

The following example displays four different representations of the same cell address on Sheet1. The comments in the example are the addresses that will be displayed in the message boxes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the reference contains more than one cell, RowAbsolute and ColumnAbsolute apply to all rows and columns.

The following example displays four different representations of the same cell address on Sheet1. The comments in the example are the addresses that will be displayed in the message boxes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example displays four different representations of the same cell address on Sheet1. The comments in the example are the addresses that will be displayed in the message boxes.

Set mc = Worksheets("Sheet1").Cells(1, 1) 
MsgBox mc.Address() ' $A$1 
MsgBox mc.Address(RowAbsolute:=False) ' $A1 
MsgBox mc.Address(ReferenceStyle:=xlR1C1) ' R1C1 
MsgBox mc.Address(ReferenceStyle:=xlR1C1, _ 
 RowAbsolute:=False, _ 
 ColumnAbsolute:=False, _ 
 RelativeTo:=Worksheets(1).Cells(3, 3)) ' R[-2]C[-2]

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AddressLocal: str
    '''Returns the range reference for the specified range in the language of the user. Read-only String.

#SYNTAX:

expression.AddressLocal (RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo)

expression A variable that represents a Range object.

If the reference contains more than one cell, RowAbsolute and ColumnAbsolute apply to all rows and all columns, respectively.

Assume that this example was created by using U.S. English language support, and was then run by using German language support. The example displays the text shown in the comments.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the reference contains more than one cell, RowAbsolute and ColumnAbsolute apply to all rows and all columns, respectively.

Assume that this example was created by using U.S. English language support, and was then run by using German language support. The example displays the text shown in the comments.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Assume that this example was created by using U.S. English language support, and was then run by using German language support. The example displays the text shown in the comments.

Set mc = Worksheets(1).Cells(1, 1) 
MsgBox mc.AddressLocal() ' $A$1 
MsgBox mc.AddressLocal(RowAbsolute:=False) ' $A1 
MsgBox mc.AddressLocal(ReferenceStyle:=xlR1C1) ' Z1S1 
MsgBox mc.AddressLocal(ReferenceStyle:=xlR1C1, _ 
 RowAbsolute:=False, _ 
 ColumnAbsolute:=False, _ 
 RelativeTo:=Worksheets(1).Cells(3, 3)) ' Z(-2)S(-2)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowEdit: bool
    '''Returns a Boolean value that indicates if the range can be edited on a protected worksheet.

#SYNTAX:

expression.AllowEdit

expression A variable that represents a Range object.

In this example, Microsoft Excel notifies the user whether cell A1 can be edited on a protected worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel notifies the user whether cell A1 can be edited on a protected worksheet.

Sub UseAllowEdit() 
 
 Dim wksOne As Worksheet 
 
 Set wksOne = Application.ActiveSheet 
 
 ' Protect the worksheet 
 wksOne.Protect 
 
 ' Notify the user about editing cell A1. 
 If wksOne.Range("A1").AllowEdit = True Then 
 MsgBox "Cell A1 can be edited." 
 Else 
 Msgbox "Cell A1 cannot be edited." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Range object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Areas: Areas
    '''Returns an Areas collection that represents all the ranges in a multiple-area selection. Read-only.

#SYNTAX:

expression.Areas

expression A variable that represents a Range object.

For a single selection, the Areas property returns a collection that contains one object—the original Range object itself.

For a multiple-area selection, the Areas property returns a collection that contains one object for each selected area.

This example displays a message if the user tries to carry out a command when more than one area is selected. This example must be run from a worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

For a single selection, the Areas property returns a collection that contains one object—the original Range object itself.

For a multiple-area selection, the Areas property returns a collection that contains one object for each selected area.

This example displays a message if the user tries to carry out a command when more than one area is selected. This example must be run from a worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message if the user tries to carry out a command when more than one area is selected. This example must be run from a worksheet.

If Selection.Areas.Count > 1 Then 
 MsgBox "Cannot do this to a multi-area selection." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Borders: Borders
    '''Returns a Borders collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format).

#SYNTAX:

expression.Borders

expression A variable that represents a Range object.

This example sets the color of the bottom border of cell B2 on Sheet1 to a thin red border.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the color of the bottom border of cell B2 on Sheet1 to a thin red border.

Sub SetRangeBorder() 
 
 With Worksheets("Sheet1").Range("B2").Borders(xlEdgeBottom) 
 .LineStyle = xlContinuous 
 .Weight = xlThin 
 .ColorIndex = 3 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Cells: Range
    '''Returns a Range object that represents the cells in the specified range.

#SYNTAX:

expression.Cells

expression A variable that represents a Range object.

The return value is a Range consisting of single cells, which allows to use the version of the Item with two parameters and lets For Each loops iterate over single cells.

Because the default member of Range forwards calls with parameters to the Item property, you can specify the row and column index immediately after the Cells keyword instead of an explicit call to Item.

Using Cells without an object qualifier is equivalent to ActiveSheet.Cells.

This example sets the font style for cells B2:D6 on Sheet1 of the active workbook to italic.

This example scans a column of data named myRange. If a cell has the same value as the cell immediately preceding it, the example displays the address of the cell that contains the duplicate data.

This example demonstrates how Cells changes the behavior of the Item member.

This example demonstrates how Cells changes the enumeration behavior.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The return value is a Range consisting of single cells, which allows to use the version of the Item with two parameters and lets For Each loops iterate over single cells.

Because the default member of Range forwards calls with parameters to the Item property, you can specify the row and column index immediately after the Cells keyword instead of an explicit call to Item.

Using Cells without an object qualifier is equivalent to ActiveSheet.Cells.

This example sets the font style for cells B2:D6 on Sheet1 of the active workbook to italic.

This example scans a column of data named myRange. If a cell has the same value as the cell immediately preceding it, the example displays the address of the cell that contains the duplicate data.

This example demonstrates how Cells changes the behavior of the Item member.

This example demonstrates how Cells changes the enumeration behavior.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the font style for cells B2:D6 on Sheet1 of the active workbook to italic.

With Worksheets("Sheet1").Range("B2:Z100") 
   .Range(.Cells(1, 1), .Cells(5, 3)).Font.Italic = True
End With

This example scans a column of data named myRange. If a cell has the same value as the cell immediately preceding it, the example displays the address of the cell that contains the duplicate data.

Set r = Range("myRange") 
For n = 2 To r.Rows.Count 
    If r.Cells(n-1, 1) = r.Cells(n, 1) Then 
        MsgBox "Duplicate data in " & r.Cells(n, 1).Address 
    End If 
Next

This example demonstrates how Cells changes the behavior of the Item member.

Public Sub PrintRangeAdresses
   Dim columnsRange As Excel.Range
   Set columnsRange = ThisWorkBook.Worksheets("exampleSheet").Range("B2:Z100").Columns
   
   Debug.Print columnsRange.Item(2).Address         'Prints "$C$2:$C$100" 
   Debug.Print columnsRange.Cells.Item(2).Address   'Prints "$C$2" 
   Debug.Print columnsRange.Cells.Item(2,1).Address 'Prints "$B$3"   
End Sub

This example demonstrates how Cells changes the enumeration behavior.

Public Sub PrintAllRangeAdresses
   Dim columnsRange As Excel.Range
   Set columnsRange = ThisWorkBook.Worksheets("exampleSheet").Range("B2:C3").Columns
   
   Dim columnRange As Excel.Range
   For Each columnRange In columnsRange
      Debug.Print columnRange.Address   'Prints "$B$2:$B$3", "$C$2:$C$3"
   Next
   
   Dim cell As Excel.Range
   For Each cell In columnsRange.Cells
      Debug.Print cell.Address          'Prints "$B$2", "$C$2", "$B$3", "$C$3"
   Next  
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Characters: Characters
    '''Returns a Characters object that represents a range of characters within the object text. Use the Characters object to format characters within a text string.

#SYNTAX:

expression.Characters (Start, Length)

expression A variable that represents a Range object.

The Characters object isn't a collection.

This example formats the third character in cell A1 on Sheet1 as bold.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The Characters object isn't a collection.

This example formats the third character in cell A1 on Sheet1 as bold.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example formats the third character in cell A1 on Sheet1 as bold.

With Worksheets("Sheet1").Range("A1") 
 .Value = "abcdefg" 
 .Characters(3, 1).Font.Bold = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Column: int
    '''Returns the number of the first column in the first area in the specified range. Read-only Long.

#SYNTAX:

expression.Column

expression A variable that represents a Range object.

Column A returns 1, column B returns 2, and so on.

To return the number of the last column in the range, use the following expression.

myRange.Columns(myRange.Columns.Count).Column

This example sets the column width of every other column on Sheet1 to 4 points.

This example deletes the empty columns from a selected range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Column A returns 1, column B returns 2, and so on.

To return the number of the last column in the range, use the following expression.

myRange.Columns(myRange.Columns.Count).Column

This example sets the column width of every other column on Sheet1 to 4 points.

This example deletes the empty columns from a selected range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the column width of every other column on Sheet1 to 4 points.

For Each col In Worksheets("Sheet1").Columns 
    If col.Column Mod 2 = 0 Then 
        col.ColumnWidth = 4 
    End If 
Next col

This example deletes the empty columns from a selected range.

Sub Delete_Empty_Columns()
    'The range from which to delete the columns.
    Dim rnSelection As Range
    
    'Column and count variables used in the deletion process.
    Dim lnLastColumn As Long
    Dim lnColumnCount As Long
    Dim lnDeletedColumns As Long
    
    lnDeletedColumns = 0
    
    'Confirm that a range is selected, and that the range is contiguous.
    If TypeName(Selection) = "Range" Then
        If Selection.Areas.Count = 1 Then
            
            'Initialize the range to what the user has selected, and initialize the count for the upcoming FOR loop.
            Set rnSelection = Application.Selection
            lnLastColumn = rnSelection.Columns.Count
        
            'Start at the far-right column and work left: if the column is empty then
            'delete the column and increment the deleted column count.
            For lnColumnCount = lnLastColumn To 1 Step -1
                If Application.CountA(rnSelection.Columns(lnColumnCount)) = 0 Then
                    rnSelection.Columns(lnColumnCount).Delete
                    lnDeletedColumns = lnDeletedColumns + 1
                End If
            Next lnColumnCount
    
            rnSelection.Resize(lnLastColumn - lnDeletedColumns).Select
        Else
            MsgBox "Please select only one area.", vbInformation
        End If
    Else
        MsgBox "Please select a range.", vbInformation
    End If
    
    'Turn screen updating back on.
    Application.ScreenUpdating = True

End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ColumnWidth: float
    '''Returns or sets the width of all columns in the specified range. Read/write Double.

#SYNTAX:

expression.ColumnWidth

expression A variable that represents a Range object.

One unit of column width is equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is used.

Use the AutoFit method to set column widths based on the contents of cells.

Use the Width property to return the width of a column in points.

If all columns in the range have the same width, the ColumnWidth property returns the width. If columns in the range have different widths, this property returns null.

The following example doubles the width of column A on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

One unit of column width is equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is used.

Use the AutoFit method to set column widths based on the contents of cells.

Use the Width property to return the width of a column in points.

If all columns in the range have the same width, the ColumnWidth property returns the width. If columns in the range have different widths, this property returns null.

The following example doubles the width of column A on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example doubles the width of column A on Sheet1.

With Worksheets("Sheet1").Columns("A") 
 .ColumnWidth = .ColumnWidth * 2 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Columns: Range
    '''Returns a Range object that represents the columns in the specified range.

#SYNTAX:

expression.Columns

expression A variable that represents a Range object.

To return a single column, use the Item property or equivalently include an index in parentheses. For example, both Selection.Columns(1) and Selection.Columns.Item(1) return the first column of the selection.

When applied to a Range object that is a multiple-area selection, this property returns columns from only the first area of the range. For example, if the Range object has two areas—A1:B2 and C3:D4—Selection.Columns.Count returns 2, not 4. To use this property on a range that may contain a multiple-area selection, test Areas.Count to determine whether the range contains more than one area. If it does, loop over each area in the range.

The returned range might be outside the specified range. For example, Range("A1:B2").Columns(5).Select returns cells E1:E2.

If a letter is used as an index, it is equivalent to a number. For example, Range("B1:C10").Columns("B").Select returns cells C1:C10, not cells B1:B10. In the example, "B" is equivalent to 2.

Using the Columns property without an object qualifier is equivalent to using ActiveSheet.Columns. For more information, see the Worksheet.Columns property.

This example sets the value of every cell in column one in the range named myRange to 0 (zero).

This example displays the number of columns in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

To return a single column, use the Item property or equivalently include an index in parentheses. For example, both Selection.Columns(1) and Selection.Columns.Item(1) return the first column of the selection.

When applied to a Range object that is a multiple-area selection, this property returns columns from only the first area of the range. For example, if the Range object has two areas—A1:B2 and C3:D4—Selection.Columns.Count returns 2, not 4. To use this property on a range that may contain a multiple-area selection, test Areas.Count to determine whether the range contains more than one area. If it does, loop over each area in the range.

The returned range might be outside the specified range. For example, Range("A1:B2").Columns(5).Select returns cells E1:E2.

If a letter is used as an index, it is equivalent to a number. For example, Range("B1:C10").Columns("B").Select returns cells C1:C10, not cells B1:B10. In the example, "B" is equivalent to 2.

Using the Columns property without an object qualifier is equivalent to using ActiveSheet.Columns. For more information, see the Worksheet.Columns property.

This example sets the value of every cell in column one in the range named myRange to 0 (zero).

This example displays the number of columns in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the value of every cell in column one in the range named myRange to 0 (zero).

Range("myRange").Columns(1).Value = 0

This example displays the number of columns in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Public Sub ShowNumberOfColumnsInSheet1Selection
   Worksheets("Sheet1").Activate 
   
   Dim selectedRange As Excel.Range
   Set selectedRange = Selection
   
   Dim areaCount As Long
   areaCount = Selection.Areas.Count 
   
   If areaCount <= 1 Then 
      MsgBox "The selection contains " & _ 
             Selection.Columns.Count & " columns." 
   Else 
      Dim areaIndex As Long
      areaIndex = 1 
      For Each area In Selection.Areas 
         MsgBox "Area " & areaIndex & " of the selection contains " & _ 
                area.Columns.Count & " columns." 
         areaIndex = areaIndex + 1 
      Next 
   End If
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Comment: VBA_object
    '''Returns a Comment object that represents the comment associated with the cell in the upper-left corner of the range.

#SYNTAX:

expression.Comment

expression A variable that represents a Range object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CommentThreaded: VBA_object
    '''Returns a CommentThreaded object that represents the threaded comment associated with the cell in the upper-left corner of the range.

#SYNTAX:

expression.CommentThreaded

expression A variable that represents a Range object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Range object.

The Count property is functionally the same as the CountLarge property, except that the Count property will generate an overflow error if the specified range has more than 2,147,483,647 cells (one less than 2,048 columns). The CountLarge property, however, can handle ranges up to the maximum size for a worksheet, which is 17,179,869,184 cells.

This example displays the number of columns in the selection on Sheet1. The code also tests for a multiple-area selection; if one exists, the code loops on the areas of the multiple-area selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The Count property is functionally the same as the CountLarge property, except that the Count property will generate an overflow error if the specified range has more than 2,147,483,647 cells (one less than 2,048 columns). The CountLarge property, however, can handle ranges up to the maximum size for a worksheet, which is 17,179,869,184 cells.

This example displays the number of columns in the selection on Sheet1. The code also tests for a multiple-area selection; if one exists, the code loops on the areas of the multiple-area selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of columns in the selection on Sheet1. The code also tests for a multiple-area selection; if one exists, the code loops on the areas of the multiple-area selection.

Sub DisplayColumnCount() 
    Dim iAreaCount As Integer 
    Dim i As Integer 
 
    Worksheets("Sheet1").Activate 
    iAreaCount = Selection.Areas.Count 
 
    If iAreaCount <= 1 Then 
        MsgBox "The selection contains " & Selection.Columns.Count & " columns." 
    Else 
        For i = 1 To iAreaCount 
            MsgBox "Area " & i & " of the selection contains " & _ 
            Selection.Areas(i).Columns.Count & " columns." 
        Next i 
    End If 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CountLarge: VBA_Variant
    '''Returns a value that represents the number of objects in the collection. Read-only Variant.

#SYNTAX:

expression.CountLarge

expression A variable that represents a Range object.

The CountLarge property is functionally the same as the Count property, except that the Count property will generate an overflow error if the specified range has more than 2,147,483,647 cells (one less than 2,048 columns). The CountLarge property, however, can handle ranges up to the maximum size for a worksheet, which is 17,179,869,184 cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The CountLarge property is functionally the same as the Count property, except that the Count property will generate an overflow error if the specified range has more than 2,147,483,647 cells (one less than 2,048 columns). The CountLarge property, however, can handle ranges up to the maximum size for a worksheet, which is 17,179,869,184 cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Range object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CurrentRegion: Range
    '''Returns a Range object that represents the current region. The current region is a range bounded by any combination of blank rows and blank columns. Read-only.

#SYNTAX:

expression.CurrentRegion

expression A variable that represents a Range object.

This property is useful for many operations that automatically expand the selection to include the entire current region, such as the XlRangeAutoFormat values.

This property cannot be used on a protected worksheet.

This example selects the current region on Sheet1.

This example assumes that you have a table on Sheet1 that has a header row. The example selects the table without selecting the header row. The active cell must be somewhere in the table before you run the example.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property is useful for many operations that automatically expand the selection to include the entire current region, such as the XlRangeAutoFormat values.

This property cannot be used on a protected worksheet.

This example selects the current region on Sheet1.

This example assumes that you have a table on Sheet1 that has a header row. The example selects the table without selecting the header row. The active cell must be somewhere in the table before you run the example.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example selects the current region on Sheet1.

Worksheets("Sheet1").Activate 
ActiveCell.CurrentRegion.Select

This example assumes that you have a table on Sheet1 that has a header row. The example selects the table without selecting the header row. The active cell must be somewhere in the table before you run the example.

Set tbl = ActiveCell.CurrentRegion 
tbl.Offset(1, 0).Resize(tbl.Rows.Count - 1, _ 
 tbl.Columns.Count).Select

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayFormat: DisplayFormat
    '''Returns a DisplayFormat object that represents the display settings for the specified range. Read-only.

#SYNTAX:

expression.DisplayFormat

expression A variable that represents a Range object.

DisplayFormat

DisplayFormat is affected by conditional formatting as shown in the code below. It adds conditional formatting to Cell A1 on the ActiveSheet. This formatting bolds the cell, changes the interior color to red and adds a checker pattern.

Note that the DisplayFormat property does not work in User Defined Functions (UDF). For example, on a worksheet function that returns the interior color of a cell, you use a line similar to: Range(n).DisplayFormat.Interior.ColorIndex. When the worksheet function executes, it returns a #VALUE! error.

In another example, you cannot use the DisplayFormat property in a worksheet function to return settings for a particular range. DisplayFormat will work in a function called from Visual Basic for Applications (VBA), however. For example, in the following UDF:

Calling the function from a worksheet as follows =getDisplayedColorIndex() returns the #VALUE! error. As such, if conditional formatting is applied to a range, there is no way to return that value with a UDF. If conditional formatting has been applied, obtain the color index for the active cell by calling the Immediate pane in the Visual Basic Editor.

If no conditional formatting is applied use the function below to returns the color index for the active cell. The following function will work either from a worksheet or from VBA.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: DisplayFormat

#REMARKS:

DisplayFormat is affected by conditional formatting as shown in the code below. It adds conditional formatting to Cell A1 on the ActiveSheet. This formatting bolds the cell, changes the interior color to red and adds a checker pattern.

Note that the DisplayFormat property does not work in User Defined Functions (UDF). For example, on a worksheet function that returns the interior color of a cell, you use a line similar to: Range(n).DisplayFormat.Interior.ColorIndex. When the worksheet function executes, it returns a #VALUE! error.

In another example, you cannot use the DisplayFormat property in a worksheet function to return settings for a particular range. DisplayFormat will work in a function called from Visual Basic for Applications (VBA), however. For example, in the following UDF:

Calling the function from a worksheet as follows =getDisplayedColorIndex() returns the #VALUE! error. As such, if conditional formatting is applied to a range, there is no way to return that value with a UDF. If conditional formatting has been applied, obtain the color index for the active cell by calling the Immediate pane in the Visual Basic Editor.

If no conditional formatting is applied use the function below to returns the color index for the active cell. The following function will work either from a worksheet or from VBA.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Public Sub DemonstrateConditionalFormattingAffectsDisplayFormat()
    Dim inputArea As Range
    Set inputArea = ActiveSheet.Range("A1")
    
    Dim addedFormatCondition As FormatCondition
    Set addedFormatCondition = inputArea.FormatConditions.Add(xlExpression, Formula1:="=true")
    addedFormatCondition.Font.Bold = True
    addedFormatCondition.Interior.Color = XlRgbColor.rgbRed
    addedFormatCondition.Interior.Pattern = XlPattern.xlPatternChecker
    
    Debug.Print inputArea.Font.Bold 'False
    Debug.Print inputArea.Interior.Color 'XlRgbColor.rgbWhite
    Debug.Print inputArea.Interior.Pattern 'XlPattern.xlPatternNone
    
    Debug.Print inputArea.DisplayFormat.Font.Bold 'True
    Debug.Print inputArea.DisplayFormat.Interior.Color 'XlRgbColor.rgbRed
    Debug.Print inputArea.DisplayFormat.Interior.Pattern 'XlPattern.xlPatternChecker
End Sub

Function getDisplayedColorIndex()
   getColorIndex = ActiveCell.DisplayFormat.Interior.ColorIndex
End Function

Function getAppliedColorIndex()
   getColorIndex = ActiveCell.Interior.ColorIndex
End Function
    '''

    self.EntireColumn: Range
    '''Returns a Range object that represents the entire column (or columns) that contains the specified range. Read-only.

#SYNTAX:

expression.EntireColumn

expression A variable that represents a Range object.

This example sets the value of the first cell in the column that contains the active cell. The example must be run from a worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the value of the first cell in the column that contains the active cell. The example must be run from a worksheet.

ActiveCell.EntireColumn.Cells(1, 1).Value = 5

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EntireRow: Range
    '''Returns a Range object that represents the entire row (or rows) that contains the specified range. Read-only.

#SYNTAX:

expression.EntireRow

expression A variable that represents a Range object.

This example sets the value of the first cell in the row that contains the active cell. The example must be run from a worksheet.

This example sorts all the rows on a worksheet, including hidden rows.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the value of the first cell in the row that contains the active cell. The example must be run from a worksheet.

ActiveCell.EntireRow.Cells(1, 1).Value = 5

This example sorts all the rows on a worksheet, including hidden rows.

Sub SortAll()
    'Turn off screen updating, and define your variables.
    Application.ScreenUpdating = False
    Dim lngLastRow As Long, lngRow As Long
    Dim rngHidden As Range
    
    'Determine the number of rows in your sheet, and add the header row to the hidden range variable.
    lngLastRow = Cells(Rows.Count, 1).End(xlUp).Row
    Set rngHidden = Rows(1)
    
    'For each row in the list, if the row is hidden add that row to the hidden range variable.
    For lngRow = 1 To lngLastRow
        If Rows(lngRow).Hidden = True Then
            Set rngHidden = Union(rngHidden, Rows(lngRow))
        End If
    Next lngRow
    
    'Unhide everything in the hidden range variable.
    rngHidden.EntireRow.Hidden = False
    
    'Perform the sort on all the data.
    Range("A1").CurrentRegion.Sort _
        key1:=Range("A2"), _
        order1:=xlAscending, _
        header:=xlYes
        
    'Re-hide the rows that were originally hidden, but unhide the header.
    rngHidden.EntireRow.Hidden = True
    Rows(1).Hidden = False
    
    'Turn screen updating back on.
    Set rngHidden = Nothing
    Application.ScreenUpdating = True
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Errors: Errors
    '''Allows the user to access error checking options.

#SYNTAX:

expression.Errors

expression A variable that represents a Range object.

Reference the Errors object to view a list of index values associated with error checking options.

In this example, a number written as text is placed in cell A1. Microsoft Excel then determines if the number is written as text in cell A1 and notifies the user accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Reference the Errors object to view a list of index values associated with error checking options.

In this example, a number written as text is placed in cell A1. Microsoft Excel then determines if the number is written as text in cell A1 and notifies the user accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, a number written as text is placed in cell A1. Microsoft Excel then determines if the number is written as text in cell A1 and notifies the user accordingly.

Sub CheckForErrors() 
 
 Range("A1").Formula = "'12" 
 
 If Range("A1").Errors.Item(xlNumberAsText).Value = True Then 
 MsgBox "The number is written as text." 
 Else 
 MsgBox "The number is not written as text." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Font: Font
    '''Returns a Font object that represents the font of the specified object.

#SYNTAX:

expression.Font

expression A variable that represents a Range object.

This example determines if the font name for cell A1 is Arial and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example determines if the font name for cell A1 is Arial and notifies the user.

Sub CheckFont() 
 
 Range("A1").Select 
 
 ' Determine if the font name for selected cell is Arial. 
 If Range("A1").Font.Name = "Arial" Then 
 MsgBox "The font name for this cell is 'Arial'" 
 Else 
 MsgBox "The font name for this cell is not 'Arial'" 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FormatConditions: FormatConditions
    '''Returns a FormatConditions collection that represents all the conditional formats for the specified range. Read-only.

#SYNTAX:

expression.FormatConditions

expression A variable that represents a Range object.

This example modifies an existing conditional format for cells E1:E10.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example modifies an existing conditional format for cells E1:E10.

Worksheets(1).Range("e1:e10").FormatConditions(1) _ 
 .Modify xlCellValue, xlLess, "=$a$1"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Formula: VBA_Variant
    '''Returns or sets a Variant value that represents the object's implicitly intersecting formula in A1-style notation.

#SYNTAX:

expression.Formula

expression A variable that represents a Range object.

In Dynamic Arrays enabled Excel, Range.Formula2 supercedes Range.Formula. Range.Formula will continue to be supported to maintain backcompatibility. A discussion on Dynamic Arrays and Range.Formula2 can be found here.

Range.Formula2 property

This property is not available for OLAP data sources.

If the cell contains a constant, this property returns the constant. If the cell is empty, this property returns an empty string. If the cell contains a formula, the Formula property returns the formula as a string in the same format that would be displayed in the formula bar (including the equal sign ( = )).

If you set the value or formula of a cell to a date, Microsoft Excel verifies that cell is already formatted with one of the date or time number formats. If not, Excel changes the number format to the default short date number format.

If the range is a one- or two-dimensional range, you can set the formula to a Visual Basic array of the same dimensions. Similarly, you can put the formula into a Visual Basic array.

Formulas set using Range.Formula may trigger implicit intersection.

Setting the formula for a multiple-cell range fills all cells in the range with the formula.

The following code example sets the formula for cell A1 on Sheet1.

The following code example sets the formula for cell A1 on Sheet1 to display today's date.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

In Dynamic Arrays enabled Excel, Range.Formula2 supercedes Range.Formula. Range.Formula will continue to be supported to maintain backcompatibility. A discussion on Dynamic Arrays and Range.Formula2 can be found here.

Range.Formula2 property

This property is not available for OLAP data sources.

If the cell contains a constant, this property returns the constant. If the cell is empty, this property returns an empty string. If the cell contains a formula, the Formula property returns the formula as a string in the same format that would be displayed in the formula bar (including the equal sign ( = )).

If you set the value or formula of a cell to a date, Microsoft Excel verifies that cell is already formatted with one of the date or time number formats. If not, Excel changes the number format to the default short date number format.

If the range is a one- or two-dimensional range, you can set the formula to a Visual Basic array of the same dimensions. Similarly, you can put the formula into a Visual Basic array.

Formulas set using Range.Formula may trigger implicit intersection.

Setting the formula for a multiple-cell range fills all cells in the range with the formula.

The following code example sets the formula for cell A1 on Sheet1.

The following code example sets the formula for cell A1 on Sheet1 to display today's date.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following code example sets the formula for cell A1 on Sheet1.

Worksheets("Sheet1").Range("A1").Formula = "=$A$4+$A$10"

The following code example sets the formula for cell A1 on Sheet1 to display today's date.

Sub InsertTodaysDate() 
    ' This macro will put today's date in cell A1 on Sheet1 
    Sheets("Sheet1").Select 
    Range("A1").Select 
    Selection.Formula = "=text(now(),""mmm dd yyyy"")" 
    Selection.Columns.AutoFit 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Formula2: str
    self.Formula2Local: str
    self.Formula2R1C1: str
    self.Formula2R1C1Local: str
    self.FormulaArray: VBA_Variant
    '''Returns or sets the array formula of a range. Returns (or can be set to) a single formula or a Visual Basic array. If the specified range doesn't contain an array formula, this property returns null. Read/write Variant.

#SYNTAX:

expression.FormulaArray

expression A variable that represents a Range object.

The FormulaArray property also has a character limit of 255.

This example enters the number 3 as an array constant in cells A1:C5 on Sheet1.

This example enters the array formula =SUM(A1:C3) in cells E1:E3 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The FormulaArray property also has a character limit of 255.

This example enters the number 3 as an array constant in cells A1:C5 on Sheet1.

This example enters the array formula =SUM(A1:C3) in cells E1:E3 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enters the number 3 as an array constant in cells A1:C5 on Sheet1.

Worksheets("Sheet1").Range("A1:C5").FormulaArray = "=3"

This example enters the array formula =SUM(A1:C3) in cells E1:E3 on Sheet1.

Worksheets("Sheet1").Range("E1:E3").FormulaArray = _ 
 "=Sum(A1:C3)"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FormulaHidden: VBA_Variant
    '''Returns or sets a Variant value that indicates if the formula will be hidden when the worksheet is protected.

#SYNTAX:

expression.FormulaHidden

expression A variable that represents a Range object.

This property returns True if the formula will be hidden when the worksheet is protected, Null if the specified range contains some cells with FormulaHidden equal to True and some cells with FormulaHidden equal to False.

Don't confuse this property with the Hidden property. The formula will not be hidden if the workbook is protected and the worksheet is not, but only if the worksheet is protected.

This example hides the formulas in cells A1 and B1 on Sheet1 when the worksheet is protected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns True if the formula will be hidden when the worksheet is protected, Null if the specified range contains some cells with FormulaHidden equal to True and some cells with FormulaHidden equal to False.

Don't confuse this property with the Hidden property. The formula will not be hidden if the workbook is protected and the worksheet is not, but only if the worksheet is protected.

This example hides the formulas in cells A1 and B1 on Sheet1 when the worksheet is protected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example hides the formulas in cells A1 and B1 on Sheet1 when the worksheet is protected.

Sub HideFormulas() 
 
 Worksheets("Sheet1").Range("A1:B1").FormulaHidden = True 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FormulaLocal: VBA_Variant
    '''Returns or sets the formula for the object, using A1-style references in the language of the user. Read/write Variant.

#SYNTAX:

expression.FormulaLocal

expression A variable that represents a Range object.

If the cell contains a constant, this property returns that constant. If the cell is empty, the property returns an empty string. If the cell contains a formula, the property returns the formula as a string, in the same format in which it would be displayed in the formula bar (including the equal sign).

If you set the value or formula of a cell to a date, Microsoft Excel checks to see whether that cell is already formatted with one of the date or time number formats. If not, the number format is changed to the default short date number format.

If the range is a one- or two-dimensional range, you can set the formula to a Visual Basic array of the same dimensions. Similarly, you can put the formula into a Visual Basic array.

Setting the formula of a multiple-cell range fills all cells in the range with the formula.

Assume that you enter the formula =SUM(A1:A10) in cell A11 on worksheet one, using the American English version of Microsoft Excel. If you then open the workbook on a computer that's running the German version and run the following example, the example displays the formula =SUMME(A1:A10) in a message box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the cell contains a constant, this property returns that constant. If the cell is empty, the property returns an empty string. If the cell contains a formula, the property returns the formula as a string, in the same format in which it would be displayed in the formula bar (including the equal sign).

If you set the value or formula of a cell to a date, Microsoft Excel checks to see whether that cell is already formatted with one of the date or time number formats. If not, the number format is changed to the default short date number format.

If the range is a one- or two-dimensional range, you can set the formula to a Visual Basic array of the same dimensions. Similarly, you can put the formula into a Visual Basic array.

Setting the formula of a multiple-cell range fills all cells in the range with the formula.

Assume that you enter the formula =SUM(A1:A10) in cell A11 on worksheet one, using the American English version of Microsoft Excel. If you then open the workbook on a computer that's running the German version and run the following example, the example displays the formula =SUMME(A1:A10) in a message box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Assume that you enter the formula =SUM(A1:A10) in cell A11 on worksheet one, using the American English version of Microsoft Excel. If you then open the workbook on a computer that's running the German version and run the following example, the example displays the formula =SUMME(A1:A10) in a message box.

MsgBox Worksheets(1).Range("A11").FormulaLocal

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FormulaR1C1: VBA_Variant
    '''Returns or sets the formula for the object, using R1C1-style notation in the language of the macro. Read/write Variant.

#SYNTAX:

expression.FormulaR1C1

expression A variable that represents a Range object.

If the cell contains a constant, this property returns the constant. If the cell is empty, the property returns an empty string. If the cell contains a formula, the property returns the formula as a string, in the same format in which it would be displayed in the formula bar (including the equal sign).

If you set the value or formula of a cell to a date, Microsoft Excel checks to see whether that cell is already formatted with one of the date or time number formats. If not, the number format is changed to the default short date number format.

If the range is a one- or two-dimensional range, you can set the formula to a Visual Basic array of the same dimensions. Similarly, you can put the formula into a Visual Basic array.

Setting the formula of a multiple-cell range fills all cells in the range with the formula.

This example sets the formula for cell B1 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the cell contains a constant, this property returns the constant. If the cell is empty, the property returns an empty string. If the cell contains a formula, the property returns the formula as a string, in the same format in which it would be displayed in the formula bar (including the equal sign).

If you set the value or formula of a cell to a date, Microsoft Excel checks to see whether that cell is already formatted with one of the date or time number formats. If not, the number format is changed to the default short date number format.

If the range is a one- or two-dimensional range, you can set the formula to a Visual Basic array of the same dimensions. Similarly, you can put the formula into a Visual Basic array.

Setting the formula of a multiple-cell range fills all cells in the range with the formula.

This example sets the formula for cell B1 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the formula for cell B1 on Sheet1.

Worksheets("Sheet1").Range("B1").FormulaR1C1 = "=SQRT(R1C1)"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FormulaR1C1Local: VBA_Variant
    '''Returns or sets the formula for the object, using R1C1-style notation in the language of the user. Read/write Variant.

#SYNTAX:

expression.FormulaR1C1Local

expression A variable that represents a Range object.

If the cell contains a constant, this property returns that constant. If the cell is empty, the property returns an empty string. If the cell contains a formula, the property returns the formula as a string, in the same format in which it would be displayed in the formula bar (including the equal sign).

If you set the value or formula of a cell to a date, Microsoft Excel checks to see whether that cell is already formatted with one of the date or time number formats. If not, the number format is changed to the default short date number format.

If the range is a one- or two-dimensional range, you can set the formula to a Visual Basic array of the same dimensions. Similarly, you can put the formula into a Visual Basic array.

Setting the formula of a multiple-cell range fills all cells in the range with the formula.

Assume that you enter the formula =SUM(A1:A10) in cell A11 on worksheet one, using the American English version of Microsoft Excel. If you then open the workbook on a computer that's running the German version and run the following example, the example displays the formula =SUMME(Z1S1:Z10S1) in a message box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the cell contains a constant, this property returns that constant. If the cell is empty, the property returns an empty string. If the cell contains a formula, the property returns the formula as a string, in the same format in which it would be displayed in the formula bar (including the equal sign).

If you set the value or formula of a cell to a date, Microsoft Excel checks to see whether that cell is already formatted with one of the date or time number formats. If not, the number format is changed to the default short date number format.

If the range is a one- or two-dimensional range, you can set the formula to a Visual Basic array of the same dimensions. Similarly, you can put the formula into a Visual Basic array.

Setting the formula of a multiple-cell range fills all cells in the range with the formula.

Assume that you enter the formula =SUM(A1:A10) in cell A11 on worksheet one, using the American English version of Microsoft Excel. If you then open the workbook on a computer that's running the German version and run the following example, the example displays the formula =SUMME(Z1S1:Z10S1) in a message box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Assume that you enter the formula =SUM(A1:A10) in cell A11 on worksheet one, using the American English version of Microsoft Excel. If you then open the workbook on a computer that's running the German version and run the following example, the example displays the formula =SUMME(Z1S1:Z10S1) in a message box.

MsgBox Worksheets(1).Range("A11").FormulaR1C1Local

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HasArray: VBA_Variant
    '''True if the specified cell is part of an array formula. Read-only Variant.

#SYNTAX:

expression.HasArray

expression A variable that represents a Range object.

This example displays a message if the active cell on Sheet1 is part of an array.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message if the active cell on Sheet1 is part of an array.

Worksheets("Sheet1").Activate 
If ActiveCell.HasArray =True Then 
 MsgBox "The active cell is part of an array" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HasFormula: VBA_Variant
    '''True if all cells in the range contain formulas; False if none of the cells in the range contains a formula; null otherwise. Read-only Variant.

#SYNTAX:

expression.HasFormula

expression A variable that represents a Range object.

This example prompts the user to select a range on Sheet1. If every cell in the selected range contains a formula, the example displays a message.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example prompts the user to select a range on Sheet1. If every cell in the selected range contains a formula, the example displays a message.

Worksheets("Sheet1").Activate 
Set rr = Application.InputBox( _ 
 prompt:="Select a range on this worksheet", _ 
 Type:=8) 
If rr.HasFormula = True Then 
 MsgBox "Every cell in the selection contains a formula" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HasRichDataType: VBA_Variant
    '''True if all cells in the range contain a Rich data type. False if none of the cells in the range contains a Rich data type; otherwise, null. Read-only Variant.

#SYNTAX:

expression.HasRichDataType

expression A variable that represents a Range object.

Linked data types, such as Stocks or Geography, are a kind of Rich data type.

For linked types, only cells whose LinkedDataTypeState property is xlLinkedDataTypeStateValidLinkedData, xlLinkedDataTypeStateFetchingData, or xlLinkedDataTypeStateBrokenLinkedData will be counted as Rich data types by the HasRichDataType property.

Cells in the xlLinkedDataTypeStateDisambiguationNeeded or xlLinkedDataTypeStateNone states do not count as Rich data types.

For more information about possible Linked data type states, see the XlLinkedDataTypeState enumeration.

This example prompts the user to select a range on Sheet1. If every cell in the selected range contains a Rich data type, the example displays a message.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Linked data types, such as Stocks or Geography, are a kind of Rich data type.

For linked types, only cells whose LinkedDataTypeState property is xlLinkedDataTypeStateValidLinkedData, xlLinkedDataTypeStateFetchingData, or xlLinkedDataTypeStateBrokenLinkedData will be counted as Rich data types by the HasRichDataType property.

Cells in the xlLinkedDataTypeStateDisambiguationNeeded or xlLinkedDataTypeStateNone states do not count as Rich data types.

For more information about possible Linked data type states, see the XlLinkedDataTypeState enumeration.

This example prompts the user to select a range on Sheet1. If every cell in the selected range contains a Rich data type, the example displays a message.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example prompts the user to select a range on Sheet1. If every cell in the selected range contains a Rich data type, the example displays a message.

Worksheets("Sheet1").Activate 
Set rr = Application.InputBox( _ 
 prompt:="Select a range on this worksheet", _ 
 Type:=8) 
If rr.HasRichDataType = True Then 
 MsgBox "Every cell in the selection contains a Rich Data" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HasSpill: bool
    self.Height: float | points
    '''Returns a Double value that represents the height, in points, of the range. Read-only.

#SYNTAX:

expression.Height

expression A variable that represents a Range object.

To set the height, use the RowHeight property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

To set the height, use the RowHeight property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HorizontalAlignment: VBA_object
    '''Returns or sets a Variant value that represents the horizontal alignment for the specified object. Read/write.

#SYNTAX:

expression.HorizontalAlignment

expression A variable that represents a Range object.

The value of this property can be set to one of the XlHAlign constants.

Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The value of this property can be set to one of the XlHAlign constants.

Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Hyperlinks: Hyperlinks
    '''Returns a Hyperlinks collection that represents the hyperlinks for the range.

#SYNTAX:

expression.Hyperlinks

expression A variable that represents a Range object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ID: str
    '''Returns or sets a String value that represents the identifying label for the specified cell when the page is saved as a webpage.

#SYNTAX:

expression.ID

expression A variable that represents a Range object.

Use an ID label as a hyperlink reference in other HTML documents or on the same webpage.

This example sets the ID of cell A1 on the active worksheet to Target.

Later, the document is saved as a webpage, and the following line of HTML is added to the webpage. When the user then views the page in a web browser and chooses the hyperlink, the browser displays the cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use an ID label as a hyperlink reference in other HTML documents or on the same webpage.

This example sets the ID of cell A1 on the active worksheet to Target.

Later, the document is saved as a webpage, and the following line of HTML is added to the webpage. When the user then views the page in a web browser and chooses the hyperlink, the browser displays the cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the ID of cell A1 on the active worksheet to Target.

ActiveSheet.Range("A1").ID = "target"

Later, the document is saved as a webpage, and the following line of HTML is added to the webpage. When the user then views the page in a web browser and chooses the hyperlink, the browser displays the cell.

<A HREF="#target">Quarterly earnings</A>

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IndentLevel: VBA_Variant
    '''Returns or sets a Variant value that represents the indent level for the cell or range. Can be an integer from 0 to 15.

#SYNTAX:

expression.IndentLevel

expression A variable that represents a Range object.

Using this property to set the indent level to a number less than 0 (zero) or greater than 15 causes an error.

This example increases the indent level to 15 in cell A10.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property to set the indent level to a number less than 0 (zero) or greater than 15 causes an error.

This example increases the indent level to 15 in cell A10.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example increases the indent level to 15 in cell A10.

With Range("A10") 
 .IndentLevel = 15 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Interior: Interior
    '''Returns an Interior object that represents the interior of the specified object.

#SYNTAX:

expression.Interior

expression A variable that represents a Range object.

This example sets the interior color for cell A1 on Sheet1 to cyan.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the interior color for cell A1 on Sheet1 to cyan.

Sub SetColor() 
 
 Worksheets("Sheet1").Range("A1").Interior.ColorIndex = 8 ' Cyan 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Left: VBA_Variant
    '''Returns a Variant value that represents the distance, in points, from the left edge of column A to the left edge of the range.

#SYNTAX:

expression.Left

expression A variable that represents a Range object.

If the range is discontinuous, the first area is used. If the range is more than one column wide, the leftmost column in the range is used.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the range is discontinuous, the first area is used. If the range is more than one column wide, the leftmost column in the range is used.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LinkedDataTypeState: XlLinkedDataTypeState
    '''Returns information about the state of any Linked data types, such as Stocks or Geography, in the range. Possible values are from the XlLinkedDataTypeState enumeration. Read-only.

#SYNTAX:

expression.LinkedDataTypeState

expression A variable that represents a Range object.

For ranges that contains cells in different states, it will return null.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

For ranges that contains cells in different states, it will return null.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ListHeaderRows: int
    '''Returns the number of header rows for the specified range. Read-only Long.

#SYNTAX:

expression.ListHeaderRows

expression A variable that represents a Range object.

Before you use this property, use the CurrentRegion property to find the boundaries of the range.

This example sets the rTbl variable to the range represented by the current region for the active cell, not including any header rows.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Before you use this property, use the CurrentRegion property to find the boundaries of the range.

This example sets the rTbl variable to the range represented by the current region for the active cell, not including any header rows.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the rTbl variable to the range represented by the current region for the active cell, not including any header rows.

Set rTbl = ActiveCell.CurrentRegion 
' remove the headers from the range 
iHdrRows = rTbl.ListHeaderRows 
If iHdrRows > 0 Then 
 ' resize the range minus n rows 
 Set rTbl = rTbl.Resize(rTbl.Rows.Count - iHdrRows) 
 ' and then move the resized range down to 
 ' get to the first non-header row 
 Set rTbl = rTbl.Offset(iHdrRows) 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ListObject: ListObject
    '''Returns a ListObject object for the Range object. Read-only ListObject object.

#SYNTAX:

expression.ListObject

expression A variable that represents a Range object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Locked: VBA_Variant
    '''Returns or sets a Variant value that indicates if the object is locked.

#SYNTAX:

expression.Locked

expression A variable that represents a Range object.

This property returns True if the object is locked, False if the object can be modified when the sheet is protected, or Null if the specified range contains both locked and unlocked cells.

This example unlocks cells A1:G37 on Sheet1 so that they can be modified when the sheet is protected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns True if the object is locked, False if the object can be modified when the sheet is protected, or Null if the specified range contains both locked and unlocked cells.

This example unlocks cells A1:G37 on Sheet1 so that they can be modified when the sheet is protected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example unlocks cells A1:G37 on Sheet1 so that they can be modified when the sheet is protected.

Worksheets("Sheet1").Range("A1:G37").Locked = False 
Worksheets("Sheet1").Protect

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MDX: str
    '''Returns the MDX name for the specified Range object. Read-only String.

#SYNTAX:

expression.MDX

expression A variable that represents a Range object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MergeArea: Range
    '''Returns a Range object that represents the merged range containing the specified cell. If the specified cell isn't in a merged range, this property returns the specified cell. Read-only Variant.

#SYNTAX:

expression.MergeArea

expression A variable that represents a Range object.

The MergeArea property only works on a single-cell range.

This example sets the value of the merged range that contains cell A3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The MergeArea property only works on a single-cell range.

This example sets the value of the merged range that contains cell A3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the value of the merged range that contains cell A3.

Set ma = Range("a3").MergeArea 
If ma.Address = "$A$3" Then 
 MsgBox "not merged" 
Else 
 ma.Cells(1, 1).Value = "42" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MergeCells: VBA_Variant
    '''True if the range contains merged cells. Read/write Variant.

#SYNTAX:

expression.MergeCells

expression A variable that represents a Range object.

When you select a range that contains merged cells, the resulting selection may be different from the intended selection. Use the Address property to check the address of the selected range.

This example sets the value of the merged range that contains cell A3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

When you select a range that contains merged cells, the resulting selection may be different from the intended selection. Use the Address property to check the address of the selected range.

This example sets the value of the merged range that contains cell A3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the value of the merged range that contains cell A3.

Set ma = Range("a3").MergeArea 
If Range("a3").MergeCells Then 
 ma.Cells(1, 1).Value = "42" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Next: Range
    '''Returns a Range object that represents the next cell.

#SYNTAX:

expression.Next

expression A variable that represents a Range object.

If the object is a range, this property emulates the Tab key, although the property returns the next cell without selecting it.

On a protected sheet, this property returns the next unlocked cell. On an unprotected sheet, this property always returns the cell immediately to the right of the specified cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object is a range, this property emulates the Tab key, although the property returns the next cell without selecting it.

On a protected sheet, this property returns the next unlocked cell. On an unprotected sheet, this property always returns the cell immediately to the right of the specified cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NumberFormat: VBA_Variant
    '''Returns or sets a Variant value that represents the format code for the object.

#SYNTAX:

expression.NumberFormat

expression A variable that represents a Range object.

This property returns Null if all cells in the specified range don't have the same number format.

The format code is the same string as the Format Codes option in the Format Cells dialog box. The Format function uses different format code strings than do the NumberFormat and NumberFormatLocal properties.

For more information, see Number format codes (Microsoft Support).

These examples set the number format for cell A17, row one, and column C (respectively) on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns Null if all cells in the specified range don't have the same number format.

The format code is the same string as the Format Codes option in the Format Cells dialog box. The Format function uses different format code strings than do the NumberFormat and NumberFormatLocal properties.

For more information, see Number format codes (Microsoft Support).

These examples set the number format for cell A17, row one, and column C (respectively) on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

These examples set the number format for cell A17, row one, and column C (respectively) on Sheet1.

Worksheets("Sheet1").Range("A17").NumberFormat = "General" 
Worksheets("Sheet1").Rows(1).NumberFormat = "hh:mm:ss" 
Worksheets("Sheet1").Columns("C"). _ 
 NumberFormat = "$#,##0.00_);[Red]($#,##0.00)"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NumberFormatLocal: VBA_Variant
    '''Returns or sets a Variant value that represents the format code for the object as a string in the language of the user.

#SYNTAX:

expression.NumberFormatLocal

expression A variable that represents a Range object.

The Format function uses different format code strings than do the NumberFormat and NumberFormatLocal properties.

For more information, see Number format codes (Microsoft Support).

This example displays the number format for cell A1 on Sheet1 in the language of the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The Format function uses different format code strings than do the NumberFormat and NumberFormatLocal properties.

For more information, see Number format codes (Microsoft Support).

This example displays the number format for cell A1 on Sheet1 in the language of the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number format for cell A1 on Sheet1 in the language of the user.

MsgBox "The number format for cell A1 is " & _ 
 Worksheets("Sheet1").Range("A1").NumberFormatLocal

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Offset: Range
    '''Returns a Range object that represents a range that's offset from the specified range.

#SYNTAX:

expression.Offset (RowOffset, ColumnOffset)

expression A variable that represents a Range object.

This example activates the cell three columns to the right of and three rows down from the active cell on Sheet1.

This example assumes that Sheet1 contains a table that has a header row. The example selects the table, without selecting the header row. The active cell must be somewhere in the table before the example is run.

If RowOffset or ColumnOffset are 0 (zero) they can be omitted.

Select cell D1

Select cell A5

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example activates the cell three columns to the right of and three rows down from the active cell on Sheet1.

Worksheets("Sheet1").Activate 
ActiveCell.Offset(rowOffset:=3, columnOffset:=3).Activate

This example assumes that Sheet1 contains a table that has a header row. The example selects the table, without selecting the header row. The active cell must be somewhere in the table before the example is run.

Set tbl = ActiveCell.CurrentRegion 
tbl.Offset(1, 0).Resize(tbl.Rows.Count - 1, _ 
 tbl.Columns.Count).Select

If RowOffset or ColumnOffset are 0 (zero) they can be omitted.

Select cell D1

Range("A1").Offset(, 3).Select

Select cell A5

Range("A1").Offset(4).Select

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Orientation: VBA_Variant
    '''Returns or sets a Variant value that represents the text orientation.

#SYNTAX:

expression.Orientation

expression A variable that represents a Range object.

The value of this property can be set to an integer value from -90 to 90 degrees or to one of the XlOrientation constants.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The value of this property can be set to an integer value from -90 to 90 degrees or to one of the XlOrientation constants.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Range object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Phonetic: Phonetic
    '''Returns the Phonetic object, which contains information about a specific phonetic text string in a cell.

#SYNTAX:

expression.Phonetic

expression An expression that returns a Range object.

Phonetic

This property provides compatibility with earlier versions of Microsoft Excel. Use Phonetics (index), where index is the index number of the phonetic text, to return a single Phonetic object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Phonetic

#REMARKS:

This property provides compatibility with earlier versions of Microsoft Excel. Use Phonetics (index), where index is the index number of the phonetic text, to return a single Phonetic object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Phonetics: Phonetics
    '''Returns the Phonetics collection of the range. Read-only.

#SYNTAX:

expression.Phonetics

expression A variable that represents a Range object.

This example displays all the Phonetic objects in the active cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays all the Phonetic objects in the active cell.

Set objPhon = ActiveCell.Phonetics 
With objPhon 
 For Each objPhonItem in objPhon 
 MsgBox "Phonetic object: " & .Text 
 Next 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrefixCharacter: VBA_Variant
    '''Returns the prefix character for the cell. Read-only Variant.

#SYNTAX:

expression.PrefixCharacter

expression A variable that represents a Range object.

If the TransitionNavigKeys property is False, this prefix character will be ' for a text label, or blank.

If the TransitionNavigKeys property is True, this character will be ' for a left-justified label, " for a right-justified label, ^ for a centered label, \ for a repeated label, or blank.

This example displays the prefix character for cell A1 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the TransitionNavigKeys property is False, this prefix character will be ' for a text label, or blank.

If the TransitionNavigKeys property is True, this character will be ' for a left-justified label, " for a right-justified label, ^ for a centered label, \ for a repeated label, or blank.

This example displays the prefix character for cell A1 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the prefix character for cell A1 on Sheet1.

MsgBox "The prefix character is " & _ 
 Worksheets("Sheet1").Range("A1").PrefixCharacter

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ReadingOrder: XlReadingOrder | xlRTL | xlLTR | xlContext | int
    '''Returns or sets the reading order for the specified object. Can be one of the following XlReadingOrder constants: xlRTL (right-to-left), xlLTR (left-to-right), or xlContext. Read/write Long.

#SYNTAX:

expression.ReadingOrder

expression A variable that represents a Range object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Resize: Range
    '''Resizes the specified range. Returns a Range object that represents the resized range.

#SYNTAX:

expression.Resize (RowSize, ColumnSize)

expression An expression that returns a Range object.

Range

This example resizes the selection on Sheet1 to extend it by one row and one column.

This example assumes that you have a table on Sheet1 that has a header row. The example selects the table without selecting the header row. The active cell must be somewhere in the table before you run the example.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Range

#EXAMPLE:

This example resizes the selection on Sheet1 to extend it by one row and one column.

Worksheets("Sheet1").Activate 
numRows = Selection.Rows.Count 
numColumns = Selection.Columns.Count 
Selection.Resize(numRows + 1, numColumns + 1).Select

This example assumes that you have a table on Sheet1 that has a header row. The example selects the table without selecting the header row. The active cell must be somewhere in the table before you run the example.

Set tbl = ActiveCell.CurrentRegion 
tbl.Offset(1, 0).Resize(tbl.Rows.Count - 1, _ 
 tbl.Columns.Count).Select

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Row: int
    '''Returns the number of the first row of the first area in the range. Read-only Long.

#SYNTAX:

expression.Row

expression A variable that represents a Range object.

This example sets the row height of every other row on Sheet1 to 4 points.

This example uses the BeforeDoubleClick worksheet event to copy a row of data from one worksheet to another. To run this code, the name of the target worksheet must be in column A. When you double-click a cell that contains data, this example gets the target worksheet name from column A and copies the entire row of data into the next available row on the target worksheet. This example accesses the active row by using the Target keyword.

This example deletes the empty rows from a selected range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the row height of every other row on Sheet1 to 4 points.

For Each rw In Worksheets("Sheet1").Rows 
    If rw.Row Mod 2 = 0 Then 
        rw.RowHeight = 4 
    End If 
Next rw

This example uses the BeforeDoubleClick worksheet event to copy a row of data from one worksheet to another. To run this code, the name of the target worksheet must be in column A. When you double-click a cell that contains data, this example gets the target worksheet name from column A and copies the entire row of data into the next available row on the target worksheet. This example accesses the active row by using the Target keyword.

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    'If the double click occurs on the header row or an empty cell, exit the macro.
    If Target.Row = 1 Then Exit Sub
    If Target.Row > ActiveSheet.UsedRange.Rows.Count Then Exit Sub
    If Target.Column > ActiveSheet.UsedRange.Columns.Count Then Exit Sub
    
    'Override the default double-click behavior with this function.
    Cancel = True
    
    'Declare your variables.
    Dim wks As Worksheet, xRow As Long
    
    'If an error occurs, use inline error handling.
    On Error Resume Next
    
    'Set the target worksheet as the worksheet whose name is listed in the first cell of the current row.
    Set wks = Worksheets(CStr(Cells(Target.Row, 1).Value))
    'If there is an error, exit the macro.
    If Err > 0 Then
        Err.Clear
        Exit Sub
    'Otherwise, find the next empty row in the target worksheet and copy the data into that row.
    Else
        xRow = wks.Cells(wks.Rows.Count, 1).End(xlUp).Row + 1
        wks.Range(wks.Cells(xRow, 1), wks.Cells(xRow, 7)).Value = _
        Range(Cells(Target.Row, 1), Cells(Target.Row, 7)).Value
    End If
End Sub

This example deletes the empty rows from a selected range.

Sub Delete_Empty_Rows()
    'The range from which to delete the rows.
    Dim rnSelection As Range
    
    'Row and count variables used in the deletion process.
    Dim lnLastRow As Long
    Dim lnRowCount As Long
    Dim lnDeletedRows As Long
    
    'Initialize the number of deleted rows.
    lnDeletedRows = 0
    
    'Confirm that a range is selected, and that the range is contiguous.
    If TypeName(Selection) = "Range" Then
        If Selection.Areas.Count = 1 Then
            
            'Initialize the range to what the user has selected, and initialize the count for the upcoming FOR loop.
            Set rnSelection = Application.Selection
            lnLastRow = rnSelection.Rows.Count
        
            'Start at the bottom row and work up: if the row is empty then
            'delete the row and increment the deleted row count.
            For lnRowCount = lnLastRow To 1 Step -1
                If Application.CountA(rnSelection.Rows(lnRowCount)) = 0 Then
                    rnSelection.Rows(lnRowCount).Delete
                    lnDeletedRows = lnDeletedRows + 1
                End If
            Next lnRowCount
        
            rnSelection.Resize(lnLastRow - lnDeletedRows).Select
         Else
            MsgBox "Please select only one area.", vbInformation
         End If
    Else
        MsgBox "Please select a range.", vbInformation
    End If
    
    'Turn screen updating back on.
    Application.ScreenUpdating = True

End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RowHeight: float
    '''Returns or sets the height of the first row in the range specified, measured in points. Read/write Double.

#SYNTAX:

expression.RowHeight

expression A variable that represents a Range object.

The RowHeight property sets the height for all rows in a range of cells.

Use the AutoFit method to set row heights based on the contents of cells.

If a merged cell is in the range, RowHeight returns Null for varied row heights. Use the Height property to return the total height of a range of cells.

When a range contains rows of different heights, RowHeight might return the height of the first row or might return Null.

This example doubles the height of row one on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The RowHeight property sets the height for all rows in a range of cells.

Use the AutoFit method to set row heights based on the contents of cells.

If a merged cell is in the range, RowHeight returns Null for varied row heights. Use the Height property to return the total height of a range of cells.

When a range contains rows of different heights, RowHeight might return the height of the first row or might return Null.

This example doubles the height of row one on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example doubles the height of row one on Sheet1.

With Worksheets("Sheet1").Rows(1) 
 .RowHeight = .RowHeight * 2 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Rows: Range
    '''Returns a Range object that represents the rows in the specified range.

#SYNTAX:

expression.Rows

expression A variable that represents a Range object.

To return a single row, use the Item property or equivalently include an index in parentheses. For example, both Selection.Rows(1) and Selection.Rows.Item(1) return the first row of the selection.

When applied to a Range object that is a multiple selection, this property returns rows from only the first area of the range. For example, if the Range object someRange has two areas—A1:B2 and C3:D4—,someRange.Rows.Count returns 2, not 4. To use this property on a range that may contain a multiple selection, test Areas.Count to determine whether the range is a multiple selection. If it is, loop over each area in the range, as shown in the third example.

The returned range might be outside the specified range. For example, Range("A1:B2").Rows(5) returns cells A5:B5. For more information, see the Item property.

Using the Rows property without an object qualifier is equivalent to using ActiveSheet.Rows. For more information, see the Worksheet.Rows property.

This example deletes the range B5:Z5 on Sheet1 of the active workbook.

This example deletes rows in the current region on worksheet one of the active workbook where the value of cell one in the row is the same as the value of cell one in the previous row.

This example displays the number of rows in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

To return a single row, use the Item property or equivalently include an index in parentheses. For example, both Selection.Rows(1) and Selection.Rows.Item(1) return the first row of the selection.

When applied to a Range object that is a multiple selection, this property returns rows from only the first area of the range. For example, if the Range object someRange has two areas—A1:B2 and C3:D4—,someRange.Rows.Count returns 2, not 4. To use this property on a range that may contain a multiple selection, test Areas.Count to determine whether the range is a multiple selection. If it is, loop over each area in the range, as shown in the third example.

The returned range might be outside the specified range. For example, Range("A1:B2").Rows(5) returns cells A5:B5. For more information, see the Item property.

Using the Rows property without an object qualifier is equivalent to using ActiveSheet.Rows. For more information, see the Worksheet.Rows property.

This example deletes the range B5:Z5 on Sheet1 of the active workbook.

This example deletes rows in the current region on worksheet one of the active workbook where the value of cell one in the row is the same as the value of cell one in the previous row.

This example displays the number of rows in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example deletes the range B5:Z5 on Sheet1 of the active workbook.

Worksheets("Sheet1").Range("B2:Z44").Rows(3).Delete

This example deletes rows in the current region on worksheet one of the active workbook where the value of cell one in the row is the same as the value of cell one in the previous row.

For Each rw In Worksheets(1).Cells(1, 1).CurrentRegion.Rows
   this = rw.Cells(1, 1).Value 
   If this = last Then rw.Delete 
   last = this 
Next

This example displays the number of rows in the selection on Sheet1. If more than one area is selected, the example loops through each area.

Public Sub ShowNumberOfRowsInSheet1Selection
   Worksheets("Sheet1").Activate 
   
   Dim selectedRange As Excel.Range
   Set selectedRange = Selection
   
   Dim areaCount As Long
   areaCount = Selection.Areas.Count 
   
   If areaCount <= 1 Then 
      MsgBox "The selection contains " & _ 
             Selection.Rows.Count & " rows." 
   Else 
      Dim areaIndex As Long
      areaIndex = 1 
      For Each area In Selection.Areas 
         MsgBox "Area " & areaIndex & " of the selection contains " & _ 
                area.Rows.Count & " rows." 
         areaIndex = areaIndex + 1 
      Next 
   End If
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SavedAsArray: bool
    self.ShrinkToFit: VBA_Variant
    '''Returns or sets a Variant value that indicates if text automatically shrinks to fit in the available column width.

#SYNTAX:

expression.ShrinkToFit

expression A variable that represents a Range object.

This property returns True if text automatically shrinks to fit in the available column width, or Null if this property isn't set to the same value for all cells in the specified range.

This example causes text in row one to automatically shrink to fit in the available column width.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns True if text automatically shrinks to fit in the available column width, or Null if this property isn't set to the same value for all cells in the specified range.

This example causes text in row one to automatically shrink to fit in the available column width.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes text in row one to automatically shrink to fit in the available column width.

Rows(1).ShrinkToFit = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SmartTags: SmartTags
    self.SoundNote: SoundNote
    '''Note
This property should not be used. Sound notes have been removed from Microsoft Excel.

#SYNTAX:

expression.SoundNote

expression A variable that represents a Range object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SparklineGroups: SparklineGroups
    '''Returns a SparklineGroups object that represents an existing group of sparklines from the specified range. Read-only.

#SYNTAX:

expression.SparklineGroups

expression A variable that represents a Range object.

SparklineGroups

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: SparklineGroups
    '''

    self.Style: Style
    '''Returns or sets a Variant value containing a Style object that represents the style of the specified range.

#SYNTAX:

expression.Style

expression A variable that represents a Range object.

This example applies the Normal style to cell A1 on Sheet1.

An alternative is the following.

If cell B4 on Sheet1 currently has the Normal style applied, this example applies the Percent style.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example applies the Normal style to cell A1 on Sheet1.

Worksheets("Sheet1").Range("A1").Style = "Normal"

An alternative is the following.

Worksheets("Sheet1").Range("A1").Style = ThisWorkbook.Styles("Normal")

If cell B4 on Sheet1 currently has the Normal style applied, this example applies the Percent style.

If Worksheets("Sheet1").Range("B4").Style = "Normal" Then 
 Worksheets("Sheet1").Range("B4").Style = "Percent" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Text: str
    '''Returns the formatted text for the specified object. Read-only String.

#SYNTAX:

expression.Text

expression A variable that represents a Range object.

The Text property is most often used for a range of one cell. If the range includes more than one cell, the Text property returns Null, except when all the cells in the range have identical contents and formats.

If the contents of the cell is wider than the width available for display, the Text property will modify the displayed value.

This example illustrates the difference between the Text and Value  properties of cells that contain formatted numbers.

Cells containing numeric values may have their displayed value modified when the column isn't wide enough. The example below shows this using two columns. The first column is wide enough to display the values. A format is applied and then a value entered showing the full value. The second column has its width reduced such that when the cells are copied over it is too narrow causing the displayed value to be moified.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The Text property is most often used for a range of one cell. If the range includes more than one cell, the Text property returns Null, except when all the cells in the range have identical contents and formats.

If the contents of the cell is wider than the width available for display, the Text property will modify the displayed value.

This example illustrates the difference between the Text and Value  properties of cells that contain formatted numbers.

Cells containing numeric values may have their displayed value modified when the column isn't wide enough. The example below shows this using two columns. The first column is wide enough to display the values. A format is applied and then a value entered showing the full value. The second column has its width reduced such that when the cells are copied over it is too narrow causing the displayed value to be moified.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Option Explicit

Public Sub DifferencesBetweenValueAndTextProperties()
    Dim cell As Range
    Set cell = Worksheets("Sheet1").Range("A1")
    cell.Value = 1198.3
    cell.NumberFormat = "$#,##0_);($#,##0)"
    
    MsgBox "'" & cell.Value & "' is the value." 'Returns: "'1198.3' is the value."
    MsgBox "'" & cell.Text & "' is the text."    'Returns: "'$1,198' is the text."
End Sub

Public Sub TextWidthDifferences()
    
    Dim wideColumn As Range
    Set wideColumn = Sheet1.Range("B2")
    wideColumn.Value = "Wide Enough Column"
    wideColumn.Columns.AutoFit
    
    Sheet1.Range("B3").Value2 = 123456789
    
    Const CurrencyWith2DecimalsFormat As String = "$#,##0.00"
    Dim currencyCell As Range
    Set currencyCell = Sheet1.Range("B4")
    currencyCell.Value2 = 1234.56
    currencyCell.NumberFormat = CurrencyWith2DecimalsFormat
    
    Dim narrowColumn As Range
    Set narrowColumn = Sheet1.Range("C2")
    narrowColumn.Value = "Reduced Width Column"
    narrowColumn.ColumnWidth = 7.5
    
    Sheet1.Range("B3:B4").AutoFill Destination:=Sheet1.Range("B3:C4"), Type:=XlAutoFillType.xlFillDefault
    Debug.Print Sheet1.Range("C3").Text
    Debug.Print Sheet1.Range("C4").Text
End Sub
    '''

    self.Top: VBA_Variant
    '''Returns a Variant value that represents the distance, in points, from the top edge of row 1 to the top edge of the range.

#SYNTAX:

expression.Top

expression A variable that represents a Range object.

If the range is discontinuous, the first area is used. If the range is more than one row high, the top (lowest numbered) row in the range is used.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the range is discontinuous, the first area is used. If the range is more than one row high, the top (lowest numbered) row in the range is used.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseStandardHeight: VBA_Variant
    '''True if the row height of the Range object equals the standard height of the sheet. Returns Null if the range contains more than one row and the rows aren't all the same height. Read/write Variant.

#SYNTAX:

expression.UseStandardHeight

expression A variable that represents a Range object.

This example sets the height of row one on Sheet1 to the standard height.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the height of row one on Sheet1 to the standard height.

Worksheets("Sheet1").Rows(1).UseStandardHeight = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseStandardWidth: VBA_Variant
    '''True if the column width of the Range object equals the standard width of the sheet. Returns null if the range contains more than one column and the columns aren't all the same width. Read/write Variant.

#SYNTAX:

expression.UseStandardWidth

expression A variable that represents a Range object.

This example sets the width of column A on Sheet1 to the standard width.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the width of column A on Sheet1 to the standard width.

Worksheets("Sheet1").Columns("A").UseStandardWidth = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Validation: Validation
    '''Returns the Validation object that represents data validation for the specified range. Read-only.

#SYNTAX:

expression.Validation

expression A variable that represents a Range object.

This example causes data validation for cell E5 to allow blank values.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes data validation for cell E5 to allow blank values.

Range("e5").Validation.IgnoreBlank = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Value: VBA_Variant
    '''Returns or sets a Variant value that represents the value of the specified range.

#SYNTAX:

expression.Value (RangeValueDataType)

expression A variable that represents a Range object.

When setting a range of cells with the contents of an XML spreadsheet file, only values of the first sheet in the workbook are used. You cannot set or get a discontiguous range of cells in the XML spreadsheet format.

The default member of Range forwards calls without parameters to Value. Thus, someRange = someOtherRange is equivalent to someRange.Value = someOtherRange.Value.

For ranges whose first area contains more than one cell, Value returns a Variant containing a 2-dimensional array of the values in the individual cells of the first range.

Assigning a 2-dim array to the the Value property will copy the values to the range in one operation. If the target range is larger than the array, the remaining cells will receive an error value.

Assigning an array to a multi-area range is not properly supported and should be avoided.

This example sets the value of cell A1 on Sheet1 of the active workbook to 3.14159.

This example loops on cells A1:D10 on Sheet1 of the active workbook. If one of the cells has a value of less than 0.001, the code replaces the value with 0 (zero).

This example loops over the values in the range A1:CC5000 on Sheet1. If one of the values is less than 0.001, the code replaces the value with 0 (zero). Finally it copies the values to the original range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

When setting a range of cells with the contents of an XML spreadsheet file, only values of the first sheet in the workbook are used. You cannot set or get a discontiguous range of cells in the XML spreadsheet format.

The default member of Range forwards calls without parameters to Value. Thus, someRange = someOtherRange is equivalent to someRange.Value = someOtherRange.Value.

For ranges whose first area contains more than one cell, Value returns a Variant containing a 2-dimensional array of the values in the individual cells of the first range.

Assigning a 2-dim array to the the Value property will copy the values to the range in one operation. If the target range is larger than the array, the remaining cells will receive an error value.

Assigning an array to a multi-area range is not properly supported and should be avoided.

This example sets the value of cell A1 on Sheet1 of the active workbook to 3.14159.

This example loops on cells A1:D10 on Sheet1 of the active workbook. If one of the cells has a value of less than 0.001, the code replaces the value with 0 (zero).

This example loops over the values in the range A1:CC5000 on Sheet1. If one of the values is less than 0.001, the code replaces the value with 0 (zero). Finally it copies the values to the original range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the value of cell A1 on Sheet1 of the active workbook to 3.14159.

Worksheets("Sheet1").Range("A1").Value = 3.14159

This example loops on cells A1:D10 on Sheet1 of the active workbook. If one of the cells has a value of less than 0.001, the code replaces the value with 0 (zero).

For Each cell in Worksheets("Sheet1").Range("A1:D10") 
   If cell.Value < .001 Then 
      cell.Value = 0 
   End If 
Next cell

This example loops over the values in the range A1:CC5000 on Sheet1. If one of the values is less than 0.001, the code replaces the value with 0 (zero). Finally it copies the values to the original range.

Public Sub TruncateSmallValuesInDataArea()
   Dim dataArea As Excel.Range
   Set dataArea = ThisworkBook.Worksheets("Sheet1").Range("A1:CC5000")
   
   Dim valuesArray() As Variant
   valuesArray = dataArea.Value
   
   Dim rowIndex As Long
   Dim columnIndex As Long
   For rowIndex = LBound(valuesArray, 1) To UBound(valuesArray, 1)
      For columnIndex = LBound(valuesArray, 2) To UBound(valuesArray, 2)
	     If valuesArray(rowIndex, columnIndex) < 0.001 Then
		    valuesArray(rowIndex, columnIndex) = 0
		 End If 
	  Next
   Next
   
   dataArea.Value = valuesArray
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Value2: VBA_Variant
    '''Returns or sets the cell value. Read/write Variant.

#SYNTAX:

expression.Value2

expression A variable that represents a Range object.

The only difference between this property and the Value property is that the Value2 property doesn't use the Currency and Date data types. You can return values formatted with these data types as floating-point numbers by using the Double data type.

This example uses the Value2 property to add the values of two cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The only difference between this property and the Value property is that the Value2 property doesn't use the Currency and Date data types. You can return values formatted with these data types as floating-point numbers by using the Double data type.

This example uses the Value2 property to add the values of two cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example uses the Value2 property to add the values of two cells.

Range("a1").Value2 = Range("b1").Value2 + Range("c1").Value2

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.VerticalAlignment: VBA_object
    '''Returns or sets a Variant value that represents the vertical alignment of the specified object. Read/write.

#SYNTAX:

expression.VerticalAlignment

expression A variable that represents a Range object.

The value of this property can be set to one of the XlVAlign constants.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The value of this property can be set to one of the XlVAlign constants.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Width: float | points
    '''Returns a Double value that represents the width of a range in points. Read-only.

#SYNTAX:

expression.Width

expression A variable that represents a Range object.

To set the width, use the ColumnWidth property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

To set the width, use the ColumnWidth property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Worksheet: Worksheet
    '''Returns a Worksheet object that represents the worksheet containing the specified range. Read-only.

#SYNTAX:

expression.Worksheet

expression A variable that represents a Range object.

This example displays the name of the worksheet that contains the active cell. The example must be run from a worksheet.

This example displays the name of the worksheet that contains the range named "testRange."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of the worksheet that contains the active cell. The example must be run from a worksheet.

MsgBox ActiveCell.Worksheet.Name

This example displays the name of the worksheet that contains the range named "testRange."

MsgBox Range("testRange").Worksheet.Name

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.WrapText: VBA_Variant
    '''Returns or sets a Variant value that indicates if Microsoft Excel wraps the text in the object.

#SYNTAX:

expression.WrapText

expression A variable that represents a Range object.

This property returns True if text is wrapped in all cells within the specified range, False if text is not wrapped in all cells within the specified range, or Null if the specified range contains some cells that wrap text and other cells that don't.

Microsoft Excel will change the row height of the range, if necessary, to accommodate the text in the range.

This example formats cell B2 on Sheet1 so that the text wraps within the cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns True if text is wrapped in all cells within the specified range, False if text is not wrapped in all cells within the specified range, or Null if the specified range contains some cells that wrap text and other cells that don't.

Microsoft Excel will change the row height of the range, if necessary, to accommodate the text in the range.

This example formats cell B2 on Sheet1 so that the text wraps within the cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example formats cell B2 on Sheet1 so that the text wraps within the cell.

Worksheets("Sheet1").Range("B2").Value = _ 
 "This text should wrap in a cell." 
Worksheets("Sheet1").Range("B2").WrapText = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.XPath: XPath
    '''Returns an XPath object that represents the XPath of the element mapped to the specified Range object. The context of the range determines whether the action succeeds or returns an empty object. Read-only.

#SYNTAX:

expression.XPath

expression A variable that represents a Range object.

The XPath property is valid when the range it contains meets the following conditions:

If the range selection is valid, but none of the cells are mapped, Excel returns an XPath object so that you can access the SetValue method to create a mapping.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The XPath property is valid when the range it contains meets the following conditions:

If the range selection is valid, but none of the cells are mapped, Excel returns an XPath object so that you can access the SetValue method to create a mapping.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self._Default: float
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Activate(self) -> VBA_Variant:
    '''Activates a single cell, which must be inside the current selection. To select a range of cells, use the Select method.

#RETURN-VALUE: Variant

#EXAMPLE:

This example selects cells A1:C3 on Sheet1 and then makes cell B2 the active cell.

Worksheets("Sheet1").Activate 
Range("A1:C3").Select 
Range("B2").Activate

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddComment(self, Text) -> Comment:
    '''Adds a comment to the range.

#PARAMETERS:

Name Required/Optional Data type Description

Text Optional Variant The comment text.

#RETURN-VALUE: Comment

#EXAMPLE:

This example adds a comment to cell E5 on worksheet one.

Worksheets(1).Range("E5").AddComment "Current Sales"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddCommentThreaded(self, Text) -> CommentThreaded:
    '''Adds a new modern threaded comment to the range if no comment already exists.

#PARAMETERS:

Name Required/Optional Data type Description

Text Required String The comment text.

#RETURN-VALUE: CommentThreaded

#EXAMPLE:

This example adds a threaded comment to cell E5 on worksheet one.

Worksheets(1).Range("E5").AddCommentThreaded "Current Sales"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AdvancedFilter(self, Action, CriteriaRange, CopyToRange, Unique) -> VBA_Variant:
    '''Filters or copies data from a list based on a criteria range. If the initial selection is a single cell, that cell's current region is used.

#PARAMETERS:

Name Required/Optional Data type Description

Action Required XlFilterAction One of the constants of XlFilterAction specifying whether to make a copy or filter the list in place.

CriteriaRange Optional Variant The criteria range. If this argument is omitted, there are no criteria.

CopyToRange Optional Variant The destination range for the copied rows if Action is xlFilterCopy. Otherwise, this argument is ignored.

Unique Optional Variant True to filter unique records only. False to filter all records that meet the criteria. The default value is False.

#RETURN-VALUE: Variant

#EXAMPLE:

This example filters a database named Database based on a criteria range named Criteria.

Range("Database").AdvancedFilter _ 
 Action:=xlFilterInPlace, _ 
 CriteriaRange:=Range("Criteria")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AllocateChanges(self) -> None:
    '''Performs a writeback operation for all edited cells in a range based on an OLAP data source.

#REMARKS:

The AllocateChanges method executes an UPDATE CUBE statement for all changes made in the range since the last apply changes operation was committed. This method generates a run-time error if it is executed on a range based on a non-OLAP data source.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ApplyNames(self, Names, IgnoreRelativeAbsolute, UseRowColumnNames, OmitColumn, OmitRow, Order, AppendLast) -> VBA_Variant:
    '''Applies names to the cells in the specified range.

#PARAMETERS:

Name Required/Optional Data type Description

Names Optional Variant An array of the names to be applied. If this argument is omitted, all names on the sheet are applied to the range.

IgnoreRelativeAbsolute Optional Variant True to replace references with names, regardless of the reference types of either the names or references. False to replace absolute references only with absolute names, relative references only with relative names, and mixed references only with mixed names. The default value is True.

UseRowColumnNames Optional Variant True to use the names of row and column ranges that contain the specified range if names for the range cannot be found. False to ignore the OmitColumn and OmitRow arguments. The default value is True.

OmitColumn Optional Variant True to replace the entire reference with the row-oriented name. The column-oriented name can be omitted only if the referenced cell is in the same column as the formula and is within a row-oriented named range. The default value is True.

OmitRow Optional Variant True to replace the entire reference with the column-oriented name. The row-oriented name can be omitted only if the referenced cell is in the same row as the formula and is within a column-oriented named range. The default value is True.

Order Optional XlApplyNamesOrder Determines which range name is listed first when a cell reference is replaced by a row-oriented and column-oriented range name.

AppendLast Optional Variant True to replace the definitions of the names in Names and also replace the definitions of the last names that were defined. False to replace the definitions of the names in Names only. The default value is False.

#RETURN-VALUE: Variant

#REMARKS:

Use the Array function to create the list of names for the Names argument.

If you want to apply names to the entire sheet, use Cells.ApplyNames.

You cannot "unapply" names; to delete names, use the Delete method.

This example applies names to the entire sheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example applies names to the entire sheet.

Cells.ApplyNames Names:=Array("Sales", "Profits")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ApplyOutlineStyles(self) -> VBA_Variant:
    '''Applies outlining styles to the specified range.

#RETURN-VALUE: Variant

#EXAMPLE:

The following example applies automatic outlining styles to the selection. The selection must include the entire outline range on a worksheet.

Selection.ApplyOutlineStyles

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AutoComplete(self, String) -> str:
    '''Returns an AutoComplete match from the list. If there's no AutoComplete match or if more than one entry in the list matches the string to complete, this method returns an empty string.

#PARAMETERS:

Name Required/Optional Data type Description

String Required String The string to complete.

#RETURN-VALUE: String

#REMARKS:

This method works even if the AutoComplete feature is disabled.

This example returns the AutoComplete match for the string segment Ap. An AutoComplete match is made if the column containing cell A5 contains a contiguous list, and one of the entries in the list contains a match for the string.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example returns the AutoComplete match for the string segment Ap. An AutoComplete match is made if the column containing cell A5 contains a contiguous list, and one of the entries in the list contains a match for the string.

s = Worksheets(1).Range("A5").AutoComplete("Ap") 
If Len(s) > 0 Then 
 MsgBox "Completes to " & s 
Else 
 MsgBox "Has no completion" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AutoFill(self, Destination, Type) -> VBA_Variant:
    '''Performs an autofill on the cells in the specified range.

#PARAMETERS:

Name Required/Optional Data type Description

Destination Required Range The cells to be filled. The destination must include the source range.

Type Optional XlAutoFillType Specifies the fill type.

#RETURN-VALUE: Variant

#EXAMPLE:

This example performs an autofill on cells A1:A20 on Sheet1, based on the source range A1:A2 on Sheet1. Before running this example, type 1 in cell A1 and type 2 in cell A2.

Set sourceRange = Worksheets("Sheet1").Range("A1:A2") 
Set fillRange = Worksheets("Sheet1").Range("A1:A20") 
sourceRange.AutoFill Destination:=fillRange

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AutoFilter(self, Field, Criteria1, Operator, Criteria2, VisibleDropDown, SubField) -> VBA_Variant:
    '''Filters a list by using the AutoFilter.

#PARAMETERS:

Name Required/Optional Data type Description

Field Optional Variant The integer offset of the field on which you want to base the filter (from the left of the list; the leftmost field is field one).

Criteria1 Optional Variant The criteria (a string; for example, "101"). Use "=" to find blank fields, "<>" to find non-blank fields, and "><" to select (No Data) fields in data types.If this argument is omitted, the criteria is All. If Operator is xlTop10Items, Criteria1 specifies the number of items (for example, "10").

Operator Optional XlAutoFilterOperator An XlAutoFilterOperator constant specifying the type of filter.

Criteria2 Optional Variant The second criteria (a string). Used with Criteria1 and Operator to construct compound criteria. Also used as single criteria on date fields filtering by date, month or year. Followed by an Array detailing the filtering Array(Level, Date). Where Level is 0-2 (year,month,date) and Date is one valid Date inside the filtering period.

SubField Optional Variant The field from a data type on which to apply the criteria (for example, the "Population" field from Geography or "Volume" field from Stocks). Omitting this value targets the "(Display Value)".

VisibleDropDown Optional Variant True to display the AutoFilter drop-down arrow for the filtered field. False to hide the AutoFilter drop-down arrow for the filtered field. True by default.

#RETURN-VALUE: Variant

#REMARKS:

If you omit all the arguments, this method simply toggles the display of the AutoFilter drop-down arrows in the specified range.

Excel for Mac does not support this method. Similar methods on Selection and ListObject are supported.

Unlike in formulas, subfields don't require brackets to include spaces.

This example filters a list starting in cell A1 on Sheet1 to display only the entries in which field one is equal to the string Otis. The drop-down arrow for field one will be hidden.

This example filters a list starting in cell A1 on Sheet1 to display only the entries in which the values of field one contain a SubField, Admin Division 1 (State/province/other), where the value is Washington.

This example filters a table, Table1, on Sheet1 to display only the entries in which the values of field one have a "(Display Value)" that is either 1, 3, Seattle, or Redmond.

Data types can apply multiple SubField filters. This example filters a table, Table1, on Sheet1 to display only the entries in which the values of field one contain a SubField, Time Zone(s), where the value is Pacific Time Zone, and where the SubField named Date Founded is either 1851 or there is "(No Data)".

This example filters a table, Table1, on Sheet1 to display the Top 10 entries for field one based off the Population SubField.

This example filters a table, Table1, on Sheet1 to display the all entries for January 2019 and February 2019 for field one. There does not have to be a row containing January the 31.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example filters a list starting in cell A1 on Sheet1 to display only the entries in which field one is equal to the string Otis. The drop-down arrow for field one will be hidden.

Worksheets("Sheet1").Range("A1").AutoFilter _
 Field:=1, _
 Criteria1:="Otis", _
 VisibleDropDown:=False

This example filters a list starting in cell A1 on Sheet1 to display only the entries in which the values of field one contain a SubField, Admin Division 1 (State/province/other), where the value is Washington.

Worksheets("Sheet1").Range("A1").AutoFilter _
 Field:=1, _
 Criteria1:="Washington", _
 SubField:="Admin Division 1 (State/province/other)"

This example filters a table, Table1, on Sheet1 to display only the entries in which the values of field one have a "(Display Value)" that is either 1, 3, Seattle, or Redmond.

Worksheets("Sheet1").ListObjects("Table1").Range.AutoFilter _
 Field:=1, _
 Criteria1:=Array("1", "3", "Seattle", "Redmond"), _
 Operator:=xlFilterValues

Data types can apply multiple SubField filters. This example filters a table, Table1, on Sheet1 to display only the entries in which the values of field one contain a SubField, Time Zone(s), where the value is Pacific Time Zone, and where the SubField named Date Founded is either 1851 or there is "(No Data)".

Worksheets("Sheet1").ListObjects("Table1").Range.AutoFilter _
 Field:=1, _
 Criteria1:="Pacific Time Zone", _
 SubField:="Time Zone(s)"
Worksheets("Sheet1").ListObjects("Table1").Range.AutoFilter _
 Field:=1, _
 Criteria1:=Array("1851", "><"), _
 Operator:=xlFilterValues, _
 SubField:="Date founded"

This example filters a table, Table1, on Sheet1 to display the Top 10 entries for field one based off the Population SubField.

Worksheets("Sheet1").ListObjects("Table1").Range.AutoFilter _
 Field:=1, _
 Criteria1:="10", _
 Operator:=xlTop10Items, _
 SubField:="Population"

This example filters a table, Table1, on Sheet1 to display the all entries for January 2019 and February 2019 for field one. There does not have to be a row containing January the 31.

Worksheets("Sheet1").ListObjects("Table1").Range.AutoFilter _
 Field:=1, _
 Criteria2:=Array(1, "1/31/2019", 1, "2/28/2019")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AutoFit(self) -> VBA_Variant:
    '''Changes the width of the columns in the range or the height of the rows in the range to achieve the best fit.

#RETURN-VALUE: Variant

#REMARKS:

The Range object must be a row or a range of rows, or a column or a range of columns; otherwise, this method generates an error.

One unit of column width is equal to the width of one character in the Normal style.

This example changes the width of columns A through I on Sheet1 to achieve the best fit.

This example changes the width of columns A through E on Sheet1 to achieve the best fit, based only on the contents of cells A1:E1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example changes the width of columns A through I on Sheet1 to achieve the best fit.

Worksheets("Sheet1").Columns("A:I").AutoFit

This example changes the width of columns A through E on Sheet1 to achieve the best fit, based only on the contents of cells A1:E1.

Worksheets("Sheet1").Range("A1:E1").Columns.AutoFit

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AutoFormat(self, Format, Number, Font, Alignment, Border, Pattern, Width):  pass

  def AutoOutline(self) -> VBA_Variant:
    '''Automatically creates an outline for the specified range. If the range is a single cell, Microsoft Excel creates an outline for the entire sheet. The new outline replaces any existing outline.

#RETURN-VALUE: Variant

#EXAMPLE:

This example creates an outline for the range A1:G37 on Sheet1.

Worksheets("Sheet1").Range("A1:G37").AutoOutline

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BorderAround(self, LineStyle, Weight, ColorIndex, Color, ThemeColor) -> VBA_Variant:
    '''Adds a border to a range and sets the Color, LineStyle, and Weight properties of the Border object for the new border. Variant.

#PARAMETERS:

Name Required/Optional Data type Description

LineStyle Optional Variant One of the constants of XlLineStyle specifying the line style for the border.

Weight Optional XlBorderWeight The border weight.

ColorIndex Optional XlColorIndex The border color, as an index into the current color palette or as an XlColorIndex constant.

Color Optional Variant The border color, as an RGB value.

ThemeColor Optional Variant The theme color, as an index into the current color theme or as an XlThemeColor value.

#RETURN-VALUE: Variant

#REMARKS:

You must specify only one of the following: ColorIndex, Color, or ThemeColor.

You can specify either LineStyle or Weight, but not both. If you don't specify either argument, Microsoft Excel uses the default line style and weight.

This method outlines the entire range without filling it in. To set the borders of all the cells, you must set the Color, LineStyle, and Weight properties for the Borders collection. To clear the border, you must set the LineStyle property to xlLineStyleNone for all the cells in the range.

This example adds a thick red border around the range A1:D4 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a thick red border around the range A1:D4 on Sheet1.

Worksheets("Sheet1").Range("A1:D4").BorderAround _ 
 ColorIndex:=3, Weight:=xlThick

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Calculate(self) -> VBA_Variant:
    '''Calculates all open workbooks, a specific worksheet in a workbook, or a specified range of cells on a worksheet, as shown in the table in the Remarks section.

#RETURN-VALUE: Variant

#REMARKS:

This example calculates the formulas in columns A, B, and C in the used range on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example calculates the formulas in columns A, B, and C in the used range on Sheet1.

Worksheets("Sheet1").UsedRange.Columns("A:C").Calculate

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CalculateRowMajorOrder(self) -> VBA_Variant:
    '''Calculates a specified range of cells.

#RETURN-VALUE: Variant

#REMARKS:

The CalculateRowMajorOrder method calculates the specified range cell-by-cell, from its top-left corner to its to bottom-right corner in row-major order. This is the same process that is used by Excel 2000 and earlier versions to calculate a range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang) -> VBA_Variant:
    '''Checks the spelling of an object.

#PARAMETERS:

Name Required/Optional Data type Description

CustomDictionary Optional Variant A string that indicates the file name of the custom dictionary to be examined if the word isn't found in the main dictionary. If this argument is omitted, the currently specified dictionary is used.

IgnoreUppercase Optional Variant True to have Microsoft Excel ignore words that are all uppercase. False to have Excel check words that are all uppercase. If this argument is omitted, the current setting will be used.

AlwaysSuggest Optional Variant True to have Excel display a list of suggested alternate spellings when an incorrect spelling is found. False to have Excel wait for you to input the correct spelling. If this argument is omitted, the current setting will be used.

SpellLang Optional Variant The language of the dictionary being used. Can be one of the MsoLanguageID values.

#RETURN-VALUE: Variant

#REMARKS:

This method has no return value; Microsoft Excel displays the Spelling dialog box.

To check headers, footers, and objects on a worksheet, use this method on a Worksheet object.

To check only cells and notes, use this method with the object returned by the Cells property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Clear(self) -> VBA_Variant:
    '''Clears the entire object.

#RETURN-VALUE: Variant

#EXAMPLE:

This example clears the formulas and formatting in cells A1:G37 on Sheet1.

Worksheets("Sheet1").Range("A1:G37").Clear

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ClearComments(self) -> None:
    '''Clears all cell comments from the specified range.

#EXAMPLE:

This example clears all comments from cell E5.

Worksheets(1).Range("e5").ClearComments

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ClearContents(self) -> VBA_Variant:
    '''Clears formulas and values from the range.

#RETURN-VALUE: Variant

#EXAMPLE:

This example clears formulas and values from cells A1:G37 on Sheet1, but leaves the cell formatting and conditional formatting intact.

Worksheets("Sheet1").Range("A1:G37").ClearContents

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ClearFormats(self) -> VBA_Variant:
    '''Clears the formatting of the object.

#RETURN-VALUE: Variant

#EXAMPLE:

This example clears all formatting from cells A1:G37 on Sheet1.

Worksheets("Sheet1").Range("A1:G37").ClearFormats

This example clears the formatting from embedded chart one on Sheet1.

Worksheets("Sheet1").ChartObjects(1).Chart.ChartArea.ClearFormats

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ClearHyperlinks(self) -> None:
    '''Removes all hyperlinks from the specified range.

#RETURN-VALUE: Nothing

#REMARKS:

Calling the ClearHyperlinks method on the specified range is equivalent to using the Clear Hyperlinks command from the Clear drop-down list in the Editing section of the Home tab. Only hyperlinks will be removed; all other cell content, such as text and formatting, will be unaffected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ClearNotes(self) -> VBA_Variant:
    '''Clears notes and sound notes from all the cells in the specified range.

#RETURN-VALUE: Variant

#EXAMPLE:

This example clears all notes and sound notes from columns A through C on Sheet1.

Worksheets("Sheet1").Columns("A:C").ClearNotes

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ClearOutline(self) -> VBA_Variant:
    '''Clears the outline for the specified range.

#RETURN-VALUE: Variant

#EXAMPLE:

This example clears the outline for the range A1:G37 on Sheet1.

Worksheets("Sheet1").Range("A1:G37").ClearOutline

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ColumnDifferences(self, Comparison) -> Range:
    '''Returns a Range object that represents all the cells whose contents are different from the comparison cell in each column.

#PARAMETERS:

Name Required/Optional Data type Description

Comparison Required Variant A single cell to compare to the specified range.

#RETURN-VALUE: Range

#EXAMPLE:

This example selects the cells in column A on Sheet1 whose contents are different from cell A4.

Sub CompDiff() 
'Setting up data to be compared 
 Range("A1").Value = "Rod" 
 Range("A2").Value = "Bill" 
 Range("A3").Value = "John" 
 Range("A4").Value = "Rod" 
 Range("A5").Value = "Kelly" 
 Range("A6").Value = "Rod" 
 Range("A7").Value = "Paddy" 
 Range("A8").Value = "Rod" 
 Range("A9").Value = "Rod" 
 Range("A10").Value = "Rod" 
 
'Code to do the comparison, selects the values that are unlike A1 
Worksheets("Sheet1").Activate 
Set r1 = ActiveSheet.Columns("A").ColumnDifferences( _ 
 Comparison:=ActiveSheet.Range("A1")) 
r1.Select 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Consolidate(self, Sources, Function, TopRow, LeftColumn, CreateLinks) -> VBA_Variant:
    '''Consolidates data from multiple ranges on multiple worksheets into a single range on a single worksheet. Variant.

#PARAMETERS:

Name Required/Optional Data type Description

Sources Optional Variant The sources of the consolidation as an array of text reference strings in R1C1-style notation. The references must include the full path of sheets to be consolidated.

Function Optional Variant One of the constants of XlConsolidationFunction, which specifies the type of consolidation.

TopRow Optional Variant True to consolidate data based on column titles in the top row of the consolidation ranges. False to consolidate data by position. The default value is False.

LeftColumn Optional Variant True to consolidate data based on row titles in the left column of the consolidation ranges. False to consolidate data by position. The default value is False.

CreateLinks Optional Variant True to have the consolidation use worksheet links. False to have the consolidation copy the data. The default value is False.

#RETURN-VALUE: Variant

#EXAMPLE:

This example consolidates data from Sheet2 and Sheet3 onto Sheet1 by using the SUM function.

Worksheets("Sheet1").Range("A1").Consolidate _ 
 Sources:=Array("Sheet2!R1C1:R37C6", "Sheet3!R1C1:R37C6"), _ 
 Function:=xlSum

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ConvertToLinkedDataType(self, ServiceID, LanguageCulture) -> None:
    '''Attempts to convert all the cells in the range to a Linked data type such as Stocks or Geography.

#PARAMETERS:

Name Required/Optional Data type Description

ServiceID Required Long The ID of the service that will provide the linked entity.

LanguageCulture Required String A string representing the LCID of the language and culture that you would like to use for the linked entity.

#REMARKS:

The method will fail and throw a runtime exception 1004 if the specified locale is not supported on the specified service.

It will have no effect (and throw no exception) in these cases:

This code will convert cell E5 to a Stocks Linked data type in the US-English locale.

This code will convert cell E6 to a Geography Linked data type in the US-English locale.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This code will convert cell E5 to a Stocks Linked data type in the US-English locale.

Range("E5").ConvertToLinkedDataType ServiceID:=268435456, LanguageCulture:= "en-US"

This code will convert cell E6 to a Geography Linked data type in the US-English locale.

Range("E6").ConvertToLinkedDataType ServiceID:=536870912, LanguageCulture:= "en-US"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Copy(self, Destination) -> VBA_Variant:
    '''Copies the range to the specified range or to the Clipboard.

#PARAMETERS:

Name Required/Optional Data type Description

Destination Optional Variant Specifies the new range to which the specified range will be copied. If this argument is omitted, Microsoft Excel copies the range to the Clipboard.

#RETURN-VALUE: Variant

#EXAMPLE:

The following code example copies the formulas in cells A1:D4 on Sheet1 into cells E5:H8 on Sheet2.

Worksheets("Sheet1").Range("A1:D4").Copy _ 
    destination:=Worksheets("Sheet2").Range("E5")

The following code example inspects the value in column D for each row on Sheet1. If the value in column D equals A, the entire row is copied onto SheetA in the next empty row. If the value equals B, the row is copied onto SheetB.

Public Sub CopyRows() 
    Sheets("Sheet1").Select 
    ' Find the last row of data 
    FinalRow = Cells(Rows.Count, 1).End(xlUp).Row 
    ' Loop through each row 
    For x = 2 To FinalRow 
        ' Decide if to copy based on column D 
        ThisValue = Cells(x, 4).Value 
        If ThisValue = "A" Then 
            Cells(x, 1).Resize(1, 33).Copy 
            Sheets("SheetA").Select 
            NextRow = Cells(Rows.Count, 1).End(xlUp).Row + 1 
            Cells(NextRow, 1).Select 
            ActiveSheet.Paste 
            Sheets("Sheet1").Select 
        ElseIf ThisValue = "B" Then 
            Cells(x, 1).Resize(1, 33).Copy 
            Sheets("SheetB").Select 
            NextRow = Cells(Rows.Count, 1).End(xlUp).Row + 1 
            Cells(NextRow, 1).Select 
            ActiveSheet.Paste 
            Sheets("Sheet1").Select 
        End If 
    Next x 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CopyFromRecordset(self, Data, MaxRows, MaxColumns) -> int:
    '''Copies the contents of an ADO or DAO Recordset object onto a worksheet, beginning at the upper-left corner of the specified range. If the Recordset object contains fields with OLE objects in them, this method fails.

#PARAMETERS:

Name Required/Optional Data type Description

Data Required Variant The Recordset object to copy into the range.

MaxRows Optional Variant The maximum number of records to copy onto the worksheet. If this argument is omitted, all the records in the Recordset object are copied.

MaxColumns Optional Variant The maximum number of fields to copy onto the worksheet. If this argument is omitted, all the fields in the Recordset object are copied.

#RETURN-VALUE: Long

#REMARKS:

Copying begins at the current row of the Recordset object. After copying is completed, the EOF property of the Recordset object is True.

This example copies the field names from a DAO Recordset object into the first row of a worksheet and formats the names as bold. The example then copies the recordset onto the worksheet, beginning at cell A2.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example copies the field names from a DAO Recordset object into the first row of a worksheet and formats the names as bold. The example then copies the recordset onto the worksheet, beginning at cell A2.

For iCols = 0 to rs.Fields.Count - 1 
 ws.Cells(1, iCols + 1).Value = rs.Fields(iCols).Name 
Next 
ws.Range(ws.Cells(1, 1), _ 
 ws.Cells(1, rs.Fields.Count)).Font.Bold = True 
ws.Range("A2").CopyFromRecordset rs

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CopyPicture(self, Appearance, Format) -> VBA_Variant:
    '''Copies the selected object to the Clipboard as a picture. Variant.

#PARAMETERS:

Name Required/Optional Data type Description

Appearance Optional XlPictureAppearance Specifies how the picture should be copied.

Format Optional XlCopyPictureFormat The format of the picture.

#RETURN-VALUE: Variant
    '''

  def CreateNames(self, Top, Left, Bottom, Right) -> VBA_Variant:
    '''Creates names in the specified range, based on text labels in the sheet.

#PARAMETERS:

Name Required/Optional Data type Description

Top Optional Variant True to create names by using labels in the top row. The default value is False.

Left Optional Variant True to create names by using labels in the left column. The default value is False.

Bottom Optional Variant True to create names by using labels in the bottom row. The default value is False.

Right Optional Variant True to create names by using labels in the right column. The default value is False.

#RETURN-VALUE: Variant

#REMARKS:

If you don't specify one of Top, Left, Bottom, or Right, Microsoft Excel guesses the location of the text labels, based on the shape of the specified range.

This example creates names for cells B1:B3 based on the text in cells A1:A3. Note that you must include the cells that contain the names in the range, even though the names are created only for cells B1:B3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates names for cells B1:B3 based on the text in cells A1:A3. Note that you must include the cells that contain the names in the range, even though the names are created only for cells B1:B3.

Set rangeToName = Worksheets("Sheet1").Range("A1:B3") 
rangeToName.CreateNames Left:=True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CreatePublisher(self, Edition, Appearance, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU):  pass

  def Cut(self, Destination) -> VBA_Variant:
    '''Cuts the object to the Clipboard or pastes it into a specified destination.

#PARAMETERS:

Name Required/Optional Data type Description

Destination Optional Variant The range where the object should be pasted. If this argument is omitted, the object is cut to the Clipboard.

#RETURN-VALUE: Variant

#REMARKS:

The cut range must be made up of adjacent cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DataSeries(self, Rowcol, Type, Date, Step, Stop, Trend) -> VBA_Variant:
    '''Creates a data series in the specified range. Variant.

#PARAMETERS:

Name Required/Optional Data type Description

Rowcol Optional Variant Can be the xlRows or xlColumns constant to have the data series entered in rows or columns, respectively. If this argument is omitted, the size and shape of the range is used.

Type Optional XlDataSeriesType The type for the data series.

Date Optional XlDataSeriesDate If the Type argument is xlChronological, the Date argument indicates the step date unit.

Step Optional Variant The step value for the series. The default value is 1.

Stop Optional Variant The stop value for the series. If this argument is omitted, Microsoft Excel fills to the end of the range.

Trend Optional Variant True to create a linear trend or growth trend. False to create a standard data series. The default value is False.

#RETURN-VALUE: Variant

#EXAMPLE:

This example creates a series of 12 dates. The series contains the last day of every month in 1996 and is created in the range A1:A12 on Sheet1.

Set dateRange = Worksheets("Sheet1").Range("A1:A12") 
Worksheets("Sheet1").Range("A1").Formula = "31-JAN-1996" 
dateRange.DataSeries Type:=xlChronological, Date:=xlMonth

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DataTypeToText(self) -> None:
    '''If any of the cells in the range are a Linked data type, such as Stocks or Geography, this call will convert their values to text.

#REMARKS:

The call can fail if none of the cells in the range are a Linked data type. In this case, it will throw runtime exception 1004.

This code will convert the range E5:G10 into text.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This code will convert the range E5:G10 into text.

Worksheets(1).Range("E5:G10").DataTypeToText

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Delete(self, Shift) -> VBA_Variant:
    '''Deletes the object.

#PARAMETERS:

Name Required/Optional Data type Description

Shift Optional Variant Used only with Range objects. Specifies how to shift cells to replace deleted cells.Can be one of the following XlDeleteShiftDirection constants: xlShiftToLeft or xlShiftUp.If this argument is omitted, Microsoft Excel decides based on the shape of the range.

#RETURN-VALUE: Variant
    '''

  def DialogBox(self) -> VBA_Variant:
    '''Displays a dialog box defined by a dialog box definition table on a Microsoft Excel 4.0 macro sheet. Returns the number of the chosen control, or returns False if the user chooses the Cancel button.

#RETURN-VALUE: Variant

#REMARKS:

The Range must refer to a dialog box definition table on a Microsoft Excel 4.0 macro sheet.

This example runs a Microsoft Excel 4.0 dialog box and then displays the return value in a message box. The dialogRange variable refers to the dialog box definition table on the Microsoft Excel 4.0 macro sheet named Macro1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example runs a Microsoft Excel 4.0 dialog box and then displays the return value in a message box. The dialogRange variable refers to the dialog box definition table on the Microsoft Excel 4.0 macro sheet named Macro1.

Set dialogRange = Excel4MacroSheets("Macro1").Range("myDialogBox") 
result = dialogRange.DialogBox 
MsgBox result

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Dirty(self) -> None:
    '''Designates a range to be recalculated when the next recalculation occurs.

#REMARKS:

The Calculate method forces the specified range to be recalculated for cells that Microsoft Excel understands as needing recalculation.

If the application is in manual calculation mode, using the Dirty method instructs Excel to identify the specified cell to be recalculated. If the application is in automatic calculation mode, using the Dirty method instructs Excel to perform a recalculation.

In this example, Excel enters a formula in cell A3, saves the changes, and then recalculates cell A3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Excel enters a formula in cell A3, saves the changes, and then recalculates cell A3.

Sub UseDirtyMethod() 
 
 MsgBox "Two values and a formula will be entered." 
 Range("A1").Value = 1 
 Range("A2").Value = 2 
 Range("A3").Formula = "=A1+A2" 
 
 ' Save the changes made to the worksheet. 
 Application.DisplayAlerts = False 
 Application.Save 
 MsgBox "Changes saved." 
 
 ' Force a recalculation of range A3. 
 Application.Range("A3").Dirty 
 MsgBox "Try to close the file without saving and a dialog box will appear." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DiscardChanges(self) -> None:
    '''Discards all changes in the edited cells of the range.

#REMARKS:

For a range based on an OLAP data source, this method removes all values and formulas entered in the cells, and then runs an update operation to retrieve the latest values from the data source. It sets the data source value to NULL for all value cells that are edited, and also executes a ROLLBACK TRANSACTION statement against the OLAP server.

For ranges based on non-OLAP data sources, this method simply clears all edited cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def EditionOptions(self, Type, Option, Name, Reference, Appearance, ChartSize, Format) -> VBA_Variant:
    '''You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required xlEditionType See the Help included with Microsoft Office Macintosh Edition.

Option Required xlEditionOptionsOption See the Help included with Microsoft Office Macintosh Edition.

Name Optional Variant See the Help included with Microsoft Office Macintosh Edition.

Reference Optional Variant See the Help included with Microsoft Office Macintosh Edition.

Appearance Optional xlPictureAppearance See the Help included with Microsoft Office Macintosh Edition.

ChartSize Optional xlPictureAppearance See the Help included with Microsoft Office Macintosh Edition.

Format Optional Variant See the Help included with Microsoft Office Macintosh Edition.

#RETURN-VALUE: Variant
    '''

  def End(self, Direction):  pass

  def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr, WorkIdentity) -> None:
    '''Exports to a file of the specified format.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required XlFixedFormatType The type of file format to export to.

FileName Optional Variant The file name of the file to be saved. You can include a full path, or Excel saves the file in the current folder.

Quality Optional Variant Optional XlFixedFormatQuality. Specifies the quality of the published file.

IncludeDocProperties Optional Variant True to include the document properties; otherwise, False.

IgnorePrintAreas Optional Variant True to ignore any print areas set when publishing; otherwise, False.

From Optional Variant The number of the page at which to start publishing. If this argument is omitted, publishing starts at the beginning.

To Optional Variant The number of the last page to publish. If this argument is omitted, publishing ends with the last page.

OpenAfterPublish Optional Variant True to display the file in the viewer after it is published; otherwise, False.

FixedFormatExtClassPtr Optional Variant Pointer to the FixedFormatExt class.

#REMARKS:

This method also supports initializing an add-in to export a file to a fixed-format file. For example, Excel will perform file format conversion if the converters are present. The conversion is usually initiated by the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FillDown(self) -> VBA_Variant:
    '''Fills down from the top cell or cells in the specified range to the bottom of the range. The contents and formatting of the cell or cells in the top row of a range are copied into the rest of the rows in the range.

#RETURN-VALUE: Variant

#EXAMPLE:

This example fills the range A1:A10 on Sheet1, based on the contents of cell A1.

Worksheets("Sheet1").Range("A1:A10").FillDown

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FillLeft(self) -> VBA_Variant:
    '''Fills left from the rightmost cell or cells in the specified range. The contents and formatting of the cell or cells in the rightmost column of a range are copied into the rest of the columns in the range.

#RETURN-VALUE: Variant

#EXAMPLE:

This example fills the range A1:M1 on Sheet1, based on the contents of cell M1.

Worksheets("Sheet1").Range("A1:M1").FillLeft

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FillRight(self) -> VBA_Variant:
    '''Fills right from the leftmost cell or cells in the specified range. The contents and formatting of the cell or cells in the leftmost column of a range are copied into the rest of the columns in the range.

#RETURN-VALUE: Variant

#EXAMPLE:

This example fills the range A1:M1 on Sheet1, based on the contents of cell A1.

Worksheets("Sheet1").Range("A1:M1").FillRight

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FillUp(self) -> VBA_Variant:
    '''Fills up from the bottom cell or cells in the specified range to the top of the range. The contents and formatting of the cell or cells in the bottom row of a range are copied into the rest of the rows in the range.

#RETURN-VALUE: Variant

#EXAMPLE:

This example fills the range A1:A10 on Sheet1, based on the contents of cell A10.

Worksheets("Sheet1").Range("A1:A10").FillUp

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Find(self, What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, SearchFormat) -> Range:
    '''Finds specific information in a range.

#PARAMETERS:

Name Required/Optional Data type Description

What Required Variant The data to search for. Can be a string or any Microsoft Excel data type.

After Optional Variant The cell after which you want the search to begin. This corresponds to the position of the active cell when a search is done from the user interface.Notice that After must be a single cell in the range. Remember that the search begins after this cell; the specified cell isn't searched until the method wraps back around to this cell.If you don't specify this argument, the search starts after the cell in the upper-left corner of the range.

LookIn Optional Variant Can be one of the following XlFindLookIn constants: xlFormulas, xlValues, xlComments, or xlCommentsThreaded.

LookAt Optional Variant Can be one of the following XlLookAt constants: xlWhole or xlPart.

SearchOrder Optional Variant Can be one of the following XlSearchOrder constants: xlByRows or xlByColumns.

SearchDirection Optional Variant Can be one of the following XlSearchDirection constants: xlNext or xlPrevious.

MatchCase Optional Variant True to make the search case-sensitive. The default value is False.

MatchByte Optional Variant Used only if you have selected or installed double-byte language support. True to have double-byte characters match only double-byte characters. False to have double-byte characters match their single-byte equivalents.

SearchFormat Optional Variant The search format.

#RETURN-VALUE: A Range object that represents the first cell where that information is found.

#REMARKS:

This method returns Nothing if no match is found. The Find method does not affect the selection or the active cell.

The settings for LookIn, LookAt, SearchOrder, and MatchByte are saved each time you use this method. If you don't specify values for these arguments the next time you call the method, the saved values are used. Setting these arguments changes the settings in the Find dialog box, and changing the settings in the Find dialog box changes the saved values that are used if you omit the arguments. To avoid problems, set these arguments explicitly each time you use this method.

Use the FindNext and FindPrevious methods to repeat the search.

When the search reaches the end of the specified search range, it wraps around to the beginning of the range. To stop a search when this wraparound occurs, save the address of the first found cell, and then test each successive found-cell address against this saved address.

To find cells that match more complicated patterns, use a For Each...Next statement with the Like operator. For example, the following code searches for all cells in the range A1:C5 that use a font whose name starts with the letters Cour. When Microsoft Excel finds a match, it changes the font to Times New Roman.

This example finds all cells in the range A1:A500 in worksheet one that contain the value 2, and changes the entire cell value to 5. That is, the values 1234 and 99299 both contain 2 and both cell values will become 5.

This example finds all cells in the range A1:A500 on worksheet one that contain the substring "abc" and then replaces "abc" with "xyz".

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

For Each c In [A1:C5] If c.Font.Name Like "Cour*" Then c.Font.Name = "Times New Roman" End If Next`

Sub FindValue()
    
    Dim c As Range
    Dim firstAddress As String

    With Worksheets(1).Range("A1:A500") 
        Set c = .Find(2, lookin:=xlValues) 
        If Not c Is Nothing Then 
            firstAddress = c.Address 
            Do 
                c.Value = 5 
                Set c = .FindNext(c) 
            Loop While Not c Is Nothing
        End If 
    End With
    
End Sub

Sub FindString()

    Dim c As Range
    Dim firstAddress As String

    With Worksheets(1).Range("A1:A500")
        Set c = .Find("abc", LookIn:=xlValues)
        If Not c Is Nothing Then
            firstAddress = c.Address
            Do
                c.Value = Replace(c.Value, "abc", "xyz")
                Set c = .FindNext(c)
            Loop While Not c Is Nothing
        End If
    End With

End Sub
    '''

  def FindNext(self, After) -> Range:
    '''Continues a search that was begun with the Find method. Finds the next cell that matches those same conditions and returns a Range object that represents that cell. This does not affect the selection or the active cell.

#PARAMETERS:

Name Required/Optional Data type Description

After Optional Variant The cell after which you want to search. This corresponds to the position of the active cell when a search is done from the user interface. Be aware that After must be a single cell in the range.

Remember that the search begins after this cell; the specified cell is not searched until the method wraps back around to this cell. If this argument is not specified, the search starts after the cell in the upper-left corner of the range.

#RETURN-VALUE: Range

#REMARKS:

When the search reaches the end of the specified search range, it wraps around to the beginning of the range. To stop a search when this wraparound occurs, save the address of the first found cell, and then test each successive found-cell address against this saved address.

This example finds all cells in the range A1:A500 on worksheet one that contain the value 2, and changes the entire cell value to 5. That is, the values 1234 and 99299 both contain 2 and both cell values will become 5.

This example finds all the cells in the first four columns that contain a constant X, and hides the column that contains the X.

This example finds all the cells in the first four columns that contain a constant X, and unhides the column that contains the X.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example finds all cells in the range A1:A500 on worksheet one that contain the value 2, and changes the entire cell value to 5. That is, the values 1234 and 99299 both contain 2 and both cell values will become 5.

Sub FindValue()
    
    Dim c As Range
    Dim firstAddress As String
    
    With Worksheets(1).Range("A1:A500") 
        Set c = .Find(2, lookin:=xlValues) 
        If Not c Is Nothing Then 
            firstAddress = c.Address 
            Do 
                c.Value = 5 
                Set c = .FindNext(c) 
            Loop While Not c Is Nothing
        End If 
    End With
    
End Sub

This example finds all the cells in the first four columns that contain a constant X, and hides the column that contains the X.

Sub Hide_Columns()

    'Excel objects.
    Dim m_wbBook As Workbook
    Dim m_wsSheet As Worksheet
    Dim m_rnCheck As Range
    Dim m_rnFind As Range
    Dim m_stAddress As String

    'Initialize the Excel objects.
    Set m_wbBook = ThisWorkbook
    Set m_wsSheet = m_wbBook.Worksheets("Sheet1")
    
    'Search the four columns for any constants.
    Set m_rnCheck = m_wsSheet.Range("A1:D1").SpecialCells(xlCellTypeConstants)
    
    'Retrieve all columns that contain an X. If there is at least one, begin the DO/WHILE loop.
    With m_rnCheck
        Set m_rnFind = .Find(What:="X")
        If Not m_rnFind Is Nothing Then
            m_stAddress = m_rnFind.Address
             
            'Hide the column, and then find the next X.
            Do
                m_rnFind.EntireColumn.Hidden = True
                Set m_rnFind = .FindNext(m_rnFind)
            Loop While Not m_rnFind Is Nothing And m_rnFind.Address <> m_stAddress
        End If
    End With

End Sub

This example finds all the cells in the first four columns that contain a constant X, and unhides the column that contains the X.

Sub Unhide_Columns()
    'Excel objects.
    Dim m_wbBook As Workbook
    Dim m_wsSheet As Worksheet
    Dim m_rnCheck As Range
    Dim m_rnFind As Range
    Dim m_stAddress As String
    
    'Initialize the Excel objects.
    Set m_wbBook = ThisWorkbook
    Set m_wsSheet = m_wbBook.Worksheets("Sheet1")
    
    'Search the four columns for any constants.
    Set m_rnCheck = m_wsSheet.Range("A1:D1").SpecialCells(xlCellTypeConstants)
    
    'Retrieve all columns that contain X. If there is at least one, begin the DO/WHILE loop.
    With m_rnCheck
        Set m_rnFind = .Find(What:="X", LookIn:=xlFormulas)
        If Not m_rnFind Is Nothing Then
            m_stAddress = m_rnFind.Address
            
            'Unhide the column, and then find the next X.
            Do
                m_rnFind.EntireColumn.Hidden = False
                Set m_rnFind = .FindNext(m_rnFind)
            Loop While Not m_rnFind Is Nothing And m_rnFind.Address <> m_stAddress
        End If
    End With

End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FindPrevious(self, After) -> Range:
    '''Continues a search that was begun with the Find method. Finds the previous cell that matches those same conditions and returns a Range object that represents that cell. Doesn't affect the selection or the active cell.

#PARAMETERS:

Name Required/Optional Data type Description

Before Optional Variant The cell before which you want to search. This corresponds to the position of the active cell when a search is done from the user interface. Note that Before must be a single cell in the range.Remember that the search begins before this cell; the specified cell isn't searched until the method wraps back around to this cell. If this argument isn't specified, the search starts before the upper-left cell in the range.

#RETURN-VALUE: Range

#REMARKS:

When the search reaches the beginning of the specified search range, it wraps around to the end of the range. To stop a search when this wraparound occurs, save the address of the first found cell, and then test each successive found-cell address against this saved address.

This example shows how the FindPrevious method is used with the Find and FindNext methods. Before running this example, make sure that Sheet1 contains at least two occurrences of the word Phoenix in column B.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example shows how the FindPrevious method is used with the Find and FindNext methods. Before running this example, make sure that Sheet1 contains at least two occurrences of the word Phoenix in column B.

Sub FindTest() 
 Dim fc As Range 
 Set fc = Worksheets("Sheet1").Columns("B").Find(what:="Phoenix") 
 MsgBox "The first occurrence is in cell " & fc.Address 
 Set fc = Worksheets("Sheet1").Columns("B").FindNext(after:=fc) 
 MsgBox "The next occurrence is in cell " & fc.Address 
 Set fc = Worksheets("Sheet1").Columns("B").FindPrevious(after:=fc) 
 MsgBox "The previous occurrence is in cell " & fc.Address 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FlashFill(self) -> None:
    '''True indicates that the Excel Flash Fill feature has been enabled and is active.

#RETURN-VALUE: VOID
    '''

  def FunctionWizard(self) -> VBA_Variant:
    '''Starts the Function Wizard for the upper-left cell of the range.

#RETURN-VALUE: Variant

#EXAMPLE:

This example starts the Function Wizard for the active cell on Sheet1.

Worksheets("Sheet1").Activate 
ActiveCell.FunctionWizard

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GetAddress(self, RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo):  pass

  def GetAddressLocal(self, RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo):  pass

  def GetCharacters(self, Start, Length):  pass

  def GetOffset(self, RowOffset, ColumnOffset):  pass

  def GetResize(self, RowSize, ColumnSize):  pass

  def GetValue(self, RangeValueDataType):  pass

  def Get_Default(self, RowIndex, ColumnIndex):  pass

  def GoalSeek(self, Goal, ChangingCell):  pass

  def Group(self, Start, End, By, Periods) -> VBA_Variant:
    '''When the Range object represents a single cell in a PivotTable field's data range, the Group method performs numeric or date-based grouping in that field.

#PARAMETERS:

Name Required/Optional Data type Description

Start Optional Variant The first value to be grouped. If this argument is omitted or True, the first value in the field is used.

End Optional Variant The last value to be grouped. If this argument is omitted or True, the last value in the field is used.

By Optional Variant If the field is numeric, this argument specifies the size of each group. If the field is a date, this argument specifies the number of days in each group if element 4 in the  Periods array is True and all the other elements are False. Otherwise, this argument is ignored. If this argument is omitted, Microsoft Excel automatically chooses a default group size.

Periods Optional Variant An array of Boolean values that specify the period for the group, described in the Remarks section. If an element in the array is True, a group is created for the corresponding time; if the element is False, no group is created. If the field isn't a date field, this argument is ignored.

#RETURN-VALUE: Variant

#REMARKS:

The Boolean array for the Periods parameter contains the following elements:

Because a group of shapes is treated as a single shape, grouping and ungrouping shapes changes the number of items in the Shapes collection and changes the index numbers of items that come after the affected items in the collection.

The Range object must be a single cell in the PivotTable field's data range. If you attempt to apply this method to more than one cell, it will fail (without displaying an error message).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Insert(self, Shift, CopyOrigin) -> VBA_Variant:
    '''Inserts a cell or a range of cells into the worksheet or macro sheet and shifts other cells away to make space.

#PARAMETERS:

Name Required/Optional Data type Description

Shift Optional Variant Specifies which way to shift the cells. Can be one of the following XlInsertShiftDirection constants: xlShiftToRight or xlShiftDown. If this argument is omitted, Microsoft Excel decides based on the shape of the range.

CopyOrigin Optional Variant The copy origin; that is, from where to copy the format for inserted cells. Can be one of the following XlInsertFormatOrigin constants: xlFormatFromLeftOrAbove (default) or xlFormatFromRightOrBelow.

#RETURN-VALUE: Variant

#REMARKS:

There is no value for CopyOrigin that is equivalent to Clear Formatting when inserting cells interactively in Excel. To achieve this, use the ClearFormats method.

This example inserts a row above row 2, copying the format from the row below (row 3) instead of from the header row.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

With Range("B2:E5")
    .Insert xlShiftDown
    .ClearFormats
End With

This example inserts a row above row 2, copying the format from the row below (row 3) instead of from the header row.

Range("2:2").Insert CopyOrigin:=xlFormatFromRightOrBelow

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def InsertIndent(self, InsertAmount) -> None:
    '''Adds an indent to the specified range.

#PARAMETERS:

Name Required/Optional Data type Description

InsertAmount Required Long The amount to be added to the current indent.

#REMARKS:

Using this method to set the indent level to a number less than 0 (zero) or greater than 15 causes an error.

Use the IndentLevel property to return the indent level for a range.

This example decreases the indent level in cell A10.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example decreases the indent level in cell A10.

With Range("a10") 
 .InsertIndent -1 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, RowIndex, ColumnIndex):  pass

  def Justify(self) -> VBA_Variant:
    '''Rearranges the text in a range so that it fills the range evenly.

#RETURN-VALUE: Variant

#REMARKS:

If the range isn't large enough, Microsoft Excel displays a message telling you that text will extend below the range. If you choose the OK button, justified text replaces the contents in cells that extend beyond the selected range. To prevent this message from appearing, set the DisplayAlerts property to False. After you set this property, text will always replace the contents in cells below the range.

This example justifies the text in cell A1 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example justifies the text in cell A1 on Sheet1.

Worksheets("Sheet1").Range("A1").Justify

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ListNames(self) -> VBA_Variant:
    '''Pastes a list of all nonhidden names onto the worksheet, beginning with the first cell in the range.

#RETURN-VALUE: Variant

#REMARKS:

Use the Names property to return a collection of all the names on a worksheet.

This example pastes a list of defined names into cell A1 on Sheet1. The example pastes both workbook-level names and sheet-level names defined on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example pastes a list of defined names into cell A1 on Sheet1. The example pastes both workbook-level names and sheet-level names defined on Sheet1.

Worksheets("Sheet1").Range("A1").ListNames

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Merge(self, Across) -> None:
    '''Creates a merged cell from the specified Range object.

#PARAMETERS:

Name Required/Optional Data type Description

Across Optional Variant True to merge cells in each row of the specified range as separate merged cells. The default value is False.

#REMARKS:

The value of a merged range is specified in the cell of the range's upper-left corner.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NavigateArrow(self, TowardPrecedent, ArrowNumber, LinkNumber) -> VBA_Variant:
    '''Navigates a tracer arrow for the specified range to the precedent, dependent, or error-causing cell or cells. Selects the precedent, dependent, or error cells and returns a Range object that represents the new selection. This method causes an error if it's applied to a cell without visible tracer arrows.

#PARAMETERS:

Name Required/Optional Data type Description

TowardPrecedent Optional Variant Specifies the direction to navigate; True to navigate toward precedents, False to navigate toward dependents.

ArrowNumber Optional Variant Specifies the arrow number to navigate; corresponds to the numbered reference in the cell's formula.

LinkNumber Optional Variant If the arrow is an external reference arrow, this argument indicates which external reference to follow. If this argument is omitted, the first external reference is followed.

#RETURN-VALUE: Variant

#EXAMPLE:

This example navigates along the first tracer arrow from cell A1 on Sheet1 toward the precedent cell. The example should be run on a worksheet containing a formula in cell A1 that includes references to cells D1, D2, and D3 (for example, the formula =D1 * D2 * D3).

Before running the example, select cell A1, and on the Formulas tab, in the Formula Auditing group, select Trace Precedents.

Worksheets("Sheet1").Activate 
Range("A1").Select 
ActiveCell.NavigateArrow True, 1

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NoteText(self, Text, Start, Length) -> str:
    '''Returns or sets the cell note associated with the cell in the upper-left corner of the range. Read/write String. Cell notes have been replaced by range comments. For more information, see the Comment object.

#PARAMETERS:

Name Required/Optional Data type Description

Text Optional Variant The text to add to the note (up to 255 characters). The text is inserted starting at position Start, replacing Length characters of the existing note. If this argument is omitted, this method returns the current text of the note starting at position Start, for Length characters.

Start Optional Variant The starting position for the text that's set or returned. If this argument is omitted, this method starts at the first character. To append text to the note, specify a number larger than the number of characters in the existing note.

Length Optional Variant The number of characters to be set or returned. If this argument is omitted, Microsoft Excel sets or returns characters from the starting position to the end of the note (up to 255 characters). If there are more than 255 characters from Start to the end of the note, this method returns only 255 characters.

#RETURN-VALUE: String

#REMARKS:

To add a note that contains more than 255 characters, use this method once to specify the first 255 characters, and then use it again to append the remainder of the note (no more than 255 characters at a time).

This example sets the cell note text for cell A1 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the cell note text for cell A1 on Sheet1.

Worksheets("Sheet1").Range("A1").NoteText "This may change!"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Parse(self, ParseLine, Destination) -> VBA_Variant:
    '''Parses a range of data and breaks it into multiple cells. Distributes the contents of the range to fill several adjacent columns; the range can be no more than one column wide.

#PARAMETERS:

Name Required/Optional Data type Description

ParseLine Optional Variant A string that contains left and right brackets to indicate where the cells should be split.

Destination Optional Variant A Range object that represents the upper-left corner of the destination range for the parsed data. If this argument is omitted, Microsoft Excel parses in place.

#RETURN-VALUE: Variant

#REMARKS:

The ParseLine [xxx][xxx] would insert the first three characters into the first column of the destination range, and it would insert the next three characters into the second column. If this argument is omitted, Microsoft Excel guesses where to split the columns based on the spacing of the top-left cell in the range.

If you want to use a different range to guess the parse line, use a Range object as the ParseLine argument. That range must be one of the cells that's being parsed. The ParseLine argument cannot be longer than 255 characters, including the brackets and spaces.

This example divides telephone numbers of the form 206-555-1212 into two columns. The first column contains only the area code, and the second column contains the seven-digit telephone number with the embedded hyphen.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example divides telephone numbers of the form 206-555-1212 into two columns. The first column contains only the area code, and the second column contains the seven-digit telephone number with the embedded hyphen.

Worksheets("Sheet1").Columns("A").Parse _ 
 parseLine:="[xxx] [xxxxxxxx]", _ 
 destination:=Worksheets("Sheet1").Range("B1")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PasteSpecial(self, Paste, Operation, SkipBlanks, Transpose) -> VBA_Variant:
    '''Pastes a Range object that has been copied into the specified range.

#PARAMETERS:

Name Required/Optional Data type Description

Paste Optional XlPasteType The part of the range to be pasted, such as xlPasteAll or xlPasteValues.

Operation Optional XlPasteSpecialOperation The paste operation, such as xlPasteSpecialOperationAdd.

SkipBlanks Optional Variant True to have blank cells in the range on the clipboard not be pasted into the destination range. The default value is False.

Transpose Optional Variant True to transpose rows and columns when the range is pasted. The default value is False.

#RETURN-VALUE: Variant

#EXAMPLE:

This example replaces the data in cells D1:D5 on Sheet1 with the sum of the existing contents and cells C1:C5 on Sheet1.

With Worksheets("Sheet1") 
 .Range("C1:C5").Copy 
 .Range("D1:D5").PasteSpecial _ 
  Operation:=xlPasteSpecialOperationAdd 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName) -> VBA_Variant:
    '''Prints the object.

#PARAMETERS:

Name Required/Optional Data type Description

From Optional Variant The number of the page at which to start printing. If this argument is omitted, printing starts at the beginning.

To Optional Variant The number of the last page to print. If this argument is omitted, printing ends with the last page.

Copies Optional Variant The number of copies to print. If this argument is omitted, one copy is printed.

Preview Optional Variant True to have Microsoft Excel invoke print preview before printing the object. False (or omitted) to print the object immediately.

ActivePrinter Optional Variant Sets the name of the active printer.

PrintToFile Optional Variant True to print to a file. If PrToFileName is not specified, Microsoft Excel prompts the user to enter the name of the output file.

Collate Optional Variant True to collate multiple copies.

PrToFileName Optional Variant If PrintToFile is set to True, this argument specifies the name of the file that you want to print to.

#RETURN-VALUE: Variant

#REMARKS:

"Pages" in the descriptions of From and To refers to printed pages, and not to overall pages in the sheet or workbook.

This example prints the active sheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example prints the active sheet.

ActiveSheet.PrintOut

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PrintPreview(self, EnableChanges) -> VBA_Variant:
    '''Shows a preview of the object as it would look when printed.

#PARAMETERS:

Name Required/Optional Data type Description

EnableChanges Optional Variant Pass a Boolean value to specify if the user can change the margins and other page setup options available in print preview.

#RETURN-VALUE: Variant

#EXAMPLE:

This example displays Sheet1 in print preview.

Worksheets("Sheet1").PrintPreview

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Range(self, Cell1, Cell2):  pass

  def RefreshLinkedDataType(self, DomainID):  pass

  def RemoveDuplicates(self, Columns, Header) -> None:
    '''Removes duplicate values from a range of values.

#PARAMETERS:

Name Required/Optional Data type Description

Columns Required Variant Array of indexes of the columns that contain the duplicate information.

Header Optional XlYesNoGuess Specifies whether the first row contains header information. xlNo is the default value; specify xlGuess if you want Excel to attempt to determine the header.

#EXAMPLE:

The following code sample removes duplicates with the first 2 columns.

ActiveSheet.Range("A1:C100").RemoveDuplicates Columns:=Array(1,2), Header:=xlYes

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RemoveSubtotal(self) -> VBA_Variant:
    '''Removes subtotals from a list.

#RETURN-VALUE: Variant

#EXAMPLE:

This example removes subtotals from the range A1:G37 on Sheet1. The example should be run on a list that has subtotals.

Worksheets("Sheet1").Range("A1:G37").RemoveSubtotal

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Replace(self, What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, SearchFormat, ReplaceFormat, FormulaVersion) -> bool:
    '''Returns a Boolean indicating characters in cells within the specified range. Using this method doesn't change either the selection or the active cell.

#PARAMETERS:

Name Required/Optional Data type Description

What Required Variant The string that you want Microsoft Excel to search for.

Replacement Required Variant The replacement string.

LookAt Optional Variant Can be one of the following XlLookAt constants: xlWhole or xlPart.

SearchOrder Optional Variant Can be one of the following XlSearchOrder constants: xlByRows or xlByColumns.

MatchCase Optional Variant True to make the search case-sensitive.

MatchByte Optional Variant Use this argument only if you have selected or installed double-byte language support in Microsoft Excel. True to have double-byte characters match only double-byte characters. False to have double-byte characters match their single-byte equivalents.

SearchFormat Optional Variant The search format for the method.

ReplaceFormat Optional Variant The replace format for the method.

#RETURN-VALUE: Boolean

#REMARKS:

The settings for LookAt, SearchOrder, MatchCase, and MatchByte are saved each time you use this method. If you don't specify values for these arguments the next time you call the method, the saved values are used. Setting these arguments changes the settings in the Find dialog box, and changing the settings in the Find dialog box changes the saved values that are used if you omit the arguments. To avoid problems, set these arguments explicitly each time that you use this method.

This example replaces every occurrence of the trigonometric function SIN with the function COS. The replacement range is column A on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example replaces every occurrence of the trigonometric function SIN with the function COS. The replacement range is column A on Sheet1.

Worksheets("Sheet1").Columns("A").Replace _ 
 What:="SIN", Replacement:="COS", _ 
 SearchOrder:=xlByColumns, MatchCase:=True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RowDifferences(self, Comparison) -> Range:
    '''Returns a Range object that represents all the cells whose contents are different from those of the comparison cell in each row.

#PARAMETERS:

Name Required/Optional Data type Description

Comparison Required Variant A single cell to compare with the specified range.

#RETURN-VALUE: Range

#EXAMPLE:

This example selects the cells in row one on Sheet1 whose contents are different from those of cell D1.

Worksheets("Sheet1").Activate 
Set c1 = ActiveSheet.Rows(1).RowDifferences( _ 
 comparison:=ActiveSheet.Range("D1")) 
c1.Select

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Run(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> VBA_Variant:
    '''Runs the Microsoft Excel macro at this location. The range must be on a macro sheet.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 – Arg30 Optional Variant The arguments that should be passed to the function.

#RETURN-VALUE: Variant

#REMARKS:

You cannot use named arguments with this method. Arguments must be passed by position.

The Run method returns whatever the called macro returns. Objects passed as arguments to the macro are converted to values (by applying the Value property to the object). This means that you cannot pass objects to macros by using the Run method.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Select(self) -> VBA_Variant:
    '''Selects the object.

#RETURN-VALUE: Variant

#REMARKS:

To select a cell or a range of cells, use the Select method. To make a single cell the active cell, use the Activate method.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SetCellDataTypeFromCell(self, SourceCell) -> None:
    '''Creates another instance of a Linked data type, such as Stocks or Geography, that exists in another cell. The new instance will be linked to the data source in the same way as the original, so it will refresh from the service if you call the Workbook.RefreshAll method.

#PARAMETERS:

Name Required/Optional Data type Description

Range Required Range The range from which you want to copy the Linked data type. If the range has more than one cell in it, only the upper-left cell will be used.

LanguageCulture Required String A string representing the LCID of the language and culture that you would like to use for the linked entity.

#EXAMPLE:

If you have a Geography Linked data type in cell A1 for the city Seattle, this code copies the Seattle entity to cell B2.

Range("B2").SetCellDataTypeFromCell Range("A1")

After it runs, cells A1 and B2 will contain a Seattle data type, and they will both refresh if you call the RefreshAll method. No other cell properties, such as formats, will be copied from A1 to B2.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SetItem(self, RowIndex, ColumnIndex, arg2):  pass

  def SetPhonetic(self) -> None:
    '''Creates Phonetic objects for all the cells in the specified range.

#REMARKS:

Any existing Phonetic objects in the specified range are automatically overwritten (deleted) by the new objects that you add by using this method.

This example creates a Phonetic object for each cell in the range A1:A10 on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates a Phonetic object for each cell in the range A1:A10 on the active worksheet.

ActiveSheet.Range("A1:A10").SetPhonetic

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SetValue(self, RangeValueDataType, arg1):  pass

  def Set_Default(self, RowIndex, ColumnIndex, arg2):  pass

  def Show(self) -> VBA_Variant:
    '''Scrolls through the contents of the active window to move the range into view. The range must consist of a single cell in the active document.

#RETURN-VALUE: Variant
    '''

  def ShowCard(self) -> None:
    '''For a cell containing a Linked data type, such as Stocks or Geography, this method causes a card to appear that shows details about the cell (that is, the same card that the user can view by choosing the cell icon).

#REMARKS:

For ranges of more than one cell, this method only attempts to show the card for the upper-left cell in the range. If that cell does not contain a Linked data type, nothing happens.

This code shows the card for the Linked data type in cell E5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This code shows the card for the Linked data type in cell E5.

Range("E5").ShowCard

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ShowDependents(self, Remove) -> VBA_Variant:
    '''Draws tracer arrows to the direct dependents of the range.

#PARAMETERS:

Name Required/Optional Data type Description

Remove Optional Variant True to remove one level of tracer arrows to direct dependents. False to expand one level of tracer arrows. The default value is False.

#RETURN-VALUE: Variant

#EXAMPLE:

This example draws tracer arrows to dependents of the active cell on Sheet1.

Worksheets("Sheet1").Activate 
ActiveCell.ShowDependents

This example removes the tracer arrow for one level of dependents of the active cell on Sheet1.

Worksheets("Sheet1").Activate 
ActiveCell.ShowDependents Remove:=True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ShowErrors(self) -> VBA_Variant:
    '''Draws tracer arrows through the precedents tree to the cell that's the source of the error, and returns the range that contains that cell.

#RETURN-VALUE: Variant

#EXAMPLE:

This example displays a red tracer arrow if there's an error in the active cell on Sheet1.

Worksheets("Sheet1").Activate 
If IsError(ActiveCell.Value) Then 
 ActiveCell.ShowErrors 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ShowPrecedents(self, Remove) -> VBA_Variant:
    '''Draws tracer arrows to the direct precedents of the range.

#PARAMETERS:

Name Required/Optional Data type Description

Remove Optional Variant True to remove one level of tracer arrows to direct precedents. False to expand one level of tracer arrows. The default value is False.

#RETURN-VALUE: Variant

#EXAMPLE:

This example draws tracer arrows to the precedents of the active cell on Sheet1.

Worksheets("Sheet1").Activate 
ActiveCell.ShowPrecedents

This example removes the tracer arrow for one level of precedents of the active cell on Sheet1.

Worksheets("Sheet1").Activate 
ActiveCell.ShowPrecedents remove:=True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Sort(self, Key1, Order1, Key2, Type, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, SortMethod, DataOption1, DataOption2, DataOption3, SubField1) -> VBA_Variant:
    '''Sorts a range of values.

#PARAMETERS:

Name Required/Optional Data type Description

Key1 Optional Variant Specifies the first sort field, either as a range name (String) or Range object; determines the values to be sorted.

Order1 Optional XlSortOrder Determines the sort order for the values specified in Key1.

Key2 Optional Variant Second sort field; cannot be used when sorting a PivotTable.

Type Optional Variant Specifies which type of elements are to be sorted within a PivotTable. Specify xLSortLabels to sort by the labels targeted by the experession Range in the Row/Colum Labels areas of the PivotTable's range, or xLSortValues when Key1 additionally targets a cell in the Values or Sub/Grand Totals areas using R1C1 notation.

Order2 Optional XlSortOrder Determines the sort order for the values specified in Key2.

Key3 Optional Variant Third sort field; cannot be used when sorting a PivotTable.

Order3 Optional XlSortOrder Determines the sort order for the values specified in Key3.

Header Optional XlYesNoGuess Specifies whether the first row contains header information. xlNo is the default value; specify xlGuess if you want Excel to attempt to determine the header.

OrderCustom Optional Variant Specifies a one-based integer offset into the list of custom sort orders.

MatchCase Optional Variant Set to True to perform a case-sensitive sort, False to perform a non-case-sensitive sort; cannot be used with PivotTables.

Orientation Optional XlSortOrientation Specifies if the sort should be by row (default) or column. Set xlSortColumns value to	1 to sort by column. Set xlSortRows value to 2 to sort by row (this is the default value).

SortMethod Optional XlSortMethod Specifies the sort method.

DataOption1 Optional XlSortDataOption Specifies how to sort text in the range specified in Key1; does not apply to PivotTable sorting.

DataOption2 Optional XlSortDataOption Specifies how to sort text in the range specified in Key2; does not apply to PivotTable sorting.

DataOption3 Optional XlSortDataOption Specifies how to sort text in the range specified in Key3; does not apply to PivotTable sorting.

#RETURN-VALUE: Variant

#EXAMPLE:

This example gets the value of the color of a cell in column A by using the ColorIndex property, and then uses that value to sort the range by color.

Sub ColorSort()
   'Set up your variables and turn off screen updating.
   Dim iCounter As Integer
   Application.ScreenUpdating = False
   
   'For each cell in column A, go through and place the color index value of the cell in column C.
   For iCounter = 2 To 55
      Cells(iCounter, 3) = _
         Cells(iCounter, 1).Interior.ColorIndex
   Next iCounter
   
   'Sort the rows based on the data in column C
   Range("C1") = "Index"
   Columns("A:C").Sort key1:=Range("C2"), _
      order1:=xlAscending, header:=xlYes
   
   'Clear out the temporary sorting value in column C, and turn screen updating back on.
   Columns(3).ClearContents
   Application.ScreenUpdating = True
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SortSpecial(self, SortMethod, Key1, Order1, Type, Key2, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, DataOption1, DataOption2, DataOption3) -> VBA_Variant:
    '''Uses East Asian sorting methods to sort the range, a PivotTable report, or uses the method for the active region if the range contains only one cell. For example, Japanese sorts in the order of the Kana syllabary.

#PARAMETERS:

Name Required/Optional Data type Description

SortMethod Optional XlSortMethod The type of sort. Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you have selected or installed.

Key1 Optional Variant The first sort field, as either text (a PivotTable field or range name) or a Range object ("Dept" or Cells(1, 1), for example).

Order1 Optional XlSortOrder The sort order for the field or range specified in the Key1 argument.

Type Optional Variant Specifies which elements are to be sorted. Use this argument only when sorting PivotTable reports.

Key2 Optional Variant The second sort field, as either text (a PivotTable field or range name) or a Range object. If you omit this argument, there's no second sort field. Cannot be used when sorting PivotTable reports.

Order2 Optional xlSortOrder The sort order for the field or range specified in the Key2 argument. Cannot be used when sorting PivotTable reports.

Key3 Optional Variant The third sort field, as either text (a range name) or a Range object. If you omit this argument, there's no third sort field. Cannot be used when sorting PivotTable reports.

Order3 Optional xlSortOrder The sort order for the field or range specified in the Key3 argument. Cannot be used when sorting PivotTable reports.

Header Optional XlYesNoGuess Specifies whether or not the first row contains headers. Cannot be used when sorting PivotTable reports.

OrderCustom Optional Variant This argument is a one-based integer offset to the list of custom sort orders. If you omit OrderCustom, (normal sort order) is used.

MatchCase Optional Variant True to do a case-sensitive sort; False to do a sort that's not case-sensitive. Cannot be used when sorting PivotTable reports.

Orientation Optional XlSortOrientation The sort orientation.

DataOption1 Optional XlSortDataOption Specifies how to sort text in Key1. Cannot be used when sorting PivotTable reports.

DataOption2 Optional xlSortDataOption Specifies how to sort text in Key2. Cannot be used when sorting PivotTable reports.

DataOption3 Optional xlSortDataOption Specifies how to sort text in Key3. Cannot be used when sorting PivotTable reports.

#RETURN-VALUE: Variant

#REMARKS:

If no arguments are defined with the Sort method, Microsoft Excel will sort the selection chosen to be sorted in ascending order.

This example sorts the range A1:A5 by using Pin Yin (phonetic Chinese sort order for characters). To sort Chinese characters, this example assumes that the user has Chinese language support for Microsoft Excel. Even without Chinese language support, Excel will default to sorting any numbers placed within the specified range for this example. This example assumes that there is data contained in the range A1:A5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sorts the range A1:A5 by using Pin Yin (phonetic Chinese sort order for characters). To sort Chinese characters, this example assumes that the user has Chinese language support for Microsoft Excel. Even without Chinese language support, Excel will default to sorting any numbers placed within the specified range for this example. This example assumes that there is data contained in the range A1:A5.

Sub SpecialSort() 
 
 Application.Range("A1:A5").SortSpecial SortMethod:=xlPinYin 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Speak(self, SpeakDirection, SpeakFormulas) -> None:
    '''Causes the cells of the range to be spoken in row order or column order.

#PARAMETERS:

Name Required/Optional Data type Description

SpeakDirection Optional Variant The speak direction, by rows or columns.

SpeakFormulas Optional Variant True will cause formulas to be sent to the Text-To-Speech (TTS) engine for cells that have formulas. The value is sent if the cells don't have formulas. False (default) will cause values to always be sent to the TTS engine.
    '''

  def SpecialCells(self, Type, Value) -> Range:
    '''Returns a Range object that represents all the cells that match the specified type and value.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required XlCellType The cells to include.

Value Optional Variant If Type is either xlCellTypeConstants or xlCellTypeFormulas, this argument is used to determine which types of cells to include in the result. These values can be added together to return more than one type. The default is to select all constants or formulas, no matter what the type.

#RETURN-VALUE: Range

#REMARKS:

Use the XlSpecialCellsValue enumeration to specify cells with a particular type of value to include in the result.

This example selects the last cell in the used range of Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example selects the last cell in the used range of Sheet1.

Worksheets("Sheet1").Activate 
ActiveSheet.Cells.SpecialCells(xlCellTypeLastCell).Activate

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SubscribeTo(self, Edition, Format) -> VBA_Variant:
    '''You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.

#PARAMETERS:

Name Required/Optional Data type Description

Edition Required String See help included with Microsoft Office Macintosh Edition.

Format Optional XlSubscribeToFormat See help included with Microsoft Office Macintosh Edition.

#RETURN-VALUE: Variant
    '''

  def Subtotal(self, GroupBy, Function, TotalList, Replace, PageBreaks, SummaryBelowData) -> VBA_Variant:
    '''Creates subtotals for the range (or the current region, if the range is a single cell).

#PARAMETERS:

Name Required/Optional Data type Description

GroupBy Required Long The field to group by, as a one-based integer offset. For more information, see the example.

Function Required XlConsolidationFunction The subtotal function.

TotalList Required Variant An array of 1-based field offsets, indicating the fields to which the subtotals are added. For more information, see the example.

Replace Optional Variant True to replace existing subtotals. The default value is True.

PageBreaks Optional Variant True to add page breaks after each group. The default value is False.

SummaryBelowData Optional XlSummaryRow Places the summary data relative to the subtotal.

#RETURN-VALUE: Variant

#EXAMPLE:

This example creates subtotals for the selection on Sheet1. The subtotals are sums grouped by each change in field one, with the subtotals added to fields two and three.

Worksheets("Sheet1").Activate 
Selection.Subtotal GroupBy:=1, Function:=xlSum, _ 
 TotalList:=Array(2, 3)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Table(self, RowInput, ColumnInput) -> VBA_Variant:
    '''Creates a data table based on input values and formulas that you define on a worksheet.

#PARAMETERS:

Name Required/Optional Data type Description

RowInput Optional Variant A single cell to use as the row input for your table.

ColumnInput Optional Variant A single cell to use as the column input for your table.

#RETURN-VALUE: Variant

#REMARKS:

Use data tables to perform a what-if analysis by changing certain constant values on your worksheet to see how values in other cells are affected.

This example creates a formatted multiplication table in cells A1:K11 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates a formatted multiplication table in cells A1:K11 on Sheet1.

Set dataTableRange = Worksheets("Sheet1").Range("A1:K11") 
Set rowInputCell = Worksheets("Sheet1").Range("A12") 
Set columnInputCell = Worksheets("Sheet1").Range("A13") 
 
Worksheets("Sheet1").Range("A1").Formula = "=A12*A13" 
For i = 2 To 11 
 Worksheets("Sheet1").Cells(i, 1) = i - 1 
 Worksheets("Sheet1").Cells(1, i) = i - 1 
Next i 
dataTableRange.Table rowInputCell, columnInputCell 
With Worksheets("Sheet1").Range("A1").CurrentRegion 
 .Rows(1).Font.Bold = True 
 .Columns(1).Font.Bold = True 
 .Columns.AutoFit 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def TextToColumns(self, Destination, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers) -> VBA_Variant:
    '''Parses a column of cells that contain text into several columns.

#PARAMETERS:

Name Required/Optional Data type Description

Destination Optional Variant A Range object that specifies where Microsoft Excel will place the results. If the range is larger than a single cell, the top left cell is used.

DataType Optional XlTextParsingType The format of the text to be split into columns.

TextQualifier Optional XlTextQualifier Specifies whether to use single, double, or no quotes as the text qualifier.

ConsecutiveDelimiter Optional Variant True to have Excel consider consecutive delimiters as one delimiter. The default value is False.

Tab Optional Variant True to have DataType be xlDelimited and to have the tab character be a delimiter. The default value is False.

Semicolon Optional Variant True to have DataType be xlDelimited and to have the semicolon be a delimiter. The default value is False.

Comma Optional Variant True to have DataType be xlDelimited and to have the comma be a delimiter. The default value is False.

Space Optional Variant True to have DataType be xlDelimited and to have the space character be a delimiter. The default value is False.

Other Optional Variant True to have DataType be xlDelimited and to have the character specified by the OtherChar argument be a delimiter. The default value is False.

OtherChar Optional Variant Required if Other is True; the delimiter character when Other is True. If more than one character is specified, only the first character of the string is used; the remaining characters are ignored.

FieldInfo Optional Variant An array containing parse information for the individual columns of data. The interpretation depends on the value of DataType.When the data is delimited, this argument is an array of two-element arrays, with each two-element array specifying the conversion options for a particular column. The first element is the column number (1-based), and the second element is one of the XlColumnDataType constants specifying how the column is parsed.

DecimalSeparator Optional Variant The decimal separator that Microsoft Excel uses when recognizing numbers. The default setting is the system setting.

ThousandsSeparator Optional Variant The thousands separator that Excel uses when recognizing numbers. The default setting is the system setting.

TrailingMinusNumbers Optional Variant Numbers that begin with a minus character.

#RETURN-VALUE: Variant

#REMARKS:

The following table shows the results of importing text into Excel for various import settings. Numeric results are displayed in the rightmost column.

Use the xlEMDFormat constant of the XlColumnDataType enumeration only if Taiwanese language support is installed and selected. The xlEMDFormat constant specifies that Taiwanese era dates are being used.

The column specifiers can be in any order. If a given column specifier is not present for a particular column in the input data, the column is parsed with the xlGeneralFormat setting. This example causes the third column to be skipped, the first column to be parsed as text, and the remaining columns in the source data to be parsed with the xlGeneralFormat setting.

If the source data has fixed-width columns, the first element of each two-element array specifies the starting character position in the column (as an integer; 0 (zero) is the first character). The second element of the two-element array specifies the parse option for the column as a number from 1 through 9, as listed earlier.

The following example parses two columns from a fixed-width file, with the first column starting at the beginning of the line and extending for 10 characters. The second column starts at position 15 and goes to the end of the line. To avoid including the characters between position 10 and position 15, Microsoft Excel adds a skipped column entry.

This example converts the contents of the Clipboard, which contains a space-delimited text table, into separate columns on Sheet1. You can create a simple space-delimited table in Notepad or WordPad (or another text editor), copy the text table to the Clipboard, switch to Microsoft Excel, and then run this example.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Array(Array(3, 9), Array(1, 2))

Array(Array(0, 1), Array(10, 9), Array(15, 1))

This example converts the contents of the Clipboard, which contains a space-delimited text table, into separate columns on Sheet1. You can create a simple space-delimited table in Notepad or WordPad (or another text editor), copy the text table to the Clipboard, switch to Microsoft Excel, and then run this example.

Worksheets("Sheet1").Activate 
ActiveSheet.Paste 
Selection.TextToColumns DataType:=xlDelimited, _ 
 ConsecutiveDelimiter:=True, Space:=True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def UnMerge(self) -> None:
    '''Separates a merged area into individual cells.

#EXAMPLE:

This example separates the merged range that contains cell A3.

With Range("a3") 
 If .MergeCells Then 
 .MergeArea.UnMerge 
 Else 
 MsgBox "not merged" 
 End If 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Ungroup(self) -> VBA_Variant:
    '''Promotes a range in an outline (that is, decreases its outline level). The specified range must be a row or column, or a range of rows or columns. If the range is in a PivotTable report, this method ungroups the items contained in the range.

#RETURN-VALUE: Variant

#REMARKS:

If the active cell is in a field header of a parent field, all the groups in that field are ungrouped and the field is removed from the PivotTable report. When the last group in a parent field is ungrouped, the entire field is removed from the report.

This example ungroups the ORDER_DATE field.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example ungroups the ORDER_DATE field.

Set pvtTable = Worksheets("Sheet1").Range("A3").PivotTable 
Set groupRange = pvtTable.PivotFields("ORDER_DATE").DataRange 
groupRange.Cells(1).Ungroup

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _AutoFilter(self, Field, Criteria1, Operator, Criteria2, VisibleDropDown):  pass

  def _BorderAround(self, LineStyle, Weight, ColorIndex, Color):  pass

  def _ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):  pass

  def _PasteSpecial(self, Paste, Operation, SkipBlanks, Transpose):  pass

  def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):  pass

  def _PrintOut_(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):  pass

  def _Replace(self, What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, SearchFormat, ReplaceFormat):  pass

  def _Sort(self, Key1, Order1, Key2, Type, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, SortMethod, DataOption1, DataOption2, DataOption3):  pass

  def __call__(self, RowIndex, ColumnIndex):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #unknown:
    # SpillParent:  <class 'NoneType'>
    # SpillingToRange:  <class 'NoneType'>

  #getattr Exception:
    # CurrentArray:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '未找到单元格。', 'xlmain11.chm', 0, -2146827284), None)
    # Dependents:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '未找到单元格。', 'xlmain11.chm', 0, -2146827284), None)
    # DirectDependents:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '未找到单元格。', 'xlmain11.chm', 0, -2146827284), None)
    # DirectPrecedents:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '未找到单元格。', 'xlmain11.chm', 0, -2146827284), None)
    # FormulaLabel:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Hidden:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 Hidden 属性', 'xlmain11.chm', 0, -2146827284), None)
    # LocationInTable:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 LocationInTable 属性', 'xlmain11.chm', 0, -2146827284), None)
    # Name:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # OutlineLevel:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 OutlineLevel 属性', 'xlmain11.chm', 0, -2146827284), None)
    # PageBreak:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 PageBreak 属性', 'xlmain11.chm', 0, -2146827284), None)
    # PivotCell:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # PivotField:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 PivotField 属性', 'xlmain11.chm', 0, -2146827284), None)
    # PivotItem:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 PivotItem 属性', 'xlmain11.chm', 0, -2146827284), None)
    # PivotTable:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 PivotTable 属性', 'xlmain11.chm', 0, -2146827284), None)
    # Precedents:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '未找到单元格。', 'xlmain11.chm', 0, -2146827284), None)
    # Previous:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 Previous 属性', 'xlmain11.chm', 0, -2146827284), None)
    # QueryTable:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ServerActions:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ShowDetail:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 ShowDetail 属性', 'xlmain11.chm', 0, -2146827284), None)
    # Summary:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Range 的 Summary 属性', 'xlmain11.chm', 0, -2146827284), None)



class MenuBar:
  def __init__(self):
    self.Application: Application
    self.BuiltIn: bool
    self.Caption: str
    self.Creator: int
    self.Index: int
    self.Menus: Menus
    self.Parent: _Application
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Activate(self):  pass

  def Delete(self):  pass

  def Reset(self):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class _Worksheet:
  def __init__(self):
    self.Application: Application
    self.AutoFilterMode: bool
    self.Cells: Range
    self.CodeName: str
    self.Columns: Range
    self.Comments: Comments
    self.CommentsThreaded: CommentsThreaded
    self.ConsolidationFunction: int
    self.ConsolidationOptions: tuple
    self.Creator: int
    self.CustomProperties: CustomProperties
    self.DisplayAutomaticPageBreaks: bool
    self.DisplayPageBreaks: bool
    self.DisplayRightToLeft: bool
    self.EnableAutoFilter: bool
    self.EnableCalculation: bool
    self.EnableFormatConditionsCalculation: bool
    self.EnableOutlining: bool
    self.EnablePivotTable: bool
    self.EnableSelection: int
    self.FilterMode: bool
    self.HPageBreaks: HPageBreaks
    self.Hyperlinks: Hyperlinks
    self.Index: int
    self.ListObjects: ListObjects
    self.Name: str
    self.NamedSheetViews: NamedSheetViewCollection
    self.Names: Names
    self.Outline: Outline
    self.PageSetup: PageSetup
    self.Parent: _Workbook
    self.PrintedCommentPages: int
    self.ProtectContents: bool
    self.ProtectDrawingObjects: bool
    self.ProtectScenarios: bool
    self.Protection: Protection
    self.ProtectionMode: bool
    self.QueryTables: QueryTables
    self.Rows: Range
    self.Scripts: CDispatch
    self.ScrollArea: str
    self.Shapes: Shapes
    self.SmartTags: SmartTags
    self.Sort: Sort
    self.StandardHeight: float
    self.StandardWidth: float
    self.Tab: Tab
    self.TransitionExpEval: bool
    self.TransitionFormEntry: bool
    self.Type: int
    self.UsedRange: Range
    self.VPageBreaks: VPageBreaks
    self.Visible: int
    self._CodeName: str
    self._DisplayRightToLeft: bool
    self._Sort: Sort
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Activate(self):  pass

  def Arcs(self, Index):  pass

  def Buttons(self, Index):  pass

  def Calculate(self):  pass

  def ChartObjects(self, Index):  pass

  def CheckBoxes(self, Index):  pass

  def CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang):  pass

  def CircleInvalid(self):  pass

  def ClearArrows(self):  pass

  def ClearCircles(self):  pass

  def Copy(self, Before, After):  pass

  def Delete(self):  pass

  def DrawingObjects(self, Index):  pass

  def Drawings(self, Index):  pass

  def DropDowns(self, Index):  pass

  def Evaluate(self, Name):  pass

  def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr, WorkIdentity):  pass

  def GroupBoxes(self, Index):  pass

  def GroupObjects(self, Index):  pass

  def Labels(self, Index):  pass

  def Lines(self, Index):  pass

  def ListBoxes(self, Index):  pass

  def Move(self, Before, After):  pass

  def OLEObjects(self, Index):  pass

  def OptionButtons(self, Index):  pass

  def Ovals(self, Index):  pass

  def Paste(self, Destination, Link):  pass

  def PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, NoHTMLFormatting):  pass

  def Pictures(self, Index):  pass

  def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection):  pass

  def PivotTables(self, Index):  pass

  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):  pass

  def PrintPreview(self, EnableChanges):  pass

  def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells, AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows, AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering, AllowUsingPivotTables):  pass

  def Range(self, Cell1, Cell2):  pass

  def Rectangles(self, Index):  pass

  def ResetAllPageBreaks(self):  pass

  def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local):  pass

  def Scenarios(self, Index):  pass

  def ScrollBars(self, Index):  pass

  def Select(self, Replace):  pass

  def SetBackgroundPicture(self, Filename):  pass

  def ShowAllData(self):  pass

  def ShowDataForm(self):  pass

  def Spinners(self, Index):  pass

  def TextBoxes(self, Index):  pass

  def Unprotect(self, Password):  pass

  def XmlDataQuery(self, XPath, SelectionNamespaces, Map):  pass

  def XmlMapQuery(self, XPath, SelectionNamespaces, Map):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _CheckSpelling(self, CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript):  pass

  def _Evaluate(self, Name):  pass

  def _ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):  pass

  def _PasteSpecial(self, Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel):  pass

  def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):  pass

  def _PrintOut_(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):  pass

  def _Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):  pass

  def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local):  pass

  def _SaveAs_(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #unknown:
    # AutoFilter:  <class 'NoneType'>
    # CircularReference:  <class 'NoneType'>
    # ConsolidationSources:  <class 'NoneType'>
    # Next:  <class 'NoneType'>
    # OnCalculate:  <class 'NoneType'>
    # OnData:  <class 'NoneType'>
    # OnDoubleClick:  <class 'NoneType'>
    # OnEntry:  <class 'NoneType'>
    # OnSheetActivate:  <class 'NoneType'>
    # OnSheetDeactivate:  <class 'NoneType'>
    # Previous:  <class 'NoneType'>
    # _AutoFilter:  <class 'NoneType'>

  #getattr Exception:
    # MailEnvelope:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467259), None)



class Window:
  '''Represents a window.

#REMARKS:

Many worksheet characteristics, such as scroll bars and gridlines, are actually properties of the window. The Window object is a member of the Windows collection.

The Windows collection for the Application object contains all the windows in the application, whereas the Windows collection for the Workbook object contains only the windows in the specified workbook.

Use Windows (index), where index is the window name or index number, to return a single Window object. The following example maximizes the active window.

Note that the active window is always Windows(1).

The window caption is the text shown in the title bar at the top of the window when the window isn't maximized. The caption is also shown in the list of open files on the bottom of the Windows menu. Use the Caption property to set or return the window caption. Changing the window caption doesn't change the name of the workbook.

The following example turns off cell gridlines for the worksheet shown in the Book1.xls:1 window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use Windows (index), where index is the window name or index number, to return a single Window object. The following example maximizes the active window.

Windows(1).WindowState = xlMaximized

Note that the active window is always Windows(1).

The window caption is the text shown in the title bar at the top of the window when the window isn't maximized. The caption is also shown in the list of open files on the bottom of the Windows menu. Use the Caption property to set or return the window caption. Changing the window caption doesn't change the name of the workbook.

The following example turns off cell gridlines for the worksheet shown in the Book1.xls:1 window.

Windows("book1.xls":1).DisplayGridlines = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.ActiveCell: Range
    '''Returns a Range object that represents the active cell in the active window (the window on top) or in the specified window. If the window isn't displaying a worksheet, this property fails. Read-only.

#SYNTAX:

expression.ActiveCell

expression A variable that represents a Window object.

If you don't specify an object qualifier, this property returns the active cell in the active window.

Be careful to distinguish between the active cell and the selection. The active cell is a single cell inside the current selection. The selection may contain more than one cell, but only one is the active cell.

The following expressions all return the active cell, and are all equivalent.

This example uses a message box to display the value in the active cell. Because the ActiveCell property fails if the active sheet isn't a worksheet, the example activates Sheet1 before using the ActiveCell property.

This example changes the font formatting for the active cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't specify an object qualifier, this property returns the active cell in the active window.

Be careful to distinguish between the active cell and the selection. The active cell is a single cell inside the current selection. The selection may contain more than one cell, but only one is the active cell.

The following expressions all return the active cell, and are all equivalent.

This example uses a message box to display the value in the active cell. Because the ActiveCell property fails if the active sheet isn't a worksheet, the example activates Sheet1 before using the ActiveCell property.

This example changes the font formatting for the active cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

ActiveCell 
Application.ActiveCell 
ActiveWindow.ActiveCell 
Application.ActiveWindow.ActiveCell

This example uses a message box to display the value in the active cell. Because the ActiveCell property fails if the active sheet isn't a worksheet, the example activates Sheet1 before using the ActiveCell property.

Worksheets("Sheet1").Activate 
MsgBox ActiveCell.Value

This example changes the font formatting for the active cell.

Worksheets("Sheet1").Activate 
With ActiveCell.Font 
 .Bold = True 
 .Italic = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveChart: VBA_object
    '''Returns a Chart object that represents the active chart (either an embedded chart or a chart sheet). An embedded chart is considered active when it's either selected or activated. When no chart is active, this property returns Nothing.

#SYNTAX:

expression.ActiveChart

expression A variable that represents a Window object.

If you don't specify an object qualifier, this property returns the active chart in the active workbook.

This example turns on the legend for the active chart.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't specify an object qualifier, this property returns the active chart in the active workbook.

This example turns on the legend for the active chart.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns on the legend for the active chart.

ActiveChart.HasLegend = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActivePane: Pane
    '''Returns a Pane object that represents the active pane in the window. Read-only.

#SYNTAX:

expression.ActivePane

expression A variable that represents a Window object.

This property can be used only on worksheets and macro sheets.

This property returns a Pane object. You must use the Index property to obtain the index of the active pane.

This example activates the next pane of the active window in Book1.xls. You cannot activate the next pane if the panes are frozen. The example must be run from a workbook other than Book1.xls. Before running the example, make sure that Book1.xls has either two or four panes on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property can be used only on worksheets and macro sheets.

This property returns a Pane object. You must use the Index property to obtain the index of the active pane.

This example activates the next pane of the active window in Book1.xls. You cannot activate the next pane if the panes are frozen. The example must be run from a workbook other than Book1.xls. Before running the example, make sure that Book1.xls has either two or four panes on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example activates the next pane of the active window in Book1.xls. You cannot activate the next pane if the panes are frozen. The example must be run from a workbook other than Book1.xls. Before running the example, make sure that Book1.xls has either two or four panes on the active worksheet.

Workbooks("BOOK1.XLS").Activate 
If not ActiveWindow.FreezePanes Then 
 With ActiveWindow 
 i = .ActivePane.Index 
 If i = .Panes.Count Then 
 .Panes(1).Activate 
 Else 
 .Panes(i+1).Activate 
 End If 
 End With 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveSheet: _Worksheet
    '''Returns an object that represents the active sheet (the sheet on top) in the active workbook or in the specified window or workbook. Returns Nothing if no sheet is active.

#SYNTAX:

expression.ActiveSheet

expression A variable that represents a Window object.

If you don't specify an object qualifier, this property returns the active sheet in the active workbook.

If a workbook appears in more than one window, the ActiveSheet property may be different in different windows.

This example displays the name of the active sheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't specify an object qualifier, this property returns the active sheet in the active workbook.

If a workbook appears in more than one window, the ActiveSheet property may be different in different windows.

This example displays the name of the active sheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of the active sheet.

MsgBox "The name of the active sheet is " & ActiveSheet.Name

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ActiveSheetView: WorksheetView
    '''Returns an object that represents the view of the active sheet in the specified window. Read-only.

#SYNTAX:

expression.ActiveSheetView

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Window object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AutoFilterDateGrouping: bool
    '''True if the auto filter for date grouping is currently displayed in the specified window. Read/write Boolean.

#SYNTAX:

expression.AutoFilterDateGrouping

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Caption: VBA_Variant
    '''Returns or sets a Variant value that represents the name that appears in the title bar of the document window.

#SYNTAX:

expression.Caption

expression A variable that represents a Window object.

When you set the name, you can use that name as the index to the Windows collection (as demonstrated in the example.)

This example sets the name of the first window in the active workbook to Consolidated Balance Sheet. This name is then used as the index to that window in the Windows collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

When you set the name, you can use that name as the index to the Windows collection (as demonstrated in the example.)

This example sets the name of the first window in the active workbook to Consolidated Balance Sheet. This name is then used as the index to that window in the Windows collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the name of the first window in the active workbook to Consolidated Balance Sheet. This name is then used as the index to that window in the Windows collection.

ActiveWorkbook.Windows(1).Caption = "Consolidated Balance Sheet" 
ActiveWorkbook.Windows("Consolidated Balance Sheet") _ 
 .ActiveSheet.Calculate

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Window object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayFormulas: bool
    '''True if the window is displaying formulas; False if the window is displaying values. Read/write Boolean.

#SYNTAX:

expression.DisplayFormulas

expression A variable that represents a Window object.

This property applies only to worksheets and macro sheets.

This example changes the active window in Book1.xls to display formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property applies only to worksheets and macro sheets.

This example changes the active window in Book1.xls to display formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example changes the active window in Book1.xls to display formulas.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.DisplayFormulas = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayGridlines: bool
    '''True if gridlines are displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayGridlines

expression A variable that represents a Window object.

This property applies only to worksheets and macro sheets.

This property affects only displayed gridlines. Use the PrintGridlines property to control the printing of gridlines.

This example toggles the display of gridlines in the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property applies only to worksheets and macro sheets.

This property affects only displayed gridlines. Use the PrintGridlines property to control the printing of gridlines.

This example toggles the display of gridlines in the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example toggles the display of gridlines in the active window in Book1.xls.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.DisplayGridlines = Not(ActiveWindow.DisplayGridlines)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayHeadings: bool
    '''True if both row and column headings are displayed; False if no headings are displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayHeadings

expression A variable that represents a Window object.

This property applies only to worksheets and macro sheets.

This property affects only displayed headings. Use the PrintHeadings property to control the printing of headings.

This example turns off the display of row and column headings in the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property applies only to worksheets and macro sheets.

This property affects only displayed headings. Use the PrintHeadings property to control the printing of headings.

This example turns off the display of row and column headings in the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off the display of row and column headings in the active window in Book1.xls.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.DisplayHeadings = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayHorizontalScrollBar: bool
    '''True if the horizontal scroll bar is displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayHorizontalScrollBar

expression A variable that represents a Window object.

This example turns on the horizontal scroll bar for the active window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns on the horizontal scroll bar for the active window.

ActiveWindow.DisplayHorizontalScrollBar = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayOutline: bool
    '''True if outline symbols are displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayOutline

expression A variable that represents a Window object.

This property applies only to worksheets and macro sheets.

This example displays outline symbols for the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property applies only to worksheets and macro sheets.

This example displays outline symbols for the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays outline symbols for the active window in Book1.xls.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.DisplayOutline = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayRightToLeft: bool
    '''True if the specified window is displayed from right to left instead of from left to right. False if the object is displayed from left to right. Read-only Boolean.

#SYNTAX:

expression.DisplayRightToLeft

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayRuler: bool
    '''True if a ruler is displayed for the specified window. Read/write Boolean.

#SYNTAX:

expression.DisplayRuler

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayVerticalScrollBar: bool
    '''True if the vertical scroll bar is displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayVerticalScrollBar

expression A variable that represents a Window object.

This example turns on the vertical scroll bar for the active window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns on the vertical scroll bar for the active window.

ActiveWindow.DisplayVerticalScrollBar = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayWhitespace: bool
    '''True if whitespace is displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayWhitespace

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayWorkbookTabs: bool
    '''True if the workbook tabs are displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayWorkbookTabs

expression A variable that represents a Window object.

This example turns on the workbook tabs.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns on the workbook tabs.

ActiveWindow.DisplayWorkbookTabs = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayZeros: bool
    '''True if zero values are displayed. Read/write Boolean.

#SYNTAX:

expression.DisplayZeros

expression A variable that represents a Window object.

This property applies only to worksheets and macro sheets.

This example sets the active window in Book1.xls to display zero values.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property applies only to worksheets and macro sheets.

This example sets the active window in Book1.xls to display zero values.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the active window in Book1.xls to display zero values.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.DisplayZeros = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EnableResize: bool
    '''True if the window can be resized. Read/write Boolean.

#SYNTAX:

expression.EnableResize

expression A variable that represents a Window object.

This example sets the active window so that it cannot be resized.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the active window so that it cannot be resized.

ActiveWindow.EnableResize = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FreezePanes: bool
    '''True if split panes are frozen. Read/write Boolean.

#SYNTAX:

expression.FreezePanes

expression A variable that represents a Window object.

It's possible for FreezePanes to be True and Split to be False, or vice versa.

This property applies only to worksheets and macro sheets.

This example freezes split panes in the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

It's possible for FreezePanes to be True and Split to be False, or vice versa.

This property applies only to worksheets and macro sheets.

This example freezes split panes in the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example freezes split panes in the active window in Book1.xls.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.FreezePanes = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.GridlineColor: int
    '''Returns or sets the gridline color as an RGB value. Read/write Long.

#SYNTAX:

expression.GridlineColor

expression A variable that represents a Window object.

This example sets the gridline color in the active window in Book1.xls to red.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the gridline color in the active window in Book1.xls to red.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.GridlineColor = RGB(255,0,0)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.GridlineColorIndex: XlColorIndex
    '''Returns or sets the gridline color as an index into the current color palette or as an XlColorIndex constant.

#SYNTAX:

expression.GridlineColorIndex

expression A variable that represents a Window object.

Set this property to xlColorIndexAutomatic to specify the automatic color.

This example sets the gridline color in the active window to blue.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Set this property to xlColorIndexAutomatic to specify the automatic color.

This example sets the gridline color in the active window to blue.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the gridline color in the active window to blue.

ActiveWindow.GridlineColorIndex = 5

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Height: float
    '''Returns or sets a Double value that represents the height, in points, of the window.

#SYNTAX:

expression.Height

expression A variable that represents a Window object.

Use the UsableHeight property to determine the maximum size for the window. You cannot set this property if the window is maximized or minimized. Use the WindowState property to determine the window state.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use the UsableHeight property to determine the maximum size for the window. You cannot set this property if the window is maximized or minimized. Use the WindowState property to determine the window state.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Hwnd: int
    self.Index: int
    '''Returns a Long value that represents the index number of the object within the collection of similar objects.

#SYNTAX:

expression.Index

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Left: float
    '''Returns or sets a Double value that represents the distance, in points, from the left edge of the client area to the left edge of the window.

#SYNTAX:

expression.Left

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Panes: Panes
    '''Returns a Panes collection that represents all the panes in the specified window. Read-only.

#SYNTAX:

expression.Panes

expression A variable that represents a Window object.

This property is available for a window only if the window's Split property can be set to True.

This example displays the number of panes in the active window in Book1.xls.

This example activates the pane in the upper-left corner of the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property is available for a window only if the window's Split property can be set to True.

This example displays the number of panes in the active window in Book1.xls.

This example activates the pane in the upper-left corner of the active window in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of panes in the active window in Book1.xls.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
MsgBox "There are " & ActiveWindow.Panes.Count & _ 
 " panes in the active window"

This example activates the pane in the upper-left corner of the active window in Book1.xls.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.Panes(1).Activate

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RangeSelection: Range
    '''Returns a Range object that represents the selected cells on the worksheet in the specified window even if a graphic object is active or selected on the worksheet. Read-only.

#SYNTAX:

expression.RangeSelection

expression A variable that represents a Window object.

When a graphic object is selected on a worksheet, the Selection property returns the graphic object instead of a Range object; the RangeSelection property returns the range of cells that was selected before the graphic object was selected.

This property and the Selection property return identical values when a range (not a graphic object) is selected on the worksheet.

If the active sheet in the specified window isn't a worksheet, this property fails.

This example displays the address of the selected cells on the worksheet in the active window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

When a graphic object is selected on a worksheet, the Selection property returns the graphic object instead of a Range object; the RangeSelection property returns the range of cells that was selected before the graphic object was selected.

This property and the Selection property return identical values when a range (not a graphic object) is selected on the worksheet.

If the active sheet in the specified window isn't a worksheet, this property fails.

This example displays the address of the selected cells on the worksheet in the active window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the address of the selected cells on the worksheet in the active window.

MsgBox ActiveWindow.RangeSelection.Address

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ScrollColumn: int
    '''Returns or sets the number of the leftmost column in the pane or window. Read/write Long.

#SYNTAX:

expression.ScrollColumn

expression A variable that represents a Window object.

If the window is split, the ScrollColumn property of the Window object refers to the upper-left pane. If the panes are frozen, the ScrollColumn property of the Window object excludes the frozen areas.

This example moves column three so that it's the leftmost column in the window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the window is split, the ScrollColumn property of the Window object refers to the upper-left pane. If the panes are frozen, the ScrollColumn property of the Window object excludes the frozen areas.

This example moves column three so that it's the leftmost column in the window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example moves column three so that it's the leftmost column in the window.

Worksheets("Sheet1").Activate 
ActiveWindow.ScrollColumn = 3

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ScrollRow: int
    '''Returns or sets the number of the row that appears at the top of the pane or window. Read/write Long.

#SYNTAX:

expression.ScrollRow

expression A variable that represents a Window object.

If the window is split, the ScrollRow property of the Window object refers to the upper-left pane. If the panes are frozen, the ScrollRow property of the Window object excludes the frozen areas.

This example moves row ten to the top of the window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the window is split, the ScrollRow property of the Window object refers to the upper-left pane. If the panes are frozen, the ScrollRow property of the Window object excludes the frozen areas.

This example moves row ten to the top of the window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example moves row ten to the top of the window.

Worksheets("Sheet1").Activate 
ActiveWindow.ScrollRow = 10

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SelectedSheets: Sheets
    '''Returns a Sheets collection that represents all the selected sheets in the specified window. Read-only.

#SYNTAX:

expression.SelectedSheets

expression A variable that represents a Window object.

This example displays a message if Sheet1 is selected in Book1.xls.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message if Sheet1 is selected in Book1.xls.

For Each sh In Workbooks("BOOK1.XLS").Windows(1).SelectedSheets 
 If sh.Name = "Sheet1" Then 
 MsgBox "Sheet1 is selected" 
 Exit For 
 End If 
Next

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Selection: Range
    '''Returns the specified window, for a Windows object.

#SYNTAX:

expression.Selection

expression A variable that represents a Window object.

The returned object type depends on the current selection (for example, if a cell is selected, this property returns a Range object). The Selection property returns Nothing if nothing is selected.

Using this property with no object qualifier is equivalent to using Application.Selection.

This example clears the selection on Sheet1 (assuming that the selection is a range of cells).

This example displays the Visual Basic object type of the selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The returned object type depends on the current selection (for example, if a cell is selected, this property returns a Range object). The Selection property returns Nothing if nothing is selected.

Using this property with no object qualifier is equivalent to using Application.Selection.

This example clears the selection on Sheet1 (assuming that the selection is a range of cells).

This example displays the Visual Basic object type of the selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example clears the selection on Sheet1 (assuming that the selection is a range of cells).

Worksheets("Sheet1").Activate 
Selection.Clear

This example displays the Visual Basic object type of the selection.

Worksheets("Sheet1").Activate 
MsgBox "The selection object type is " & TypeName(Selection)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SheetViews: SheetViews
    '''Returns the SheetViews object for the specified window. Read-only.

#SYNTAX:

expression.SheetViews

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Split: bool
    '''True if the window is split. Read/write Boolean.

#SYNTAX:

expression.Split

expression A variable that represents a Window object.

It's possible for FreezePanes to be True and Split to be False, or vice versa.

This property applies only to worksheets and macro sheets.

This example splits the active window in Book1.xls at cell B2, without freezing panes. This causes the Split property to return True.

This example illustrates two ways of removing the split added by the preceding example.

This example removes the window split. Before you can remove the split, you must set FreezePanes to False to remove frozen panes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

It's possible for FreezePanes to be True and Split to be False, or vice versa.

This property applies only to worksheets and macro sheets.

This example splits the active window in Book1.xls at cell B2, without freezing panes. This causes the Split property to return True.

This example illustrates two ways of removing the split added by the preceding example.

This example removes the window split. Before you can remove the split, you must set FreezePanes to False to remove frozen panes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example splits the active window in Book1.xls at cell B2, without freezing panes. This causes the Split property to return True.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
With ActiveWindow 
 .SplitColumn = 2 
 .SplitRow = 2 
End With

This example illustrates two ways of removing the split added by the preceding example.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.Split = False 'method one 
Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.SplitColumn = 0 'method two 
ActiveWindow.SplitRow = 0

This example removes the window split. Before you can remove the split, you must set FreezePanes to False to remove frozen panes.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
With ActiveWindow 
 .FreezePanes = False 
 .Split = False 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SplitColumn: int
    '''Returns or sets the column number where the window is split into panes (the number of columns to the left of the split line). Read/write Long.

#SYNTAX:

expression.SplitColumn

expression A variable that represents a Window object.

This example splits the window and leaves 1.5 columns to the left of the split line.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example splits the window and leaves 1.5 columns to the left of the split line.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.SplitColumn = 1.5

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SplitHorizontal: float
    '''Returns or sets the location of the horizontal window split, in points. Read/write Double.

#SYNTAX:

expression.SplitHorizontal

expression A variable that represents a Window object.

This example sets the horizontal split for the active window to 216 points (3 inches).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the horizontal split for the active window to 216 points (3 inches).

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.SplitHorizontal = 216

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SplitRow: int
    '''Returns or sets the row number where the window is split into panes (the number of rows above the split). Read/write Long.

#SYNTAX:

expression.SplitRow

expression A variable that represents a Window object.

This example splits the active window so that there are 10 rows above the split line.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example splits the active window so that there are 10 rows above the split line.

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.SplitRow = 10

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SplitVertical: float
    '''Returns or sets the location of the vertical window split, in points. Read/write Double.

#SYNTAX:

expression.SplitVertical

expression A variable that represents a Window object.

This example sets the vertical split for the active window to 216 points (3 inches).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the vertical split for the active window to 216 points (3 inches).

Workbooks("BOOK1.XLS").Worksheets("Sheet1").Activate 
ActiveWindow.SplitVertical = 216

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TabRatio: float
    '''Returns or sets the ratio of the width of the workbook's tab area to the width of the window's horizontal scroll bar (as a number between 0 (zero) and 1; the default value is 0.6). Read/write Double.

#SYNTAX:

expression.TabRatio

expression A variable that represents a Window object.

This property has no effect when DisplayWorkbookTabs is set to False (its value is retained, but it has no effect on the display).

This example makes the workbook tabs half the width of the horizontal scroll bar.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property has no effect when DisplayWorkbookTabs is set to False (its value is retained, but it has no effect on the display).

This example makes the workbook tabs half the width of the horizontal scroll bar.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example makes the workbook tabs half the width of the horizontal scroll bar.

ActiveWindow.TabRatio = 0.5

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Top: float
    '''Returns or sets a Double value that represents the distance, in points, from the top edge of the window to the top edge of the usable area (below the menus, any toolbars docked at the top, and the formula bar).

#SYNTAX:

expression.Top

expression A variable that represents a Window object.

You cannot set this property for a maximized window. Use the WindowState property to return or set the state of the window.

This example arranges windows one and two horizontally; in other words, each window occupies half the available vertical space and all the available horizontal space in the application window's client area. For this example to work, there must be only two worksheet windows open.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You cannot set this property for a maximized window. Use the WindowState property to return or set the state of the window.

This example arranges windows one and two horizontally; in other words, each window occupies half the available vertical space and all the available horizontal space in the application window's client area. For this example to work, there must be only two worksheet windows open.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example arranges windows one and two horizontally; in other words, each window occupies half the available vertical space and all the available horizontal space in the application window's client area. For this example to work, there must be only two worksheet windows open.

Windows.Arrange xlArrangeTiled 
ah = Windows(1).Height ' available height 
aw = Windows(1).Width + Windows(2).Width ' available width 
With Windows(1) 
 .Width = aw 
 .Height = ah / 2 
 .Left = 0 
End With 
With Windows(2) 
 .Width = aw 
 .Height = ah / 2 
 .Top = ah / 2 
 .Left = 0 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Type: XlWindowType
    '''Returns or sets an XlWindowType value that represents the window type.

#SYNTAX:

expression.Type

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UsableHeight: float
    '''Returns the maximum height of the space that a window can occupy in the application window area, in points. Read-only Double.

#SYNTAX:

expression.UsableHeight

expression A variable that represents a Window object.

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

With ActiveWindow 
 .WindowState = xlNormal 
 .Top = 1 
 .Left = 1 
 .Height = Application.UsableHeight 
 .Width = Application.UsableWidth 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UsableWidth: float
    '''Returns the maximum width of the space that a window can occupy in the application window area, in points. Read-only Double.

#SYNTAX:

expression.UsableWidth

expression A variable that represents a Window object.

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

With ActiveWindow 
 .WindowState = xlNormal 
 .Top = 1 
 .Left = 1 
 .Height = Application.UsableHeight 
 .Width = Application.UsableWidth 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.View: XlWindowView
    '''Returns or sets the view showing in the window. Read/write XlWindowView.

#SYNTAX:

expression.View

expression A variable that represents a Window object.

This example switches the view in the active window to page break preview.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example switches the view in the active window to page break preview.

ActiveWindow.View = xlPageBreakPreview

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Visible: bool
    '''Returns or sets a Boolean value that determines whether the object is visible. Read/write.

#SYNTAX:

expression.Visible

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.VisibleRange: Range
    '''Returns a Range object that represents the range of cells that are visible in the window or pane. If a column or row is partially visible, it's included in the range. Read-only.

#SYNTAX:

expression.VisibleRange

expression A variable that represents a Window object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Width: float
    '''Returns or sets a Double value that represents the width, in points, of the window.

#SYNTAX:

expression.Width

expression A variable that represents a Window object.

Use the UsableWidth property to determine the maximum size for the window. You cannot set this property if the window is maximized or minimized. Use the WindowState property to determine the window state.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use the UsableWidth property to determine the maximum size for the window. You cannot set this property if the window is maximized or minimized. Use the WindowState property to determine the window state.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.WindowNumber: int
    '''Returns the window number. For example, a window named Book1.xls:2 has 2 as its window number. Most windows have the window number 1. Read-only Long.

#SYNTAX:

expression.WindowNumber

expression A variable that represents a Window object.

The window number isn't the same as the window index (the return value of the Index property), which is the position of the window within the Windows collection.

This example creates a new window of the active window and then displays the window number of the new window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The window number isn't the same as the window index (the return value of the Index property), which is the position of the window within the Windows collection.

This example creates a new window of the active window and then displays the window number of the new window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates a new window of the active window and then displays the window number of the new window.

ActiveWindow.NewWindow 
MsgBox ActiveWindow.WindowNumber

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.WindowState: XlWindowState
    '''Returns or sets the state of the window. Read/write XlWindowState.

#SYNTAX:

expression.WindowState

expression A variable that represents a Window object.

This example maximizes the application window in Microsoft Excel.

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example maximizes the application window in Microsoft Excel.

Application.WindowState = xlMaximized

This example expands the active window to the maximum size available (assuming that the window isn't already maximized).

With ActiveWindow 
 .WindowState = xlNormal 
 .Top = 1 
 .Left = 1 
 .Height = Application.UsableHeight 
 .Width = Application.UsableWidth 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Zoom: VBA_Variant
    '''Returns or sets a Variant value that represents the display size of the window, as a percentage (100 equals normal size, 200 equals double size, and so on).

#SYNTAX:

expression.Zoom

expression A variable that represents a Window object.

You can also set this property to True to make the window size fit the current selection.

This function affects only the sheet that's currently active in the window. To use this property on other sheets, you must first activate them.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can also set this property to True to make the window size fit the current selection.

This function affects only the sheet that's currently active in the window. To use this property on other sheets, you must first activate them.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self._DisplayRightToLeft: bool
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Activate(self) -> VBA_Variant:
    '''Brings the window to the front of the z-order.

#RETURN-VALUE: Variant

#REMARKS:

This won't run any Auto_Activate or Auto_Deactivate macros that might be attached to the workbook (use the RunAutoMacros method to run those macros).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ActivateNext(self) -> VBA_Variant:
    '''Activates the specified window and then sends it to the back of the window z-order.

#RETURN-VALUE: Variant

#EXAMPLE:

This example sends the active window to the back of the z-order.

ActiveWindow.ActivateNext

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ActivatePrevious(self) -> VBA_Variant:
    '''Activates the specified window and then activates the window at the back of the window z-order.

#RETURN-VALUE: Variant

#EXAMPLE:

This example activates the window at the back of the z-order.

ActiveWindow.ActivatePrevious

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Close(self, SaveChanges, Filename, RouteWorkbook) -> bool:
    '''Closes the object.

#PARAMETERS:

Name Required/Optional Data type Description

SaveChanges Optional Variant If there are no changes to the workbook, this argument is ignored. If there are changes to the workbook and the workbook appears in other open windows, this argument is ignored. If there are changes to the workbook but the workbook doesn't appear in any other open windows, this argument specifies whether changes should be saved.If set to True, changes are saved to the workbook.If there is not yet a file name associated with the workbook, FileName is used. If FileName is omitted, the user is asked to supply a file name.

FileName Optional Variant Save changes under this file name.

RouteWorkbook Optional Variant If the workbook doesn't need to be routed to the next recipient (if it has no routing slip or has already been routed), this argument is ignored. Otherwise, Microsoft Excel routes the workbook according to the value of this parameter.If set to True, the workbook is sent to the next recipient. If set to False, the workbook is not sent. If omitted, the user is asked whether the workbook should be sent.

#RETURN-VALUE: True if the method successfully closed the object; otherwise, False.

#REMARKS:

Closing a workbook from Visual Basic doesn't run any Auto_Close macros in the workbook. Use the RunAutoMacros method to run the Auto_Close macros.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def LargeScroll(self, Down, Up, ToRight, ToLeft) -> VBA_Variant:
    '''Scrolls the contents of the window by pages.

#PARAMETERS:

Name Required/Optional Data type Description

Down Optional Variant The number of pages to scroll the contents down.

Up Optional Variant The number of pages to scroll the contents up.

ToRight Optional Variant The number of pages to scroll the contents to the right.

ToLeft Optional Variant The number of pages to scroll the contents to the left.

#RETURN-VALUE: Variant

#REMARKS:

If Down and Up are both specified, the contents of the window are scrolled by the difference of the arguments. For example, if Down is 3 and Up is 6, the contents are scrolled up three pages.

If ToLeft and ToRight are both specified, the contents of the window are scrolled by the difference of the arguments. For example, if ToLeft is 3 and ToRight is 6, the contents are scrolled to the right three pages.

Any of the arguments can be a negative number.

This example scrolls the contents of the active window of Sheet1 down three pages.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example scrolls the contents of the active window of Sheet1 down three pages.

Worksheets("Sheet1").Activate 
ActiveWindow.LargeScroll down:=3

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NewWindow(self) -> Window:
    '''Creates a new window or a copy of the specified window.

#RETURN-VALUE: Window
    '''

  def PointsToScreenPixelsX(self, Points) -> int:
    '''Converts a horizontal measurement from points (document coordinates) to screen pixels (screen coordinates). Returns the converted measurement as a Long value.

#PARAMETERS:

Name Required/Optional Data type Description

Points Required Long The number of points horizontally along the top of the document window, starting from the left.

#RETURN-VALUE: Long

#EXAMPLE:

This example determines the height and width (in pixels) of the selected cells in the active window and returns the values in the lWinWidth and lWinHeight variables.

With ActiveWindow 
 lWinWidth = _ 
 .PointsToScreenPixelsX(.Selection.Width) 
 lWinHeight = _ 
 .PointsToScreenPixelsY(.Selection.Height) 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PointsToScreenPixelsY(self, Points) -> int:
    '''Converts a vertical measurement from points (document coordinates) to screen pixels (screen coordinates). Returns the converted measurement as a Long value.

#PARAMETERS:

Name Required/Optional Data type Description

Points Required Long The number of points vertically along the left edge of the document window, starting from the top.

#RETURN-VALUE: Long

#EXAMPLE:

This example determines the height and width (in pixels) of the selected cells in the active window and returns the values in the lWinWidth and lWinHeight variables.

With ActiveWindow 
 lWinWidth = _ 
 .PointsToScreenPixelsX(.Selection.Width) 
 lWinHeight = _ 
 .PointsToScreenPixelsY(.Selection.Height) 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName) -> VBA_Variant:
    '''Prints the object.

#PARAMETERS:

Name Required/Optional Data type Description

From Optional Variant The number of the page at which to start printing. If this argument is omitted, printing starts at the beginning.

To Optional Variant The number of the last page to print. If this argument is omitted, printing ends with the last page.

Copies Optional Variant The number of copies to print. If this argument is omitted, one copy is printed.

Preview Optional Variant True to have Microsoft Excel invoke print preview before printing the object. False (or omitted) to print the object immediately.

ActivePrinter Optional Variant Sets the name of the active printer.

PrintToFile Optional Variant True to print to a file. If PrToFileName is not specified, Microsoft Excel prompts the user to enter the name of the output file.

Collate Optional Variant True to collate multiple copies.

PrToFileName Optional Variant If PrintToFile is set to True, this argument specifies the name of the file that you want to print to.

#RETURN-VALUE: Variant

#REMARKS:

"Pages" in the descriptions of From and To refers to printed pages, not overall pages in the sheet or workbook.

This example prints the active sheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example prints the active sheet.

ActiveSheet.PrintOut

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PrintPreview(self, EnableChanges) -> VBA_Variant:
    '''Shows a preview of the object as it would look when printed.

#PARAMETERS:

Name Required/Optional Data type Description

EnableChanges Optional Variant Pass a Boolean value to specify if the user can change the margins and other page setup options available in print preview.

#RETURN-VALUE: Variant

#EXAMPLE:

This example displays Sheet1 in print preview.

Worksheets("Sheet1").PrintPreview

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RangeFromPoint(self, x, y) -> VBA_Object:
    '''Returns the Shape or Range object that is positioned at the specified pair of screen coordinates. If there isn't a shape located at the specified coordinates, this method returns Nothing.

#PARAMETERS:

Name Required/Optional Data type Description

x Required Long The value (in pixels) that represents the horizontal distance from the left edge of the screen, starting at the top.

y Required Long The value (in pixels) that represents the vertical distance from the top of the screen, starting on the left.

#RETURN-VALUE: Object

#EXAMPLE:

This example returns the alternative text for the shape immediately below the mouse pointer if the shape is a chart, line, or picture.

Private Function AltText(ByVal intMouseX As Integer, _ 
 ByVal intMouseY as Integer) As String 
 Set objShape = ActiveWindow.RangeFromPoint _ 
 (x:=intMouseX, y:=intMouseY) 
 If Not objShape Is Nothing Then 
 With objShape 
 Select Case .Type 
 Case msoChart, msoLine, msoPicture: 
 AltText = .AlternativeText 
 Case Else: 
 AltText = "" 
 End Select 
 End With 
 Else 
 AltText = "" 
 End If 
End Function

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ScrollIntoView(self, Left, Top, Width, Height, Start) -> None:
    '''Scrolls the document window so that the contents of a specified rectangular area are displayed in either the upper-left or lower-right corner of the document window or pane (depending on the value of the Start argument).

#PARAMETERS:

Name Required/Optional Data type Description

Left Required Long The horizontal position of the rectangle (in points) from the left edge of the document window or pane.

Top Required Long The vertical position of the rectangle (in points) from the top of the document window or pane.

Width Required Long The width of the rectangle, in points.

Height Required Long The height of the rectangle, in points.

Start Optional Variant True to have the upper-left corner of the rectangle appear in the upper-left corner of the document window or pane. False to have the lower-right corner of the rectangle appear in the lower-right corner of the document window or pane. The default value is True.

#REMARKS:

The Start argument is useful for orienting the screen display when the rectangle is larger than the document window or pane.

This example defines a 100-by-200-pixel rectangle in the active document window, positioned 20 pixels from the top of the window and 50 pixels from the left edge of the window.The example then scrolls the document up and to the left so that the upper-left corner of the rectangle is aligned with the upper-left corner of the window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example defines a 100-by-200-pixel rectangle in the active document window, positioned 20 pixels from the top of the window and 50 pixels from the left edge of the window.The example then scrolls the document up and to the left so that the upper-left corner of the rectangle is aligned with the upper-left corner of the window.

ActiveWindow.ScrollIntoView _ 
 Left:=50, Top:=20, _ 
 Width:=100, Height:=200

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ScrollWorkbookTabs(self, Sheets, Position) -> VBA_Variant:
    '''Scrolls through the workbook tabs at the bottom of the window. Doesn't affect the active sheet in the workbook.

#PARAMETERS:

Name Required/Optional Data type Description

Sheets Optional Variant The number of sheets to scroll by. Use a positive number to scroll forward, a negative number to scroll backward, or 0 (zero) to not scroll at all. You must specify Sheets if you don't specify Position.

Position Optional Variant Use xlFirst to scroll to the first sheet, or use xlLast to scroll to the last sheet. You must specify Position if you don't specify Sheets.

#RETURN-VALUE: Variant

#EXAMPLE:

This example scrolls through the workbook tabs to the last sheet in the workbook.

ActiveWindow.ScrollWorkbookTabs position:=xlLast

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SmallScroll(self, Down, Up, ToRight, ToLeft) -> VBA_Variant:
    '''Scrolls the contents of the window by rows or columns.

#PARAMETERS:

Name Required/Optional Data type Description

Down Optional Variant The number of rows to scroll the contents down.

Up Optional Variant The number of rows to scroll the contents up.

ToRight Optional Variant The number of columns to scroll the contents to the right.

ToLeft Optional Variant The number of columns to scroll the contents to the left.

#RETURN-VALUE: Variant

#REMARKS:

If Down and Up are both specified, the contents of the window are scrolled by the difference of the arguments. For example, if Down is 3 and Up is 6, the contents are scrolled up three rows.

If ToLeft and ToRight are both specified, the contents of the window are scrolled by the difference of the arguments. For example, if ToLeft is 3 and ToRight is 6, the contents are scrolled to the right three columns.

Any of these arguments can be a negative number.

This example scrolls the contents of the active window of Sheet1 down three rows.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example scrolls the contents of the active window of Sheet1 down three rows.

Worksheets("Sheet1").Activate 
ActiveWindow.SmallScroll down:=3

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # OnWindow:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Window 的 OnWindow 属性', 'xlmain11.chm', 0, -2146827284), None)



class Workbook(_Workbook):
  '''Represents a Microsoft Excel workbook.

#REMARKS:

The Workbook object is a member of the Workbooks collection. The Workbooks collection contains all the Workbook objects currently open in Microsoft Excel.

The ThisWorkbook property of the Application object returns the workbook where the Visual Basic code is running. In most cases, this is the same as the active workbook. However, if the Visual Basic code is part of an add-in, the ThisWorkbook property won't return the active workbook. In this case, the active workbook is the workbook calling the add-in, whereas the ThisWorkbook property returns the add-in workbook.

If you are creating an add-in from your Visual Basic code, you should use the ThisWorkbook property to qualify any statement that must be run on the workbook that you compile into the add-in.

Use Workbooks (index), where index is the workbook name or index number, to return a single Workbook object. The following example activates workbook one.

The index number denotes the order in which the workbooks were opened or created. Workbooks(1) is the first workbook created, and Workbooks(Workbooks.Count) is the last one created. Activating a workbook doesn't change its index number. All workbooks are included in the index count, even if they are hidden.

The Name property returns the workbook name. You cannot set the name by using this property; if you need to change the name, use the SaveAs method to save the workbook under a different name.

The following example activates Sheet1 in the workbook named Cogs.xls (the workbook must already be open in Microsoft Excel).

The ActiveWorkbook property of the Application object returns the workbook that's currently active. The following example sets the name of the author for the active workbook.

This example emails a worksheet tab from the active workbook by using a specified email address and subject. To run this code, the active worksheet must contain the email address in cell A1, the subject in cell B1, and the name of the worksheet to send in cell C1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use Workbooks (index), where index is the workbook name or index number, to return a single Workbook object. The following example activates workbook one.

Workbooks(1).Activate

The index number denotes the order in which the workbooks were opened or created. Workbooks(1) is the first workbook created, and Workbooks(Workbooks.Count) is the last one created. Activating a workbook doesn't change its index number. All workbooks are included in the index count, even if they are hidden.

The Name property returns the workbook name. You cannot set the name by using this property; if you need to change the name, use the SaveAs method to save the workbook under a different name.

The following example activates Sheet1 in the workbook named Cogs.xls (the workbook must already be open in Microsoft Excel).

Workbooks("Cogs.xls").Worksheets("Sheet1").Activate

The ActiveWorkbook property of the Application object returns the workbook that's currently active. The following example sets the name of the author for the active workbook.

ActiveWorkbook.Author = "Jean Selva"

This example emails a worksheet tab from the active workbook by using a specified email address and subject. To run this code, the active worksheet must contain the email address in cell A1, the subject in cell B1, and the name of the worksheet to send in cell C1.

Sub SendTab()
   'Declare and initialize your variables, and turn off screen updating.
   Dim wks As Worksheet
   Application.ScreenUpdating = False
   Set wks = ActiveSheet

   'Copy the target worksheet, specified in cell C1, to the clipboard.
   Worksheets(Range("C1").Value).Copy

   'Send the content in the clipboard to the email account specified in cell A1,
   'using the subject line specified in cell B1.
   ActiveWorkbook.SendMail wks.Range("A1").Value, wks.Range("B1").Value

   'Do not save changes, and turn screen updating back on.
   ActiveWorkbook.Close savechanges:=False
   Application.ScreenUpdating = True
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.__dict__: dict
    self.__module__: str
    self._dispobj_: _Workbook

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def __maybe__call__(self, args, kwargs):  pass

  def __maybe__int__(self, args):  pass

  def __maybe__iter__(self):  pass

  def __maybe__len__(self):  pass

  def __maybe__nonzero__(self):  pass

  def __maybe__str__(self, args):  pass


  #unknown:
    # coclass_interfaces:  <class 'list'>
    # coclass_sources:  <class 'list'>
    # default_interface:  <class 'type'>
    # default_source:  <class 'type'>



class AddIns:
  '''A collection of AddIn objects that represents all the add-ins available to Microsoft Excel, regardless of whether they're installed.

#REMARKS:

This list corresponds to the list of add-ins displayed in the Add-Ins dialog box.

Use the Application property to return the AddIns collection. The following example creates a list that contains the names and installed states of all the available add-ins.

Use the Add method to add an add-in to the list of available add-ins. The Add method adds an add-in to the list but doesn't install the add-in. Set the Installed property of the add-in to True to install the add-in.

To install an add-in that doesn't appear in the list of available add-ins, you must first use the Add method and then set the Installed property. This can be done in a single step, as shown in the following example (note that you use the name of the add-in, not its title, with the Add method).

Use AddIns (index), where index is the add-in title or index number, to return a single AddIn object. The following example installs the Analysis Toolpak add-in.

Don't confuse the add-in title, which appears in the Add-Ins dialog box, with the add-in name, which is the file name of the add-in. You must spell the add-in title exactly as it's spelled in the Add-Ins dialog box, but the capitalization doesn't have to match.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Application property to return the AddIns collection. The following example creates a list that contains the names and installed states of all the available add-ins.

Sub DisplayAddIns() 
 Worksheets("Sheet1").Activate 
 rw = 1 
 For Each ad In Application.AddIns 
 Worksheets("Sheet1").Cells(rw, 1) = ad.Name 
 Worksheets("Sheet1").Cells(rw, 2) = ad.Installed 
 rw = rw + 1 
 Next 
End Sub

Use the Add method to add an add-in to the list of available add-ins. The Add method adds an add-in to the list but doesn't install the add-in. Set the Installed property of the add-in to True to install the add-in.

To install an add-in that doesn't appear in the list of available add-ins, you must first use the Add method and then set the Installed property. This can be done in a single step, as shown in the following example (note that you use the name of the add-in, not its title, with the Add method).

AddIns.Add("generic.xll").Installed = True

Use AddIns (index), where index is the add-in title or index number, to return a single AddIn object. The following example installs the Analysis Toolpak add-in.

AddIns("analysis toolpak").Installed = True

Don't confuse the add-in title, which appears in the Add-Ins dialog box, with the add-in name, which is the file name of the add-in. You must spell the add-in title exactly as it's spelled in the Add-Ins dialog box, but the capitalization doesn't have to match.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an AddIns object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents an AddIns object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: XlCreator
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression An expression that returns an AddIns object.

XlCreator

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: XlCreator

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an AddIns object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Filename, CopyFile) -> AddIn:
    '''Adds a new add-in file to the list of add-ins. Returns an AddIn object.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The name of the file that contains the add-in or the ProgID of the automation add-in that you want to add to the list in the add-in manager.

CopyFile Optional Variant Ignored if the add-in file is on a hard disk. True to copy the add-in to your hard disk, if the add-in is on a removable medium (such as a compact disc). False to have the add-in remain on the removable medium. If this argument is omitted, Microsoft Excel displays a dialog box and asks you to choose.

#RETURN-VALUE: An AddIn object that represents the new add-in.

#REMARKS:

This method does not install the new add-in. You must set the Installed property to install the add-in.

This example inserts the add-in Myaddin.xla from drive A. When you run this example, Microsoft Excel copies the file A:\Myaddin.xla to the Library folder on your hard disk and adds the add-in title to the list in the Add-Ins dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example inserts the add-in Myaddin.xla from drive A. When you run this example, Microsoft Excel copies the file A:\Myaddin.xla to the Library folder on your hard disk and adds the add-in title to the list in the Add-Ins dialog box.

Sub UseAddIn() 
 
 Set myAddIn = AddIns.Add(Filename:="A:\MYADDIN.XLA", _ 
 CopyFile:=True) 
 MsgBox myAddIn.Title & " has been added to the list" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class AddIns2:
  '''A collection of AddIn objects that represent all the add-ins that are currently available or open in Microsoft Excel, regardless of whether they are installed.

#REMARKS:

The contents of the AddIns2 collection correspond to the list of add-ins displayed in the Add-Ins dialog box (Add-Ins command on the Developer tab) and any add-ins that are currently open.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an AddIns2 object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that returns an AddIns2 object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an AddIns2 object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an AddIns2 object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Filename, CopyFile) -> AddIn:
    '''Adds a new add-in to the list of add-ins.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The name of the file that contains the add-in to add to the list in the Add-Ins dialog box.

CopyFile Optional Variant If the add-in file is on a removable medium, specifies whether to copy the add-in to the local hard disk. Specify True to copy the add-in to your hard disk. Specify False to keep the add-in on the removable medium. If this argument is omitted, Microsoft Excel displays a dialog box and asks the user to choose whether to copy the add-in file. This parameter is ignored if the add-in file is already on the hard disk.

#RETURN-VALUE: AddIn
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class CDispatch:
  def __init__(self):
    self.Application: _Application
    self.Count: int
    self.Creator: int
    self.Parent: _Worksheet
    self.__dict__: dict
    self.__module__: str
    self._builtMethods_: dict
    self._lazydata_: tuple
    self._mapCachedItems_: dict
    self._olerepr_: LazyDispatchItem
    self._username_: str

  def Add(self, Anchor, Location, Language, Id, Extended, ScriptText):  pass

  def AddRef(self):  pass

  def Delete(self):  pass

  def GetIDsOfNames(self, riid, rgszNames, cNames, lcid, rgdispid):  pass

  def GetTypeInfo(self, itinfo, lcid, pptinfo):  pass

  def GetTypeInfoCount(self, pctinfo):  pass

  def Invoke(self, dispidMember, riid, lcid, wFlags, pdispparams, pvarResult, pexcepinfo, puArgErr):  pass

  def Item(self, Index):  pass

  def QueryInterface(self, riid, ppvObj):  pass

  def Release(self):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _FlagAsMethod(self, methodNames):  pass

  def _LazyAddAttr_(self, attr):  pass

  def _NewEnum(self):  pass

  def _Release_(self):  pass

  def _UpdateWithITypeInfo_(self, items_dict, typeInfo):  pass

  def __AttrToID__(self, attr):  pass

  def __LazyMap__(self, attr):  pass

  def __bool__(self):  pass

  def __call__(self, args):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, index):  pass

  def __int__(self):  pass

  def __len__(self):  pass

  def __setitem__(self, index, args):  pass

  def _dir_ole_(self):  pass

  def _find_dispatch_type_(self, methodName):  pass

  def _get_good_object_(self, ob, userName, ReturnCLSID):  pass

  def _get_good_single_object_(self, ob, userName, ReturnCLSID):  pass

  def _make_method_(self, name):  pass

  def _print_details_(self):  pass

  def _proc_(self, name, args):  pass

  def _wrap_dispatch_(self, ob, userName, returnCLSID, UnicodeToString):  pass


  #unknown:
    # _enum_:  <class 'NoneType'>
    # _unicode_to_string_:  <class 'NoneType'>



class AutoCorrect:
  '''Contains Microsoft Excel AutoCorrect attributes (capitalization of names of days, correction of two initial capital letters, automatic correction list, and so on).

#EXAMPLE:

Use the AutoCorrect property of the Application object to return the AutoCorrect object. The following example sets Excel to correct words that begin with two initial capital letters.

With Application.AutoCorrect 
 .TwoInitialCapitals = True 
 .ReplaceText = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an AutoCorrect object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AutoExpandListRange: bool
    '''A Boolean value indicating whether automatic expansion is enabled for lists. When you type in a cell of an empty row or column next to a list, the list will expand to include that row or column if automatic expansion is enabled. Read/write Boolean.

#SYNTAX:

expression.AutoExpandListRange

expression A variable that represents an AutoCorrect object.

The following example enables automatic expansion of lists when typing in adjacent rows or columns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example enables automatic expansion of lists when typing in adjacent rows or columns.

Sub SetAutoExpand 
 
 Application.AutoCorrect.AutoExpandListRange = TRUE 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AutoFillFormulasInLists: bool
    '''Affects the creation of calculated columns created by automatic fill-down lists. Read/write Boolean.

#SYNTAX:

expression.AutoFillFormulasInLists

expression A variable that represents an AutoCorrect object.

The property does not affect existing calculated columns or calculated columns created where auto-fill did not occur.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The property does not affect existing calculated columns or calculated columns created where auto-fill did not occur.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CapitalizeNamesOfDays: bool
    '''True if the first letter of day names is capitalized automatically. Read/write Boolean.

#SYNTAX:

expression.CapitalizeNamesOfDays

expression A variable that represents an AutoCorrect object.

This example sets Microsoft Excel to capitalize the first letter of the names of days.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Microsoft Excel to capitalize the first letter of the names of days.

With Application.AutoCorrect 
 .CapitalizeNamesOfDays = True 
 .ReplaceText = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CorrectCapsLock: bool
    '''True if Microsoft Excel automatically corrects accidental use of the CapsLock key. Read/write Boolean.

#SYNTAX:

expression.CorrectCapsLock

expression A variable that represents an AutoCorrect object.

This example enables Excel to automatically correct accidental use of the CapsLock key.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables Excel to automatically correct accidental use of the CapsLock key.

Application.AutoCorrect.CorrectCapsLock = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CorrectSentenceCap: bool
    '''True if Microsoft Excel automatically corrects sentence (first word) capitalization. Read/write Boolean.

#SYNTAX:

expression.CorrectSentenceCap

expression A variable that represents an AutoCorrect object.

This example enables Excel to automatically correct sentence capitalization.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables Excel to automatically correct sentence capitalization.

Application.AutoCorrect.CorrectSentenceCap = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an AutoCorrect object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DisplayAutoCorrectOptions: bool
    '''Allows the user to display or hide the AutoCorrect Options button. The default value is True. Read/write Boolean.

#SYNTAX:

expression.DisplayAutoCorrectOptions

expression A variable that represents an AutoCorrect object.

The DisplayAutoCorrectOptions property is a Microsoft Office-wide setting. Changing this property in Microsoft Excel will affect the other Office applications also.

In Excel, the AutoCorrect Options button only appears when a hyperlink is automatically created.

This example determines if the AutoCorrect Options button can be displayed, and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The DisplayAutoCorrectOptions property is a Microsoft Office-wide setting. Changing this property in Microsoft Excel will affect the other Office applications also.

In Excel, the AutoCorrect Options button only appears when a hyperlink is automatically created.

This example determines if the AutoCorrect Options button can be displayed, and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example determines if the AutoCorrect Options button can be displayed, and notifies the user.

Sub CheckDisplaySetting() 
 
 'Determine setting and notify user. 
 If Application.AutoCorrect.DisplayAutoCorrectOptions = True Then 
 MsgBox "The AutoCorrect Options button can be displayed." 
 Else 
 MsgBox "The AutoCorrect Options button cannot be displayed." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an AutoCorrect object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ReplaceText: bool
    '''True if text in the list of AutoCorrect replacements is replaced automatically. Read/write Boolean.

#SYNTAX:

expression.ReplaceText

expression A variable that represents an AutoCorrect object.

This example turns off automatic text replacement.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off automatic text replacement.

With Application.AutoCorrect 
 .CapitalizeNamesOfDays = True 
 .ReplaceText = False 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ReplacementList: list
    '''Returns the array of AutoCorrect replacements.

#SYNTAX:

expression.ReplacementList (Index)

expression A variable that represents an AutoCorrect object.

If Index is not specified, this method returns a two-dimensional array. Each row in the array contains one replacement, as shown in the following table.

Use the AddReplacement method to add an entry to the replacement list.

This example searches the replacement list for Temperature and displays the replacement entry if it exists.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If Index is not specified, this method returns a two-dimensional array. Each row in the array contains one replacement, as shown in the following table.

Use the AddReplacement method to add an entry to the replacement list.

This example searches the replacement list for Temperature and displays the replacement entry if it exists.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example searches the replacement list for Temperature and displays the replacement entry if it exists.

repl = Application.AutoCorrect.ReplacementList 
For x = 1 To UBound(repl) 
 If repl(x, 1) = "Temperature" Then MsgBox repl(x, 2) 
Next

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TwoInitialCapitals: bool
    '''True if words that begin with two capital letters are corrected automatically. Read/write Boolean.

#SYNTAX:

expression.TwoInitialCapitals

expression A variable that represents an AutoCorrect object.

This example sets Microsoft Excel to correct words that begin with two capital letters.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Microsoft Excel to correct words that begin with two capital letters.

With Application.AutoCorrect 
 .TwoInitialCapitals = True 
 .ReplaceText = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def AddReplacement(self, What, Replacement) -> VBA_Variant:
    '''Adds an entry to the array of AutoCorrect replacements.

#PARAMETERS:

Name Required/Optional Data type Description

What Required String The text to be replaced. If this string already exists in the array of AutoCorrect replacements, the existing substitute text is replaced by the new text.

Replacement Required String The replacement text.

#RETURN-VALUE: Variant

#EXAMPLE:

This example substitutes the word Temp. for the word Temperature in the array of AutoCorrect replacements.

With Application.AutoCorrect 
 .AddReplacement "Temperature", "Temp." 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DeleteReplacement(self, What) -> VBA_Variant:
    '''Deletes an entry from the array of AutoCorrect replacements.

#PARAMETERS:

Name Required/Optional Data type Description

What Required String The text to be replaced, as it appears in the row to be deleted from the array of AutoCorrect replacements. If this string doesn't exist in the array of AutoCorrect replacements, this method fails.

#RETURN-VALUE: Variant

#EXAMPLE:

This example removes the word Temperature from the array of AutoCorrect replacements.

With Application.AutoCorrect 
 .DeleteReplacement "Temperature" 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GetReplacementList(self, Index):  pass

  def SetReplacementList(self, Index, arg1):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # ConvertNumbersWithECharacter:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # TruncateLargeNumbers:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # TruncateLeadingZeros:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)



class AutoRecover:
  '''Represents the automatic recovery features of a workbook.

#REMARKS:

Properties for the AutoRecover object determine the path and time interval for backing up all files.

Use the AutoRecover property of the Application object to return an AutoRecover object.

Use the Path property of the AutoRecover object to set the path for where the AutoRecover file will be saved.

The following example sets the path of the AutoRecover file to drive C.

Use the Time property of the AutoRecover object to set the time interval for backing up all files. Units for the Time property are in minutes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example sets the path of the AutoRecover file to drive C.

Sub SetPath() 
 
 Application.AutoRecover.Path = "C:\" 
 
End Sub

Use the Time property of the AutoRecover object to set the time interval for backing up all files. Units for the Time property are in minutes.

Sub SetTime() 
 
 Application.AutoRecover.Time = 5 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an AutoRecover object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an AutoRecover object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Enabled: bool
    '''True if the object is enabled. Read/write Boolean.

#SYNTAX:

expression.Enabled

expression A variable that represents an AutoRecover object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an AutoRecover object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Path: str
    '''Returns or sets a String value that represents the complete path to where Microsoft Excel will store the AutoRecover temporary files.

#SYNTAX:

expression.Path

expression A variable that represents an AutoRecover object.

This example sets the path of the AutoRecover file to drive C.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the path of the AutoRecover file to drive C.

Sub SetPath() 
 
 Application.AutoRecover.Path = "C:\" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Time: AutoRecover | int
    '''Sets or returns the time interval for the AutoRecover object. Permissible values are integers from 1 to 120 minutes. The default value is 10 minutes. Read/write Long.

#SYNTAX:

expression.Time

expression A variable that represents an AutoRecover object.

Entering a decimal value will round to the nearest whole number. For example, entering a value of 5.5 is the equivalent of 6.

If time values outside the valid range are entered, Microsoft Excel will revert to the previous time value used.

The following example sets the AutoRecover time interval to 5 minutes, and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Entering a decimal value will round to the nearest whole number. For example, entering a value of 5.5 is the equivalent of 6.

If time values outside the valid range are entered, Microsoft Excel will revert to the previous time value used.

The following example sets the AutoRecover time interval to 5 minutes, and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example sets the AutoRecover time interval to 5 minutes, and notifies the user.

Sub SetTimeValue() 
 
 Application.AutoRecover.Time = 5 
 MsgBox "The AutoRecover time interval is set at " & _ 
 Application.AutoRecover.Time & " minutes." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Sheets:
  '''A collection of all the sheets in the specified or active workbook.

#REMARKS:

The Sheets collection can contain Chart or Worksheet objects.

The Sheets collection is useful when you want to return sheets of any type. If you need to work with sheets of only one type, see the object topic for that sheet type.

Use the Sheets property of the Workbook object to return the Sheets collection. The following example prints all sheets in the active workbook.

Use the Add method to create a new sheet and add it to the collection. The following example adds two chart sheets to the active workbook, placing them after sheet two in the workbook.

Use Sheets (index), where index is the sheet name or index number, to return a single Chart or Worksheet object. The following example activates the sheet named Sheet1.

Use Sheets (array) to specify more than one sheet. The following example moves the sheets named Sheet4 and Sheet5 to the beginning of the workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Sheets property of the Workbook object to return the Sheets collection. The following example prints all sheets in the active workbook.

Sheets.PrintOut

Use the Add method to create a new sheet and add it to the collection. The following example adds two chart sheets to the active workbook, placing them after sheet two in the workbook.

Sheets.Add type:=xlChart, count:=2, after:=Sheets(2)

Use Sheets (index), where index is the sheet name or index number, to return a single Chart or Worksheet object. The following example activates the sheet named Sheet1.

Sheets("Sheet1").Activate

Use Sheets (array) to specify more than one sheet. The following example moves the sheets named Sheet4 and Sheet5 to the beginning of the workbook.

Sheets(Array("Sheet4", "Sheet5")).Move before:=Sheets(1)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Sheets object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Sheets object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Sheets object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HPageBreaks: HPageBreaks
    '''Returns an HPageBreaks collection that represents the horizontal page breaks on the sheet. Read-only.

#SYNTAX:

expression.HPageBreaks

expression A variable that represents a Sheets object.

There is a limit of 1026 horizontal page breaks per sheet.

This example displays the number of full-screen and print-area horizontal page breaks.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

There is a limit of 1026 horizontal page breaks per sheet.

This example displays the number of full-screen and print-area horizontal page breaks.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of full-screen and print-area horizontal page breaks.

For Each pb in Worksheets(1).HPageBreaks 
 If pb.Extent = xlPageBreakFull Then 
 cFull = cFull + 1 
 Else 
 cPartial = cPartial + 1 
 End If 
Next 
MsgBox cFull & " full-screen page breaks, " & cPartial & _ 
 " print-area page breaks"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Sheets object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.VPageBreaks: VPageBreaks
    '''Returns a VPageBreaks collection that represents the vertical page breaks on the sheet. Read-only.

#SYNTAX:

expression.VPageBreaks

expression A variable that represents a Sheets object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Before, After, Count, Type) -> VBA_object:
    '''Creates a new worksheet, chart, or macro sheet. The new worksheet becomes the active sheet.

#PARAMETERS:

Name Required/Optional Data type Description

Before Optional Variant An object that specifies the sheet before which the new sheet is added.

After Optional Variant An object that specifies the sheet after which the new sheet is added.

Count Optional Variant The number of sheets to be added. The default value is the number of selected sheets.

Type Optional Variant Specifies the sheet type. Can be one of the following XlSheetType constants: xlWorksheet, xlChart, xlExcel4MacroSheet, or xlExcel4IntlMacroSheet. If you are inserting a sheet based on an existing template, specify the path to the template. The default value is xlWorksheet.

#RETURN-VALUE: An Object value that represents the new worksheet, chart, or macro sheet.

#REMARKS:

If Before and After are both omitted, the new sheet is inserted before the active sheet.

This example inserts a new worksheet before the last worksheet in the active workbook.

This example inserts a new worksheet after the last worksheet in the active workbook, and captures the returned object reference in a local variable.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example inserts a new worksheet before the last worksheet in the active workbook.

ActiveWorkbook.Sheets.Add Before:=ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count)

This example inserts a new worksheet after the last worksheet in the active workbook, and captures the returned object reference in a local variable.

Dim sheet As Worksheet
Set sheet = ActiveWorkbook.Sheets.Add(After:=ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count))

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Add2(self, Before, After, Count, NewLayout) -> VBA_OBJECT:
    '''This method is only implemented for the Charts collection object and will produce a run-time error if used on the Sheets and Worksheets objects.

#PARAMETERS:

Name Required/Optional Data type Description

Before Optional Variant An object that specifies the sheet before which the new sheet is added.

After Optional Variant An object that specifies the sheet after which the new sheet is added.

Count Optional Variant The number of sheets to be added. The default value is one.

NewLayout Optional Variant The layout of the new worksheet.

#RETURN-VALUE: OBJECT
    '''

  def Copy(self, Before, After) -> None:
    '''Copies the sheet to another location in the workbook.

#PARAMETERS:

Name Required/Optional Data type Description

Before Optional Variant The sheet before which the copied sheet will be placed. You cannot specify Before if you specify After.

After Optional Variant The sheet after which the copied sheet will be placed. You cannot specify After if you specify Before.

#REMARKS:

If you don't specify either Before or After, Microsoft Excel creates a new workbook that contains the copied sheet.

This example copies Sheet1, placing the copy after Sheet3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example copies Sheet1, placing the copy after Sheet3.

Worksheets("Sheet1").Copy After:=Worksheets("Sheet3")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Delete(self) -> None:
    '''Deletes the object.'''

  def FillAcrossSheets(self, Range, Type) -> None:
    '''Copies a range to the same area on all other worksheets in a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Range Required Range The range to fill on all the worksheets in the collection. The range must be from a worksheet within the collection.

Type Optional XlFillWith Specifies how to copy the range.

#EXAMPLE:

This example fills the range A1:C5 on Sheet1, Sheet5, and Sheet7 with the contents of the same range on Sheet1.

x = Array("Sheet1", "Sheet5", "Sheet7") 
Sheets(x).FillAcrossSheets _ 
 Worksheets("Sheet1").Range("A1:C5")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def Move(self, Before, After) -> None:
    '''Moves the sheet to another location in the workbook.

#PARAMETERS:

Name Required/Optional Data type Description

Before Optional Variant The sheet before which the moved sheet will be placed. You cannot specify Before if you specify After.

After Optional Variant The sheet after which the moved sheet will be placed. You cannot specify After if you specify Before.

#REMARKS:

If you don't specify either Before or After, Microsoft Excel creates a new workbook that contains the moved sheet.

This example moves Sheet1 after Sheet3 in the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example moves Sheet1 after Sheet3 in the active workbook.

Worksheets("Sheet1").Move _ 
 after:=Worksheets("Sheet3")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas) -> VBA_Variant:
    '''Prints the object.

#PARAMETERS:

Name Required/Optional Data type Description

From Optional Variant The number of the page at which to start printing. If this argument is omitted, printing starts at the beginning.

To Optional Variant The number of the last page to print. If this argument is omitted, printing ends with the last page.

Copies Optional Variant The number of copies to print. If this argument is omitted, one copy is printed.

Preview Optional Variant True to have Microsoft Excel invoke print preview before printing the object. False (or omitted) to print the object immediately.

ActivePrinter Optional Variant Sets the name of the active printer.

PrintToFile Optional Variant True to print to a file. If PrToFileName is not specified, Excel prompts the user to enter the name of the output file.

Collate Optional Variant True to collate multiple copies.

PrToFileName Optional Variant If PrintToFile is set to True, this argument specifies the name of the file that you want to print to.

IgnorePrintAreas Optional Variant True to ignore print areas and print the entire object.

#RETURN-VALUE: Variant

#REMARKS:

"Pages" in the descriptions of From and To refers to printed pages, not overall pages in the sheet or workbook.

This example prints the active sheet.

This example prints from page 2 to page 3.

This example prints three copies from page 2 to page 3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example prints the active sheet.

ActiveSheet.PrintOut

This example prints from page 2 to page 3.

Worksheets. ("sheet1").PrintOut From:=2, To:=3

This example prints three copies from page 2 to page 3.

Worksheets. ("sheet1").PrintOut From:=2, To:=3, Copies:=3

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PrintPreview(self, EnableChanges) -> None:
    '''Shows a preview of the object as it would look when printed.

#PARAMETERS:

Name Required/Optional Data type Description

EnableChanges Optional Variant Pass a Boolean value to specify if the user can change the margins and other page setup options available in print preview.

#EXAMPLE:

This example displays Sheet1 in print preview.

Worksheets("Sheet1").PrintPreview

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Select(self, Replace) -> None:
    '''Selects the object.

#PARAMETERS:

Name Required/Optional Data type Description

Replace Optional Variant Used only with sheets. True to replace the current selection with the specified object. False to extend the current selection to include any previously selected objects and the specified object.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):  pass

  def _PrintOut_(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class DefaultPivotTableLayoutOptions:
  def __init__(self):
    self.AllowMultipleFilters: bool
    self.Application: Application
    self.CalculatedMembersInFilters: bool
    self.ColumnGrand: bool
    self.CompactRowIndent: int
    self.Creator: int
    self.DisplayContextTooltips: bool
    self.DisplayEmptyColumn: bool
    self.DisplayEmptyRow: bool
    self.DisplayErrorString: bool
    self.DisplayFieldCaptions: bool
    self.DisplayImmediateItems: bool
    self.DisplayMemberPropertyTooltips: bool
    self.DisplayNullString: bool
    self.EnableDrilldown: bool
    self.EnableWriteback: bool
    self.ErrorString: str
    self.FieldListSortAscending: bool
    self.HasAutoFormat: bool
    self.InGridDropZones: bool
    self.LayoutBlankLine: bool
    self.MergeLabels: bool
    self.NullString: str
    self.PageFieldOrder: bool
    self.PageFieldWrapCount: int
    self.Parent: _Application
    self.PreserveFormatting: bool
    self.PrintDrillIndicators: bool
    self.PrintTitles: bool
    self.RefreshOnFileOpen: bool
    self.RepeatAllLabels: int
    self.RepeatItemsOnEachPrintedPage: bool
    self.RowAxisLayout: int
    self.RowGrand: bool
    self.SaveData: bool
    self.ShowDrillIndicators: bool
    self.ShowValuesRow: bool
    self.SortUsingCustomLists: bool
    self.SubtotalHiddenPageItems: bool
    self.SubtotalLocation: bool
    self.Subtotals: bool
    self.TotalsAnnotation: bool
    self.ViewCalculatedMembers: bool
    self.VisualTotals: bool
    self.VisualTotalsForSets: bool
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict
    self.xlMissingItemsNone: int

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class DefaultWebOptions:
  '''Contains global application-level attributes used by Microsoft Excel when you save a document as a webpage or open a webpage. You can return or set attributes either at the application (global) level or at the workbook level.

#REMARKS:

Workbook-level attribute settings override application-level attribute settings. Workbook-level attributes are contained in the WebOptions object.

Use the DefaultWebOptions property of the Application object to return the DefaultWebOptions object. The following example checks to see whether PNG (Portable Network Graphics) is allowed as an image format and sets the strImageFileType variable accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the DefaultWebOptions property of the Application object to return the DefaultWebOptions object. The following example checks to see whether PNG (Portable Network Graphics) is allowed as an image format and sets the strImageFileType variable accordingly.

Set objAppWebOptions = Application.DefaultWebOptions 
With objAppWebOptions 
 If .AllowPNG = True Then 
 strImageFileType = "PNG" 
 Else 
 strImageFileType = "JPG" 
 End If 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.AllowPNG: bool
    '''True if PNG (Portable Network Graphics) is allowed as an image format when you save documents as a webpage. False if PNG is not allowed as an output format. The default value is False. Read/write Boolean.

#SYNTAX:

expression.AllowPNG

expression A variable that represents a DefaultWebOptions object.

If you save images in the PNG format as opposed to any other file format, you might improve the image quality or reduce the size of those image files, and therefore decrease the download time, assuming that the web browsers that you are targeting support the PNG format.

Alternatively, PNG can be enabled as the global default for the application for newly created documents.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you save images in the PNG format as opposed to any other file format, you might improve the image quality or reduce the size of those image files, and therefore decrease the download time, assuming that the web browsers that you are targeting support the PNG format.

Alternatively, PNG can be enabled as the global default for the application for newly created documents.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Alternatively, PNG can be enabled as the global default for the application for newly created documents.

Application.DefaultWebOptions.AllowPNG = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AlwaysSaveInDefaultEncoding: bool
    '''True if the default encoding is used when you save a webpage or plain text document, independent of the file's original encoding when opened. False if the original encoding of the file is used. The default value is False. Read/write Boolean.

#SYNTAX:

expression.AlwaysSaveInDefaultEncoding

expression A variable that represents a DefaultWebOptions object.

The Encoding property can be used to set the default encoding.

This example sets the encoding to the default encoding. The encoding is used when you save the document as a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The Encoding property can be used to set the default encoding.

This example sets the encoding to the default encoding. The encoding is used when you save the document as a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the encoding to the default encoding. The encoding is used when you save the document as a webpage.

Application.DefaultWebOptions.AlwaysSaveInDefaultEncoding = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a DefaultWebOptions object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CheckIfOfficeIsHTMLEditor: bool
    '''True if Microsoft Excel checks to see whether an Office application is the default HTML editor when you start Excel. False if Excel does not perform this check. The default value is True. Read/write Boolean.

#SYNTAX:

expression.CheckIfOfficeIsHTMLEditor

expression A variable that represents a DefaultWebOptions object.

This property is used only if the web browser that you are using supports HTML editing and HTML editors.

To use a different HTML editor, you must set this property to False and then register the editor as the default system HTML editor.

This example causes Excel not to check to see whether it is the default HTML editor.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property is used only if the web browser that you are using supports HTML editing and HTML editors.

To use a different HTML editor, you must set this property to False and then register the editor as the default system HTML editor.

This example causes Excel not to check to see whether it is the default HTML editor.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes Excel not to check to see whether it is the default HTML editor.

Application.DefaultWebOptions.CheckIfOfficeIsHTMLEditor = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a DefaultWebOptions object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DownloadComponents: bool
    '''True if the necessary Microsoft Office Web components are downloaded when you view the saved document in a web browser, but only if the components are not already installed. False if the components are not downloaded. The default value is False. Read/write Boolean.

#SYNTAX:

expression.DownloadComponents

expression A variable that represents a DefaultWebOptions object.

You can set the LocationOfComponents property to a central URL (on the intranet or web) or path (local or network) to a location from which authorized users can download components when viewing your saved document. The path must be valid and must point to a location that contains the necessary components, and the user must have a valid Microsoft Office license.

Office Web components add interactivity to documents that you save as webpages. If you view a webpage in a browser on a computer that does not have the components installed, the interactive portions of the page will be static.

This example allows the Office Web components to be downloaded with the specified webpage, if they are not already installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can set the LocationOfComponents property to a central URL (on the intranet or web) or path (local or network) to a location from which authorized users can download components when viewing your saved document. The path must be valid and must point to a location that contains the necessary components, and the user must have a valid Microsoft Office license.

Office Web components add interactivity to documents that you save as webpages. If you view a webpage in a browser on a computer that does not have the components installed, the interactive portions of the page will be static.

This example allows the Office Web components to be downloaded with the specified webpage, if they are not already installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the Office Web components to be downloaded with the specified webpage, if they are not already installed.

Application.DefaultWebOptions.DownloadComponents = True 
Application.DefaultWebOptions.LocationOfComponents = _ 
 Application.Path & Application.PathSeparator & "foo"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Encoding: MsoEncoding
    '''Returns or sets the document encoding (code page or character set) to be used by the web browser when you view the saved document. The default is the system code page. Read/write MsoEncoding.

#SYNTAX:

expression.Encoding

expression A variable that represents a DefaultWebOptions object.

You cannot use any of the constants that have the suffix AutoDetect. These constants are used by the ReloadAs method.

This example checks to see whether the default document encoding is Western, and then it sets the string strDocEncoding accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You cannot use any of the constants that have the suffix AutoDetect. These constants are used by the ReloadAs method.

This example checks to see whether the default document encoding is Western, and then it sets the string strDocEncoding accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example checks to see whether the default document encoding is Western, and then it sets the string strDocEncoding accordingly.

If Application.DefaultWebOptions.Encoding = msoEncodingWestern Then 
    strDocEncoding = "Western" 
Else 
    strDocEncoding = "Other" 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FolderSuffix: str
    '''Returns the folder suffix that Microsoft Excel uses when you save a document as a webpage, use long file names, and choose to save supporting files in a separate folder (that is, if the UseLongFileNames and OrganizeInFolder properties are set to True). Read-only String.

#SYNTAX:

expression.FolderSuffix

expression A variable that represents a DefaultWebOptions object.

Newly created documents use the suffix returned by the FolderSuffix property of the DefaultWebOptions object. The value of the WebOptions.FolderSuffix property may differ from that of the DefaultWebOptions object if the document was previously edited in a different language version of Microsoft Excel. Use the WebOptions.UseDefaultFolderSuffix method to change the suffix to the language that you are currently using in Microsoft Office.

By default, the name of the supporting folder is the name of the webpage plus an underscore (_), a period (.), or a hyphen (-) and the word "files" (appearing in the language of the version of Excel in which the file was saved as a webpage). For example, suppose that you use the Dutch language version of Excel to save a file called Page1 as a webpage. The default name of the supporting folder is Page1_bestanden.

The following table lists each language version of Office, and gives its corresponding LanguageID property value and folder suffix. For the languages that are not listed in the table, the suffix ".files" is used.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Newly created documents use the suffix returned by the FolderSuffix property of the DefaultWebOptions object. The value of the WebOptions.FolderSuffix property may differ from that of the DefaultWebOptions object if the document was previously edited in a different language version of Microsoft Excel. Use the WebOptions.UseDefaultFolderSuffix method to change the suffix to the language that you are currently using in Microsoft Office.

By default, the name of the supporting folder is the name of the webpage plus an underscore (_), a period (.), or a hyphen (-) and the word "files" (appearing in the language of the version of Excel in which the file was saved as a webpage). For example, suppose that you use the Dutch language version of Excel to save a file called Page1 as a webpage. The default name of the supporting folder is Page1_bestanden.

The following table lists each language version of Office, and gives its corresponding LanguageID property value and folder suffix. For the languages that are not listed in the table, the suffix ".files" is used.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Fonts: CDispatch
    '''Returns the WebPageFonts collection representing the set of fonts Microsoft Excel uses when you open a webpage in Excel and there is either no font information specified on the webpage, or the current default font can't display the character set on the webpage. Read-only.

#SYNTAX:

expression.Fonts

expression A variable that represents a DefaultWebOptions object.

This example sets the default fixed-width font for the English/Western European/Other Latin Script character set to Courier New, 14 points.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the default fixed-width font for the English/Western European/Other Latin Script character set to Courier New, 14 points.

With Application.DefaultWebOptions _ 
    .Fonts(msoCharacterSetEnglishWesternEuropeanOtherLatinScript) 
        .FixedWidthFont = "Courier New" 
        .FixedWidthFontSize = 14 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LoadPictures: bool
    '''True if images are loaded when you open a document in Microsoft Excel, usually when the images and document were not created in Microsoft Excel. False if the images are not loaded. The default value is True. Read/write Boolean.

#SYNTAX:

expression.LoadPictures

expression A variable that represents a DefaultWebOptions object.

This example causes images to load when the document is opened in Excel.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes images to load when the document is opened in Excel.

Application.DefaultWebOptions.LoadPictures = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LocationOfComponents: str
    '''Returns or sets the central URL (on the intranet or web) or path (local or network) to the location from which authorized users can download Microsoft Office Web components when viewing your saved document. The default value is the local or network installation path for Microsoft Office. Read/write String.

#SYNTAX:

expression.LocationOfComponents

expression A variable that represents a DefaultWebOptions object.

Office Web components are automatically downloaded with the specified webpage if the DownloadComponents property is set to True, the components are not already installed, the path is valid and points to a location that contains the necessary components, and the user has a valid Microsoft Office license.

This example sets the path to the location from which users can download Microsoft Office Web components.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Office Web components are automatically downloaded with the specified webpage if the DownloadComponents property is set to True, the components are not already installed, the path is valid and points to a location that contains the necessary components, and the user has a valid Microsoft Office license.

This example sets the path to the location from which users can download Microsoft Office Web components.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the path to the location from which users can download Microsoft Office Web components.

Application.DefaultWebOptions.DownloadComponents = True 
Application.DefaultWebOptions.LocationOfComponents = _ 
 Application.Path & Application.PathSeparator & "foo"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OrganizeInFolder: bool
    '''True if all supporting files, such as background textures and graphics, are organized in a separate folder when you save the specified document as a webpage. False if supporting files are saved in the same folder as the webpage. The default value is True. Read/write Boolean.

#SYNTAX:

expression.OrganizeInFolder

expression A variable that represents a DefaultWebOptions object.

The new folder is created in the folder where you saved the webpage, and is named after the document. If long file names are used, a suffix is added to the folder name. The FolderSuffix property returns the folder suffix for the language support that you have selected or installed, or the default folder suffix.

If you save a document that was previously saved with the OrganizeInFolder property set to a different value, Microsoft Excel automatically moves the supporting files into or out of the folder, as appropriate.

If you don't use long file names (that is, if the UseLongFileNames property is set to False), Excel automatically saves any supporting files in a separate folder. The files cannot be saved in the same folder as the webpage.

This example specifies that all supporting files are saved in the same folder when the document is saved as a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The new folder is created in the folder where you saved the webpage, and is named after the document. If long file names are used, a suffix is added to the folder name. The FolderSuffix property returns the folder suffix for the language support that you have selected or installed, or the default folder suffix.

If you save a document that was previously saved with the OrganizeInFolder property set to a different value, Microsoft Excel automatically moves the supporting files into or out of the folder, as appropriate.

If you don't use long file names (that is, if the UseLongFileNames property is set to False), Excel automatically saves any supporting files in a separate folder. The files cannot be saved in the same folder as the webpage.

This example specifies that all supporting files are saved in the same folder when the document is saved as a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example specifies that all supporting files are saved in the same folder when the document is saved as a webpage.

Application.DefaultWebOptions.OrganizeInFolder = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a DefaultWebOptions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PixelsPerInch: int
    '''Returns or sets the density (pixels per inch) of graphics images and table cells on a webpage. The range of settings is usually from 19 to 480, and common settings for popular screen sizes are 72, 96, and 120. The default setting is 96. Read/write Long.

#SYNTAX:

expression.PixelsPerInch

expression A variable that represents a DefaultWebOptions object.

This property determines the size of the images and cells on the specified webpage relative to the size of text whenever you view the saved document in a web browser. The physical dimensions of the resulting image or cell are the result of the original dimensions (in inches) multiplied by the number of pixels per inch.

You use the ScreenSize property to set the optimum screen size for the targeted web browsers.

This example sets the pixel density depending on the target screen size of the browser. For 800x600 pixel screens, the density is 72 pixels per inch. For 1024x768 pixel screens, the density is 96 pixels per inch. For all other cases, use a density of 120 pixels per inch.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property determines the size of the images and cells on the specified webpage relative to the size of text whenever you view the saved document in a web browser. The physical dimensions of the resulting image or cell are the result of the original dimensions (in inches) multiplied by the number of pixels per inch.

You use the ScreenSize property to set the optimum screen size for the targeted web browsers.

This example sets the pixel density depending on the target screen size of the browser. For 800x600 pixel screens, the density is 72 pixels per inch. For 1024x768 pixel screens, the density is 96 pixels per inch. For all other cases, use a density of 120 pixels per inch.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the pixel density depending on the target screen size of the browser. For 800x600 pixel screens, the density is 72 pixels per inch. For 1024x768 pixel screens, the density is 96 pixels per inch. For all other cases, use a density of 120 pixels per inch.

With Application.DefaultWebOptions 
 Select Case .ScreenSize 
 Case msoScreenSize800x600 
 .PixelsPerInch = 72 
 Case msoScreenSize1024x768 
 .PixelsPerInch = 96 
 Case Else 
 .PixelsPerInch = 120 
 End Select 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RelyOnCSS: bool
    '''True if cascading style sheets (CSS) are used for font formatting when you view a saved document in a web browser. Microsoft Excel creates a cascading style sheet file and saves it either to the specified folder or to the same folder as your webpage, depending on the value of the OrganizeInFolder property. False if HTML <FONT> tags and cascading style sheets are used. The default value is True. Read/write Boolean.

#SYNTAX:

expression.RelyOnCSS

expression A variable that represents a DefaultWebOptions object.

You should set this property to True if your web browser supports cascading style sheets, as this will give you more precise layout and formatting control on your webpage and make it look more like your document (as it appears in Microsoft Excel).

This example enables the use of cascading style sheets as the global default for the application.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You should set this property to True if your web browser supports cascading style sheets, as this will give you more precise layout and formatting control on your webpage and make it look more like your document (as it appears in Microsoft Excel).

This example enables the use of cascading style sheets as the global default for the application.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables the use of cascading style sheets as the global default for the application.

Application.DefaultWebOptions.RelyOnCSS = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RelyOnVML: bool
    '''True if image files are not generated from drawing objects when you save a document as a webpage. False if images are generated. The default value is False. Read/write Boolean.

#SYNTAX:

expression.RelyOnVML

expression A variable that represents a DefaultWebOptions object.

You can reduce file sizes by not generating images for drawing objects, if your web browser supports Vector Markup Language (VML). For example, Microsoft Internet Explorer 5 supports this feature, and you should set the RelyOnVML property to True if you are targeting this browser. For browsers that don't support VML, the image will not appear when you view a webpage saved with this property enabled.

For example, you should not generate images if your webpage uses image files that you have generated earlier, and if the location where you save the document is different from the final location of the page on the web server.

This example specifies that images are generated when saving the worksheet to a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can reduce file sizes by not generating images for drawing objects, if your web browser supports Vector Markup Language (VML). For example, Microsoft Internet Explorer 5 supports this feature, and you should set the RelyOnVML property to True if you are targeting this browser. For browsers that don't support VML, the image will not appear when you view a webpage saved with this property enabled.

For example, you should not generate images if your webpage uses image files that you have generated earlier, and if the location where you save the document is different from the final location of the page on the web server.

This example specifies that images are generated when saving the worksheet to a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example specifies that images are generated when saving the worksheet to a webpage.

Workbooks(1).DefaultWebOptions.RelyOnVML = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SaveHiddenData: bool
    '''True if data outside of the specified range is saved when you save the document as a webpage. This data may be necessary for maintaining formulas. False if data outside of the specified range is not saved with the webpage. The default value is True. Read/write Boolean.

#SYNTAX:

expression.SaveHiddenData

expression A variable that represents a DefaultWebOptions object.

If you choose not to save data outside of the specified range, references to that data in the formula are converted to static values. If the data is in another sheet or workbook, the result of the formula is saved as a static value.

This example prevents hidden data from being saved with webpages.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you choose not to save data outside of the specified range, references to that data in the formula are converted to static values. If the data is in another sheet or workbook, the result of the formula is saved as a static value.

This example prevents hidden data from being saved with webpages.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example prevents hidden data from being saved with webpages.

Application.DefaultWebOptions.SaveHiddenData = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SaveNewWebPagesAsWebArchives: bool
    '''True if new webpages can be saved as web archives. Read/write Boolean.

#SYNTAX:

expression.SaveNewWebPagesAsWebArchives

expression A variable that represents a DefaultWebOptions object.

In this example, Microsoft Excel determines the settings for saving new webpages as web archives and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines the settings for saving new webpages as web archives and notifies the user.

Sub DetermineSettings() 
 
 ' Determine settings and notify user. 
 If Application.DefaultWebOptions.SaveNewWebPagesAsWebArchives = True Then 
 MsgBox "New webpages will be saved as Web archives." 
 Else 
 MsgBox "New webpages will not be saved as Web archives." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ScreenSize: MsoScreenSize
    '''Returns or sets the ideal minimum screen size (width by height, in pixels) that you should use when viewing the saved document in a web browser. Can be one of the MsoScreenSize constants. The default constant is msoScreenSize800x600. Read/write MsoScreenSize.

#SYNTAX:

expression.ScreenSize

expression A variable that represents a DefaultWebOptions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TargetBrowser: MsoTargetBrowser
    '''Returns or sets an MsoTargetBrowser constant indicating the browser version. Read/write.

#SYNTAX:

expression.TargetBrowser

expression A variable that represents a DefaultWebOptions object.

In this example, Microsoft Excel determines if the browser version for web options is Internet Explorer 5 and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines if the browser version for web options is Internet Explorer 5 and notifies the user.

Sub CheckWebOptions() 
 
    Dim wkbOne As Workbook 
 
    Set wkbOne = Application.Workbooks(1) 
 
    ' Determine if IE5 is the target browser. 
    If wkbOne.WebOptions.TargetBrowser = msoTargetBrowserIE5 Then 
        MsgBox "The target browser is IE5 or later." 
    Else 
        MsgBox "The target browser is not IE5 or later." 
    End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UpdateLinksOnSave: bool
    '''True if hyperlinks and paths to all supporting files are automatically updated before you save the document as a webpage, ensuring that the links are up to date at the time the document is saved. False if the links are not updated. The default value is True. Read/write Boolean.

#SYNTAX:

expression.UpdateLinksOnSave

expression A variable that represents a DefaultWebOptions object.

You should set this property to False if the location where the document is saved is different from the final location on the web server, and the supporting files are not available at the first location.

This example specifies that links are not updated before the document is saved.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You should set this property to False if the location where the document is saved is different from the final location on the web server, and the supporting files are not available at the first location.

This example specifies that links are not updated before the document is saved.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example specifies that links are not updated before the document is saved.

Application.DefaultWebOptions.UpdateLinksOnSave = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseLongFileNames: bool
    '''True if long file names are used when you save the document as a webpage. False if long file names are not used and the DOS file name format (8.3) is used. The default value is True. Read/write Boolean.

#SYNTAX:

expression.UseLongFileNames

expression A variable that represents a DefaultWebOptions object.

If you don't use long file names and your document has supporting files, Microsoft Excel automatically organizes those files in a separate folder. Otherwise, use the OrganizeInFolder property to determine whether supporting files are organized in a separate folder.

This example disallows the use of long file names as the global default for the application.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't use long file names and your document has supporting files, Microsoft Excel automatically organizes those files in a separate folder. Otherwise, use the OrganizeInFolder property to determine whether supporting files are organized in a separate folder.

This example disallows the use of long file names as the global default for the application.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example disallows the use of long file names as the global default for the application.

Application.DefaultWebOptions.UseLongFileNames = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Dialogs:
  '''A collection of all the Dialog objects in Microsoft Excel.

#REMARKS:

Each Dialog object represents a built-in dialog box. You cannot create a new built-in dialog box or add one to the collection. The only useful thing that you can do with a Dialog object is to use it with the Show method to display the corresponding dialog box.

The Microsoft Excel Visual Basic object library includes built-in constants for many of the built-in dialog boxes. Each constant is formed from the prefix "xlDialog" followed by the name of the dialog box. For example, the Apply Names dialog box constant is xlDialogApplyNames, and the Find File dialog box constant is xlDialogFindFile. These constants are members of the XlBuiltinDialog enumerated type.

Use the Dialogs property of the Application object to return the Dialogs collection. The following code example displays the number of available built-in Microsoft Excel dialog boxes.

Use Dialogs (index), where index is a built-in constant identifying the dialog box, to return a single Dialog object. The following example runs the built-in File Open dialog box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Dialogs property of the Application object to return the Dialogs collection. The following code example displays the number of available built-in Microsoft Excel dialog boxes.

MsgBox Application.Dialogs.Count

Use Dialogs (index), where index is a built-in constant identifying the dialog box, to return a single Dialog object. The following example runs the built-in File Open dialog box.

dlgAnswer = Application.Dialogs(xlDialogOpen).Show

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Dialogs object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Dialogs object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Dialogs object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Dialogs object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ErrorCheckingOptions:
  '''Represents the error-checking options for an application.

#REMARKS:

Use the ErrorCheckingOptions property of the Application object to return an ErrorCheckingOptions object.

Reference the Item property of the Errors object to view a list of index values associated with error-checking options.

After an ErrorCheckingOptions object is returned, you can use the following properties, which are members of the ErrorCheckingOptions object, to set or return error checking options.

The following example uses the TextDate property to enable error checking for two-digit-year text dates, and then notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example uses the TextDate property to enable error checking for two-digit-year text dates, and then notifies the user.

Sub CheckTextDates() 
 
 Dim rngFormula As Range 
 Set rngFormula = Application.Range("A1") 
 
 Range("A1").Formula = "'April 23, 00" 
 Application.ErrorCheckingOptions.TextDate = True 
 
 ' Perform check to see if 2 digit year TextDate check is on. 
 If rngFormula.Errors.Item(xlTextDate).Value = True Then 
 MsgBox "The text date error checking feature is enabled." 
 Else 
 MsgBox "The text date error checking feature is not on." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an ErrorCheckingOptions object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.BackgroundChecking: bool
    '''Alerts the user for all cells that violate enabled error-checking rules. When this property is set to True (default), the AutoCorrect Options button appears next to all cells that violate enabled errors. False disables background checking for errors. Read/write Boolean.

#SYNTAX:

expression.BackgroundChecking

expression A variable that represents an ErrorCheckingOptions object.

Refer to the ErrorCheckingOptions object to view a list of its members that can be enabled.

In the following example, when the user selects cell A1 (which contains a formula referring to empty cells), the AutoCorrect Options button appears.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Refer to the ErrorCheckingOptions object to view a list of its members that can be enabled.

In the following example, when the user selects cell A1 (which contains a formula referring to empty cells), the AutoCorrect Options button appears.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, when the user selects cell A1 (which contains a formula referring to empty cells), the AutoCorrect Options button appears.

Sub CheckBackground() 
 
 ' Simulate an error by referring to empty cells. 
 Application.ErrorCheckingOptions.BackgroundChecking = True 
 Range("A1").Select 
 ActiveCell.Formula = "=A2/A3" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an ErrorCheckingOptions object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EmptyCellReferences: bool
    '''When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, selected cells containing formulas that refer to empty cells. False disables empty cell reference checking. Read/write Boolean.

#SYNTAX:

expression.EmptyCellReferences

expression A variable that represents an ErrorCheckingOptions object.

In the following example, the AutoCorrect Options button appears for cell A1, which contains a formula that references empty cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, the AutoCorrect Options button appears for cell A1, which contains a formula that references empty cells.

Sub CheckEmptyCells() 
 
 Application.ErrorCheckingOptions.EmptyCellReferences = True 
 Range("A1").Formula = "=A2+A3" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EvaluateToError: bool
    '''When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, selected cells that contain formulas evaluating to an error. False disables error checking for cells that evaluate to an error value. Read/write Boolean.

#SYNTAX:

expression.EvaluateToError

expression A variable that represents an ErrorCheckingOptions object.

In the following example, the AutoCorrect Options button appears for cell A3, which contains a divide-by-zero error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, the AutoCorrect Options button appears for cell A3, which contains a divide-by-zero error.

Sub CheckEvaluationError() 
 
 ' Simulate a divide-by-zero error. 
 Application.ErrorCheckingOptions.EvaluateToError = True 
 Range("A1").Value = 1 
 Range("A2").Value = 0 
 Range("A3").Formula = "=A1/A2" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.InconsistentFormula: bool
    '''When set to True (default), Microsoft Excel identifies cells containing an inconsistent formula in a region. False disables the inconsistent formula check. Read/write Boolean.

#SYNTAX:

expression.InconsistentFormula

expression A variable that represents an ErrorCheckingOptions object.

Consistent formulas in the region must reside to the left and right or above and below the cell containing the inconsistent formula for the InconsistentFormula property to work properly.

In the following example, when the user selects cell B4 (which contains an inconsistent formula), the AutoCorrect Options button appears.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Consistent formulas in the region must reside to the left and right or above and below the cell containing the inconsistent formula for the InconsistentFormula property to work properly.

In the following example, when the user selects cell B4 (which contains an inconsistent formula), the AutoCorrect Options button appears.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, when the user selects cell B4 (which contains an inconsistent formula), the AutoCorrect Options button appears.

Sub CheckFormula() 
 
 Application.ErrorCheckingOptions.InconsistentFormula = True 
 
 Range("A1:A3").Value = 1 
 Range("B1:B3").Value = 2 
 Range("C1:C3").Value = 3 
 
 Range("A4").Formula = "=SUM(A1:A3)" ' Consistent formula. 
 Range("B4").Formula = "=SUM(B1:B2)" ' Inconsistent formula. 
 Range("C4").Formula = "=SUM(C1:C3)" ' Consistent formula. 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.InconsistentTableFormula: bool
    '''Returns True if the table formula is inconsistent. Read/write Boolean.

#SYNTAX:

expression.InconsistentTableFormula

expression A variable that represents an ErrorCheckingOptions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IndicatorColorIndex: XlColorIndex
    '''Returns or sets the color of the indicator for error checking options. Read/write XlColorIndex.

#SYNTAX:

expression.IndicatorColorIndex

expression A variable that represents an ErrorCheckingOptions object.

You can specify a particular color for the indicator by entering the corresponding index value. Use the Colors property to return the current color palette.

In the following example, Microsoft Excel checks to see if the indicator color for error checking is set to the default system color, and notifies the user accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can specify a particular color for the indicator by entering the corresponding index value. Use the Colors property to return the current color palette.

In the following example, Microsoft Excel checks to see if the indicator color for error checking is set to the default system color, and notifies the user accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, Microsoft Excel checks to see if the indicator color for error checking is set to the default system color, and notifies the user accordingly.

Sub CheckIndexColor() 
 
 If Application.ErrorCheckingOptions.IndicatorColorIndex = xlColorIndexAutomatic Then 
 MsgBox "Your indicator color for error checking is set to the default system color." 
 Else 
 MsgBox "Your indicator color for error checking is not set to the default system color." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ListDataValidation: bool
    '''A Boolean value that is True if data validation is enabled in a list. Read/write Boolean.

#SYNTAX:

expression.ListDataValidation

expression A variable that represents an ErrorCheckingOptions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MisleadingNumberFormats: bool
    self.NumberAsText: bool
    '''When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, selected cells that contain numbers written as text. False disables error checking for numbers written as text. Read/write Boolean.

#SYNTAX:

expression.NumberAsText

expression A variable that represents an ErrorCheckingOptions object.

In the following example, the AutoCorrect Options button appears for cell A1, which contains a number stored as text.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, the AutoCorrect Options button appears for cell A1, which contains a number stored as text.

Sub CheckNumberAsText() 
 
 ' Simulate an error by referencing a number stored as text. 
 Application.ErrorCheckingOptions.NumberAsText = True 
 Range("A1").Value = "'1" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OmittedCells: bool
    '''When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, the selected cells that contain formulas referring to a range that omits adjacent cells that could be included. False disables error checking for omitted cells. Read/write Boolean.

#SYNTAX:

expression.OmittedCells

expression A variable that represents an ErrorCheckingOptions object.

In the following example, the AutoCorrect Options button appears for cell A4, which contains a formula.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, the AutoCorrect Options button appears for cell A4, which contains a formula.

Sub CheckOmittedCells() 
 
 Application.ErrorCheckingOptions.OmittedCells = True 
 Range("A1").Value = 1 
 Range("A2").Value = 2 
 Range("A3").Value = 3 
 Range("A4").Formula = "=Sum(A1:A2)" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OutdatedLinkedDataType: bool
    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an ErrorCheckingOptions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TextDate: bool
    '''When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, cells that contain a text date with a two-digit year. False disables error checking for cells containing a text date with a two-digit year. Read/write Boolean.

#SYNTAX:

expression.TextDate

expression A variable that represents an ErrorCheckingOptions object.

In the following example, the AutoCorrect Options button appears for cell A1, which contains a text date with a two-digit year.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, the AutoCorrect Options button appears for cell A1, which contains a text date with a two-digit year.

Sub CheckTextDate() 
 
 ' Simulate an error by referencing a text date with a two-digit year. 
 Application.ErrorCheckingOptions.TextDate = True 
 Range("A1").Formula = "'April 23, 00" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UnlockedFormulaCells: bool
    '''When set to True (default), Microsoft Excel identifies selected cells that are unlocked and contain a formula. False disables error checking for unlocked cells that contain formulas. Read/write Boolean.

#SYNTAX:

expression.UnlockedFormulaCells

expression A variable that represents an ErrorCheckingOptions object.

In the following example, the AutoCorrect Options button appears for cell A3, which is an unlocked cell containing a formula.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, the AutoCorrect Options button appears for cell A3, which is an unlocked cell containing a formula.

Sub CheckUnlockedCell() 
 
 Application.ErrorCheckingOptions.UnlockedFormulaCells = True 
 Range("A1").Value = 1 
 Range("A2").Value = 2 
 Range("A3").Formula = "=A1+A2" 
 Range("A3").Locked = False 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class FileExportConverters:
  '''A collection of FileExportConverter objects that represent all the file converters available for saving files.

#REMARKS:

Use the FileExportConverters property of the Application object to return the FileExportConverters collection.

The Add method is not available for the FileExportConverters collection. FileExportConverter objects are added during installation of Microsoft Office or by installing supplemental converters.

Use FileExportConverters (index), where index is an integer, to return a single FileExportConverter object. The following example displays the extensions associated with the second Microsoft Excel worksheet converter in the collection.

The index number represents the position of the file converter in the FileExportConverters collection. The following example displays the description for the first file converter in the collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use FileExportConverters (index), where index is an integer, to return a single FileExportConverter object. The following example displays the extensions associated with the second Microsoft Excel worksheet converter in the collection.

MsgBox FileExportConverters(2).Extensions

The index number represents the position of the file converter in the FileExportConverters collection. The following example displays the description for the first file converter in the collection.

MsgBox FileExportConverters(1).Description

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''Returns an Application object that represents the Microsoft Excel application. Read-only.

#SYNTAX:

expression.Application

expression A variable that represents a FileExportConverters object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long that represents the number of file converters in the collection. Read-only.

#SYNTAX:

expression.Count

expression A variable that represents a FileExportConverters object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a FileExportConverters object.

If the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns an Object that represents the parent object of the specified FileExportConverters object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a FileExportConverters object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class CellFormat:
  def __init__(self):
    self.Application: Application
    self.Borders: Borders
    self.Creator: int
    self.Font: Font
    self.Interior: Interior
    self.Parent: _Application
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Clear(self):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #unknown:
    # AddIndent:  <class 'NoneType'>
    # FormulaHidden:  <class 'NoneType'>
    # HorizontalAlignment:  <class 'NoneType'>
    # IndentLevel:  <class 'NoneType'>
    # Locked:  <class 'NoneType'>
    # NumberFormat:  <class 'NoneType'>
    # NumberFormatLocal:  <class 'NoneType'>
    # Orientation:  <class 'NoneType'>
    # ShrinkToFit:  <class 'NoneType'>
    # VerticalAlignment:  <class 'NoneType'>
    # WrapText:  <class 'NoneType'>

  #getattr Exception:
    # MergeCells:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)



class MenuBars:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.Parent: _Application
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name):  pass

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Modules:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.HPageBreaks: HPageBreaks
    self.Parent: _Workbook
    self.VPageBreaks: VPageBreaks
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Before, After, Count):  pass

  def Add2(self, Before, After, Count, NewLayout):  pass

  def Copy(self, Before, After):  pass

  def Delete(self):  pass

  def Item(self, Index):  pass

  def Move(self, Before, After):  pass

  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):  pass

  def Select(self, Replace):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):  pass

  def _PrintOut_(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class MultiThreadedCalculation:
  '''Returns or sets the concurrent calculation mode.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a MultiThreadedCalculation object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a MultiThreadedCalculation object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Enabled: Enabled | MultiThreadedCalculation
    '''The Enabled property allows MultiThreadedCalculation objects to be enabled or disabled at run time. Read/write.

#SYNTAX:

expression.Enabled

expression A variable that represents a MultiThreadedCalculation object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a MultiThreadedCalculation object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ThreadCount: MultiThreadedCalculation
    '''Gets the total count of the process threads that are a part of the specified MultiThreadedCalculation object.

#SYNTAX:

expression.ThreadCount

expression A variable that represents a MultiThreadedCalculation object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ThreadMode: XlThreadMode
    '''Returns or sets the thread mode for the specified MultiThreadedCalculation object. Read/write XlThreadMode.

#SYNTAX:

expression.ThreadMode

expression A variable that represents a MultiThreadedCalculation object.

You can set the thread mode to either xlThreadModeAutomatic or xlThreadModeManual.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can set the thread mode to either xlThreadModeAutomatic or xlThreadModeManual.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Names:
  '''A collection of all the Name objects in the application or workbook.

#REMARKS:

Each Name object represents a defined name for a range of cells. Names can be either built-in names—such as Database, Print_Area, and Auto_Open—or custom names.

The RefersTo argument must be specified in A1-style notation, including dollar signs ($) where appropriate. For example, if cell A10 is selected on Sheet1 and you define a name by using the RefersTo argument "=sheet1!A1:B1", the new name actually refers to cells A10:B10 (because you specified a relative reference). To specify an absolute reference, use "=sheet1!$A$1:$B$1".

Use the Names property of the Workbook object to return the Names collection. The following example creates a list of all the names in the active workbook, plus the addresses that they refer to.

Use the Add method to create a name and add it to the collection. The following example creates a new name that refers to cells A1:C20 on the worksheet named Sheet1.

Use Names (index), where index is the name index number or defined name, to return a single Name object. The following example deletes the name mySortRange from the active workbook.

This example uses a named range as the formula for data validation. This example requires the validation data to be on Sheet 2 in the range A2:A100. This validation data is used to validate data entered on Sheet1 in the range D2:D10.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Names property of the Workbook object to return the Names collection. The following example creates a list of all the names in the active workbook, plus the addresses that they refer to.

Set nms = ActiveWorkbook.Names 
Set wks = Worksheets(1) 
For r = 1 To nms.Count 
    wks.Cells(r, 2).Value = nms(r).Name 
    wks.Cells(r, 3).Value = nms(r).RefersToRange.Address 
Next

Use the Add method to create a name and add it to the collection. The following example creates a new name that refers to cells A1:C20 on the worksheet named Sheet1.

Names.Add Name:="test", RefersTo:="=sheet1!$a$1:$c$20"

Use Names (index), where index is the name index number or defined name, to return a single Name object. The following example deletes the name mySortRange from the active workbook.

ActiveWorkbook.Names("mySortRange").Delete

This example uses a named range as the formula for data validation. This example requires the validation data to be on Sheet 2 in the range A2:A100. This validation data is used to validate data entered on Sheet1 in the range D2:D10.

Sub Add_Data_Validation_From_Other_Worksheet()
'The current Excel workbook and worksheet, a range to define the data to be validated, and the target range
'to place the data in.
Dim wbBook As Workbook
Dim wsTarget As Worksheet
Dim wsSource As Worksheet
Dim rnTarget As Range
Dim rnSource As Range

'Initialize the Excel objects and delete any artifacts from the last time the macro was run.
Set wbBook = ThisWorkbook
With wbBook
    Set wsSource = .Worksheets("Sheet2")
    Set wsTarget = .Worksheets("Sheet1")
    On Error Resume Next
    .Names("Source").Delete
    On Error GoTo 0
End With

'On the source worksheet, create a range in column A of up to 98 cells long, and name it "Source".
With wsSource
    .Range(.Range("A2"), .Range("A100").End(xlUp)).Name = "Source"
End With

'On the target worksheet, create a range 8 cells long in column D.
Set rnTarget = wsTarget.Range("D2:D10")

'Clear out any artifacts from previous macro runs, then set up the target range with the validation data.
With rnTarget
    .ClearContents
    With .Validation
        .Delete
        .Add Type:=xlValidateList, _
             AlertStyle:=xlValidAlertStop, _
             Formula1:="=Source"
        
'Set up the Error dialog with the appropriate title and message
        .ErrorTitle = "Value Error"
        .ErrorMessage = "You can only choose from the list."
    End With
End With

End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Names object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Names object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Names object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Names object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name, RefersTo, Visible, MacroType, ShortcutKey, Category, NameLocal, RefersToLocal, CategoryLocal, RefersToR1C1, RefersToR1C1Local) -> Name:
    '''Defines a new name for a range of cells.

#PARAMETERS:

Name Required/Optional Data type Description

Name Optional Variant Specifies the text, in English, to use as the name if the NameLocal parameter is not specified. Names cannot include spaces and cannot be formatted as cell references.

RefersTo Optional Variant Describes what the name refers to, in English, using A1-style notation, if the RefersToLocal, RefersToR1C1, and RefersToR1C1Local parameters are not specified.NOTE: Nothing is returned if the reference does not exist.

Visible Optional Variant True specifies that the name is defined as visible. False specifies that the name is defined as hidden. A hidden name does not appear in the Define Name, Paste Name, or Goto dialog box. The default value is True.

MacroType Optional Variant The macro type, determined by one of the following values:1 - User-defined function (Function  procedure)2 - Macro (Sub  procedure)3 or omitted - None (the name does not  refer to a user-defined function or macro)

ShortcutKey Optional Variant Specifies the macro shortcut key. Must be a single letter, such as "z" or "Z". Applies only for command macros.

Category Optional Variant The category of the macro or function if the MacroType argument equals 1 or 2. The category is used in the Function Wizard. Existing categories can be referred to either by number, starting at 1, or by name, in English. Excel creates a new category if the specified category does not exist.

NameLocal Optional Variant Specifies the localized text to use as the name if the Name parameter is not specified. Names cannot include spaces and cannot be formatted as cell references.

RefersToLocal Optional Variant Describes what the name refers to, in localized text using A1-style notation, if the RefersTo, RefersToR1C1, and RefersToR1C1Local parameters are not specified.

CategoryLocal Optional Variant Specifies the localized text that identifies the category of a custom function if the Category parameter is not specified.

RefersToR1C1 Optional Variant Describes what the name refers to, in English using R1C1-style notation, if the RefersTo, RefersToLocal, and RefersToR1C1Local parameters are not specified.

RefersToR1C1Local Optional Variant Describes what the name refers to, in localized text using R1C1-style notation, if the RefersTo, RefersToLocal, and RefersToR1C1 parameters are not specified.

#RETURN-VALUE: A Name object that represents the new name.

#EXAMPLE:

This example defines a new name for the range A1:D3 on Sheet1 in the active workbook.

Sub MakeRange() 
 
    ActiveWorkbook.Names.Add _ 
        Name:="tempRange", _ 
        RefersTo:="=Sheet1!$A$1:$D$3" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index, IndexLocal, RefersTo) -> Name:
    '''Returns a single Name object from a Names collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Optional Variant The name or number of the defined name to be returned.

IndexLocal Optional Variant The name of the defined name, in the language of the user. No names will be translated if you use this argument.

RefersTo Optional Variant What the name refers to. You use this argument to identify a name by what it refers to.

#RETURN-VALUE: A Name object contained by the collection.

#REMARKS:

You must specify one, and only one, of these three arguments.

This example deletes the name mySortRange from the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example deletes the name mySortRange from the active workbook.

ActiveWorkbook.Names.Item("mySortRange").Delete

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index, IndexLocal, RefersTo):  pass

  def __call__(self, Index, IndexLocal, RefersTo):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ODBCErrors:
  '''A collection of ODBCError objects.

#REMARKS:

Each ODBCError object represents an error returned by the most recent ODBC query. If the specified ODBC query runs without error, the ODBCErrors collection is empty. The errors in the collection are indexed in the order in which they're generated by the ODBC data source. You cannot add members to the collection.

Use the ODBCErrors property of the Application object to return the ODBCErrors collection. The following example refreshes query table one and displays any ODBC errors that occur.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the ODBCErrors property of the Application object to return the ODBCErrors collection. The following example refreshes query table one and displays any ODBC errors that occur.

With Worksheets(1).QueryTables(1) 
 .Refresh 
 Set errs = Application.ODBCErrors 
 If errs.Count > 0 Then 
 Set r = .Destination.Cells(1) 
 r.Value = "The following errors occurred:" 
 c = 0 
 For Each er In errs 
 c = c + 1 
 r.offset(c, 0).value = er.ErrorString 
 r.offset(c, 1).value = er.SqlState 
 Next 
 Else 
 MsgBox "Query complete: all records returned." 
 End If 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an ODBCErrors object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents an ODBCErrors object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an ODBCErrors object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an ODBCErrors object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index) -> ODBCError:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Long The index number for the object.

#RETURN-VALUE: An ODBCError object contained by the collection.

#EXAMPLE:

This example displays an ODBC error.

Set er = Application.ODBCErrors.Item(1) 
MsgBox "The following error occurred:" & 
 er.ErrorString & " : " & er.SqlState

ODBCErrors Object

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class OLEDBErrors:
  '''A collection of OLEDBError objects.

#REMARKS:

Each OLEDBError object represents an error returned by the most recent OLE DB query. If the specified OLE DB query runs without error, the OLEDBErrors collection is empty. The errors in the collection are indexed in the order in which they're generated by the OLE DB provider. You cannot add members to the collection.

Use the OLEDBErrors property of the Application object to return the OLEDBErrors collection.

The following example displays the error description and the SqlState property's value for each OLE DB error in the collection.

Use OLEDBErrors (index), where index is the index number of the OLE DB error, to return a single OLEDBError object. The following example displays the error description and the SqlState property's value for the first error returned by the most recent OLE DB query.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the OLEDBErrors property of the Application object to return the OLEDBErrors collection.

The following example displays the error description and the SqlState property's value for each OLE DB error in the collection.

For Each objEr in Application.OLEDBErrors 
 MsgBox "The following error occurred:" & _ 
 objEr.ErrorString & " : " & objEr.SqlState 
Next objEr

Use OLEDBErrors (index), where index is the index number of the OLE DB error, to return a single OLEDBError object. The following example displays the error description and the SqlState property's value for the first error returned by the most recent OLE DB query.

Set objEr = Application.OLEDBErrors(1) 
MsgBox "The following error occurred:" & _ 
 objEr.ErrorString & " : " & objEr.SqlState

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an OLEDBErrors object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents an OLEDBErrors object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an OLEDBErrors object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an OLEDBErrors object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index) -> OLEDBError:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Long The index number for the object.

#RETURN-VALUE: An OLEDBError object contained by the collection.

#EXAMPLE:

This example displays an OLE DB error.

Set objEr = Application.OLEDBErrors.Item(1) 
MsgBox "The following error occurred:" & _ 
 objEr.ErrorString & " : " & objEr.SqlState

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ProtectedViewWindows:
  '''A collection of the ProtectedViewWindow objects that represent all the Protected View windows that are currently open in the application.

#REMARKS:

Use the ProtectedViewWindows property of the Application object to return the ProtectedViewWindows collection.

The following code example displays the number of Protected View windows that are open.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following code example displays the number of Protected View windows that are open.

MsgBox "There are " & ProtectedViewWindows.Count & _ 
 " Protected View windows currently open."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ProtectedViewWindows object.

Application

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Application

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a ProtectedViewWindows object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ProtectedViewWindows object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ProtectedViewWindows object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def Open(self, Filename, Password, AddToMru, RepairMode) -> ProtectedViewWindow:
    '''Opens the specified workbook in a new Protected View window.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The name of the workbook (paths are accepted).

Password Optional Variant The password for opening the workbook.

AddToMru Optional Variant True to add the file name to the list of recently used files on the Recent tab of the Backstage view.

RepairMode Optional Variant True to repair the workbook to prevent file corruption.

#RETURN-VALUE: ProtectedViewWindow

#REMARKS:

Avoid using hard-coded passwords in your applications. If a password is required in a procedure, request the password from the user, store it in a variable, and then use the variable in your code.

The following code example opens a workbook in a new Protected View window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following code example opens a workbook in a new Protected View window.

ProtectedViewWindows.Open FileName:="C:\MyFiles\MyWorkbook.xls"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class QuickAnalysis:
  '''Enables single-click access to data analysis features such as formulas, conditional formatting, sparklines, tables, charts, and PivotTables.

#EXAMPLE:

This sample illustrates how to use the Hide method of the QuickAnalysis object. In this example, the 1 argument specifies that, if displayed, the Conditional Formatting and Sparklines callouts are hidden.

ActiveWorksheet.QuickAnalysis.Hide(1)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''Returns an Application object that represents the Microsoft Excel application. Read-only.

#SYNTAX:

expression.Application

expression A variable that represents a QuickAnalysis object.

APPLICATION

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: APPLICATION

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: XLCREATOR
    '''Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a QuickAnalysis object.

Because the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL.

XLCREATOR

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: XLCREATOR

#REMARKS:

Because the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL.

XLCREATOR

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns an Object that represents the parent object of the specified QuickAnalysis object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a QuickAnalysis object.

OBJECT

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: OBJECT
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Hide(self, XlQuickAnalysisMode) -> None:
    '''Hides specific members of the Analysis Lens user interface.

#PARAMETERS:

Name Required/Optional Data type Description

XlQuickAnalysisMode Optional XlQuickAnalysisMode Indicates for which top level button the callout user interface is displayed. Can be one of the XlQuickAnalysisMode constants.

#RETURN-VALUE: VOID

#REMARKS:

When the argument is set to any one of the following options, the resulting user interface is hidden:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Show(self, XlQuickAnalysisMode) -> None:
    '''Displays specific members of the Analysis Lens user interface.

#PARAMETERS:

Name Required/Optional Data type Description

XlQuickAnalysisMode Optional XlQuickAnalysisMode Indicates for which top level button the callout user interface is displayed. Can be one of the XlQuickAnalysisMode constants.

#RETURN-VALUE: VOID
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class RTD:
  '''Represents a real-time data object.

#REMARKS:

Use the RTD property of the Application object to return an RTD object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.ThrottleInterval: int
    '''Returns or sets a Long indicating the time interval between updates. Read/write.

#SYNTAX:

expression.ThrottleInterval

expression A variable that represents an RTD object.

The default value is 2000 milliseconds. If this value is changed, the new value will persist when Microsoft Excel is restarted.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The default value is 2000 milliseconds. If this value is changed, the new value will persist when Microsoft Excel is restarted.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def RefreshData(self) -> None:
    '''Requests an update of real-time data from the real-time data server.

#REMARKS:

Avoid using the RefreshData method in user-defined functions because this method will fail if it is called during recalculation.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RestartServers(self) -> None:
    '''Reconnects to a real-time data server (RTD).'''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class RecentFiles:
  '''Represents the list of recently used files.

#REMARKS:

Each file is represented by a RecentFile object.

Use the RecentFiles property of the Application object to return the RecentFiles collection.

The following example sets the maximum number of files in the list of recently used files.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the RecentFiles property of the Application object to return the RecentFiles collection.

The following example sets the maximum number of files in the list of recently used files.

Application.RecentFiles.Maximum = 6

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a RecentFiles object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a RecentFiles object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a RecentFiles object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Maximum: int
    '''Returns or sets the maximum number of files in the list of recently used files. Can be a value from 0 (zero) through 50. Read/write Long.

#SYNTAX:

expression.Maximum

expression A variable that represents a RecentFiles object.

This example sets the maximum number of files in the list of recently used files to 6.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the maximum number of files in the list of recently used files to 6.

Application.RecentFiles.Maximum = 6

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a RecentFiles object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name) -> RecentFile:
    '''Adds a file to the list of recently used files.

#PARAMETERS:

Name Required/Optional Data type Description

Name Required String The file name.

#RETURN-VALUE: A RecentFile object contained by the collection.

#EXAMPLE:

This example adds Oscar.xls to the list of recently used files.

Application.RecentFiles.Add Name:="Oscar.xls"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class SmartTagRecognizers:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.Parent: _Application
    self.Recognize: bool
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Speech:
  '''Contains methods and properties that pertain to speech.

#REMARKS:

Use the Speech property of the Application object to return a Speech object.

After a Speech object is returned, you can use the Speak method of the Speech object to play back the contents of a string. In the following example, Microsoft Excel plays back "Hello". This example assumes that speech features have been installed on the host system.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

After a Speech object is returned, you can use the Speak method of the Speech object to play back the contents of a string. In the following example, Microsoft Excel plays back "Hello". This example assumes that speech features have been installed on the host system.

Sub UseSpeech() 
 
 Application.Speech.Speak "Hello" 
 
End Sub()

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Direction: XlSpeakDirection
    '''Returns or sets the order in which the cells will be spoken. The value of the Direction property is an XlSpeakDirection constant. Read/write.

#SYNTAX:

expression.Direction

expression A variable that represents a Speech object.

In this example, Microsoft Excel determines the speech direction and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines the speech direction and notifies the user.

Sub CheckSpeechDirection() 
 
 ' Notify user of speech direction. 
 If Application.Speech.Direction = xlSpeakByColumns Then 
 MsgBox "The speech direction is set to speak by columns." 
 Else 
 MsgBox "The speech direction is set to speak by rows." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SpeakCellOnEnter: bool
    '''Microsoft Excel supports a mode where the active cell is spoken when the Enter key is pressed or when the active cell is finished being edited. Setting the SpeakCellOnEnter property to True turns this mode on. False turns this mode off. Read/write Boolean.

#SYNTAX:

expression.SpeakCellOnEnter

expression A variable that represents a Speech object.

This example determines if the active cell is spoken when the Enter key is pressed or the active cell is finished being edited, and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example determines if the active cell is spoken when the Enter key is pressed or the active cell is finished being edited, and notifies the user.

Sub SpeechCheck() 
 
 ' Determine mode setting and notify user. 
 If Application.Speech.SpeakCellOnEnter = True Then 
 MsgBox "The Speak On Enter mode is turned on." & _ 
 "The active cell will be spoken when the Enter " & _ 
 "key is pressed or it is done being edited." 
 Else 
 MsgBox "The Speaker On Enter mode is turned off." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Speak(self, Text, SpeakAsync, SpeakXML, Purge) -> None:
    '''Microsoft Excel plays back the text string that is passed as an argument.

#PARAMETERS:

Name Required/Optional Data type Description

Text Required String The text to be spoken.

SpeakAsync Optional Variant True causes the text to be spoken asynchronously (the method will not wait for the text to be spoken). False causes the text to be spoken synchronously (the method waits for the text to be spoken before continuing). The default is False.

SpeakXML Optional Variant True causes the text to be interpreted as XML. False causes the text to not be interpreted as XML, so any XML tags are read and not interpreted. The default is False.

Purge Optional Variant True causes current speech to be terminated and any buffered text to be purged before text is spoken. False does not cause the current speech to be terminated and does not purge the buffered text before text is spoken. The default is False.

#EXAMPLE:

In this example, Microsoft Excel speaks "Hello".

Sub UseSpeech() 
 
 Application.Speech.Speak "Hello" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class SpellingOptions:
  '''Represents the various spell checking options for a worksheet.

#REMARKS:

Use the SpellingOptions property of the Application object to return a SpellingOptions object.

After a SpellingOptions object is returned, you can use the following properties to set or return various spell checking options:

The following example uses the IgnoreCaps property to disable spell checking for words that have all capitalized letters. In this example, "Testt", but not "TESTT", is identified by the spell checker.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example uses the IgnoreCaps property to disable spell checking for words that have all capitalized letters. In this example, "Testt", but not "TESTT", is identified by the spell checker.

Sub IgnoreAllCAPS() 
 
 ' Place misspelled versions of the same word in all caps and mixed case. 
 Range("A1").Formula = "Testt" 
 Range("A2").Formula = "TESTT" 
 
 With Application.SpellingOptions 
 .SuggestMainOnly = True 
 .IgnoreCaps = True 
 End With 
 
 ' Run a spell check. 
 Cells.CheckSpelling 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.ArabicModes: XlArabicModes
    '''Returns or sets the mode for the Arabic spelling checker. Read/write XlArabicModes.

#SYNTAX:

expression.ArabicModes

expression A variable that represents a SpellingOptions object.

In this example, Microsoft Excel checks the setting for the spell checking option for Arabic mode and sets it to check for words ending with the letter yaa and words beginning with an alef hamza, if the Arabic mode is not set to this already. Before running this code example, the Arabic modes option must be enabled in the spelling options.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel checks the setting for the spell checking option for Arabic mode and sets it to check for words ending with the letter yaa and words beginning with an alef hamza, if the Arabic mode is not set to this already. Before running this code example, the Arabic modes option must be enabled in the spelling options.

Sub SpellCheck() 
 
 If Application.SpellingOptions.ArabicModes <> xlArabicBothStrict Then 
 Application.SpellingOptions.ArabicModes = xlArabicBothStrict 
 MsgBox "Spell checking for Arabic mode has been changed to a strict setting." 
 Else 
 MsgBox "Spell checking for Arabic mode is already in a strict setting." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ArabicStrictAlefHamza: bool
    '''Returns or sets whether the spelling checker uses rules regarding Arabic words beginning with an alef hamza. Read/write.

#SYNTAX:

expression.ArabicStrictAlefHamza

expression A variable that represents a SpellingOptions object.

Boolean

True if the spelling checker uses spelling rules regarding Arabic words beginning with an alef hamza; otherwise, False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Boolean

#REMARKS:

True if the spelling checker uses spelling rules regarding Arabic words beginning with an alef hamza; otherwise, False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ArabicStrictFinalYaa: bool
    '''Returns or sets whether the spelling checker uses rules regarding Arabic words ending with the letter yaa. Read/write.

#SYNTAX:

expression.ArabicStrictFinalYaa

expression A variable that represents a SpellingOptions object.

Boolean

True if the spelling checker uses rules regarding Arabic words ending with the letter yaa; otherwise, False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Boolean

#REMARKS:

True if the spelling checker uses rules regarding Arabic words ending with the letter yaa; otherwise, False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ArabicStrictTaaMarboota: bool
    '''Returns or sets whether the spelling checker uses rules to flag Arabic words ending with haa instead of taa marboota. Read/write.

#SYNTAX:

expression.ArabicStrictTaaMarboota

expression A variable that represents a SpellingOptions object.

Boolean

True if the spelling checker uses rules to flag Arabic words ending with haa instead of taa marboota; otherwise, False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Boolean

#REMARKS:

True if the spelling checker uses rules to flag Arabic words ending with haa instead of taa marboota; otherwise, False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.BrazilReform: XlPortugueseReform
    '''Returns or sets the mode for checking the spelling of Brazilian Portuguese. Read/write.

#SYNTAX:

expression.BrazilReform

expression A variable that represents a SpellingOptions object.

XlPortugueseReform

This property does not set the mode for checking the spelling of European Portuguese. To do that, use the PortugalReform property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: XlPortugueseReform

#REMARKS:

This property does not set the mode for checking the spelling of European Portuguese. To do that, use the PortugalReform property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DictLang: int
    '''Selects the dictionary language used when Microsoft Excel performs spelling checks. Read/write Long.

#SYNTAX:

expression.DictLang

expression A variable that represents a SpellingOptions object.

This example sets the Excel dictionary to use the English (United States) language.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the Excel dictionary to use the English (United States) language.

Sub LanguageSpellCheck() 
 
 With Application.SpellingOptions 
 .DictLang = 1033 ' United States English language number. 
 .UserDict = "CUSTOM.DIC" 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.GermanPostReform: bool
    '''True to check the spelling of words by using the German post-reform rules. False cancels this feature. Read/write Boolean.

#SYNTAX:

expression.GermanPostReform

expression A variable that represents a SpellingOptions object.

In this example, Microsoft Excel determines if the checking of spelling for German words is using post-reform rules and enables this feature if it's not enabled, and then notifies the user of the status.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines if the checking of spelling for German words is using post-reform rules and enables this feature if it's not enabled, and then notifies the user of the status.

Sub SpellingCheck() 
 
 ' Determine if spelling check for German words is using post-reform rules. 
 If Application.SpellingOptions.GermanPostReform = False Then 
 Application.SpellingOptions.GermanPostReform = True 
 MsgBox "German words will now use post-reform rules." 
 Else 
 MsgBox "German words using post-reform rules has already been set." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HebrewModes: XlHebrewModes
    '''Returns or sets the mode for the Hebrew spelling checker. Read/write XlHebrewModes.

#SYNTAX:

expression.HebrewModes

expression A variable that represents a SpellingOptions object.

A legitimate Hebrew word can be a basic dictionary entry or any inflection.

In this example, Microsoft Excel determines the setting for the Hebrew spelling mode and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

A legitimate Hebrew word can be a basic dictionary entry or any inflection.

In this example, Microsoft Excel determines the setting for the Hebrew spelling mode and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines the setting for the Hebrew spelling mode and notifies the user.

Sub CheckHebrewMode() 
 
 ' Determine the Hebrew spelling mode setting and notify user. 
 Select Case Application.SpellingOptions.HebrewModes 
 Case xlHebrewFullScript 
 MsgBox "The Hebrew spelling mode setting is Full Script." 
 Case xlHebrewMixedAuthorizedScript 
 MsgBox "The Hebrew spelling mode setting is Mixed Authorized Script." 
 Case xlHebrewMixedScript 
 MsgBox "The Hebrew spelling mode setting is Mixed Script." 
 Case xlHebrewPartialScript 
 MsgBox "The Hebrew spelling mode setting is Partial Script." 
 End Select 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IgnoreCaps: bool
    '''False instructs Microsoft Excel to check for uppercase words; True instructs Excel to ignore words in uppercase when using the spelling checker. Read/write Boolean.

#SYNTAX:

expression.IgnoreCaps

expression A variable that represents a SpellingOptions object.

In this example, Excel determines what the setting is for checking the spelling of uppercase words and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Excel determines what the setting is for checking the spelling of uppercase words and notifies the user.

Sub SpellingOptionsCheck() 
 
 If Application.SpellingOptions.IgnoreCaps = True Then 
 MsgBox "Spelling options for checking uppercase words is disabled." 
 Else 
 MsgBox "Spelling options for checking uppercase words is enabled." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IgnoreFileNames: bool
    '''False instructs Microsoft Excel to check for Internet and file addresses; True instructs Excel to ignore Internet and file addresses when using the spell checker. Read/write Boolean.

#SYNTAX:

expression.IgnoreFileNames

expression A variable that represents a SpellingOptions object.

In this example, Excel determines what the setting is for checking the spelling of Internet and file addresses and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Excel determines what the setting is for checking the spelling of Internet and file addresses and notifies the user.

Sub SpellingOptionsCheck() 
 
 If Application.SpellingOptions.IgnoreFileNames = True Then 
 MsgBox "Spelling options for checking Internet and file addresses is disabled." 
 Else 
 MsgBox "Spelling options for checking Internet and file addresses is enabled." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IgnoreMixedDigits: bool
    '''False instructs Microsoft Excel to check for mixed digits; True instructs Excel to ignore mixed digits when checking spelling. Read/write Boolean.

#SYNTAX:

expression.IgnoreMixedDigits

expression A variable that represents a SpellingOptions object.

In this example, Excel determines what the setting is for checking the spelling of mixed digits and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Excel determines what the setting is for checking the spelling of mixed digits and notifies the user.

Sub SpellingOptionsCheck() 
 
 If Application.SpellingOptions.IgnoreMixedDigits = True Then 
 MsgBox "Spelling options for checking mixed digits is disabled." 
 Else 
 MsgBox "Spelling options for checking mixed digits is enabled." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.KoreanCombineAux: bool
    '''When set to True, Microsoft Excel combines Korean auxiliary verbs and adjectives when spelling is checked. Read/write Boolean.

#SYNTAX:

expression.KoreanCombineAux

expression A variable that represents a SpellingOptions object.

In this example, Microsoft Excel checks to see if the option to combine Korean auxiliary verbs and adjectives when checking spelling is on or off and notifies the user accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel checks to see if the option to combine Korean auxiliary verbs and adjectives when checking spelling is on or off and notifies the user accordingly.

Sub KoreanSpellCheck() 
 
 If Application.SpellingOptions.KoreanCombineAux = True Then 
 MsgBox "The option to combine Korean auxiliary verbs and adjectives while checking spelling is on." 
 Else 
 MsgBox "The option to combine Korean auxiliary verbs and adjectives while checking spelling is off." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.KoreanProcessCompound: bool
    '''When set to True, this enables Microsoft Excel to process Korean compound nouns when using the spelling checker. Read/write Boolean.

#SYNTAX:

expression.KoreanProcessCompound

expression A variable that represents a SpellingOptions object.

In this example, Microsoft Excel checks to see if the spell checking option to process Korean compound nouns is on or off and notifies the user accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel checks to see if the spell checking option to process Korean compound nouns is on or off and notifies the user accordingly.

Sub KoreanSpellCheck() 
 
 If Application.SpellingOptions.KoreanProcessCompound = True Then 
 MsgBox "The spell checking feature to process Korean compound nouns is on." 
 Else 
 MsgBox "The spell checking feature to process Korean compound nouns is off." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.KoreanUseAutoChangeList: bool
    '''When set to True, this enables Microsoft Excel to use the auto-change list for Korean words when using the spelling checker. Read/write Boolean.

#SYNTAX:

expression.KoreanUseAutoChangeList

expression A variable that represents a SpellingOptions object.

In this example, Microsoft Excel checks to see if the spell checking option to auto-change Korean words is on or off and notifies the user accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel checks to see if the spell checking option to auto-change Korean words is on or off and notifies the user accordingly.

Sub KoreanSpellCheck() 
 
 If Application.SpellingOptions.KoreanUseAutoChangeList = True Then 
 MsgBox "The spell checking feature to auto-change Korean words is on." 
 Else 
 MsgBox "The spell checking feature to auto-change Korean words is off." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PortugalReform: XlPortugueseReform
    '''Returns or sets the mode for checking the spelling of European Portuguese. Read/write.

#SYNTAX:

expression.PortugalReform

expression A variable that represents a SpellingOptions object.

XlPortugueseReform

This property does not set the mode for checking the spelling of Brazilian Portuguese. To do that, use the BrazilReform property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: XlPortugueseReform

#REMARKS:

This property does not set the mode for checking the spelling of Brazilian Portuguese. To do that, use the BrazilReform property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RussianStrictE: bool
    '''Returns or sets whether the spelling checker uses rules regarding Russian words containing the character ë. Read/write.

#SYNTAX:

expression.RussianStrictE

expression A variable that represents a SpellingOptions object.

Boolean

True if the spelling checker uses rules regarding Russian words containing the character ë; otherwise, False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Boolean

#REMARKS:

True if the spelling checker uses rules regarding Russian words containing the character ë; otherwise, False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SpanishModes: XlSpanishModes
    '''Returns or sets the mode for checking the spelling of Spanish. Read/write.

#SYNTAX:

expression.SpanishModes

expression A variable that represents a SpellingOptions object.

XlSpanishModes

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: XlSpanishModes
    '''

    self.SuggestMainOnly: bool
    '''When set to True, instructs Microsoft Excel to suggest words from only the main dictionary when using the spelling checker. False removes the limits of suggesting words from only the main dictionary when using the spelling checker. Read/write Boolean.

#SYNTAX:

expression.SuggestMainOnly

expression A variable that represents a SpellingOptions object.

In this example, Microsoft Excel checks the spelling checking options for suggesting words only from the main dictionary and reports the status to the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel checks the spelling checking options for suggesting words only from the main dictionary and reports the status to the user.

Sub UsingMainDictionary() 
 
 ' Check the setting of suggesting words only from the main dictionary. 
 If Application.SpellingOptions.SuggestMainOnly = True Then 
 MsgBox "Spell checking option suggestions will only come from the main dictionary." 
 Else 
 MsgBox "Spell checking option suggestions are not limited to the main dictionary." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UserDict: str
    '''Instructs Microsoft Excel to create a custom dictionary to which new words can be added when performing spelling checks on a worksheet. Read/write String.

#SYNTAX:

expression.UserDict

expression A variable that represents a SpellingOptions object.

This example instructs Excel to create a custom dictionary called Custom1.dic in the spelling options feature and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example instructs Excel to create a custom dictionary called Custom1.dic in the spelling options feature and notifies the user.

Sub SpecialWord() 
 
 Application.SpellingOptions.UserDict = "Custom1.dic" 
 MsgBox "The custom dictionary is currently set to: " _ 
 & Application.SpellingOptions.UserDict 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Toolbars:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.Parent: _Application
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name):  pass

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class UsedObjects:
  '''Represents objects that have been allocated in a workbook.

#EXAMPLE:

Use the UsedObjects property of the Application object to return a UsedObjects collection.

After a UsedObjects collection is returned, you can determine the quantity of used objects in a Microsoft Excel application by using the Count property.

In this example, Microsoft Excel determines the quantity of objects that have been allocated and notifies the user. This example assumes a recalculation was performed in the application and was interrupted before finishing.

Sub CountUsedObjects() 
 
 MsgBox "The number of used objects in this application is: " & _ 
 Application.UsedObjects.Count 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a UsedObjects object.

This example displays a message about the application that created myObject

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a UsedObjects object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a UsedObjects object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a UsedObjects object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Watches:
  '''A collection of all the Watch objects in a specified application.

#EXAMPLE:

Use the Watches property of the Application object to return a Watches collection.

In the following example, Microsoft Excel creates a new Watch object by using the Add method. This example creates a summation formula in cell A3, and then adds this cell to the watch facility.

Sub AddWatch() 
 
 With Application 
 .Range("A1").Formula = 1 
 .Range("A2").Formula = 2 
 .Range("A3").Formula = "=Sum(A1:A2)" 
 .Range("A3").Select 
 .Watches.Add Source:=ActiveCell 
 End With 
 
End Sub

You can specify to remove individual cells from the watch facility by using the Delete method of the Watches collection. This example deletes cell A3 on worksheet 1 of book 1 from the Watch window. This example assumes that you have added the cell A3 on sheet 1 of book 1 (by using the previous example to add a Watch object).

Sub DeleteAWatch() 
 
 Application.Watches(Workbooks("Book1").Sheets("Sheet1").Range("A3")).Delete 
 
End Sub

You can also specify to remove all cells from the Watch window by using the Delete method of the Watches collection. This example deletes all cells from the Watch window.

Sub DeleteAllWatches() 
 
 Application.Watches.Delete 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Watches object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Watches object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Watches object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Watches object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Source) -> Watch:
    '''Adds a range that is tracked when the worksheet is recalculated.

#PARAMETERS:

Name Required/Optional Data type Description

Source Required Variant The source for the range.

#RETURN-VALUE: A Watch object that represents the new range.

#EXAMPLE:

This example creates a summation formula in cell A3 and then adds this cell to the watch facility.

Sub AddWatch() 
 
 With Application 
 .Range("A1").Formula = 1 
 .Range("A2").Formula = 2 
 .Range("A3").Formula = "=Sum(A1:A2)" 
 .Range("A3").Select 
 .Watches.Add Source:=ActiveCell 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Delete(self) -> None:
    '''Deletes the object.'''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Windows:
  '''A collection of all the Window objects in Microsoft Excel.

#REMARKS:

The Windows collection for the Application object contains all the windows in the application, whereas the Windows collection for the Workbook object contains only the windows in the specified workbook.

Use the Windows property to return the Windows collection. The following example cascades all the windows that are currently displayed in Microsoft Excel.

Use the NewWindow method to create a new window and add it to the collection. The following example creates a new window for the active workbook.

Use Windows (index), where index is the window name or index number, to return a single Window object. The following example maximizes the active window.

Note that the active window is always Windows(1).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Windows property to return the Windows collection. The following example cascades all the windows that are currently displayed in Microsoft Excel.

Windows.Arrange arrangeStyle:=xlCascade

Use the NewWindow method to create a new window and add it to the collection. The following example creates a new window for the active workbook.

ActiveWorkbook.NewWindow

Use Windows (index), where index is the window name or index number, to return a single Window object. The following example maximizes the active window.

Note that the active window is always Windows(1).

Windows(1).WindowState = xlMaximized

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Windows object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Windows object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Windows object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Windows object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SyncScrollingSideBySide: bool
    '''True enables scrolling the contents of windows at the same time when documents are being compared side by side. False disables scrolling the windows at the same time.

#SYNTAX:

expression.SyncScrollingSideBySide

expression A variable that represents a Windows object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Arrange(self, ArrangeStyle, ActiveWorkbook, SyncHorizontal, SyncVertical) -> VBA_Variant:
    '''Arranges the windows on the screen.

#PARAMETERS:

Name Required/Optional Data type Description

ArrangeStyle Optional XlArrangeStyle One of the constants of XlArrangeStyle specifying how the windows are arranged.

ActiveWorkbook Optional Variant True to arrange only the visible windows of the active workbook. False to arrange all windows. The default value is False.

SyncHorizontal Optional Variant Ignored if ActiveWorkbook is False or omitted. True to synchronize the windows of the active workbook when scrolling horizontally. False to not synchronize the windows. The default value is False.

SyncVertical Optional Variant Ignored if ActiveWorkbook is False or omitted. True to synchronize the windows of the active workbook when scrolling vertically. False to not synchronize the windows. The default value is False.

#RETURN-VALUE: Variant

#EXAMPLE:

This example tiles all the windows in the application.

Application.Windows.Arrange ArrangeStyle:=xlArrangeStyleTiled

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BreakSideBySide(self) -> bool:
    '''Ends side-by-side mode if two windows are in side-by-side mode. Returns a Boolean value that represents whether the method was successful.

#RETURN-VALUE: Boolean

#EXAMPLE:

The following example ends side-by-side mode.

Sub CloseSideBySide() 
 
 ActiveWorkbook.Windows.BreakSideBySide 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CompareSideBySideWith(self, WindowName) -> bool:
    '''Opens two windows in side-by-side mode. Returns a Boolean value.

#PARAMETERS:

Name Required/Optional Data type Description

WindowName Required Variant The name of the window.

#RETURN-VALUE: Boolean

#REMARKS:

You cannot use the CompareSideBySideWith method with the Application object or the ActiveWorkbook property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def ResetPositionsSideBySide(self) -> None:
    '''Resets the position of two worksheet windows that are being compared side by side.

#REMARKS:

Use the ResetPositionsSideBySide method to reset the position of two worksheets that are being compared side by side. For example, if a user minimizes or maximizes one of the two worksheet windows being compared, the ResetPositionsSideBySide method resets the display so that the two windows are displayed side by side again.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Workbooks:
  '''A collection of all the Workbook objects that are currently open in the Microsoft Excel application.

#REMARKS:

For more information about using a single Workbook object, see the Workbook object.

Use the Workbooks property of the Application object to return the Workbooks collection. The following example closes all open workbooks.

Use the Add method to create a new, empty workbook and add it to the collection. The following example adds a new, empty workbook to Microsoft Excel.

Use the Open method to open a file. This creates a new workbook for the opened file. The following example opens the file Array.xls as a read-only workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Workbooks property of the Application object to return the Workbooks collection. The following example closes all open workbooks.

Workbooks.Close

Use the Add method to create a new, empty workbook and add it to the collection. The following example adds a new, empty workbook to Microsoft Excel.

Workbooks.Add

Use the Open method to open a file. This creates a new workbook for the opened file. The following example opens the file Array.xls as a read-only workbook.

Workbooks.Open FileName:="Array.xls", ReadOnly:=True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Workbooks object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Workbooks object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Workbooks object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Workbooks object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Template) -> Workbook:
    '''Creates a new workbook. The new workbook becomes the active workbook.

#PARAMETERS:

Name Required/Optional Data type Description

Template Optional Variant Determines how the new workbook is created. If this argument is a string specifying the name of an existing Microsoft Excel file, the new workbook is created with the specified file as a template.If this argument is a constant, the new workbook contains a single sheet of the specified type. Can be one of the following XlWBATemplate constants: xlWBATChart, xlWBATExcel4IntlMacroSheet, xlWBATExcel4MacroSheet, or xlWBATWorksheet.If this argument is omitted, Microsoft Excel creates a new workbook with a number of blank sheets (the number of sheets is set by the SheetsInNewWorkbook property).

#RETURN-VALUE: A Workbook object that represents the new workbook.

#REMARKS:

If the Template argument specifies a file, the file name can include a path.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CanCheckOut(self, Filename) -> bool:
    '''True if Microsoft Excel can check out a specified workbook from a server. Read/write Boolean.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The name of the file to check out.

#RETURN-VALUE: Boolean

#EXAMPLE:

This example verifies that a workbook is not checked out by another user and can be checked out. If the workbook can be checked out, it copies the workbook to the local computer for editing.

Sub UseCanCheckOut(docCheckOut As String) 
 
 ' Determine if workbook can be checked out. 
 If Workbooks.CanCheckOut(Filename:=docCheckOut) = True Then 
 Workbooks.CheckOut (Filename:=docCheckOut) 
 Else 
 MsgBox "You are unable to check out this document at this time." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CheckOut(self, Filename) -> None:
    '''Returns a String representing a specified workbook from a server to a local computer for editing.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The name of the file to check out.

#EXAMPLE:

This example verifies that a workbook is not checked out by another user and can be checked out. If the workbook can be checked out, it copies the workbook to the local computer for editing.

Sub UseCheckOut(docCheckOut As String) 
 
 ' Determine if workbook can be checked out. 
 If Workbooks.CanCheckOut(docCheckOut) = True Then 
 Workbooks.CheckOut docCheckOut 
 Else 
 MsgBox "Unable to check out this document at this time." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Close(self) -> None:
    '''Closes the object.

#REMARKS:

Closing a workbook from Visual Basic doesn't run any Auto_Close macros in the workbook. Use the RunAutoMacros method to run the auto close macros.

This example closes all open workbooks. If there are changes in any open workbook, Microsoft Excel displays the appropriate prompts and dialog boxes for saving changes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example closes all open workbooks. If there are changes in any open workbook, Microsoft Excel displays the appropriate prompts and dialog boxes for saving changes.

Workbooks.Close

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def Open(self, Filename, UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru, Local, CorruptLoad) -> Workbook:
    '''Opens a workbook.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Optional Variant String. The file name of the workbook to be opened.

UpdateLinks Optional Variant Specifies the way external references (links) in the file, such as the reference to a range in the Budget.xls workbook in the following formula =SUM([Budget.xls]Annual!C10:C25), are updated. If this argument is omitted, the user is prompted to specify how links will be updated. For more information about the values used by this parameter, see the Remarks section.If Microsoft Excel is opening a file in the WKS, WK1, or WK3 format and the UpdateLinks argument is 0, no charts are created; otherwise, Microsoft Excel generates charts from the graphs attached to the file.

ReadOnly Optional Variant True to open the workbook in read-only mode.

Format Optional Variant If Microsoft Excel opens a text file, this argument specifies the delimiter character. If this argument is omitted, the current delimiter is used. For more information about the values used by this parameter, see the Remarks section.

Password Optional Variant A string that contains the password required to open a protected workbook. If this argument is omitted and the workbook requires a password, the user is prompted for the password.

WriteResPassword Optional Variant A string that contains the password required to write to a write-reserved workbook. If this argument is omitted and the workbook requires a password, the user will be prompted for the password.

IgnoreReadOnlyRecommended Optional Variant True to have Microsoft Excel not display the read-only recommended message (if the workbook was saved with the Read-Only Recommended option).

Origin Optional Variant If the file is a text file, this argument indicates where it originated, so that code pages and Carriage Return/Line Feed (CR/LF) can be mapped correctly. Can be one of the following XlPlatform constants: xlMacintosh, xlWindows, or xlMSDOS. If this argument is omitted, the current operating system is used.

Delimiter Optional Variant If the file is a text file and the Format argument is 6, this argument is a string that specifies the character to be used as the delimiter. For example, use Chr(9) for tabs, use "," for commas, use ";" for semicolons, or use a custom character. Only the first character of the string is used.

Editable Optional Variant If the file is a Microsoft Excel 4.0 add-in, this argument is True to open the add-in so that it is a visible window. If this argument is False or omitted, the add-in is opened as hidden, and it cannot be unhidden. This option does not apply to add-ins created in Microsoft Excel 5.0 or later.If the file is an Excel template, True to open the specified template for editing. False to open a new workbook based on the specified template. The default value is False.

Notify Optional Variant If the file cannot be opened in read/write mode, this argument is True to add the file to the file notification list. Microsoft Excel will open the file as read-only, poll the file notification list, and then notify the user when the file becomes available. If this argument is False or omitted, no notification is requested, and any attempts to open an unavailable file will fail.

Converter Optional Variant The index of the first file converter to try when opening the file. The specified file converter is tried first; if this converter does not recognize the file, all other converters are tried. The converter index consists of the row numbers of the converters returned by the FileConverters property.

AddToMru Optional Variant True to add this workbook to the list of recently used files. The default value is False.

Local Optional Variant True saves files against the language of Microsoft Excel (including control panel settings). False (default) saves files against the language of Visual Basic for Applications (VBA) (which is typically United States English unless the VBA project where Workbooks.Open is run from is an old internationalized XL5/95 VBA project).

CorruptLoad Optional XlCorruptLoad Can be one of the following constants: xlNormalLoad, xlRepairFile and xlExtractData. The default behavior if no value is specified is xlNormalLoad, and does not attempt recovery when initiated through the OM.

#RETURN-VALUE: A Workbook object that represents the opened workbook.

#REMARKS:

By default, macros are enabled when opening files programmatically. Use the AutomationSecurity property to set the macro security mode used when opening files programmatically.

You can specify one of the following values in the UpdateLinks parameter to determine whether external references (links) are updated when the workbook is opened.

You can specify one of the following values in the Format parameter to determine the delimiter character for the file.

The following code example opens the workbook Analysis.xls and then runs its Auto_Open macro.

The following code example imports a sheet from another workbook onto a new sheet in the current workbook. Sheet1 in the current workbook must contain the path name of the workbook to import in cell D3, the file name in cell D4, and the worksheet name in cell D5. The imported worksheet is inserted after Sheet1 in the current workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following code example opens the workbook Analysis.xls and then runs its Auto_Open macro.

Workbooks.Open "ANALYSIS.XLS" 
ActiveWorkbook.RunAutoMacros xlAutoOpen

The following code example imports a sheet from another workbook onto a new sheet in the current workbook. Sheet1 in the current workbook must contain the path name of the workbook to import in cell D3, the file name in cell D4, and the worksheet name in cell D5. The imported worksheet is inserted after Sheet1 in the current workbook.

Sub ImportWorksheet() 
    ' This macro will import a file into this workbook 
    Sheets("Sheet1").Select 
    PathName = Range("D3").Value 
    Filename = Range("D4").Value 
    TabName = Range("D5").Value 
    ControlFile = ActiveWorkbook.Name 
    Workbooks.Open Filename:=PathName & Filename 
    ActiveSheet.Name = TabName 
    Sheets(TabName).Copy After:=Workbooks(ControlFile).Sheets(1) 
    Windows(Filename).Activate 
    ActiveWorkbook.Close SaveChanges:=False 
    Windows(ControlFile).Activate 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OpenDatabase(self, Filename, CommandText, CommandType, BackgroundQuery, ImportDataAs) -> Workbook:
    '''Returns a Workbook object representing a database.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The connection string that contains the location and file name of the database.

CommandText Optional Variant The command text of the query.

CommandType Optional Variant The command type of the query. Specify one of the constants of the XlCmdType enumeration: xlCmdCube, xlCmdList, xlCmdSql, xlCmdTable, and xlCmdDefault.

BackgroundQuery Optional Variant This parameter is a variant data type but you can only pass a Boolean value. If you pass True, the query is performed in the background (asynchronously). The default value is False.

ImportDataAs Optional Variant This parameter uses one of the values of the XlImportDataAs enumeration. The two values of this enum are xlPivotTableReport and xlQueryTable. Pass one of these values to return the data as a PivotTable or QueryTable. The default value is xlQueryTable.

#RETURN-VALUE: Workbook

#EXAMPLE:

In this example, Microsoft Excel opens the Northwind.mdb file. This example assumes that a file called Northwind.mdb exists on the C:\ drive.

Sub UseOpenDatabase() 
 ' Open the Northwind database in the background and create a PivotTable 
 Workbooks.OpenDatabase Filename:="c:\Northwind.mdb", _ 
 CommandText:="Orders", _ 
 CommandType:=xlCmdTable, _ 
 BackgroundQuery:=True, _ 
 ImportDataAs:=xlPivotTableReport 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OpenText(self, Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers, Local) -> None:
    '''Loads and parses a text file as a new workbook with a single sheet that contains the parsed text-file data.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String Specifies the file name of the text file to be opened and parsed.

Origin Optional Variant Specifies the origin of the text file. Can be one of the following XlPlatform constants: xlMacintosh, xlWindows, or xlMSDOS. Additionally, this could be an integer representing the code page number of the desired code page. For example, "1256" would specify that the encoding of the source text file is Arabic (Windows).If this argument is omitted, the method uses the current setting of the File Origin option in the Text Import Wizard.

StartRow Optional Variant The row number at which to start parsing text. The default value is 1.

DataType Optional Variant Specifies the column format of the data in the file. Can be one of the following XlTextParsingType constants: xlDelimited or xlFixedWidth. If this argument is not specified, Microsoft Excel attempts to determine the column format when it opens the file.

TextQualifier Optional XlTextQualifier Specifies the text qualifier.

ConsecutiveDelimiter Optional Variant True to have consecutive delimiters considered one delimiter. The default is False.

Tab Optional Variant True to have the tab character be the delimiter (DataType must be xlDelimited). The default value is False.

Semicolon Optional Variant True to have the semicolon character be the delimiter (DataType must be xlDelimited). The default value is False.

Comma Optional Variant True to have the comma character be the delimiter (DataType must be xlDelimited). The default value is False.

Space Optional Variant True to have the space character be the delimiter (DataType must be xlDelimited). The default value is False.

Other Optional Variant True to have the character specified by the OtherChar argument be the delimiter (DataType must be xlDelimited). The default value is False.

OtherChar Optional Variant Required if Other is True. Specifies the delimiter character when Other is True. If more than one character is specified, only the first character of the string is used; the remaining characters are ignored.

FieldInfo Optional Variant An array containing parse information for individual columns of data. The interpretation depends on the value of DataType. When the data is delimited, this argument is an array of two-element arrays, with each two-element array specifying the conversion options for a particular column. The first element is the column number (1-based), and the second element is one of the XlColumnDataType constants specifying how the column is parsed.

TextVisualLayout Optional Variant The visual layout of the text.

DecimalSeparator Optional Variant The decimal separator that Microsoft Excel uses when recognizing numbers. The default setting is the system setting.

ThousandsSeparator Optional Variant The thousands separator that Excel uses when recognizing numbers. The default setting is the system setting.

TrailingMinusNumbers Optional Variant Specify True if numbers with a minus character at the end should be treated as negative numbers. If False or omitted, numbers with a minus character at the end are treated as text.

Local Optional Variant Specify True if regional settings of the machine should be used for separators, numbers and data formatting.

#REMARKS:

FieldInfo parameter

Use xlEMDFormat only if you have installed and selected Taiwanese language support. The xlEMDFormat constant specifies that Taiwanese era dates are being used.

The column specifiers can be in any order. If there's no column specifier for a particular column in the input data, the column is parsed with the General setting.

This example causes the third column to be parsed as MDY (for example, 01/10/1970), the first column to be parsed as text, and the remaining columns in the source data to be parsed with the General setting.

If the source data has fixed-width columns, the first element in each two-element array specifies the position of the starting character in the column (as an integer; character 0 (zero) is the first character). The second element in the two-element array specifies the parse option for the column as a number between 0 and 9, as listed in the preceding table.

ThousandsSeparator parameter

The following table shows the results of importing text into Excel for various import settings. Numeric results are displayed in the rightmost column.

This example opens the file Data.txt and uses tab delimiters to parse the text file into a worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Array(Array(3, 3), Array(1, 2))

This example opens the file Data.txt and uses tab delimiters to parse the text file into a worksheet.

Workbooks.OpenText filename:="DATA.TXT", _ 
    dataType:=xlDelimited, tab:=True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OpenXML(self, Filename, Stylesheets, LoadOption) -> Workbook:
    '''Opens an XML data file. Returns a Workbook object.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The name of the file to open.

Stylesheets Optional Variant Either a single value or an array of values that specify which XSL Transformation (XSLT) stylesheet processing instructions to apply.

LoadOption Optional Variant Specifies how Excel opens the XML data file. Can be one of the XlXmlLoadOption constants.

#RETURN-VALUE: Workbook

#EXAMPLE:

The following code opens the XML data file Customers.xml and displays the file's contents in an XML list.

Sub UseOpenXML() 
 Application.Workbooks.OpenXML _ 
 Filename:="Customers.xml", _ 
 LoadOption:=xlXmlLoadImportToList 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def _Open(self, Filename, UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru):  pass

  def _OpenText(self, Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, DecimalSeparator, ThousandsSeparator):  pass

  def _OpenText_(self, Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout):  pass

  def _OpenXML(self, Filename, Stylesheets):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class WorksheetFunction:
  '''Used as a container for Microsoft Excel worksheet functions that can be called from Visual Basic.

#EXAMPLE:

Use the WorksheetFunction property of the Application object to return the WorksheetFunction object.

The following example displays the result of applying the Min worksheet function to the range A1:C10.

Set myRange = Worksheets("Sheet1").Range("A1:C10") 
answer = Application.WorksheetFunction.Min(myRange) 
MsgBox answer

This example uses the CountA worksheet function to determine how many cells in column A contain a value. For this example, the values in column A should be text. This example does a spell check on each value in column A, and if the value is spelled incorrectly, inserts the text "Wrong" into column B; otherwise, it inserts the text "OK" into column B.

Sub StartSpelling()
   'Set up your variables
   Dim iRow As Integer
   
   'And define your error handling routine.
   On Error GoTo ERRORHANDLER
   
   'Go through all the cells in column A, and perform a spellcheck on the value.
   'If the value is spelled incorrectly, write "Wrong" in column B; otherwise, write "OK".
   For iRow = 1 To WorksheetFunction.CountA(Columns(1))
      If Application.CheckSpelling( _
         Cells(iRow, 1).Value, , True) = False Then
         Cells(iRow, 2).Value = "Wrong"
      Else
         Cells(iRow, 2).Value = "OK"
      End If
   Next iRow
   Exit Sub

    'Error handling routine.
ERRORHANDLER:
    MsgBox "The spell check feature is not installed!"
    
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a WorksheetFunction object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a WorksheetFunction object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Application
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a WorksheetFunction object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def AccrInt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> float:
    '''Returns the accrued interest for a security that pays periodic interest.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Issue date - Security's issue date.

Arg2 Required Variant First interest - Security's first interest date.

Arg3 Required Variant Settlement - Security's settlement date

Arg4 Required Variant Rate - Security's annual coupon rate.

Arg5 Required Variant Par - Security's par value.

Arg6 Required Variant Frequency - Number of coupon payments per year.

Arg7 Optional Variant Basis - The type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg7.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AccrIntM(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the accrued interest for a security that pays interest at maturity.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The security's issue date.

Arg2 Required Variant The security's maturity date.

Arg3 Required Variant The security's annual coupon rate.

Arg4 Required Variant The security's par value. If you omit par, ACCRINTM uses $1,000.

Arg5 Optional Variant The type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg5.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900.

Issue, maturity, and basis are truncated to integers. If issue or maturity is not a valid date, ACCRINTM will generate an error.

If rate = 0 or if par = 0, ACCRINTM will generate an error.

If basis < 0 or if basis > 4, ACCRINTM will generate an error.

If issue = maturity, ACCRINTM will generate an error.

ACCRINTM is calculated as follows, where: A = Number of accrued days counted according to a monthly basis:

For interest at maturity items, the number of days from the issue date to the maturity date is used. D = Annual Year Basis.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Acos(self, Arg1) -> float:
    '''Returns the arccosine, or inverse cosine, of a number. The arccosine is the angle whose cosine is Arg1. The returned angle is given in radians in the range 0 (zero) to pi.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The cosine of the angle you want, and must be from -1 to 1.

#RETURN-VALUE: Double

#REMARKS:

If you want to convert the result from radians to degrees, multiply it by 180/PI() or use the Degrees method.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Acosh(self, Arg1) -> float:
    '''Returns the inverse hyperbolic cosine of a number. Number must be greater than or equal to 1. The inverse hyperbolic cosine is the value whose hyperbolic cosine is Arg1, so Acosh(Cosh(number)) equals Arg1.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Any real number equal to or greater than 1.

#RETURN-VALUE: Double
    '''

  def Acot(self, Arg1) -> float:
    '''Returns the arccotangent of a number, in radians in the range 0 (zero) to pi.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The cotangent of the angle that you want.

#RETURN-VALUE: Double
    '''

  def Acoth(self, Arg1) -> float:
    '''Returns the inverse hyperbolic cotangent of a number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The hyperbolic cotangent of the angle that you want.

#RETURN-VALUE: Double
    '''

  def Aggregate(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns an aggregate in a list or database.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Function_num - A number from 1 to 19 that specifies which function to use.Function_numFunction1AVERAGE2COUNT3COUNTA4MAX5MIN6PRODUCT7STDEV.S8STDEV.P9SUM10VAR.S11VAR.P12MEDIAN13MODE.SNGL14LARGE15SMALL16PERCENTILE.INC 17QUARTILE.INC18PERCENTILE.EXC19QUARTILE.EXC

Arg2 Required Double Option - A numerical value that determines which values to ignore in the evaluation range for the function.OptionBehavior 0 or omittedIgnore nested SUBTOTAL and AGGREGATE functions 1Ignore hidden rows, nested SUBTOTAL and AGGREGATE functions 2Ignore error values, nested SUBTOTAL and AGGREGATE functions 3Ignore hidden rows, error values, nested SUBTOTAL and AGGREGATE functions 4Ignore nothing 5Ignore hidden rows 6Ignore error values 7Ignore hidden rows and error values 

Arg3 Required Range Ref1 - The first numeric argument for functions that take multiple numeric arguments for which you want the aggregate value.

Arg4 - Arg 30 Optional Variant Ref2 - Ref30 - Numeric arguments 2 to 30 for which you want the aggregate value.

#RETURN-VALUE: Double

#REMARKS:

The following constraints apply to the Ref arguments (Arg3 - Arg 30) based on the Function_num value.

If a second ref argument is required but not provided, Aggregate returns a #VALUE! error.

If one or more of the references are 3D references, Aggregate returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AmorDegrc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> float:
    '''Returns the depreciation for each accounting period. This function is provided for the French accounting system.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The cost of the asset.

Arg2 Required Variant The date of the purchase of the asset.

Arg3 Required Variant The date of the end of the first period.

Arg4 Required Variant The salvage value at the end of the life of the asset.

Arg5 Required Variant The period.

Arg6 Required Variant The rate of depreciation.

Arg7 Optional Variant The year basis to be used.

#RETURN-VALUE: Double

#REMARKS:

If an asset is purchased in the middle of the accounting period, the prorated depreciation is taken into account. The method is similar to AmorLinc, except that a depreciation coefficient is applied in the calculation depending on the life of the assets.

The following table describes the values used in Arg7.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

This function will return the depreciation until the last period of the life of the assets or until the cumulated value of depreciation is greater than the cost of the assets minus the salvage value.

The following table lists the depreciation coefficients.

The depreciation rate will grow to 50 percent for the period preceding the last period and will grow to 100 percent for the last period.

If the life of assets is between 0 (zero) and 1, 1 and 2, 2 and 3, or 4 and 5, the #NUM! error value is returned.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AmorLinc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> float:
    '''Returns the depreciation for each accounting period. This function is provided for the French accounting system.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The cost of the asset.

Arg2 Required Variant The date of the purchase of the asset.

Arg3 Required Variant The date of the end of the first period.

Arg4 Required Variant The salvage value at the end of the life of the asset.

Arg5 Required Variant The period.

Arg6 Required Variant The rate of depreciation.

Arg7 Optional Variant The year basis to be used.

#RETURN-VALUE: Double

#REMARKS:

If an asset is purchased in the middle of the accounting period, the prorated depreciation is taken into account.

The following table describes values used for Arg7.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def And(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> bool:
    '''Returns True if all its arguments are True; returns False if one or more arguments is False.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant 1 to 30 conditions that you want to test that can be either True or False.

#RETURN-VALUE: Boolean

#REMARKS:

The arguments must evaluate to logical values such as True or False, or the arguments must be arrays or references that contain logical values.

If an array or reference argument contains text or empty cells, those values are ignored.

If the specified range contains no logical values, this method generates an error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Arabic(self, Arg1) -> float:
    '''Converts a Roman numeral to an Arabic numeral.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String The Roman numeral that you want to convert.

#RETURN-VALUE: Double
    '''

  def ArrayToText(self, Arg1, Arg2):  pass

  def Asc(self, Arg1) -> str:
    '''For double-byte character set (DBCS) languages, changes full-width (double-byte) characters to half-width (single-byte) characters.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String The text or a reference to a cell that contains the text that you want to change. If the text does not contain any full-width letters, the text is not changed.

#RETURN-VALUE: String

#REMARKS:

WorksheetFunction.Asc() is not equivalent to Asc(), which converts a string to an integer.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Asin(self, Arg1) -> float:
    '''Returns the arcsine, or inverse sine, of a number. The arcsine is the angle whose sine is Arg1. The returned angle is given in radians in the range -pi/2 to pi/2.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The sine of the angle that you want; must be from -1 to 1.

#RETURN-VALUE: Double

#REMARKS:

To express the arcsine in degrees, multiply the result by 180/PI( ) or use the Degrees method.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Asinh(self, Arg1) -> float:
    '''Returns the inverse hyperbolic sine of a number. The inverse hyperbolic sine is the value whose hyperbolic sine is Arg1, so Asinh(Sinh(number)) equals Arg1.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Any real number.

#RETURN-VALUE: Double
    '''

  def Atan2(self, Arg1, Arg2) -> float:
    '''Returns the arctangent, or inverse tangent, of the specified x- and y-coordinates. The arctangent is the angle from the x-axis to a line containing the origin (0, 0) and a point with coordinates (x_num, y_num). The angle is given in radians between -pi and pi, excluding -pi.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The x-coordinate of the point.

Arg2 Required Double The y-coordinate of the point.

#RETURN-VALUE: Double

#REMARKS:

A positive result represents a counterclockwise angle from the x-axis; a negative result represents a clockwise angle.

The following conditions apply:

To express the arctangent in degrees, multiply the result by 180/PI( ) or use the Degrees method.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Atanh(self, Arg1) -> float:
    '''Returns the inverse hyperbolic tangent of a number. Number must be between -1 and 1 (excluding -1 and 1).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Any real number between 1 and -1.

#RETURN-VALUE: Double

#REMARKS:

The inverse hyperbolic tangent is the value whose hyperbolic tangent is Arg1, so Atanh(Tanh(number)) equals Arg1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AveDev(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the average of the absolute deviations of data points from their mean. AveDev is a measure of the variability in a data set.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg 30 Required Variant 1 to 30 arguments for which you want the average of the absolute deviations. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

AveDev is influenced by the unit of measurement in the input data.

Arguments must either be numbers or be names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

The equation for average deviation is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Average(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the average (arithmetic mean) of the arguments.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant 1 to 30 numeric arguments for which you want the average.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If you want to include logical values and text representations of numbers in a reference as part of the calculation, use the AVERAGEA function.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AverageIf(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the average (arithmetic mean) of all the cells in a range that meet a given criteria.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range One or more cells to average.

Arg2 Required Variant The criteria in the form of a number, expression, cell reference, or text that defines which cells are averaged. For example, criteria can be expressed as 32, "32", ">32", "apples", or B4.

Arg3 Optional Variant The actual set of cells to average. If omitted, range is used.

#RETURN-VALUE: Double

#REMARKS:

Cells in a range that contain True or False are ignored.

If a cell in a range or average_range is an empty cell, AverageIf ignores it.

If a cell in the criteria is empty, AverageIf treats it as a 0 value.

If no cells in the range meet the criteria, AverageIf generates an error value.

Use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

Average_range does not have to be the same size and shape as range. The actual cells that are averaged are determined by using the top, left cell in average_range as the beginning cell, and then including cells that correspond in size and shape to range. For example:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AverageIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29) -> float:
    '''Returns the average (arithmetic mean) of all cells that meet multiple criteria.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Range One or more ranges in which to evaluate the associated criteria.

#RETURN-VALUE: Double

#REMARKS:

If a cell in average_range is an empty cell, AverageIfs ignores it.

If a cell in a criteria range is empty, AverageIfs treats it as a 0 value.

Cells in a range that contain True evaluate as 1; cells in a range that contain False evaluate as 0 (zero).

Each cell in average_range is used in the average calculation only if all of the corresponding criteria specified are true for that cell.

If cells in average_range are empty or contain text values that cannot be translated into numbers, AverageIfs generates an error.

If there are no cells that meet all the criteria, AverageIfs generates an error value.

Use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

Each criteria_range does not have to be the same size and shape as average_range. The actual cells that are averaged are determined by using the top, left cell in that criteria_range as the beginning cell, and then including cells that correspond in size and shape to range. For example:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BahtText(self, Arg1) -> str:
    '''Converts a number to Thai text and adds a suffix of Baht.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double A number that you want to convert to text, or a reference to a cell containing a number, or a formula that evaluates to a number.

#RETURN-VALUE: String

#REMARKS:

In Microsoft Excel for Windows, you can change the Baht format to a different style by using Regional Settings or Regional Options in the Control Panel.

In Excel for the Macintosh, you can change the Baht number format to a different style by using Control Panel for Numbers.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Base(self, Arg1, Arg2, Arg3) -> str:
    '''Converts a number into a text representation with the given radix (base).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The number that you want to convert.

Arg2 Required Double The base radix that you want to convert the number into.

Arg3 Optional Variant The minimum length of the returned string. If omitted, leading zeros are not added.

#RETURN-VALUE: String
    '''

  def BesselI(self, Arg1, Arg2) -> float:
    '''Returns the modified Bessel function, which is equivalent to the Bessel function evaluated for purely imaginary arguments.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The value at which to evaluate the function.

Arg2 Required Variant The order of the Bessel function. If n is not an integer, it is truncated.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, BesselI returns the #VALUE! error value.

If n is nonnumeric, BesselI generates an error value.

If n < 0, BesselI generates an error value.

The n-th order modified Bessel function of the variable x is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BesselJ(self, Arg1, Arg2) -> float:
    '''Returns the Bessel function.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The value at which to evaluate the function.

Arg2 Required Variant The order of the Bessel function. If n is not an integer, it is truncated.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, BesselJ generates an error value.

If n is nonnumeric, BesselJ generates an error value.

If n < 0, BesselJ generates an error value.

The n-th order Bessel function of the variable x is  where  is the Gamma function.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BesselK(self, Arg1, Arg2) -> float:
    '''Returns the modified Bessel function, which is equivalent to the Bessel functions evaluated for purely imaginary arguments.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The value at which to evaluate the function.

Arg2 Required Variant The order of the function. If n is not an integer, it is truncated.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, BesselK generates an error value.

If n is nonnumeric, BesselK generates an error value.

If n < 0, BesselK generates an error value.

The n-th order modified Bessel function of the variable x is  where Jn and Yn are the J and Y Bessel functions, respectively.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BesselY(self, Arg1, Arg2) -> float:
    '''Returns the Bessel function, which is also called the Weber function or the Neumann function.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The value at which to evaluate the function.

Arg2 Required Variant The order of the function. If n is not an integer, it is truncated.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, BesselY generates an error value.

If n is nonnumeric, BesselY generates an error value.

If n < 0, BesselY generates an error value.

The n-th order Bessel function of the variable x is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BetaDist(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the beta cumulative distribution function.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The value between A and B at which to evaluate the function.

Arg2 Required Double A parameter of the distribution.

Arg3 Required Double A parameter of the distribution.

Arg4 Optional Variant An optional lower bound to the interval of x.

Arg5 Optional Variant An optional upper bound to the interval of x.

#RETURN-VALUE: Double

#REMARKS:

The beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.

If any argument is nonnumeric, BetaDist returns the #VALUE! error value.

If alpha ≤ 0 or beta ≤ 0, BetaDist generates an error value.

If x < A, x > B, or A = B, BetaDist generates an error value.

If you omit values for A and B, BetaDist uses the standard cumulative beta distribution, so that A = 0 and B = 1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BetaInv(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the inverse of the cumulative distribution function for a specified beta distribution. That is, if probability = BetaDist(x,...), then BetaInv(probability,...) = x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double A probability associated with the beta distribution.

Arg2 Required Double The Alpha parameter of the distribution.

Arg3 Required Double The Beta parameter the distribution.

Arg4 Optional Variant An optional lower bound to the interval of x.

Arg5 Optional Variant An optional upper bound to the interval of x.

#RETURN-VALUE: Double

#REMARKS:

The beta distribution can be used in project planning to model probable completion times given an expected completion time and variability.

If any argument is nonnumeric, BetaInv generates an error value.

If alpha ≤ 0 or beta ≤ 0, BetaInv generates an error value.

If probability ≤ 0 or probability > 1, BetaInv generates an error value.

If you omit values for A and B, BetaInv uses the standard cumulative beta distribution, so that A = 0 and B = 1.

Given a value for probability, BetaInv seeks that value x such that BetaDist(x, alpha, beta, A, B) = probability. Thus, the precision of BetaInv depends on the precision of BetaDist. BetaInv uses an iterative search technique. If the search has not converged after 100 iterations, the function generates an error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Beta_Dist(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the beta cumulative distribution function.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The value between A and B at which to evaluate the function.

Arg2 Required Double The Alpha parameter of the distribution.

Arg3 Required Double The Beta parameter of the distribution.

Arg4 Optional Variant Cumulative - a logical value that determines the form of the function. If cumulative is True, BETA.DIST returns the cumulative distribution function; if False, it returns the probability density function.

Arg5 Optional Variant An optional lower bound to the interval of x.

Arg6 Optional Variant An optional upper bound to the interval of x.

#RETURN-VALUE: Double

#REMARKS:

The beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.

If any argument is nonnumeric, Beta_Dist returns the #VALUE! error value.

If alpha ≤ 0 or beta ≤ 0, Beta_Dist generates an error value.

If x < A, x > B, or A = B, Beta_Dist generates an error value.

If you omit values for A and B (lower and upper bound), Beta_Dist uses the standard cumulative beta distribution, so that A = 0 and B = 1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Beta_Inv(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the inverse of the cumulative distribution function for a specified beta distribution. That is, if probability = Beta_Dist(x,...), then Beta_Inv(probability,...) = x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double A probability associated with the beta distribution.

Arg2 Required Double The Alpha parameter of the distribution.

Arg3 Required Double The Beta parameter the distribution.

Arg4 Optional Variant An optional lower bound to the interval of x.

Arg5 Optional Variant An optional upper bound to the interval of x.

#RETURN-VALUE: Double

#REMARKS:

The beta distribution can be used in project planning to model probable completion times given an expected completion time and variability.

If any argument is nonnumeric, Beta_Inv generates an error value.

If alpha ≤ 0 or beta ≤ 0, Beta_Inv generates an error value.

If probability ≤ 0 or probability > 1, Beta_Inv generates an error value.

If you omit values for A and B (lower and upper bound), Beta_Inv uses the standard cumulative beta distribution, so that A = 0 and B = 1.

Given a value for probability, Beta_Inv seeks that value x such that Beta_Dist(x, alpha, beta, TRUE, A, B) = probability. Thus, the precision of Beta_Inv depends on the precision of Beta_Dist. Beta_Inv uses an iterative search technique.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Bin2Dec(self, Arg1) -> str:
    '''Converts a binary number to decimal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The binary number that you want to convert. Number cannot contain more than 10 characters (10 bits). The most significant bit of number is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented by using two's-complement notation.

#RETURN-VALUE: String

#REMARKS:

If number is not a valid binary number, or if number contains more than 10 characters (10 bits), Bin2Dec generates an error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Bin2Hex(self, Arg1, Arg2) -> str:
    '''Converts a binary number to hexadecimal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The binary number that you want to convert. Number cannot contain more than 10 characters (10 bits). The most significant bit of number is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant The number of characters to use. If places is omitted, Bin2Hex uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number is not a valid binary number, or if number contains more than 10 characters (10 bits), Bin2Hex generates an error.

If number is negative, Bin2Hex ignores places and returns a 10-character hexadecimal number.

If Bin2Hex requires more than places characters, it generates an error.

If places is not an integer, it is truncated.

If places is nonnumeric, Bin2Hex generates an error.

If places is negative, Bin2Hex generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Bin2Oct(self, Arg1, Arg2) -> str:
    '''Converts a binary number to octal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The binary number that you want to convert. Number cannot contain more than 10 characters (10 bits). The most significant bit of number is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant The number of characters to use. If places is omitted, Bin2Oct uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number is not a valid binary number, or if number contains more than 10 characters (10 bits), Bin2Oct generates an error.

If number is negative, Bin2Oct ignores places and returns a 10-character octal number.

If Bin2Oct requires more than places characters, it generates an error.

If places is not an integer, it is truncated.

If places is nonnumeric, Bin2Oct generates an error.

If places is negative, Bin2Oct generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BinomDist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the individual term binomial distribution probability.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The number of successes in trials.

Arg2 Required Double The number of independent trials.

Arg3 Required Double The probability of success on each trial.

Arg4 Required Boolean A logical value that determines the form of the function. If cumulative is True, BinomDist returns the cumulative distribution function, which is the probability that there are at most number_s successes; if False, it returns the probability mass function, which is the probability that there are number_s successes.

#RETURN-VALUE: Double

#REMARKS:

Use BinomDist in problems with a fixed number of tests or trials, when the outcomes of any trial are only success or failure, when trials are independent, and when the probability of success is constant throughout the experiment. For example, BinomDist can calculate the probability that two of the next three babies born are male.

Number_s and trials are truncated to integers.

If number_s, trials, or probability_s is nonnumeric, BinomDist generates an error.

If number_s < 0 or number_s > trials, BinomDist generates an error.

If probability_s < 0 or probability_s > 1, BinomDist generates an error.

The binomial probability mass function is  where  is COMBIN(n,x).

The cumulative binomial distribution is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Binom_Dist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the individual term binomial distribution probability.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number_s - the number of successes in trials.

Arg2 Required Double Trials - the number of independent trials.

Arg3 Required Double Probability_s - the probability of success on each trial.

Arg4 Required Boolean Cumulative - a logical value that determines the form of the function. If cumulative is True, the Binom_Dist method returns the cumulative distribution function, which is the probability that there are at most number_s successes; if False, it returns the probability mass function, which is the probability that there are number_s successes.

#RETURN-VALUE: Double

#REMARKS:

Use the Binom_Dist method in problems with a fixed number of tests or trials, when the outcomes of any trial are only success or failure, when trials are independent, and when the probability of success is constant throughout the experiment. For example, the Binom_Dist method can calculate the probability that two of the next three babies born are male.

Number_s and trials are truncated to integers.

If number_s, trials, or probability_s is nonnumeric, the Binom_Dist method generates an error.

If number_s < 0 or number_s > trials, the Binom_Dist method generates an error.

If probability_s < 0 or probability_s > 1, the Binom_Dist method generates an error.

The binomial probability mass function is  where  is COMBIN(n,x).

The cumulative binomial distribution is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Binom_Dist_Range(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the probability of a trial result using a binomial distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The number of independent trials.

Arg2 Required Double The probability of success on each trial.

Arg3 Required Double The number of successes in trials.

Arg4 Optional Variant If provided, this function returns the probability that the number of successful trials shall lie between Arg3 and Arg4.

#RETURN-VALUE: Double
    '''

  def Binom_Inv(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the individual term binomial distribution probability.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Trials - the number of Bernoulli trials.

Arg2 Required Double Probability_s - the probability of a success on each trial.

Arg3 Required Double Alpha - the criterion value.

#RETURN-VALUE: Double

#REMARKS:

If trials, probability_s, or alpha is nonnumeric, the Binom_Inv method generates an error.

If trials is not an integer, it is truncated.

If trials < 0, the Binom_Inv method generates an error.

If probability_s < 0 or probability_s > 1, the Binom_Inv method generates an error.

If alpha < 0 or alpha > 1, the Binom_Inv method generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Bitand(self, Arg1, Arg2) -> float:
    '''Returns a bitwise And of two numbers.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The decimal representation of the binary number that you want to evaluate.

Arg2 Required Double The decimal representation of the binary number that you want to evaluate.

#RETURN-VALUE: Double
    '''

  def Bitlshift(self, Arg1, Arg2) -> float:
    '''Returns a value number shifted left by shift_amount bits.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The decimal representation of the binary number that you want to evaluate.

Arg2 Required Double The number of bits that you want to shift Arg1 left by.

#RETURN-VALUE: Double
    '''

  def Bitor(self, Arg1, Arg2) -> float:
    '''Returns a bitwise Or of two numbers.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The decimal representation of the binary number that you want to evaluate.

Arg2 Required Double The decimal representation of the binary number that you want to evaluate.

#RETURN-VALUE: Double
    '''

  def Bitrshift(self, Arg1, Arg2) -> float:
    '''Returns a value number shifted right by shift_amount bits.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The decimal representation of the binary number that you want to evaluate.

Arg2 Required Double The number of bits that you want to shift Arg1 right by.

#RETURN-VALUE: Double
    '''

  def Bitxor(self, Arg1, Arg2) -> float:
    '''Returns a bitwise Exclusive Or of two numbers.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The decimal representation of the binary number that you want to evaluate.

Arg2 Required Double The decimal representation of the binary number that you want to evaluate.

#RETURN-VALUE: Double
    '''

  def Ceiling(self, Arg1, Arg2) -> float:
    '''Returns number rounded up, away from zero, to the nearest multiple of significance.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the value that you want to round.

Arg2 Required Double Significance - the multiple to which you want to round.

#RETURN-VALUE: Double

#REMARKS:

For example, if you want to avoid using pennies in your prices and your product is priced at $4.42, use the formula Ceiling(4.42,0.05) to round prices up to the nearest nickel.

If either argument is nonnumeric, Ceiling generates an error.

Regardless of the sign of number, a value is rounded up when adjusted away from zero. If number is an exact multiple of significance, no rounding occurs.

If number and significance have different signs, Ceiling generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Ceiling_Math(self, Arg1, Arg2, Arg3) -> float:
    '''Rounds a number up to the nearest integer or to the nearest multiple of significance.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The value that you want to round.

Arg2 Optional Variant The multiple to which you want to round.

Arg3 Optional Variant When given and nonzero, this function will round away from zero.

#RETURN-VALUE: Double
    '''

  def Ceiling_Precise(self, Arg1, Arg2) -> float:
    '''Returns the specified number rounded to the nearest multiple of significance.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the value that you want to round.

Arg2 Optional Variant Significance - the multiple to which you want to round.

#RETURN-VALUE: Double

#REMARKS:

For example, if you want to avoid using pennies in your prices and your product is priced at $4.42, use the formula Ceiling(4.42,0.05) to round prices up to the nearest nickel.

If the significance argument is omitted, the value 1.0 is used.

Depending on the sign of the number and significance arguments, the Ceiling_Precise method rounds either away from or towards zero.

If either argument is nonnumeric, Ceiling_Precise generates an error.

If number is an exact multiple of significance, no rounding occurs.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ChiDist(self, Arg1, Arg2) -> float:
    '''Returns the one-tailed probability of the chi-squared distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The value at which you want to evaluate the distribution.

Arg2 Required Double The number of degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

The χ2 distribution is associated with an χ2 test. Use the χ2 test to compare observed and expected values.

For example, a genetic experiment might hypothesize that the next generation of plants will exhibit a certain set of colors. By comparing the observed results with the expected ones, you can decide whether your original hypothesis is valid.

If either argument is nonnumeric, ChiDist generates an error.

If x is negative, ChiDist generates an error.

If degrees_freedom is not an integer, it is truncated.

If degrees_freedom < 1 or degrees_freedom > 10^10, ChiDist generates an error.

ChiDist is calculated as ChiDist = P(X>x), where X is an χ2 random variable.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ChiInv(self, Arg1, Arg2) -> float:
    '''Returns the inverse of the one-tailed probability of the chi-squared distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double A probability associated with the chi-squared distribution.

Arg2 Required Double The number of degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

If probability = ChiDist(x,...), then ChiInv(probability,...) = x. Use this function to compare observed results with expected ones to decide whether your original hypothesis is valid.

If either argument is nonnumeric, ChiInv generates an error.

If probability < 0 or probability > 1, ChiInv generates an error.

If degrees_freedom is not an integer, it is truncated.

If degrees_freedom < 1 or degrees_freedom ≥ 10^10, ChiInv generates an error.

Given a value for probability, ChiInv seeks that value x such that ChiDist(x, degrees_freedom) = probability. Thus, precision of ChiInv depends on precision of ChiDist. ChiInv uses an iterative search technique. If the search has not converged after 64 iterations, the function generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ChiSq_Dist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the chi-squared distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The value at which you want to evaluate the distribution.

Arg2 Required Double Deg_freedom - The number of degrees of freedom.

Arg3 Optional Variant Cumulative - A logical value that determines the form of the function. If cumulative is True, ChiSq_Dist returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, ChiSq_Dist returns the #VALUE! error value.

If x is negative, ChiSq_Dist returns the #NUM! error value.

If deg_freedom is not an integer, it is truncated.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ChiSq_Dist_RT(self, Arg1, Arg2) -> float:
    '''Returns the right-tailed probability of the chi-squared distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The value at which you want to evaluate the distribution.

Arg2 Required Double The number of degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

The χ2 distribution is associated with an χ2 test. Use the χ2 test to compare observed and expected values.

For example, a genetic experiment might hypothesize that the next generation of plants will exhibit a certain set of colors. By comparing the observed results with the expected ones, you can decide whether your original hypothesis is valid.

If either argument is nonnumeric, ChiSq_Dist_RT generates an error.

If x is negative, ChiSq_Dist_RT generates an error.

If degrees_freedom is not an integer, it is truncated.

If degrees_freedom < 1 or degrees_freedom > 10^10, ChiSq_Dist_RT generates an error.

ChiSq_Dist_RT is calculated as ChiSq_Dist_RT = P(X>x), where X is an χ2 random variable.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ChiSq_Inv(self, Arg1, Arg2) -> float:
    '''Returns the inverse of the left-tailed probability of the chi-squared distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - A probability associated with the chi-squared distribution.

Arg2 Required Double Deg_freedom - The number of degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, ChiSq_Inv returns the #VALUE! error value.

If probability < 0 or probability > 1, ChiSq_Inv returns the #NUM! error value.

If deg_freedom is not an integer, it is truncated.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ChiSq_Inv_RT(self, Arg1, Arg2) -> float:
    '''Returns the inverse of the right-tailed probability of the chi-squared distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double A probability associated with the chi-squared distribution.

Arg2 Required Double The number of degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

If probability = ChiSq_Dist_RT(x,...), then ChiSq_Inv_RT(probability,...) = x. Use this function to compare observed results with expected ones to decide whether your original hypothesis is valid.

If either argument is nonnumeric, ChiSq_Inv_RT generates an error.

If probability < 0 or probability > 1, ChiSq_Inv_RT generates an error.

If degrees_freedom is not an integer, it is truncated.

If degrees_freedom < 1 or degrees_freedom ≥ 10^10, ChiSq_Inv_RT generates an error.

Given a value for probability, ChiSq_Inv_RT seeks that value x such that ChiSq_Dist_RT(x, degrees_freedom) = probability. Thus, precision of ChiSq_Inv_RT depends on precision of ChiSq_Dist_RT. ChiSq_Inv_RT uses an iterative search technique. If the search has not converged after 64 iterations, the function generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ChiSq_Test(self, Arg1, Arg2) -> float:
    '''Returns the test for independence.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The range of data that contains observations to test against expected values.

Arg2 Required Variant The range of data that contains the ratio of the product of row totals and column totals to the grand total.

#RETURN-VALUE: Double

#REMARKS:

ChiSq_Test returns the value from the chi-squared (χ2) distribution for the statistic and the appropriate degrees of freedom. Use χ2 tests to determine whether hypothesized results are verified by an experiment.

If actual_range and expected_range have a different number of data points, ChiSq_Test returns the #N/A error value.

The χ2 test first calculates an χ2 statistic by using the following formula, where:

A low value of χ2 is an indicator of independence. As can be seen from the formula, χ2 is always positive or 0, and is 0 only if Aij = Eij for every i,j.

ChiSq_Test returns the probability that a value of the χ2 statistic at least as high as the value calculated by the preceding formula could have happened by chance under the assumption of independence. In computing this probability, ChiSq_Test uses the χ2 distribution with an appropriate number of degrees of freedom, df.

Use of ChiSq_Test is most appropriate when Eij's are not too small. Some statisticians suggest that each Eij should be greater than or equal to 5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ChiTest(self, Arg1, Arg2) -> float:
    '''Returns the test for independence.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The range of data that contains observations to test against expected values.

Arg2 Required Variant The range of data that contains the ratio of the product of row totals and column totals to the grand total.

#RETURN-VALUE: Double

#REMARKS:

ChiTest returns the value from the chi-squared (χ2) distribution for the statistic and the appropriate degrees of freedom. Use χ2 tests to determine whether hypothesized results are verified by an experiment.

If actual_range and expected_range have a different number of data points, ChiTest returns the #N/A error value.

The χ2 test first calculates an χ2 statistic by using the following formula, where:

A low value of χ2 is an indicator of independence. As can be seen from the formula, χ2 is always positive or 0, and is 0 only if Aij = Eij for every i,j.

ChiTest returns the probability that a value of the χ2 statistic at least as high as the value calculated by the preceding formula could have happened by chance under the assumption of independence. In computing this probability, ChiTest uses the χ2 distribution with an appropriate number of degrees of freedom, df.

Use of ChiTest is most appropriate when Eij's are not too small. Some statisticians suggest that each Eij should be greater than or equal to 5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Choose(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> VBA_Variant:
    '''Uses Arg1 as the index to return a value from the list of value arguments.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Specifies which value argument is selected. Arg1 must be a number between 1 and 29, or a formula or reference to a cell containing a number between 1 and 29.

Arg2 - Arg30 Required Variant 1 to 29 value arguments from which Choose selects a value or an action to perform based on Arg1. The arguments can be numbers, cell references, defined names, formulas, functions, or text.

#RETURN-VALUE: Variant

#REMARKS:

If Arg1 is 1, Choose returns value1; if it is 2, Choose returns value2, and so on.

If Arg1 is less than 1 or greater than the number of the last value in the list, Choose generates an error.

If Arg1 is a fraction, it is truncated to the lowest integer before being used.

If Arg1 is an array, every value is evaluated when Choose is evaluated.

The value arguments to Choose can be range references as well as single values. For example, the formula =SUM(Choose(2,A1:A10,B1:B10,C1:C10)) evaluates to =SUM(B1:B10), which then returns a value based on the values in the range B1:B10.

The Choose function is evaluated first, returning the reference B1:B10. The SUM function is then evaluated using B1:B10, the result of the Choose function, as its argument.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Clean(self, Arg1) -> str:
    '''Removes all nonprintable characters from text.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Any worksheet information from which you want to remove nonprintable characters.

#RETURN-VALUE: String

#REMARKS:

Use Clean on text imported from other applications that contains characters that may not print with your operating system. For example, you can use Clean to remove some low-level computer code that is frequently at the beginning and end of data files and cannot be printed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Combin(self, Arg1, Arg2) -> float:
    '''Returns the number of combinations for a given number of items. Use Combin to determine the total possible number of groups for a given number of items.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The number of items.

Arg2 Required Double The number of items in each combination.

#RETURN-VALUE: Double

#REMARKS:

Numeric arguments are truncated to integers.

If either argument is nonnumeric, Combin generates an error.

If number < 0, number_chosen < 0, or number < number_chosen, Combin generates an error.

A combination is any set or subset of items, regardless of their internal order. Combinations are distinct from permutations, for which the internal order is significant.

The number of combinations is as follows, where number = n and number_chosen = k:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Combina(self, Arg1, Arg2) -> float:
    '''Returns the number of combinations with repetitions for a given number of items.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The total number of items.

Arg2 Required Double The number of items in each combination.

#RETURN-VALUE: Double
    '''

  def Complex(self, Arg1, Arg2, Arg3) -> str:
    '''Converts real and imaginary coefficients into a complex number of the form x + yi or x + yj.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The real coefficient of the complex number.

Arg2 Required Variant The imaginary coefficient of the complex number.

Arg3 Optional Variant The suffix for the imaginary component of the complex number. If omitted, suffix is assumed to be "i".

#RETURN-VALUE: String

#REMARKS:

If Arg1 is nonnumeric, Complex generates an error.

If Arg2 is nonnumeric, Complex generates an error.

If Arg3 is neither "i" nor "j", Complex generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Concat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):  pass

  def Confidence(self, Arg1, Arg2, Arg3) -> float:
    '''Returns a value that you can use to construct a confidence interval for a population mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The significance level used to compute the confidence level.The confidence level equals 100*(1 - alpha)%, or in other words, an alpha of 0.05 indicates a 95 percent confidence level.

Arg2 Required Double The population standard deviation for the data range; is assumed to be known.

Arg3 Required Double The sample size.

#RETURN-VALUE: Double

#REMARKS:

The confidence interval is a range of values. Your sample mean, x, is at the center of this range, and the range is x ± Confidence. For example, if x is the sample mean of delivery times for products ordered through the mail, x ± Confidence is a range of population means.

For any population mean (μ0) in this range, the probability of obtaining a sample mean further from μ0 than x is greater than alpha; for any population mean (μ0) not in this range, the probability of obtaining a sample mean further from μ0 than x is less than alpha.

In other words, assume that we use x, standard_dev, and size to construct a two-tailed test at significance level alpha of the hypothesis that the population mean is μ0. We will not reject that hypothesis if μ0 is in the confidence interval, and we will reject that hypothesis if μ0 is not in the confidence interval.

The confidence interval does not allow us to infer that there is probability 1 – alpha that our next package will take a delivery time that is in the confidence interval.

If any argument is nonnumeric, Confidence generates an error.

If alpha ≤ 0 or alpha ≥ 1, Confidence generates an error.

If standard_dev ≤ 0, Confidence generates an error.

If size is not an integer, it is truncated.

If size < 1, Confidence generates an error.

If we assume alpha equals 0.05, we need to calculate the area under the standard normal curve that equals (1 – alpha), or 95 percent. This value is ± 1.96. The confidence interval is therefore

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Confidence_Norm(self, Arg1, Arg2, Arg3) -> float:
    '''Returns a value that you can use to construct a confidence interval for a population mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The significance level used to compute the confidence level. The confidence level equals 100*(1 - alpha)%, or in other words, an alpha of 0.05 indicates a 95 percent confidence level.

Arg2 Required Double The population standard deviation for the data range; is assumed to be known.

Arg3 Required Double The sample size.

#RETURN-VALUE: Double

#REMARKS:

The confidence interval is a range of values. Your sample mean, x, is at the center of this range, and the range is x ± Confidence_Norm. For example, if x is the sample mean of delivery times for products ordered through the mail, x ± Confidence_Norm is a range of population means.

For any population mean (μ0) in this range, the probability of obtaining a sample mean further from μ0 than x is greater than alpha; for any population mean (μ0) not in this range, the probability of obtaining a sample mean further from μ0 than x is less than alpha.

In other words, assume that we use x, standard_dev, and size to construct a two-tailed test at significance level alpha of the hypothesis that the population mean is μ0. We will not reject that hypothesis if μ0 is in the confidence interval, and we will reject that hypothesis if μ0 is not in the confidence interval.

The confidence interval does not allow us to infer that there is probability 1 – alpha that our next package will take a delivery time that is in the confidence interval.

If any argument is nonnumeric, Confidence_Norm generates an error.

If alpha ≤ 0 or alpha ≥ 1, Confidence_Norm generates an error.

If standard_dev ≤ 0, Confidence_Norm generates an error.

If size is not an integer, it is truncated.

If size < 1, Confidence_Norm generates an error.

If it is assumed that alpha equals 0.05, calculate the area under the standard normal curve that equals (1 – alpha), or 95 percent. This value is ± 1.96. The confidence interval is therefore

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Confidence_T(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the confidence interval for a population mean, using a Student's t distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Alpha - The significance level used to compute the confidence level. The confidence level equals 100*(1 - alpha)%, or in other words, an alpha of 0.05 indicates a 95 percent confidence level.

Arg2 Required Double Standard_dev - The population standard deviation for the data range; is assumed to be known.

Arg3 Required Double Size - The sample size.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, Confidence_T returns the #VALUE! error value.

If alpha ≤ 0 or alpha ≥ 1, Confidence_T returns the #NUM! error value.

If standard_dev ≤ 0, Confidence_T returns the #NUM! error value.

If size is not an integer, it is truncated.

If size equals 1, Confidence_T returns the #DIV/0! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Convert(self, Arg1, Arg2, Arg3) -> float:
    '''Converts a number from one measurement system to another. For example, Convert can translate a table of distances in miles to a table of distances in kilometers.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The value in from_units to convert.

Arg2 Required Variant The units for number.

Arg3 Required Variant The units for the result. Convert accepts the following text values (in quotation marks) for from_unit and to_unit, which are listed in the Remarks section.

#RETURN-VALUE: Double

#REMARKS:

The following abbreviated unit prefixes can be prepended to any metric from_unit or to_unit.

If the input data types are incorrect, Convert generates an error.

If the unit does not exist, Convert generates an error.

If the unit does not support an abbreviated unit prefix, Convert generates an error.

If the units are in different groups, Convert generates an error.

Unit names and prefixes are case-sensitive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Correl(self, Arg1, Arg2) -> float:
    '''Returns the correlation coefficient of the Arg1 and Arg2 cell ranges.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant A cell range of values.

Arg2 Required Variant A second cell range of values.

#RETURN-VALUE: Double

#REMARKS:

Use the correlation coefficient to determine the relationship between two properties. For example, you can examine the relationship between a location's average temperature and the use of air conditioners.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If Arg1 and Arg2 have a different number of data points, Correl generates an error.

If either Arg1 or Arg2 is empty, or if s (the standard deviation) of their values equals zero, Correl generates an error.

The equation for the correlation coefficient is as follows, where x and y are the sample means Average(Arg1) and Average(Arg2):

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Cosh(self, Arg1) -> float:
    '''Returns the hyperbolic cosine of a number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Any real number for which you want to find the hyperbolic cosine.

#RETURN-VALUE: Double

#REMARKS:

The formula for the hyperbolic cosine is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Cot(self, Arg1) -> float:
    '''Returns the cotangent of an angle.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The angle in radians for which you want the cotangent.

#RETURN-VALUE: Double
    '''

  def Coth(self, Arg1) -> float:
    '''Returns the hyperbolic cotangent of a number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The angle in radians for which you want the hyperbolic cotangent.

#RETURN-VALUE: Double
    '''

  def Count(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Counts the number of cells that contain numbers and counts numbers within the list of arguments.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant 1 to 30 arguments that can contain or refer to a variety of different types of data, but only numbers are counted.

#RETURN-VALUE: Double

#REMARKS:

Use Count to get the number of entries in a number field that is in a range or array of numbers.

Arguments that are numbers, dates, or text representation of numbers are counted.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

Arguments that are error values or text that cannot be translated into numbers are ignored.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

If you want to count logical values, text, or error values, use the CountA function.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CountA(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Counts the number of cells that are not empty and the values within the list of arguments.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant 1 to 30 arguments representing the values that you want to count.

#RETURN-VALUE: Double

#REMARKS:

Use CountA to count the number of cells that contain data in a range or array.

A value is any type of information, including error values and empty text (""). A value does not include empty cells.

If an argument is an array or reference, only values in that array or reference are used. Empty cells and text values in the array or reference are ignored.

If you don't need to count logical values, text, or error values, use the Count function.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CountBlank(self, Arg1) -> float:
    '''Counts empty cells in a specified range of cells.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range The range from which you want to count the blank cells.

#RETURN-VALUE: Double

#REMARKS:

Cells with formulas that return "" (empty text) are also counted. Cells with zero values are not counted.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CountIf(self, Arg1, Arg2) -> float:
    '''Counts the number of cells within a range that meet the given criteria.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range The range of cells from which you want to count cells.

Arg2 Required Variant The criteria in the form of a number, expression, cell reference, or text that defines which cells will be counted. For example, criteria can be expressed as 32, "32", ">32", "apples", or B4.

#RETURN-VALUE: Double

#REMARKS:

Use the wildcard characters, question mark (?) and asterisk (*), for the criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CountIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Counts the number of cells within a range that meet multiple criteria.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range One or more ranges in which to evaluate the associated criteria.

Arg2 – Arg30 Required Variant One or more criteria in the form of a number, expression, cell reference, or text that define which cells will be counted. For example, criteria can be expressed as 32, "32", ">32", "apples", or B4.

#RETURN-VALUE: Double

#REMARKS:

Each cell in a range is counted only if all of the corresponding criteria specified are True for that cell.

If a cell in any argument is an empty cell, CountIfs treats it as a 0 value.

Use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CoupDayBs(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the number of days from the beginning of the coupon period to the settlement date.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant The security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg4 Optional Variant The type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table contains the list of values for Arg4.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date that a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, 30 years after the January 1, 2008, issue date.

All arguments are truncated to integers.

If settlement or maturity is not a valid date, CoupDayBs generates an error.

If frequency is any number other than 1, 2, or 4, CoupDayBs generates an error.

If basis < 0 or if basis > 4, CoupDayBs generates an error.

If settlement ≥ maturity, CoupDayBs generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CoupDays(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the number of days in the coupon period that contain the settlement date.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant The security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg4 Optional Variant The type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table contains the values used in Arg4.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date is January 1, 2038, 30 years after the January 1, 2008 issue date.

All arguments are truncated to integers.

If settlement or maturity is not a valid date, CoupDays generates an error.

If frequency is any number other than 1, 2, or 4, CoupDays generates an error.

If basis < 0 or if basis > 4, CoupDays generates an error.

If settlement ≥ maturity, CoupDays generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CoupDaysNc(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the number of days from the settlement date to the next coupon date.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant The security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg4 Optional Variant The type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table contains the values used in Arg4.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

All arguments are truncated to integers.

If settlement or maturity is not a valid date, CoupDaysNc generates an error.

If frequency is any number other than 1, 2, or 4, CoupDaysNc generates an error.

If basis < 0 or if basis > 4, CoupDaysNc generates an error.

If settlement ≥ maturity, CoupDaysNc generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CoupNcd(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns a number that represents the next coupon date after the settlement date.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant The security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg4 Optional Variant The type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table contains the values used in Arg4.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

All arguments are truncated to integers.

If settlement or maturity is not a valid date, CoupNcd generates an error.

If frequency is any number other than 1, 2, or 4, CoupNcd generates an error.

If basis < 0 or if basis > 4, CoupNcd generates an error.

If settlement ≥ maturity, CoupNcd generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CoupNum(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant The security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg4 Optional Variant The type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table contains the values used in Arg4.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

All arguments are truncated to integers.

If settlement or maturity is not a valid date, CoupNum generates an error.

If frequency is any number other than 1, 2, or 4, CoupNum generates an error.

If basis < 0 or if basis > 4, CoupNum generates an error.

If settlement ≥ maturity, CoupNum generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CoupPcd(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant The security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant The number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg4 Optional Variant The type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table contains the values used in Arg4.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

All arguments are truncated to integers.

If settlement or maturity is not a valid date, CoupPcd generates an error.

If frequency is any number other than 1, 2, or 4, CoupPcd generates an error.

If basis < 0 or if basis > 4, CoupPcd generates an error.

If settlement ≥ maturity, CoupPcd generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Covar(self, Arg1, Arg2) -> float:
    '''Returns covariance, the average of the products of deviations for each data point pair.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The first cell range of integers.

Arg2 Required Variant The second cell range of integers.

#RETURN-VALUE: Double

#REMARKS:

Use covariance to determine the relationship between two data sets. For example, you can examine whether greater income accompanies greater levels of education.

The arguments must either be numbers or be names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If Arg1 and Arg2 have different numbers of data points, Covar generates an error.

If either Arg1 or Arg2 is empty, Covar generates an error.

The covariance is as follows, where x and y are the sample means AVERAGE(array1) and AVERAGE(array2), and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Covariance_P(self, Arg1, Arg2) -> float:
    '''Returns population covariance, the average of the products of deviations for each data point pair.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The first cell range of integers.

Arg2 Required Variant The second cell range of integers.

#RETURN-VALUE: Double

#REMARKS:

Use Covariance_P to determine the relationship between two data sets. For example, you can examine whether greater income accompanies greater levels of education.

The arguments must either be numbers or be names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If Arg1 and Arg2 have different numbers of data points, Covariance_P generates an error.

If either Arg1 or Arg2 is empty, Covariance_P generates an error.

The covariance is as follows, where x and y are the sample means AVERAGE(array1) and AVERAGE(array2), and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Covariance_S(self, Arg1, Arg2) -> float:
    '''Returns the sample covariance, the average of the products of deviations for each data point pair in two data sets.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array1 - The first cell range of integers.

Arg2 Required Variant Array2 - The second cell range of integers.

#RETURN-VALUE: Double

#REMARKS:

The arguments must either be numbers or be names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If array1 and array2 have different numbers of data points, Covariance_S returns the #N/A error value.

If either array1 or array2 is empty or contains only one data point each, Covariance_S returns the #DIV/0! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CritBinom(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The number of Bernoulli trials.

Arg2 Required Double The probability of a success on each trial.

Arg3 Required Double The criterion value.

#RETURN-VALUE: Double

#REMARKS:

Use this function for quality assurance applications. For example, use CritBinom to determine the greatest number of defective parts that are allowed to come off an assembly line run without rejecting the entire lot.

If any argument is nonnumeric, CritBinom generates an error.

If trials is not an integer, it is truncated.

If trials < 0, CritBinom generates an error.

If probability_s is < 0 or probability_s > 1, CritBinom generates an error.

If alpha < 0 or alpha > 1, CritBinom generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Csc(self, Arg1) -> float:
    '''Returns the cosecant of an angle.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The angle in radians for which you want the cosecant.

#RETURN-VALUE: Double
    '''

  def Csch(self, Arg1) -> float:
    '''Returns the hyperbolic cosecant of an angle.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The angle in radians for which you want the hyperbolic cosecant.

#RETURN-VALUE: Double
    '''

  def CumIPmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the cumulative interest paid on a loan between start_period and end_period.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The interest rate.

Arg2 Required Variant The total number of payment periods.

Arg3 Required Variant The present value.

Arg4 Required Variant The first period in the calculation. Payment periods are numbered beginning with 1.

Arg5 Required Variant The last period in the calculation.

Arg6 Required Variant The timing of the payment.

#RETURN-VALUE: Double

#REMARKS:

The following table lists values used in Arg6.

Make sure that you are consistent about the units that you use for specifying rate and nper. If you make monthly payments on a four-year loan at an annual interest rate of 12 percent, use 12%/12 for rate and 4*12 for Arg2. If you make annual payments on the same loan, use 12% for rate and 4 for Arg2.

Arg2, Arg4, Arg5, and type are truncated to integers.

If rate > 0, Arg2 > 0, or Arg3 > 0, CumIPmt generates an error.

If Arg4 < 1, Arg5 < 1, or Arg4 > Arg5, CumIPmt generates an error.

If Arg6 is any number other than 0 or 1, CumIPmt generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CumPrinc(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the cumulative principal paid on a loan between start_period and end_period.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The interest rate.

Arg2 Required Variant The total number of payment periods.

Arg3 Required Variant The present value.

Arg4 Required Variant The first period in the calculation. Payment periods are numbered beginning with 1.

Arg5 Required Variant The last period in the calculation.

Arg6 Required Variant The timing of the payment.

#RETURN-VALUE: Double

#REMARKS:

The following table lists values used in Arg6.

Make sure that you are consistent about the units that you use for specifying rate and nper. If you make monthly payments on a four-year loan at an annual interest rate of 12 percent, use 12%/12 for rate and 4*12 for Arg2. If you make annual payments on the same loan, use 12% for rate and 4 for Arg2.

Arg2, Arg4, Arg5, and type are truncated to integers.

If rate ≤ 0, Arg2 ≤ 0, or Arg3 ≤ 0, CumPrinc generates an error.

If Arg4 < 1, Arg5 < 1, or Arg4 > Arg5, CumPrinc generates an error.

If Arg6 is any number other than 0 or 1, CumPrinc generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DAverage(self, Arg1, Arg2, Arg3) -> float:
    '''Averages the values in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range The range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant The range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DCount(self, Arg1, Arg2, Arg3) -> float:
    '''Counts the cells that contain numbers in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as the argument includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DCountA(self, Arg1, Arg2, Arg3) -> float:
    '''Counts the nonblank cells in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DGet(self, Arg1, Arg2, Arg3) -> VBA_Variant:
    '''Extracts a single value from a column of a list or database that matches conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Variant

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DMax(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the largest number in a column of a list or database that matches conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DMin(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the smallest number in a column of a list or database that matches conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DProduct(self, Arg1, Arg2, Arg3) -> float:
    '''Multiplies the values in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database is the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria is the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DStDev(self, Arg1, Arg2, Arg3) -> float:
    '''Estimates the standard deviation of a population based on a sample by using the numbers in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DStDevP(self, Arg1, Arg2, Arg3) -> float:
    '''Calculates the standard deviation of a population based on the entire population by using the numbers in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - is the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DSum(self, Arg1, Arg2, Arg3) -> float:
    '''Adds the numbers in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DVar(self, Arg1, Arg2, Arg3) -> float:
    '''Estimates the variance of a population based on a sample by using the numbers in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DVarP(self, Arg1, Arg2, Arg3) -> float:
    '''Calculates the variance of a population based on the entire population by using the numbers in a column of a list or database that match conditions that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Database - the range of cells that makes up the list or database. A database is a list of related data in which rows of related information are records, and columns of data are fields. The first row of the list contains labels for each column.

Arg2 Required Variant Field - indicates which column is used in the function. Enter the column label enclosed between double quotation marks, such as "Age" or "Yield," or a number (without quotation marks) that represents the position of the column within the list: 1 for the first column, 2 for the second column, and so on.

Arg3 Required Variant Criteria - the range of cells that contains the conditions that you specify. Use any range for the criteria argument, as long as it includes at least one column label and at least one cell below the column label in which you specify a condition for the column.

#RETURN-VALUE: Double

#REMARKS:

Because the equal sign is used to indicate a formula when you type text or a value in a cell, Microsoft Excel evaluates what you type; however, this may cause unexpected filter results. To indicate an equality comparison operator for either text or a value, type the criteria as a string expression in the appropriate cell in the criteria range:

For example:

When filtering text data, Excel does not distinguish between uppercase and lowercase characters. However, you can use a formula to perform a case-sensitive search.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Days(self, Arg1, Arg2) -> float:
    '''Returns the number of days between two dates.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant start_date(Arg2) and end_date (Arg1) are the two dates between which you want to know the number of days.

Arg2 Required Variant start_date(Arg2) and end_date (Arg1) are the two dates between which you want to know the number of days.

#RETURN-VALUE: Double
    '''

  def Days360(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the number of days between two dates based on a 360-day year (twelve 30-day months), which is used in some accounting calculations.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg2 Required Variant The two dates between which you want to know the number of days. If start_date (Arg1) occurs after end_date (Arg2), Days360 returns a negative number. Dates should be entered by using the DATE function, or as results of other formulas or functions.

Arg3 Optional Variant A Boolean value that specifies whether to use the U.S. or European method in the calculation.

#RETURN-VALUE: Double

#REMARKS:

Use this function to help compute payments if your accounting system is based on twelve 30-day months.

The following table contains the values for Arg3.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Db(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the depreciation of an asset for a specified period using the fixed-declining balance method.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Cost - the initial cost of the asset.

Arg2 Required Double Salvage - the value at the end of the depreciation (sometimes called the salvage value of the asset).

Arg3 Required Double Life - the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).

Arg4 Required Double Period - the period for which you want to calculate the depreciation. Period must use the same units as life.

Arg5 Optional Variant Month - the number of months in the first year. If month is omitted, it is assumed to be 12.

#RETURN-VALUE: Double

#REMARKS:

The fixed-declining balance method computes depreciation at a fixed rate. Db uses the following formulas to calculate depreciation for a period:

Depreciation for the first and last periods is a special case. For the first period, Db uses this formula:

For the last period, Db uses this formula:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Dbcs(self, Arg1) -> str:
    '''Converts half-width (single-byte) letters within a character string to full-width (double-byte) characters. The name of the function (and the characters that it converts) depends upon the language settings. Read/write String.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String The text or a reference to a cell that contains the text that you want to change.

#RETURN-VALUE: String
    '''

  def Ddb(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the depreciation of an asset for a specified period by using the double-declining balance method or some other method that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Cost - the initial cost of the asset.

Arg2 Required Double Salvage - the value at the end of the depreciation (sometimes called the salvage value of the asset). This value can be 0.

Arg3 Required Double Life - the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).

Arg4 Required Double Period - the period for which you want to calculate the depreciation. Period must use the same units as life.

Arg5 Optional Variant Factor - the rate at which the balance declines. If factor is omitted, it is assumed to be 2 (the double-declining balance method).

#RETURN-VALUE: Double

#REMARKS:

The double-declining balance method computes depreciation at an accelerated rate. Depreciation is highest in the first period and decreases in successive periods. Ddb uses the following formula to calculate depreciation for a period:

Change factor if you don't want to use the double-declining balance method.

Use the VDB function if you want to switch to the straight-line depreciation method when depreciation is greater than the declining balance calculation.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Dec2Bin(self, Arg1, Arg2) -> str:
    '''Converts a decimal number to binary.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the decimal integer that you want to convert. If number is negative, valid place values are ignored and Dec2Bin returns a 10-character (10-bit) binary number in which the most significant bit is the sign bit. The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant Places - the number of characters to use. If places is omitted, Dec2Bin uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number < -512 or if number > 511, Dec2Bin returns the #NUM! error value.

If number is nonnumeric, Dec2Bin returns the #VALUE! error value.

If Dec2Bin requires more than places characters, it returns the #NUM! error value.

If places is not an integer, it is truncated.

If places is nonnumeric, Dec2Bin returns the #VALUE! error value.

If places is zero or negative, Dec2Bin returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Dec2Hex(self, Arg1, Arg2) -> str:
    '''Converts a decimal number to hexadecimal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the decimal integer that you want to convert. If number is negative, places is ignored and Dec2Hex returns a 10-character (40-bit) hexadecimal number in which the most significant bit is the sign bit. The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant Places - the number of characters to use. If places is omitted, Dec2Hex uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number < -549,755,813,888 or if number > 549,755,813,887, Dec2Hex returns the #NUM! error value.

If number is nonnumeric, Dec2Hex returns the #VALUE! error value.

If Dec2Hex requires more than places characters, it returns the #NUM! error value.

If places is not an integer, it is truncated.

If places is nonnumeric, Dec2Hex returns the #VALUE! error value.

If places is negative, Dec2Hex returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Dec2Oct(self, Arg1, Arg2) -> str:
    '''Converts a decimal number to octal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the decimal integer that you want to convert. If number is negative, places is ignored and Dec2Oct returns a 10-character (30-bit) octal number in which the most significant bit is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant Places - the number of characters to use. If places is omitted, Dec2Oct uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number < -536,870,912 or if number > 536,870,911, Dec2Oct returns the #NUM! error value.

If number is nonnumeric, Dec2Oct returns the #VALUE! error value.

If Dec2Oct requires more than places characters, it returns the #NUM! error value.

If places is not an integer, it is truncated.

If places is nonnumeric, Dec2Oct returns the #VALUE! error value.

If places is negative, Dec2Oct returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Decimal(self, Arg1, Arg2) -> float:
    '''Converts a text representation of a number in a given base into a decimal number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String The number that you want to convert.

Arg2 Required Double The base radix of the number that you are converting.

#RETURN-VALUE: Double
    '''

  def Degrees(self, Arg1) -> float:
    '''Converts radians into degrees.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Angle - the angle in radians that you want to convert.

#RETURN-VALUE: Double
    '''

  def Delta(self, Arg1, Arg2) -> float:
    '''Tests whether two values are equal. Returns 1 if number1 = number2; otherwise, returns 0.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number1 - the first number.

Arg2 Optional Variant Number2 - the second number. If omitted, number2 is assumed to be zero.

#RETURN-VALUE: Double

#REMARKS:

Use this function to filter a set of values. For example, by summing several DELTA functions, you calculate the count of equal pairs. This function is also known as the Kronecker Delta function.

If number1 is nonnumeric, Delta returns the #VALUE! error value.

If number2 is nonnumeric, Delta returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DevSq(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the sum of squares of deviations of data points from their sample mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 arguments for which you want to calculate the sum of squared deviations. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

The equation for the sum of squared deviations is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Disc(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the discount rate for a security.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Pr - the security's price per $100 face value.

Arg4 Required Variant Redemption - the security's redemption value per $100 face value.

Arg5 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, 30 years after the January 1, 2008, issue date.

Settlement, maturity, and basis are truncated to integers.

If settlement or maturity is not a valid serial date number, Disc returns the #VALUE! error value.

If pr ≤ 0 or if redemption ≤ 0, Disc returns the #NUM! error value.

If basis < 0 or if basis > 4, Disc returns the #NUM! error value.

If settlement ≥ maturity, Disc returns the #NUM! error value.

Disc is calculated as follows, where B = number of days in a year, depending on the year basis, and DSM = number of days between settlement and maturity:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Dollar(self, Arg1, Arg2) -> str:
    '''The function described in this Help topic converts a number to text format and applies a currency symbol. The name of the function (and the symbol that it applies) depends upon your language settings.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - a number, a reference to a cell containing a number, or a formula that evaluates to a number.

Arg2 Optional Variant Decimals - the number of digits to the right of the decimal point. If decimals is negative, number is rounded to the left of the decimal point. If you omit decimals, it is assumed to be 2.

#RETURN-VALUE: String

#REMARKS:

The major difference between formatting a cell that contains a number with the Cells command (Format menu) and formatting a number directly with the Dollar function is that Dollar converts its result to text. A number formatted with the Cells command is still a number. You can continue to use numbers formatted with Dollar in formulas because Microsoft Excel converts numbers entered as text values to numbers when it calculates.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DollarDe(self, Arg1, Arg2) -> float:
    '''Converts a dollar price expressed as a fraction into a dollar price expressed as a decimal number. Use DollarDe to convert fractional dollar numbers, such as securities prices, to decimal numbers.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Fractional_dollar - a number expressed as a fraction.

Arg2 Required Variant Fraction - the integer to use in the denominator of the fraction.

#RETURN-VALUE: Double

#REMARKS:

If fraction is not an integer, it is truncated.

If fraction is less than 0, DollarDe returns the #NUM! error value.

If fraction is 0, DollarDe returns the #DIV/0! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def DollarFr(self, Arg1, Arg2) -> float:
    '''Converts a dollar price expressed as a decimal number into a dollar price expressed as a fraction. Use DollarFr to convert decimal numbers to fractional dollar numbers, such as securities prices.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Decimal_dollar - a decimal number.

Arg2 Required Variant Fraction - the integer to use in the denominator of a fraction.

#RETURN-VALUE: Double

#REMARKS:

If fraction is not an integer, it is truncated.

If fraction is less than 0, DollarFr returns the #NUM! error value.

If fraction is 0, DollarFr returns the #DIV/0! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Dummy19(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def Dummy21(self, Arg1, Arg2):  pass

  def Duration(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the Macauley duration for an assumed par value of $100. Duration is defined as the weighted average of the present value of the cash flows and is used as a measure of a bond price's response to changes in yield.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Coupon - the security's annual coupon rate.

Arg4 Required Variant Yld - the security's annual yield.

Arg5 Required Variant Frequency - the number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg6 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg6.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, frequency, and basis are truncated to integers.

If settlement or maturity is not a valid date, Duration returns the #VALUE! error value.

If coupon < 0 or if yld < 0, Duration returns the #NUM! error value.

If frequency is any number other than 1, 2, or 4, Duration returns the #NUM! error value.

If basis < 0 or if basis > 4, Duration returns the #NUM! error value.

If settlement ≥ maturity, Duration returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def EDate(self, Arg1, Arg2) -> float:
    '''Returns the serial number that represents the date that is the indicated number of months before or after a specified date (the start_date). Use EDate to calculate maturity dates or due dates that fall on the same day of the month as the date of issue.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Start_date - a date that represents the start date. Dates should be entered by using the DATE function, or as results of other formulas or functions. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.

Arg2 Required Variant Months - the number of months before or after start_date. A positive value for months yields a future date; a negative value yields a past date.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

If start_date is not a valid date, EDate returns the #VALUE! error value.

If months is not an integer, it is truncated.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Effect(self, Arg1, Arg2) -> float:
    '''Returns the effective annual interest rate, given the nominal annual interest rate and the number of compounding periods per year.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Nominal_rate - the nominal interest rate.

Arg2 Required Variant Npery - the number of compounding periods per year.

#RETURN-VALUE: Double

#REMARKS:

Npery is truncated to an integer.

If either argument is nonnumeric, Effect returns the #VALUE! error value.

If nominal_rate ≤ 0 or if npery < 1, Effect returns the #NUM! error value.

Effect is calculated as follows:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def EncodeURL(self, Arg1):  pass

  def EoMonth(self, Arg1, Arg2) -> float:
    '''Returns the serial number for the last day of the month that is the indicated number of months before or after start_date. Use EoMonth to calculate maturity dates or due dates that fall on the last day of the month.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Start_date - a date that represents the starting date. Dates should be entered by using the DATE function, or as results of other formulas or functions. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.

Arg2 Required Variant Months - the number of months before or after start_date. A positive value for months yields a future date; a negative value yields a past date.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

If start_date is not a valid date, EoMonth returns the #NUM! error value.

If start_date plus months yields an invalid date, EoMonth returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Erf(self, Arg1, Arg2) -> float:
    '''Returns the error function integrated between lower_limit and upper_limit.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Lower_limit - the lower bound for integrating Erf.

Arg2 Optional Variant Upper_limit - the upper bound for integrating Erf. If omitted, Erf integrates between zero and lower_limit.

#RETURN-VALUE: Double

#REMARKS:

If lower_limit is nonnumeric, Erf returns the #VALUE! error value.

If lower_limit is negative, Erf returns the #NUM! error value.

If upper_limit is nonnumeric, Erf returns the #VALUE! error value.

If upper_limit is negative, Erf returns the #NUM! error value.





Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ErfC(self, Arg1) -> float:
    '''Returns the complementary Erf function integrated between the specified parameter and infinity.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The first argument.

Arg2 Optional Variant The second argument.

#RETURN-VALUE: Double

#REMARKS:

If this function is not available, and returns the #NAME? error, you need to install and load the Analysis ToolPak add-in.

If the parameter is nonnumeric, ErfC returns the #VALUE! error value.

If the parameter is negative, ErfC returns the #NUM! error value.

The following example displays the complementary Erf function of 1 (0.1573).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example displays the complementary Erf function of 1 (0.1573).

=ERFC(1)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ErfC_Precise(self, Arg1) -> float:
    '''Returns the complementary error function integrated between the specified value and infinity.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant The value to compute against.

#RETURN-VALUE: Double

#REMARKS:

If the specified value is nonnumeric, ErfC_Precise generates an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Erf_Precise(self, Arg1) -> float:
    '''Returns the error function integrated between zero and lower_limit.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Lower_limit - the lower bound for integrating Erf.

#RETURN-VALUE: Double

#REMARKS:

If lower_limit is nonnumeric, Erf_Precise generates an error.

If lower_limit is negative, Erf_Precise generates an error.



Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Even(self, Arg1) -> float:
    '''Returns number rounded up to the nearest even integer. Use this function for processing items that come in twos. For example, a packing crate accepts rows of one or two items. The crate is full when the number of items, rounded up to the nearest two, matches the crate's capacity.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the value to round.

#RETURN-VALUE: Double

#REMARKS:

If number is nonnumeric, Even returns the #VALUE! error value.

Regardless of the sign of number, a value is rounded up when adjusted away from zero. If number is an even integer, no rounding occurs.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ExponDist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the exponential distribution. Use ExponDist to model the time between events, such as how long an automated bank teller takes to deliver cash. For example, you can use ExponDist to determine the probability that the process takes at most 1 minute.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value of the function.

Arg2 Required Double Lambda - the parameter value.

Arg3 Required Boolean Cumulative - a logical value that indicates which form of the exponential function to provide. If cumulative is True, ExponDist returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

If x or lambda is nonnumeric, ExponDist returns the #VALUE! error value.

If x < 0, ExponDist returns the #NUM! error value.

If lambda ≤ 0, ExponDist returns the #NUM! error value.

The equation for the probability density function is  

The equation for the cumulative distribution function is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Expon_Dist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the exponential distribution. Use Expon_Dist to model the time between events, such as how long an automated bank teller takes to deliver cash. For example, you can use Expon_Dist to determine the probability that the process takes at most 1 minute.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value of the function.

Arg2 Required Double Lambda - the parameter value.

Arg3 Required Boolean Cumulative - a logical value that indicates which form of the exponential function to provide. If cumulative is True, EXPONDIST returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

If x or lambda is nonnumeric, Expon_Dist returns the #VALUE! error value.

If x < 0, Expon_Dist returns the #NUM! error value.

If lambda ≤ 0, Expon_Dist returns the #NUM! error value.

The equation for the probability density function is  

The equation for the cumulative distribution function is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FDist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the F probability distribution. Use this function to determine whether two data sets have different degrees of diversity. For example, you can examine the test scores of men and women entering high school and determine if the variability in the females is different from that found in the males.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value at which to evaluate the function.

Arg2 Required Double Degrees_freedom1 - the numerator degrees of freedom.

Arg3 Required Double Degrees_freedom2 - the denominator degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, FDist returns the #VALUE! error value.

If x is negative, FDist returns the #NUM! error value.

If degrees_freedom1 or degrees_freedom2 is not an integer, it is truncated.

If degrees_freedom1 < 1 or degrees_freedom1 ≥ 10^10, FDist returns the #NUM! error value.

If degrees_freedom2 < 1 or degrees_freedom2 ≥ 10^10, FDist returns the #NUM! error value.

FDist is calculated as FDIST=P( F>x ), where F is a random variable that has an F distribution with degrees_freedom1 and degrees_freedom2 degrees of freedom.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FInv(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the F probability distribution. If p = FDIST(x,...), then FINV(p,...) = x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - a probability associated with the F cumulative distribution.

Arg2 Required Double Degrees_freedom1 - the numerator degrees of freedom.

Arg3 Required Double Degrees_freedom2 - is the denominator degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

The F distribution can be used in an F-test that compares the degree of variability in two data sets. For example, you can analyze income distributions in the United States and Canada to determine whether the two countries have a similar degree of income diversity.

If any argument is nonnumeric, FInv returns the #VALUE! error value.

If probability < 0 or probability > 1, FInv returns the #NUM! error value.

If degrees_freedom1 or degrees_freedom2 is not an integer, it is truncated.

If degrees_freedom1 < 1 or degrees_freedom1 ≥ 10^10, FInv returns the #NUM! error value.

If degrees_freedom2 < 1 or degrees_freedom2 ≥ 10^10, FInv returns the #NUM! error value.

FInv can be used to return critical values from the F distribution. For example, the output of an ANOVA calculation often includes data for the F statistic, F probability, and F critical value at the 0.05 significance level. To return the critical value of F, use the significance level as the probability argument to FInv.

Given a value for probability, FInv seeks that value x such that FDIST(x, degrees_freedom1, degrees_freedom2) = probability. Thus, precision of FInv depends on precision of FDist. FInv uses an iterative search technique. If the search has not converged after 64 iterations, the function returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FTest(self, Arg1, Arg2) -> float:
    '''Returns the result of an F-test. An F-test returns the two-tailed probability that the variances in array1 and array2 are not significantly different. Use this function to determine whether two samples have different variances. For example, given test scores from public and private schools, you can test whether these schools have different levels of test score diversity.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array1 - the first array or range of data.

Arg2 Required Variant Array2 - the second array or range of data.

#RETURN-VALUE: Double

#REMARKS:

The arguments must be either numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If the number of data points in array1 or array2 is less than 2, or if the variance of array1 or array2 is zero, FTest returns the #DIV/0! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FVSchedule(self, Arg1, Arg2) -> float:
    '''Returns the future value of an initial principal after applying a series of compound interest rates. Use FVSchedule to calculate the future value of an investment with a variable or adjustable rate.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Principal - the present value.

Arg2 Required Variant Schedule - an array of interest rates to apply.

#RETURN-VALUE: Double

#REMARKS:

The values in schedule can be numbers or blank cells; any other value produces the #VALUE! error value for FVSchedule. Blank cells are taken as zeros (no interest).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def F_Dist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the F probability distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The value at which to evaluate the function.

Arg2 Required Double Deg_freedom1 - The numerator degrees of freedom.

Arg3 Required Double Deg_freedom2 - The denominator degrees of freedom.

Arg4 Optional Variant Cumulative - A logical value that determines the form of the function. If cumulative is True, F_DIST returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, F_Dist returns the #VALUE! error value.

If x is negative, F_Dist returns the #NUM! error value.

If deg_freedom1 or deg_freedom2 is not an integer, it is truncated.

If deg_freedom1 < 1, F_Dist returns the #NUM! error value.

If deg_freedom < 1, F_Dist returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def F_Dist_RT(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the right-tailed F probability distribution. Use this function to determine whether two data sets have different degrees of diversity. For example, you can examine the test scores of men and women entering high school and determine if the variability in the females is different from that found in the males.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value at which to evaluate the function.

Arg2 Required Double Degrees_freedom1 - the numerator degrees of freedom.

Arg3 Required Double Degrees_freedom2 - the denominator degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, F_Dist_RT returns the #VALUE! error value.

If x is negative, F_Dist_RT returns the #NUM! error value.

If degrees_freedom1 or degrees_freedom2 is not an integer, it is truncated.

If degrees_freedom1 < 1 or degrees_freedom1 ≥ 10^10, F_Dist_RT returns the #NUM! error value.

If degrees_freedom2 < 1 or degrees_freedom2 ≥ 10^10, F_Dist_RT returns the #NUM! error value.

F_Dist_RT is calculated as F_DIST_RT=P( F>x ), where F is a random variable that has an F distribution with degrees_freedom1 and degrees_freedom2 degrees of freedom.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def F_Inv(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the F probability distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - A probability associated with the F cumulative distribution.

Arg2 Required Double Deg_freedom1 - The numerator degrees of freedom.

Arg3 Required Double Deg_freedom2 - The denominator degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, F_Inv returns the #VALUE! error value.

If probability < 0 or probability > 1, F_Inv returns the #NUM! error value.

If deg_freedom1 or deg_freedom2 is not an integer, it is truncated.

If deg_freedom1 < 1, or deg_freedom2 < 1, F_Inv returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def F_Inv_RT(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the right-tailed F probability distribution. If p = F_DIST_RT(x,...), then F_INV_RT(p,...) = x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - a probability associated with the F cumulative distribution.

Arg2 Required Double Degrees_freedom1 - the numerator degrees of freedom.

Arg3 Required Double Degrees_freedom2 - the denominator degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

The F distribution can be used in an F-test that compares the degree of variability in two data sets. For example, you can analyze income distributions in the United States and Canada to determine whether the two countries have a similar degree of income diversity.

If any argument is nonnumeric, F_Inv_RT returns the #VALUE! error value.

If probability < 0 or probability > 1, F_Inv_RT returns the #NUM! error value.

If degrees_freedom1 or degrees_freedom2 is not an integer, it is truncated.

If degrees_freedom1 < 1 or degrees_freedom1 ≥ 10^10, F_Inv_RT returns the #NUM! error value.

If degrees_freedom2 < 1 or degrees_freedom2 ≥ 10^10, F_Inv_RT returns the #NUM! error value.

F_Inv_RT can be used to return critical values from the F distribution. For example, the output of an ANOVA calculation often includes data for the F statistic, F probability, and F critical value at the 0.05 significance level. To return the critical value of F, use the significance level as the probability argument to F_Inv_RT.

Given a value for probability, F_Inv_RT seeks that value x such that F_DIST_RT(x, degrees_freedom1, degrees_freedom2) = probability. Thus, precision of F_Inv_RT depends on precision of F_Dist_RT. F_Inv_RT uses an iterative search technique. If the search has not converged after 64 iterations, the function returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def F_Test(self, Arg1, Arg2) -> float:
    '''Returns the result of an F-test. An F-test returns the two-tailed probability that the variances in array1 and array2 are not significantly different. Use this function to determine whether two samples have different variances. For example, given test scores from public and private schools, you can test whether these schools have different levels of test score diversity.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array1 - the first array or range of data.

Arg2 Required Variant Array2 - the second array or range of data.

#RETURN-VALUE: Double

#REMARKS:

The arguments must be either numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If the number of data points in array1 or array2 is less than 2, or if the variance of array1 or array2 is zero, F_Test returns the #DIV/0! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Fact(self, Arg1) -> float:
    '''Returns the factorial of a number. The factorial of a number is equal to 1*2*3*...* number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the nonnegative number that you want the factorial of. If number is not an integer, it is truncated.

#RETURN-VALUE: Double
    '''

  def FactDouble(self, Arg1) -> float:
    '''Returns the double factorial of a number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the value for which to return the double factorial. If number is not an integer, it is truncated.

#RETURN-VALUE: Double

#REMARKS:

If number is nonnumeric, FactDouble returns the #VALUE! error value.

If number is negative, FactDouble returns the #NUM! error value.

If number is even:  

If number is odd:  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FieldValue(self, Arg1, Arg2):  pass

  def Filter(self, Arg1, Arg2, Arg3):  pass

  def FilterXML(self, Arg1, Arg2) -> VBA_Variant:
    '''Gets specific data from the returned XML, typically from a WebService function call.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Valid XML string.

Arg2 Required String XPath query string.

#RETURN-VALUE: Variant

#REMARKS:

The XPath parameter is limited to 1024 characters.

The FilterXML function returns results that are parsed via the user specified data locale.

Variant

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Find(self, Arg1, Arg2, Arg3) -> float:
    '''Finds specific information on a worksheet.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String The name of the worksheet.

Arg2 Required String The name of the range.

Arg3 Optional Variant The name of an argument to refine the search.

#RETURN-VALUE: Double
    '''

  def FindB(self, Arg1, Arg2, Arg3) -> float:
    '''Find and FindB locate one text string within a second text string, and return the number of the starting position of the first text string from the first character of the second text string.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Find_text - the text you want to find.

Arg2 Required String Within_text - the text containing the text that you want to find.

Arg3 Optional Variant Start_num - specifies the character at which to start the search. The first character in within_text is character number 1. If you omit start_num, it is assumed to be 1.

#RETURN-VALUE: Double

#REMARKS:

Find is intended for use with languages that use the single-byte character set (SBCS), whereas FindB is intended for use with languages that use the double-byte character set (DBCS). The default language setting on your computer affects the return value in the following way:

Find and FindB are case-sensitive and don't allow wildcard characters. If you don't want to do a case-sensitive search or use wildcard characters, you can use Search and SearchB.

If find_text is "" (empty text), Find matches the first character in the search string (that is, the character numbered start_num or 1).

Find_text cannot contain any wildcard characters.

If find_text does not appear in within_text, Find and FindB return the #VALUE! error value.

If start_num is not greater than zero, Find and FindB return the #VALUE! error value.

If start_num is greater than the length of within_text, Find and FindB return the #VALUE! error value.

Use start_num to skip a specified number of characters. Using Find as an example, suppose you are working with the text string AYF0093.YoungMensApparel. To Find the number of the first "Y" in the descriptive part of the text string, set start_num equal to 8 so that the serial-number portion of the text is not searched. Find begins with character 8, finds find_text at the next character, and returns the number 9.

Find always returns the number of characters from the start of within_text, counting the characters that you skip if start_num is greater than 1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Fisher(self, Arg1) -> float:
    '''Returns the Fisher transformation at x. This transformation produces a function that is normally distributed rather than skewed. Use this function to perform hypothesis testing on the correlation coefficient.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double x - a numeric value for which you want the transformation.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, Fisher returns the #VALUE! error value.

If x ≤ -1 or if x ≥ 1, Fisher returns the #NUM! error value.

The equation for the Fisher transformation is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def FisherInv(self, Arg1) -> float:
    '''Returns the inverse of the Fisher transformation. Use this transformation when analyzing correlations between ranges or arrays of data. If y = FISHER(x), then FISHERINV(y) = x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double y - the value for which you want to perform the inverse of the transformation.

#RETURN-VALUE: Double

#REMARKS:

If y is nonnumeric, FisherInv returns the #VALUE! error value.

The equation for the inverse of the Fisher transformation is

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Fixed(self, Arg1, Arg2, Arg3) -> str:
    '''Rounds a number to the specified number of decimals, formats the number in decimal format using a period and commas, and returns the result as text.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the number you want to round and convert to text.

Arg2 Optional Variant Decimals - the number of digits to the right of the decimal point.

Arg3 Optional Variant No_commas - a logical value that, if True, prevents Fixed from including commas in the returned text.

#RETURN-VALUE: String

#REMARKS:

Numbers in Microsoft Excel can never have more than 15 significant digits, but decimals can be as large as 127.

If decimals is negative, number is rounded to the left of the decimal point.

If you omit decimals, it is assumed to be 2.

If no_commas is False or omitted, the returned text includes commas as usual.

The major difference between formatting a cell containing a number with the Cells command (Format menu) and formatting a number directly with the Fixed function is that Fixed converts its result to text. A number formatted with the Cells command is still a number.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Floor(self, Arg1, Arg2) -> float:
    '''Rounds number down, toward zero, to the nearest multiple of significance.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the numeric value that you want to round.

Arg2 Required Double Significance - the multiple to which you want to round.

#RETURN-VALUE: Double

#REMARKS:

As long as the number and specified significance have the same sign, Floor rounds towards zero to the nearest multiple of significance.

If either argument is nonnumeric, Floor returns the #VALUE! error value.

Excel allows positive and negative multiples of significance with negative numbers. In those cases, if the significance is positive, Floor rounds away from zero. Otherwise, if significance is negative, Floor rounds towards zero.

For positive numbers with negative multiples of significance, Excel returns the #NUM! error value.

If number is an exact multiple of significance, no rounding occurs.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Floor_Math(self, Arg1, Arg2, Arg3) -> float:
    '''Rounds a number down, to the nearest integer or to the nearest multiple of significance.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The value that you want to round.

Arg2 Optional Variant The multiple to which you want to round.

Arg3 Optional Variant When given a nonzero number, this function will round towards zero.

#RETURN-VALUE: Double
    '''

  def Floor_Precise(self, Arg1, Arg2) -> float:
    '''Rounds the specified number to the nearest multiple of significance.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the numeric value that you want to round.

Arg2 Optional Variant Significance - the multiple to which you want to round.

#RETURN-VALUE: Double

#REMARKS:

Depending on the sign of the number and significance arguments, the Floor_Precise method rounds either away from or towards zero.

If either argument is nonnumeric, the Floor_Precise method generates an error.

If number is an exact multiple of significance, no rounding occurs.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Forecast(self, Arg1, Arg2, Arg3) -> float:
    '''Calculates, or predicts, a future value by using existing values. The predicted value is a y-value for a given x-value. The known values are existing x-values and y-values, and the new value is predicted by using linear regression. Use this function to predict future sales, inventory requirements, or consumer trends.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double x - the data point for which you want to predict a value.

Arg2 Required Variant known_y's - the dependent array or range of data.

Arg3 Required Variant known_x's - the independent array or range of data.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, Forecast returns the #VALUE! error value.

If known_y's and known_x's are empty or contain a different number of data points, Forecast returns the #N/A error value.

If the variance of known_x's equals zero, Forecast returns the #DIV/0! error value.

The equation for FORECAST is a+bx, where      and      and where x and y are the sample means AVERAGE(known_x's) and AVERAGE(known_y's).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Forecast_ETS(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Calculates or predicts a future value based on existing (historical) values by using the AAA version of the Exponential Smoothing (ETS) algorithm.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Target Date: the data point for which you want to predict a value. Target date can be date/time or numeric. See Remarks.

Arg2 Required Variant Values: the historical values, for which you want to forecast the next points.

Arg3 Required Variant Timeline: the independent array or range of dates or numeric data. The values in the timeline must have a consistent step between them and can't be zero. See Remarks.

Arg4 Optional Variant Seasonality: A numeric value. See Remarks.

Arg5 Optional Variant Data completions: Although the timeline requires a constant step between data points, Forecast_ETS supports up to 30% missing data, and automatically adjusts for it. See Remarks.

Arg6 Optional Variant Aggregation: Although the timeline requires a constant step between data points, Forecast_ETS aggregates multiple points that have the same time stamp. See Remarks.

#RETURN-VALUE: Double

#REMARKS:

The predicted value is a continuation of the historical values in the specified target date, which should be a continuation of the timeline. Use this function to predict future sales, inventory requirements, or consumer trends.

If the target date parameter value (Arg1) is chronologically before the end of the historical timeline, Forecast_ETS returns an error.

It isn't necessary to sort the timeline (Arg3), because Forecast_ETS sorts it implicitly for calculations. If Forecast_ETS can't identify a constant step in the timeline, it returns run-time error 1004. If the timeline contains duplicate values, Forecast_ETS also returns an error. If the ranges of the timeline and values aren't all of the same size, Forecast_ETS returns run-time error 1004.

The default value of 1 for seasonality (Arg4) means Excel detects seasonality automatically for the forecast and uses positive, whole numbers for the length of the seasonal pattern. 0 indicates no seasonality, meaning the prediction will be linear. Positive whole numbers indicate to the algorithm to use patterns of this length as the seasonality. For any other value, Forecast_ETS returns an error. Maximum supported seasonality is 8,760 (the number of hours in a year). Any seasonality value above that number results in an error.

Passing 0 for the data completions parameter (Arg5) instructs the algorithm to account for missing points as zeros. The default value of 1 accounts for missing points by computing them to be the average of the neighboring points. If there is more than 30% missing data, Forecast_ETS returns run-time error 1004.

The aggregation parameter (Arg6) is a numeric value specifying the method to use to aggregate several values that have the same time stamp. The default value of 0 specifies AVERAGE, while other numbers between 1 and 6 specify SUM, COUNT, COUNTA, MIN, MAX, and MEDIAN.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Forecast_ETS_ConfInt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> float:
    '''Returns a confidence interval for the forecast value at the specified target date.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Target Date: the data point for which you want to predict a value. Target date can be date/time or numeric. See Remarks.

Arg2 Required Variant Values: the historical values, for which you want to forecast the next points.

Arg3 Required Variant Timeline: the independent array or range of dates or numeric data. The values in the timeline must have a consistent step between them and can't be zero. See Remarks.

Arg4 Optional Variant Confidence level: A numerical value between 0 and 1 (exclusive), indicating a confidence level for the calculated confidence interval. See Remarks.

Arg5 Optional Variant Seasonality: A numeric value. See Remarks.

Arg6 Optional Variant Data completions: Although the timeline requires a constant step between data points, Forecast_ETS_ConfInt supports up to 30% missing data, and automatically adjusts for it. See Remarks.

Arg7 Optional Variant Aggregation: Although the timeline requires a constant step between data points, Forecast_ETS_ConfInt aggregates multiple points that have the same time stamp. See Remarks.

#RETURN-VALUE: Double

#REMARKS:

It'sn't necessary to sort the timeline (Arg3), because Forecast_ETS_ConfInt sorts it implicitly for calculations. If Forecast_ETS_ConfInt can't identify a constant step in the timeline, it returns run-time error 1004. If the timeline contains duplicate values, Forecast_ETS_ConfInt also returns an error. If the ranges of the timeline and values aren't all of the same size, Forecast_ETS_ConfInt returns run-time error 1004.

A confidence interval (Arg4) of 95% means that 95% of future points are expected to fall within this radius from the result that Forecast_ETS forecasted (with normal distribution). Using confidence intervals can help you grasp the accuracy of the predicted model. A smaller interval implies more confidence in the prediction for this specific point.

For example, for a 90% confidence interval, a 90% confidence level is computed (90% of future points are to fall within this radius from prediction). The default value is 95%. For numbers outside of the range (0,1), Forecast_ETS_ConfInt returns an error.

The default value of 1 for seasonality (Arg5) means Excel detects seasonality automatically for the forecast and uses positive, whole numbers for the length of the seasonal pattern. 0 indicates no seasonality, meaning the prediction will be linear. Positive whole numbers indicate to the algorithm to use patterns of this length as the seasonality. For any other value, Forecast_ETS_ConfInt returns an error. Maximum supported seasonality is 8,760 (the number of hours in a year). Any seasonality value above that number results in an error.

Passing 0 for the data completions parameter (Arg6) instructs the algorithm to account for missing points as zeros. The default value of 1 accounts for missing points by computing them to be the average of the neighboring points. If there is more than 30% missing data, Forecast_ETS_ConfInt returns run-time error 1004.

The aggregation parameter (Arg7) is a numeric value specifying the method to use to aggregate several values that have the same time stamp. The default value of 0 specifies AVERAGE, while other numbers between 1 and 6 specify SUM, COUNT, COUNTA, MIN, MAX, and MEDIAN.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Forecast_ETS_STAT(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns a statistical value as a result of time series forecasting.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Values: the historical values, for which you want to forecast the next points.

Arg2 Required Variant Timeline: the independent array or range of dates or numeric data. The values in the timeline must have a consistent step between them and can't be zero. See Remarks.

Arg3 Required Double Statistic_type: A numeric value between 1 and 8, indicating which statistic will be returned for the calculated forecast.

Arg4 Optional Variant Confidence level: A numerical value between 0 and 1 (exclusive), indicating a confidence level for the calculated confidence interval. See Remarks.

Arg5 Optional Variant Data completions: Although the timeline requires a constant step between data points, Forecast_ETS_STAT supports up to 30% missing data, and automatically adjusts for it. See Remarks.

Arg6 Optional Variant Aggregation: Although the timeline requires a constant step between data points, Forecast_ETS_STAT aggregates multiple points that have the same time stamp. See Remarks.

#RETURN-VALUE: Double

#REMARKS:

It'sn't necessary to sort the timeline (Arg2), because Forecast_ETS_STAT sorts it implicitly for calculations. If Forecast_ETS_STAT can't identify a constant step in the timeline, it returns run-time error 1004. If the timeline contains duplicate values, Forecast_ETS_STAT also returns an error. If the ranges of the timeline and values aren't all of the same size, Forecast_ETS_STAT returns run-time error 1004.

The statistic_type parameter (Arg3) indicates which statistic is requested by this function. The following optional statistics can be returned:

A confidence interval (Arg4) of 95% means that 95% of future points are expected to fall within this radius from the result that Forecast_ETS forecasted (with normal distribution). Using confidence intervals can help you grasp the accuracy of the predicted model. A smaller interval implies more confidence in the prediction for this specific point.

For example, for a 90% confidence interval, a 90% confidence level is computed (90% of future points are to fall within this radius from prediction). The default value is 95%. For numbers outside of the range (0,1), Forecast_ETS_STAT returns an error.

Passing 0 for the data completions parameter (Arg5) instructs the algorithm to account for missing points as zeros. The default value of 1 accounts for missing points by computing them to be the average of the neighboring points. If there is more than 30% missing data, Forecast_ETS_STAT returns run-time error 1004.

The aggregation parameter (Arg6) is a numeric value specifying the method to use to aggregate several values that have the same time stamp. The default value of 0 specifies AVERAGE, while other numbers between 1 and 6 specify SUM, COUNT, COUNTA, MIN, MAX, and MEDIAN.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Forecast_ETS_Seasonality(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the length of the repetitive pattern that Excel detects for the specified time series.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Values: the historical values, for which you want to forecast the next points.

Arg2 Required Variant Timeline: the independent array or range of dates or numeric data. The values in the timeline must have a consistent step between them and can't be zero. See Remarks.

Arg3 Optional Variant Data completions: Although the timeline requires a constant step between data points, Forecast_ETS_Seasonality supports up to 30% missing data, and automatically adjusts for it. See Remarks.

Arg4 Optional Variant Aggregation: Although the timeline requires a constant step between data points, Forecast_ETS_Seasonality aggregates multiple points that have the same time stamp. See Remarks.

#RETURN-VALUE: Double

#REMARKS:

Use Forecast_ETS_Seasonality following Forecast_ETS to identify which automatic seasonality was detected and used in Forecast_ETS. While you can also use it independently of Forecast_ETS, the methods are tied together, because the seasonality detected in this method is identical to the one used by Forecast_ETS, considering that the same input parameters that affect data completion are passed in both methods.

It'sn't necessary to sort the timeline (Arg2), because Forecast_ETS_Seasonality sorts it implicitly for calculations. If Forecast_ETS_Seasonality can't identify a constant step in the timeline, it returns run-time error 1004. If the timeline contains duplicate values, Forecast_ETS_Seasonality also returns an error. If the ranges of the timeline and values aren't all of the same size, Forecast_ETS_Seasonality returns run-time error 1004.

Passing 0 for the data completions parameter (Arg3) instructs the algorithm to account for missing points as zeros. The default value of 1 accounts for missing points by computing them to be the average of the neighboring points. If there is more than 30% missing data, Forecast_ETS_Seasonality returns run-time error 1004.

The aggregation parameter (Arg4) is a numeric value specifying the method to use to aggregate several values that have the same time stamp. The default value of 0 specifies AVERAGE, while other numbers between 1 and 6 specify SUM, COUNT, COUNTA, MIN, MAX, and MEDIAN.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Forecast_Linear(self, Arg1, Arg2, Arg3) -> float:
    '''Calculates, or predicts, a future value by using existing values. The predicted value is a y-value for a given x-value. The known values are existing x-values and y-values, and the new value is predicted by using linear regression. Use this function to predict future sales, inventory requirements, or consumer trends.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double x - the data point for which you want to predict a value.

Arg2 Required Variant known_y's - the dependent array or range of data.

Arg3 Required Variant known_x's - the independent array or range of data.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, Forecast_Linear returns the #VALUE! error value.

If known_y and known_x parameters are empty or contain a different number of data points, Forecast_Linear returns the #N/A error value.

If the variance of known_x parameters equals zero, Forecast_Linear returns the #DIV/0! error value.

The equation for Forecast_Linear is a+bx, where      and      and where x and y are the sample means AVERAGE(all known_x) and AVERAGE(all known_y).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Dim instance As WorksheetFunction
Dim Arg1 As Double
Dim Arg2 As Object
Dim Arg3 As Object
Dim returnValue As Double

returnValue = instance.Forecast_Linear(Arg1, Arg2, Arg3)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Frequency(self, Arg1, Arg2) -> VBA_Variant:
    '''Calculates how often values occur within a range of values, and then returns a vertical array of numbers. For example, use Frequency to count the number of test scores that fall within ranges of scores. Because Frequency returns an array, it must be entered as an array formula.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Data_array - an array of or reference to a set of values for which you want to count frequencies. If data_array contains no values, Frequency returns an array of zeros.

Arg2 Required Variant Bins_array - an array of or reference to intervals into which you want to group the values in data_array. If bins_array contains no values, Frequency returns the number of elements in data_array.

#RETURN-VALUE: Variant

#REMARKS:

Frequency is entered as an array formula after you select a range of adjacent cells into which you want the returned distribution to appear.

The number of elements in the returned array is one more than the number of elements in bins_array. The extra element in the returned array returns the count of any values above the highest interval. For example, when counting three ranges of values (intervals) that are entered into three cells, be sure to enter Frequency into four cells for the results. The extra cell returns the number of values in data_array that are greater than the third interval value.

Frequency ignores blank cells and text.

Formulas that return arrays must be entered as array formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Fv(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the future value of an investment based on periodic, constant payments and a constant interest rate.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Rate - the interest rate per period.

Arg2 Required Double Nper - the total number of payment periods in an annuity.

Arg3 Required Double Pmt - the payment made each period; it cannot change over the life of the annuity. Typically, pmt contains principal and interest but no other fees or taxes. If pmt is omitted, you must include the pv argument.

Arg4 Optional Variant Pv - the present value, or the lump-sum amount that a series of future payments is worth right now. If pv is omitted, it is assumed to be 0 (zero), and you must include the pmt argument.

Arg5 Optional Variant Type - the number 0 or 1 and indicates when payments are due. If type is omitted, it is assumed to be 0.

#RETURN-VALUE: Double

#REMARKS:

For a more complete description of the arguments in Fv and for more information about annuity functions, see Pv.

The following table describes the values that can be used for Arg5.

Make sure that you are consistent about the units you use for specifying rate and nper. If you make monthly payments on a four-year loan at 12 percent annual interest, use 12%/12 for rate and 4*12 for nper. If you make annual payments on the same loan, use 12% for rate and 4 for nper.

For all the arguments, cash you pay out, such as deposits to savings, is represented by negative numbers; cash you receive, such as dividend checks, is represented by positive numbers.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Gamma(self, Arg1) -> float:
    '''Returns the gamma function value.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The value for which you want to calculate gamma.

#RETURN-VALUE: Double
    '''

  def GammaDist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the gamma distribution. Use this function to study variables that may have a skewed distribution. The gamma distribution is commonly used in queuing analysis.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value at which you want to evaluate the distribution.

Arg2 Required Double Alpha - a parameter to the distribution.

Arg3 Required Double Beta - a parameter to the distribution. If beta = 1, GammaDist returns the standard gamma distribution.

Arg4 Required Boolean Cumulative - a logical value that determines the form of the function. If cumulative is True, GammaDist returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

If x, alpha, or beta is nonnumeric, GammaDist returns the #VALUE! error value.

If x < 0, GammaDist returns the #NUM! error value.

If alpha ≤ 0 or if beta ≤ 0, GammaDist returns the #NUM! error value.

The equation for the gamma probability density function is:

The standard gamma probability density function is:

When alpha = 1, GammaDist returns the exponential distribution with:

For a positive integer n, when alpha = n/2, beta = 2, and cumulative = True, GammaDist returns (1 - CHIDIST(x)) with n degrees of freedom.

When alpha is a positive integer, GammaDist is also known as the Erlang distribution.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GammaInv(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the gamma cumulative distribution. If p = GAMMADIST(x,...), then GAMMAINV(p,...) = x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - the probability associated with the gamma distribution.

Arg2 Required Double Alpha - a parameter to the distribution.

Arg3 Required Double Beta - a parameter to the distribution. If beta = 1, GammaInv returns the standard gamma distribution.

#RETURN-VALUE: Double

#REMARKS:

Use this function to study a variable whose distribution may be skewed.

If any argument is text, GammaInv returns the #VALUE! error value.

If probability < 0 or probability > 1, GammaInv returns the #NUM! error value.

If alpha ≤ 0 or if beta ≤ 0, GammaInv returns the #NUM! error value.

Given a value for probability, GammaInv seeks that value x such that GAMMADIST(x, alpha, beta, TRUE) = probability. Thus, precision of GammaInv depends on precision of GammaDist. GammaInv uses an iterative search technique. If the search has not converged after 64 iterations, the function returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GammaLn(self, Arg1) -> float:
    '''Returns the natural logarithm of the gamma function, Γ(x).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value for which you want to calculate GammaLn.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, GammaLn returns the #VALUE! error value.

If x ≤ 0, GammaLn returns the #NUM! error value.

The number e raised to the GAMMALN(i) power, where i is an integer, returns the same result as (i - 1)!.

GammaLn is calculated as follows:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GammaLn_Precise(self, Arg1) -> float:
    '''Returns the natural logarithm of the gamma function, Γ(x).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value for which you want to calculate GammaLn.

#RETURN-VALUE: Double

#REMARKS:

If x is nonnumeric, the GammaLn_Precise method generates an error.

If x ≤ 0, the GammaLn_Precise method generates an error.

The number e raised to the GAMMALN(i) power, where i is an integer, returns the same result as (i - 1)!.

GammaLn is calculated as follows:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Gamma_Dist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the gamma distribution. Use this function to study variables that may have a skewed distribution. The gamma distribution is commonly used in queuing analysis.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value at which you want to evaluate the distribution.

Arg2 Required Double Alpha - a parameter to the distribution.

Arg3 Required Double Beta - a parameter to the distribution. If beta = 1, Gamma_Dist returns the standard gamma distribution.

Arg4 Required Boolean Cumulative - a logical value that determines the form of the function. If cumulative is True, Gamma_Dist returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

If x, alpha, or beta is nonnumeric, Gamma_Dist returns the #VALUE! error value.

If x < 0, Gamma_Dist returns the #NUM! error value.

If alpha ≤ 0 or if beta ≤ 0, Gamma_Dist returns the #NUM! error value.

The equation for the gamma probability density function is:

The standard gamma probability density function is:

When alpha = 1, Gamma_Dist returns the exponential distribution with:

For a positive integer n, when alpha = n/2, beta = 2, and cumulative = True, Gamma_Dist returns (1 - CHIDIST(x)) with n degrees of freedom.

When alpha is a positive integer, Gamma_Dist is also known as the Erlang distribution.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Gamma_Inv(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the gamma cumulative distribution. If p = GAMMA_DIST(x,...), then GAMMA_INV(p,...) = x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - the probability associated with the gamma distribution.

Arg2 Required Double Alpha - a parameter to the distribution.

Arg3 Required Double Beta - a parameter to the distribution. If beta = 1, Gamma_Inv returns the standard gamma distribution.

#RETURN-VALUE: Double

#REMARKS:

Use this function to study a variable whose distribution may be skewed.

If any argument is text, Gamma_Inv returns the #VALUE! error value.

If probability < 0 or probability > 1, Gamma_Inv returns the #NUM! error value.

If alpha ≤ 0 or if beta ≤ 0, Gamma_Inv returns the #NUM! error value.

Given a value for probability, Gamma_Inv seeks that value x such that GAMMA_DIST(x, alpha, beta, TRUE) = probability. Thus, precision of Gamma_Inv depends on precision of Gamma_Dist. Gamma_Inv uses an iterative search technique. If the search has not converged after 100 iterations, the function returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Gauss(self, Arg1) -> float:
    '''Returns 0.5 less than the standard normal cumulative distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double The value for which you want the distribution.

#RETURN-VALUE: Double
    '''

  def Gcd(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the greatest common divisor of two or more integers. The greatest common divisor is the largest integer that divides both number1 and number2 without a remainder.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 29 values. If any value is not an integer, it is truncated.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, Gcd returns the #VALUE! error value.

If any argument is less than zero, Gcd returns the #NUM! error value.

One divides any value evenly.

A prime number has only itself and one as even divisors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GeStep(self, Arg1, Arg2) -> float:
    '''Returns 1 if number ≥ step; otherwise, returns 0 (zero). Use this function to filter a set of values. For example, by summing several GeStep functions, you calculate the count of values that exceed a threshold.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the value to test against step.

Arg2 Optional Variant Step - the threshold value. If you omit a value for step, GeStep uses zero.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, GeStep returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GeoMean(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the geometric mean of an array or range of positive data. For example, you can use GeoMean to calculate average growth rate given compound interest with variable rates.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 arguments for which you want to calculate the mean. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If any data point ≤ 0, GeoMean returns the #NUM! error value.

The equation for the geometric mean is:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Growth(self, Arg1, Arg2, Arg3, Arg4) -> VBA_Variant:
    '''Calculates predicted exponential growth by using existing data. Growth returns the y-values for a series of new x-values that you specify by using existing x-values and y-values. You can also use the Growth worksheet function to fit an exponential curve to existing x-values and y-values.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Known_y's - the set of y-values that you already know in the relationship y = b*m^x.

Arg2 Optional Variant Known_x's - an optional set of x-values that you may already know in the relationship y = b*m^x.

Arg3 Optional Variant New_x's - new x-values for which you want Growth to return corresponding y-values.

Arg4 Optional Variant Const - a logical value specifying whether to force the constant b to equal 1.

#RETURN-VALUE: Variant

#REMARKS:

If the array known_y's is in a single column, each column of known_x's is interpreted as a separate variable.

If the array known_y's is in a single row, each row of known_x's is interpreted as a separate variable.

If any of the numbers in known_y's is 0 or negative, Growth returns the #NUM! error value.

The array known_x's can include one or more sets of variables. If only one variable is used, known_y's and known_x's can be ranges of any shape, as long as they have equal dimensions. If more than one variable is used, known_y's must be a vector (that is, a range with a height of one row or a width of one column).

If known_x's is omitted, it is assumed to be the array {1,2,3,...} that is the same size as known_y's.

New_x's must include a column (or row) for each independent variable, just as known_x's does. So, if known_y's is in a single column, known_x's and new_x's must have the same number of columns. If known_y's is in a single row, known_x's and new_x's must have the same number of rows.

If new_x's is omitted, it is assumed to be the same as known_x's.

If both known_x's and new_x's are omitted, they are assumed to be the array {1,2,3,...} that is the same size as known_y's.

If const is True or omitted, b is calculated normally.

If const is False, b is set equal to 1 and the m-values are adjusted so that y = m^x.

Formulas that return arrays must be entered as array formulas after selecting the correct number of cells.

When entering an array constant for an argument such as known_x's, use commas to separate values in the same row, and use semicolons to separate rows.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def HLookup(self, Arg1, Arg2, Arg3, Arg4) -> VBA_Variant:
    '''Searches for a value in the top row of a table or an array of values, and then returns a value in the same column from a row that you specify in the table or array. Use HLookup when your comparison values are located in a row across the top of a table of data, and you want to look down a specified number of rows. Use VLookup when your comparison values are located in a column to the left of the data that you want to find.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Lookup_value - the value to be found in the first row of the table. Lookup_value can be a value, a reference, or a text string.

Arg2 Required Variant Table_array - a table of information in which data is looked up. Use a reference to a range or a range name.

Arg3 Required Variant Row_index_num - the row number in table_array from which the matching value will be returned. A row_index_num of 1 returns the first row value in table_array, a row_index_num of 2 returns the second row value in table_array, and so on. If row_index_num is less than 1, HLookup returns the #VALUE! error value; if row_index_num is greater than the number of rows on table_array, HLookup returns the #REF! error value.

Arg4 Optional Variant Range_lookup - a logical value that specifies whether you want HLookup to find an exact match or an approximate match. If True or omitted, an approximate match is returned. In other words, if an exact match is not found, the next largest value that is less than lookup_value is returned. If False, HLookup will find an exact match. If one is not found, the error value #N/A is returned.

#RETURN-VALUE: Variant

#REMARKS:

If HLookup can't find lookup_value, and range_lookup is True, it uses the largest value that is less than lookup_value.

If lookup_value is smaller than the smallest value in the first row of table_array, HLookup returns the #N/A error value.

If range_lookup is False and lookup_value is text, you can use the wildcard characters, question mark (?) and asterisk (*), in lookup_value. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def HarMean(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the harmonic mean of a data set. The harmonic mean is the reciprocal of the arithmetic mean of reciprocals.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 arguments for which you want to calculate the mean. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

The harmonic mean is always less than the geometric mean, which is always less than the arithmetic mean.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If any data point ≤ 0, HarMean returns the #NUM! error value.

The equation for the harmonic mean is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Hex2Bin(self, Arg1, Arg2) -> str:
    '''Converts a hexadecimal number to binary.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the hexadecimal number that you want to convert. Number cannot contain more than 10 characters. The most significant bit of number is the sign bit (40th bit from the right). The remaining 9 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant Places - the number of characters to use. If places is omitted, Hex2Bin uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number is negative, Hex2Bin ignores places and returns a 10-character binary number.

If number is negative, it cannot be less than FFFFFFFE00, and if number is positive, it cannot be greater than 1FF.

If number is not a valid hexadecimal number, Hex2Bin returns the #NUM! error value.

If Hex2Bin requires more than places characters, it returns the #NUM! error value.

If places is not an integer, it is truncated.

If places is nonnumeric, Hex2Bin returns the #VALUE! error value.

If places is negative, Hex2Bin returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Hex2Dec(self, Arg1) -> str:
    '''Converts a hexadecimal number to decimal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the hexadecimal number that you want to convert. Number cannot contain more than 10 characters (40 bits). The most significant bit of number is the sign bit. The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

#RETURN-VALUE: String

#REMARKS:

If number is not a valid hexadecimal number, Hex2Dec returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Hex2Oct(self, Arg1, Arg2) -> str:
    '''Converts a hexadecimal number to octal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the hexadecimal number that you want to convert. Number cannot contain more than 10 characters. The most significant bit of number is the sign bit. The remaining 39 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant Places - the number of characters to use. If places is omitted, Hex2Oct uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number is negative, Hex2Oct ignores places and returns a 10-character octal number.

If number is negative, it cannot be less than FFE0000000, and if number is positive, it cannot be greater than 1FFFFFFF.

If number is not a valid hexadecimal number, Hex2Oct returns the #NUM! error value.

If Hex2Oct requires more than places characters, it returns the #NUM! error value.

If places is not an integer, it is truncated.

If places is nonnumeric, Hex2Oct returns the #VALUE! error value.

If places is negative, Hex2Oct returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def HypGeomDist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the hypergeometric distribution. HypGeomDist returns the probability of a given number of sample successes, given the sample size, population successes, and population size. Use HypGeomDist for problems with a finite population, where each observation is either a success or a failure, and where each subset of a given size is chosen with equal likelihood.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Sample_s - the number of successes in the sample.

Arg2 Required Double Number_sample - the size of the sample.

Arg3 Required Double Population_s - the number of successes in the population.

Arg4 Required Double Number_population - the population size.

#RETURN-VALUE: Double

#REMARKS:

All arguments are truncated to integers.

If any argument is nonnumeric, HypGeomDist returns the #VALUE! error value.

If sample_s < 0 or sample_s is greater than the lesser of number_sample or population_s, HypGeomDist returns the #NUM! error value.

If sample_s is less than the larger of 0 or (number_sample - number_population + population_s), HypGeomDist returns the #NUM! error value.

If number_sample ≤ 0 or number_sample > number_population, HypGeomDist returns the #NUM! error value.

If population_s ≤ 0 or population_s > number_population, HypGeomDist returns the #NUM! error value.

If number_population ≤ 0, HypGeomDist returns the #NUM! error value.

The equation for the hypergeometric distribution is as follows, where:

HypGeomDist is used in sampling without replacement from a finite population.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def HypGeom_Dist(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the hypergeometric distribution. HypGeom_Dist returns the probability of a given number of sample successes, given the sample size, population successes, and population size. Use HypGeom_Dist for problems with a finite population, where each observation is either a success or a failure, and where each subset of a given size is chosen with equal likelihood.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Sample_s - the number of successes in the sample.

Arg2 Required Double Number_sample - the size of the sample.

Arg3 Required Double Population_s - the number of successes in the population.

Arg4 Required Double Number_population - the population size.

Arg5 Optional Variant Cumulative - a logical value that determines the form of the function. If cumulative is True, HypGeom_Dist returns the cumulative distribution function; if False, it returns the probability mass function.

#RETURN-VALUE: Double

#REMARKS:

All arguments are truncated to integers.

If any argument is nonnumeric, HypGeom_Dist returns the #VALUE! error value.

If sample_s < 0 or sample_s is greater than the lesser of number_sample or population_s, HypGeom_Dist returns the #NUM! error value.

If sample_s is less than the larger of 0 or (number_sample - number_population + population_s), HypGeom_Dist returns the #NUM! error value.

If number_sample ≤ 0 or number_sample > number_population, HypGeom_Dist returns the #NUM! error value.

If population_s ≤ 0 or population_s > number_population, HypGeom_Dist returns the #NUM! error value.

If number_population ≤ 0, HypGeom_Dist returns the #NUM! error value.

The equation for the hypergeometric distribution is as follows, where:

HypGeom_Dist is used in sampling without replacement from a finite population.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ISO_Ceiling(self, Arg1, Arg2) -> float:
    '''Returns a number that is rounded up to the nearest integer or to the nearest multiple of significance.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - The value to be rounded.

Arg2 Optional Variant Significance - The optional multiple to which number is to be rounded. If significance is omitted, its default value is 1.NOTE: The absolute value of the multiple is used, so that the ISO_Ceiling function returns the mathematical ceiling irrespective of the signs of number and significance.

#RETURN-VALUE: Double
    '''

  def IfError(self, Arg1, Arg2) -> VBA_Variant:
    '''Returns a value that you specify if a formula evaluates to an error; otherwise, returns the result of the formula. Use the IfError function to trap and handle errors in a formula.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the argument that is checked for an error.

Arg2 Required Variant Value_if_error - the value to return if the formula evaluates to an error. The following error types are evaluated: #N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!.

#RETURN-VALUE: Variant

#REMARKS:

If value or value_if_error is an empty cell, IfError treats it as an empty string value ("").

If value is an array formula, IfError returns an array of results for each cell in the range specified in value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IfNa(self, Arg1, Arg2) -> VBA_Variant:
    '''Returns the value that you specify if the expression resolves to #N/A; otherwise, returns the result of the expression.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant value: Any value or expression or reference.

Arg2 Required Variant value_if_na: Any value or expression or reference.

#RETURN-VALUE: Variant
    '''

  def ImAbs(self, Arg1) -> str:
    '''Returns the absolute value (modulus) of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the absolute value.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The absolute value of a complex number is as follows, where z = x + yi:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImArgument(self, Arg1) -> str:
    '''Returns the argument  (theta), an angle expressed in radians, such that:

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber is a complex number for which you want the argument theta.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

ImArgument is calculated as follows:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImConjugate(self, Arg1) -> str:
    '''Returns the complex conjugate of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the conjugate.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The conjugate of a complex number is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImCos(self, Arg1) -> str:
    '''Returns the cosine of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the cosine.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

If inumber is a logical value, ImCos returns the #VALUE! error value.

The cosine of a complex number is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImCosh(self, Arg1) -> str:
    '''Returns the hyperbolic cosine of a complex number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Complex number for which you want the hyperbolic cosine.

#RETURN-VALUE: String
    '''

  def ImCot(self, Arg1) -> str:
    '''Returns the cotangent of a complex number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Complex number for which you want the cotangent.

#RETURN-VALUE: String
    '''

  def ImCsc(self, Arg1) -> str:
    '''Returns the cosecant of a complex number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Complex number for which you want the cosecant.

#RETURN-VALUE: String
    '''

  def ImCsch(self, Arg1) -> str:
    '''Returns the hyperbolic cosecant of a complex number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Complex number for which you want the hyperbolic cosecant.

#RETURN-VALUE: String
    '''

  def ImDiv(self, Arg1, Arg2) -> str:
    '''Returns the quotient of two complex numbers in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber1 - the complex numerator or dividend.

Arg2 Required Variant Inumber2 - the complex denominator or divisor.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The quotient of two complex numbers is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImExp(self, Arg1) -> str:
    '''Returns the exponential of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the exponential.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The exponential of a complex number is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImLn(self, Arg1) -> str:
    '''Returns the natural logarithm of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the natural logarithm.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The natural logarithm of a complex number is      where  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImLog10(self, Arg1) -> str:
    '''Returns the common logarithm (base 10) of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the common logarithm.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The common logarithm of a complex number can be calculated from the natural logarithm as follows:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImLog2(self, Arg1) -> str:
    '''Returns the base-2 logarithm of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the base-2 logarithm.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The base-2 logarithm of a complex number can be calculated from the natural logarithm as follows:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImPower(self, Arg1, Arg2) -> str:
    '''Returns a complex number in x + yi or x + yj text format raised to a power.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number that you want to raise to a power.

Arg2 Required Variant Number - the power to which you want to raise the complex number.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

If number is nonnumeric, ImPower returns the #VALUE! error value.

Number can be an integer, fractional, or negative.

A complex number raised to a power is calculated as follows:

where:

and:

and:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImProduct(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> str:
    '''Returns the product of 2 to 29 complex numbers in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Inumber1, inumber2, ... - 1 to 29 complex numbers to multiply.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The product of two complex numbers is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImReal(self, Arg1) -> float:
    '''Returns the real coefficient of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the real coefficient.

#RETURN-VALUE: Double

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImSec(self, Arg1) -> str:
    '''Returns the secant of a complex number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Complex number for which you want the secant.

#RETURN-VALUE: String
    '''

  def ImSech(self, Arg1) -> str:
    '''Returns the hyperbolic secant of a complex number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Complex number for which you want the hyperbolic secant.

#RETURN-VALUE: String
    '''

  def ImSin(self, Arg1) -> str:
    '''Returns the sine of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the sine.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The sine of a complex number is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImSinh(self, Arg1) -> str:
    '''Returns the hyperbolic sine of a complex number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Complex number for which you want the hyperbolic sine.

#RETURN-VALUE: String
    '''

  def ImSqrt(self, Arg1) -> str:
    '''Returns the square root of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the square root.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The square root of a complex number is:

where:

and:

and:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImSub(self, Arg1, Arg2) -> str:
    '''Returns the difference of two complex numbers in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber1 - the complex number from which to subtract inumber2.

Arg2 Required Variant Inumber2 - the complex number to subtract from inumber1.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The difference of two complex numbers is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImSum(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> str:
    '''Returns the sum of two or more complex numbers in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Inumber1, inumber2, ... - 1 to 29 complex numbers to add.

#RETURN-VALUE: String

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

The sum of two complex numbers is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ImTan(self, Arg1) -> str:
    '''Returns the tangent of a complex number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Complex number for which you want the tangent.

#RETURN-VALUE: String
    '''

  def Imaginary(self, Arg1) -> float:
    '''Returns the imaginary coefficient of a complex number in x + yi or x + yj text format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Inumber - a complex number for which you want the imaginary coefficient.

#RETURN-VALUE: Double

#REMARKS:

Use the Complex method to convert real and imaginary coefficients into a complex number.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Index(self, Arg1, Arg2, Arg3, Arg4) -> VBA_Variant:
    '''Returns a value or the reference to a value from within a table or range. There are two forms of the Index function: the array form and the reference form.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array or Reference - a range of cells or an array constant. For references, it is the reference to one or more cell ranges.

Arg2 Required Double Row_num - selects the row in array from which to return a value. If row_num is omitted, column_num is required. For references, the number of the row in reference from which to return a reference.

Arg3 Optional Variant Column_num - selects the column in array from which to return a value. If column_num is omitted, row_num is required. For reference, the number of the column in reference from which to return a reference.

Arg4 Optional Variant Area_num - only used when returning references. Selects a range in reference from which to return the intersection of row_num and column_num. The first area selected or entered is numbered 1, the second is 2, and so on. If area_num is omitted, Index uses area 1.

#RETURN-VALUE: Variant

#REMARKS:

Returns the value of an element in a table or an array, selected by the row and column number indexes.

Use the array form if the first argument to Index is an array constant.

If both the row_num and column_num arguments are used, Index returns the value in the cell at the intersection of row_num and column_num.

If you set row_num or column_num to 0 (zero), Index returns the array of values for the entire column or row, respectively. To use values returned as an array, enter the Index function as an array formula in a horizontal range of cells for a row, and in a vertical range of cells for a column. To enter an array formula, press Ctrl+Shift+Enter.

Row_num and column_num must point to a cell within array; otherwise, Index returns the #REF! error value.

Returns the reference of the cell at the intersection of a particular row and column. If the reference is made up of nonadjacent selections, you can pick the selection to look in. If each area in reference contains only one row or column, the row_num or column_num argument, respectively, is optional. For example, for a single row reference, use INDEX(reference,column_num).

After reference and area_num have selected a particular range, row_num and column_num select a particular cell: row_num 1 is the first row in the range, column_num 1 is the first column, and so on. The reference returned by Index is the intersection of row_num and column_num.

If you set row_num or column_num to 0 (zero), Index returns the reference for the entire column or row, respectively.

Row_num, column_num, and area_num must point to a cell within reference; otherwise, Index returns the #REF! error value. If row_num and column_num are omitted, Index returns the area in reference specified by area_num.

The result of the Index function is a reference and is interpreted as such by other formulas. Depending on the formula, the return value of Index may be used as a reference or as a value. For example, the formula CELL("width",INDEX(A1:B2,1,2)) is equivalent to CELL("width",B1). The CELL function uses the return value of Index as a cell reference. On the other hand, a formula such as 2*INDEX(A1:B2,1,2) translates the return value of Index into the number in cell B1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IntRate(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the interest rate for a fully invested security.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Investment - the amount invested in the security.

Arg4 Required Variant Redemption - the amount to be received at maturity.

Arg5 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg5.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, and basis are truncated to integers.

If settlement or maturity is not a valid date, IntRate returns the #VALUE! error value.

If investment ≤ 0 or if redemption ≤ 0, IntRate returns the #NUM! error value.

If basis < 0 or if basis > 4, IntRate returns the #NUM! error value.

If settlement ≥ maturity, IntRate returns the #NUM! error value.

IntRate is calculated as follows, where B = number of days in a year, depending on the year basis, and DIM = number of days from settlement to maturity:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Intercept(self, Arg1, Arg2) -> float:
    '''Calculates the point at which a line will intersect the y-axis by using existing x-values and y-values. The intercept point is based on a best-fit regression line plotted through the known x-values and known y-values.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Known_y's - the dependent set of observations or data.

Arg2 Required Variant Known_x's - the independent set of observations or data.

#RETURN-VALUE: Double

#REMARKS:

The arguments should be either numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If known_y's and known_x's contain a different number of data points or contain no data points, Intercept returns the #N/A error value.

The equation for the intercept of the regression line, a, is:

where the slope, b, is calculated as:

and where x and y are the sample means AVERAGE(known_x's) and AVERAGE(known_y's).

The underlying algorithm used in the Intercept and Slope functions is different than the underlying algorithm used in the LinEst function. The difference between these algorithms can lead to different results when data is undetermined and collinear. For example, if the data points of the known_y's argument are 0 and the data points of the known_x's argument are 1:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Ipmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the interest payment for a given period for an investment based on periodic, constant payments and a constant interest rate.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Rate - the interest rate per period.

Arg2 Required Double Per - the period for which you want to find the interest; must be in the range 1 to nper.

Arg3 Required Double Nper - the total number of payment periods in an annuity.

Arg4 Required Double Pv - the present value, or the lump-sum amount that a series of future payments is worth right now.

Arg5 Optional Variant Fv - the future value, or a cash balance that you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0).

Arg6 Optional Variant Type - the number 0 or 1 and indicates when payments are due. If type is omitted, it is assumed to be 0.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg6.

Make sure that you are consistent about the units that you use for specifying rate and nper. If you make monthly payments on a four-year loan at 12 percent annual interest, use 12%/12 for rate and 4*12 for nper. If you make annual payments on the same loan, use 12% for rate and 4 for nper.

For all the arguments, cash you pay out, such as deposits to savings, is represented by negative numbers; cash you receive, such as dividend checks, is represented by positive numbers.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Irr(self, Arg1, Arg2) -> float:
    '''Returns the internal rate of return for a series of cash flows represented by the numbers in values. These cash flows don't have to be even, as they would be for an annuity. However, the cash flows must occur at regular intervals, such as monthly or annually. The internal rate of return is the interest rate received for an investment consisting of payments (negative values) and income (positive values) that occur at regular periods.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Values - an array or a reference to cells that contain numbers for which you want to calculate the internal rate of return.

Arg2 Optional Variant Guess - a number that you guess is close to the result of Irr.

#RETURN-VALUE: Double

#REMARKS:

Values must contain at least one positive value and one negative value to calculate the internal rate of return.

Irr uses the order of values to interpret the order of cash flows. Be sure to enter your payment and income values in the sequence that you want.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored.

Microsoft Excel uses an iterative technique for calculating Irr. Starting with guess, Irr cycles through the calculation until the result is accurate within 0.00001 percent. If Irr can't find a result that works after 20 tries, the #NUM! error value is returned.

In most cases, you don't need to provide guess for the Irr calculation. If guess is omitted, it is assumed to be 0.1 (10 percent).

If Irr gives the #NUM! error value, or if the result is not close to what you expected, try again with a different value for guess.

Irr is closely related to Npv, the net present value function. The rate of return calculated by Irr is the interest rate corresponding to a 0 (zero) net present value. The following formula demonstrates how Npv and Irr are related:

NPV(IRR(B1:B6),B1:B6) equals 3.60E-08 [Within the accuracy of the Irr calculation, the value 3.60E-08 is effectively 0 (zero).]

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsErr(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value refers to any error value except #N/A.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsError(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value refers to any error value (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsEven(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value is even.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsFormula(self, Arg1) -> bool:
    '''Checks whether a reference is to a cell containing a formula, and returns True or False.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Reference to the cell that you want to test. Reference can be a cell reference, a formula, or a name that refers to a cell.

#RETURN-VALUE: Boolean
    '''

  def IsLogical(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value refers to a logical value.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsNA(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value refers to the #N/A (value not available) error value.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsNonText(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value refers to any item that is not text. (Note that this function returns True if value refers to a blank cell.)

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsNumber(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value refers to a number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsOdd(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value is odd.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsText(self, Arg1) -> bool:
    '''Checks the type of value and returns True or False depending on whether the value refers to text.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Value - the value that you want tested. Value can be a blank (empty cell), error, logical, text, number, or reference value, or a name referring to any of these, that you want to test.

#RETURN-VALUE: Boolean

#REMARKS:

The value arguments of the IS functions are not converted. For example, in most other functions where a number is required, the text value 19 is converted to the number 19. However, in the formula ISNUMBER("19"), 19 is not converted from a text value, and the IsNumber function returns False.

The IS functions are useful in formulas for testing the outcome of a calculation. When combined with the IF function, they provide a method for locating errors in formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def IsThaiDigit(self, Arg1):  pass

  def IsoWeekNum(self, Arg1, Arg2) -> float:
    '''Returns the ISO week number of the year for a given date.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Date-time code used by Microsoft Excel for date and time calculation.

Arg2 Optional Variant This argument is not available in the function.

#RETURN-VALUE: Double

#REMARKS:

Returns the ordinal number of the ISO 8601 calendar week in the year for the given date. ISO 8601 defines the calendar week as a time interval of seven calendar days starting with a Monday, and the first calendar week of a year as the one that includes the first Thursday of that year.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Ispmt(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Calculates the interest paid during a specific period of an investment. This function is provided for compatibility with Lotus 1-2-3.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Rate - the interest rate for the investment.

Arg2 Required Double Per - the period for which you want to find the interest; must be between 1 and nper.

Arg3 Required Double Nper - the total number of payment periods for the investment.

Arg4 Required Double Pv - the present value of the investment. For a loan, pv is the loan amount.

#RETURN-VALUE: Double

#REMARKS:

Make sure that you are consistent about the units that you use for specifying rate and nper. If you make monthly payments on a four-year loan at an annual interest rate of 12 percent, use 12%/12 for rate and 4*12 for nper. If you make annual payments on the same loan, use 12% for rate and 4 for nper.

For all the arguments, the cash you pay out, such as deposits to savings or other withdrawals, is represented by negative numbers; the cash you receive, such as dividend checks and other deposits, is represented by positive numbers.

For additional information about financial functions, see the Pv function.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Kurt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the kurtosis of a data set. Kurtosis characterizes the relative peakedness or flatness of a distribution compared with the normal distribution. Positive kurtosis indicates a relatively peaked distribution. Negative kurtosis indicates a relatively flat distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 arguments for which you want to calculate kurtosis. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If there are fewer than four data points, or if the standard deviation of the sample equals zero, Kurt returns the #DIV/0! error value.

Kurtosis is defined as follows, where s is the sample standard deviation:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Large(self, Arg1, Arg2) -> float:
    '''Returns the k-th largest value in a data set. Use this function to select a value based on its relative standing. For example, you can use Large to return the highest, runner-up, or third-place score.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - the array or range of data for which you want to determine the k-th largest value.

Arg2 Required Double K - the position (from the largest) in the array or cell range of data to return.

#RETURN-VALUE: Double

#REMARKS:

If array is empty, Large returns the #NUM! error value.

If k ≤ 0 or if k is greater than the number of data points, Large returns the #NUM! error value.

If n is the number of data points in a range, LARGE(array,1) returns the largest value, and LARGE(array,n) returns the smallest value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Lcm(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the least common multiple of integers. The least common multiple is the smallest positive integer that is a multiple of all integer arguments number1, number2, and so on. Use Lcm to add fractions with different denominators.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number1, number2... - 1 to 29 values for which you want the least common multiple. If value is not an integer, it is truncated.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, Lcm returns the #VALUE! error value.

If any argument is less than zero, Lcm returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def LinEst(self, Arg1, Arg2, Arg3, Arg4) -> VBA_Variant:
    '''Calculates the statistics for a line by using the least squares method to calculate a straight line that best fits your data, and returns an array that describes the line. Because this function returns an array of values, it must be entered as an array formula.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Known_y's - the set of y-values that you already know in the relationship y = mx + b.

Arg2 Optional Variant Known_x's - an optional set of x-values that you may already know in the relationship y = mx + b.

Arg3 Optional Variant Const - a logical value specifying whether to force the constant b to equal 0.

Arg4 Optional Variant Stats - a logical value specifying whether to return additional regression statistics.

#RETURN-VALUE: Variant

#REMARKS:

The equation for the line is y = mx + b or y = m1x1 + m2x2 + ... + b (if there are multiple ranges of x-values), where the dependent y-value is a function of the independent x-values. The m-values are coefficients corresponding to each x-value, and b is a constant value. Note that y, x, and m can be vectors. The array that LinEst returns is {mn,mn-1,...,m1,b}. LinEst can also return additional regression statistics.

If the array known_y's is in a single column, each column of known_x's is interpreted as a separate variable.

If the array known_y's is in a single row, each row of known_x's is interpreted as a separate variable.

The array known_x's can include one or more sets of variables. If only one variable is used, known_y's and known_x's can be ranges of any shape, as long as they have equal dimensions. If more than one variable is used, known_y's must be a vector (that is, a range with a height of one row or a width of one column).

If known_x's is omitted, it is assumed to be the array {1,2,3,...} that is the same size as known_y's.

The additional regression statistics are as follows.

The following illustration shows the order in which the additional regression statistics are returned.

You can describe any straight line with the slope and the y-intercept: Slope (m). To find the slope of a line, often written as m, take two points on the line, (x1,y1) and (x2,y2); the slope is equal to (y2 - y1)/(x2 - x1). Y-intercept (b): The y-intercept of a line, often written as b, is the value of y at the point where the line crosses the y-axis. The equation of a straight line is y = mx + b. After you know the values of m and b, you can calculate any point on the line by plugging the y- or x-value into that equation. You can also use the TREND function.

When you have only one independent x-variable, you can obtain the slope and y-intercept values directly by using the following formulas:

The accuracy of the line calculated by LinEst depends on the degree of scatter in your data. The more linear the data, the more accurate the LinEst model. LinEst uses the method of least squares for determining the best fit for the data. When you have only one independent x-variable, the calculations for m and b are based on the following formulas:

The line- and curve-fitting functions LinEst and LogEst can calculate the best straight line or exponential curve that fits your data. However, you have to decide which of the two results best fits your data. You can calculate TREND(known_y's,known_x's) for a straight line, or GROWTH(known_y's, known_x's) for an exponential curve. These functions, without the new_x's argument, return an array of y-values predicted along that line or curve at your actual data points. You can then compare the predicted values with the actual values. You may want to chart them both for a visual comparison.

In regression analysis, Microsoft Excel calculates for each point the squared difference between the y-value estimated for that point and its actual y-value. The sum of these squared differences is called the residual sum of squares, ssresid. Excel then calculates the total sum of squares, sstotal. When const = TRUE, or omitted, the total sum of squares is the sum of the squared differences between the actual y-values and the average of the y-values. When const = FALSE, the total sum of squares is the sum of the squares of the actual y-values (without subtracting the average y-value from each individual y-value). Then regression sum of squares, ssreg, can be found from ssreg = sstotal - ssresid. The smaller the residual sum of squares is, compared with the total sum of squares, the larger the value of the coefficient of determination, r2, which is an indicator of how well the equation resulting from the regression analysis explains the relationship among the variables; r2 equals ssreg/sstotal.

In some cases, one or more of the X columns (assume that Y's and X's are in columns) may have no additional predictive value in the presence of the other X columns. In other words, eliminating one or more X columns might lead to predicted Y values that are equally accurate. In that case, these redundant X columns should be omitted from the regression model. This phenomenon is called collinearity because any redundant X column can be expressed as a sum of multiples of the non-redundant X columns. LinEst checks for collinearity and removes any redundant X columns from the regression model when it identifies them. Removed X columns can be recognized in LinEst output as having 0 coefficients as well as 0 se's.

Formulas that return arrays must be entered as array formulas.

The underlying algorithm used in the LinEst function is different than the underlying algorithm used in the Slope and Intercept functions. The difference between these algorithms can lead to different results when data is undetermined and collinear. For example, if the data points of the known_y's argument are 0 and the data points of the known_x's argument are 1:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Ln(self, Arg1) -> float:
    '''Returns the natural logarithm of a number. Natural logarithms are based on the constant e (2.71828182845904).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the positive real number for which you want the natural logarithm.

#RETURN-VALUE: Double

#REMARKS:

Ln is the inverse of the EXP function.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Log(self, Arg1, Arg2) -> float:
    '''Returns the logarithm of a number to the base that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the positive real number for which you want the logarithm.

Arg2 Optional Variant Base - the base of the logarithm. If base is omitted, it is assumed to be 10.

#RETURN-VALUE: Double
    '''

  def Log10(self, Arg1) -> float:
    '''Returns the base-10 logarithm of a number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the positive real number for which you want the base-10 logarithm.

#RETURN-VALUE: Double
    '''

  def LogEst(self, Arg1, Arg2, Arg3, Arg4) -> VBA_Variant:
    '''In regression analysis, calculates an exponential curve that fits your data, and returns an array of values that describes the curve. Because this function returns an array of values, it must be entered as an array formula.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Known_y's - the set of y-values that you already know in the relationship y = b*m^x.

Arg2 Optional Variant Known_x's - an optional set of x-values that you may already know in the relationship y = b*m^x.

Arg3 Optional Variant Const - a logical value specifying whether to force the constant b to equal 1.

Arg4 Optional Variant Stats - a logical value specifying whether to return additional regression statistics.

#RETURN-VALUE: Variant

#REMARKS:

The equation for the curve is y = b*m^x or y = (b*(m1^x1)*(m2^x2)*_) (if there are multiple x-values), where the dependent y-value is a function of the independent x-values. The m-values are bases corresponding to each exponent x-value, and b is a constant value. Note that y, x, and m can be vectors. The array that LogEst returns is {mn,mn-1,...,m1,b}.

If the array known_y's is in a single column, each column of known_x's is interpreted as a separate variable.

If the array known_y's is in a single row, each row of known_x's is interpreted as a separate variable.

The array known_x's can include one or more sets of variables. If only one variable is used, known_y's and known_x's can be ranges of any shape, as long as they have equal dimensions. If more than one variable is used, known_y's must be a range of cells with a height of one row or a width of one column (which is also known as a vector).

If known_x's is omitted, it is assumed to be the array {1,2,3,...} that is the same size as known_y's.

For information about additional regression statistics, see LinEst.

The more a plot of your data resembles an exponential curve, the better the calculated line will fit your data. Like LinEst, LogEst returns an array of values that describes a relationship among the values, but LinEst fits a straight line to your data; LogEst fits an exponential curve. For more information, see LinEst.

When you have only one independent x-variable, you can obtain y-intercept (b) values directly by using the following formula:

Formulas that return arrays must be entered as array formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def LogInv(self, Arg1, Arg2, Arg3) -> float:
    '''Use the lognormal distribution to analyze logarithmically transformed data.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - a probability associated with the lognormal distribution.

Arg2 Required Double Mean - the mean of ln(x).

Arg3 Required Double Standard_dev - the standard deviation of ln(x).

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, LogInv returns the #VALUE! error value.

If probability ≤ 0 or probability ≥ 1, LogInv returns the #NUM! error value.

If standard_dev ≤ 0, LogInv returns the #NUM! error value.

The inverse of the lognormal distribution function is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def LogNormDist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the cumulative lognormal distribution of x, where ln(x) is normally distributed with parameters mean and standard_dev. Use this function to analyze data that has been logarithmically transformed.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value at which to evaluate the function.

Arg2 Required Double Mean - the mean of ln(x).

Arg3 Required Double Standard_dev - the standard deviation of ln(x).

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, LogNormDist returns the #VALUE! error value.

If x ≤ 0 or if standard_dev ≤ 0, LogNormDist returns the #NUM! error value.

The equation for the lognormal cumulative distribution function is:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def LogNorm_Dist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the lognormal distribution of x, where ln(x) is normally distributed with parameters mean and standard_dev. Use this function to analyze data that has been logarithmically transformed.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The value at which to evaluate the function.

Arg2 Required Double Mean - The mean of ln(x).

Arg3 Required Double Standard_dev - The standard deviation of ln(x).

Arg4 Optional Variant Cumulative - A logical value that determines the form of the function. If cumulative is True, LogNorm_Dist returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, LogNorm_Dist returns the #VALUE! error value.

If x ≤ 0 or if standard_dev ≤ 0, LogNorm_Dist returns the #NUM! error value.

The equation for the lognormal cumulative distribution function is:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def LogNorm_Inv(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the lognormal cumulative distribution function. Use the lognormal distribution to analyze logarithmically transformed data.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - A probability associated with the lognormal distribution.

Arg2 Required Double Mean - The mean of ln(x).

Arg3 Required Double Standard_dev - The standard deviation of ln(x).

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, LogNorm_Inv returns the #VALUE! error value.

If probability ≤ 0 or probability ≥ 1, LogNorm_Inv returns the #NUM! error value.

If standard_dev ≤ 0, LogNorm_Inv returns the #NUM! error value.

The inverse of the lognormal distribution function is:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Lookup(self, Arg1, Arg2, Arg3) -> VBA_Variant:
    '''Returns a value either from a one-row or one-column range or from an array. The Lookup function has two syntax forms: the vector form and the array form.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Lookup_value - A value that Lookup searches for in the first vector. Lookup_value can be a number, text, a logical value, or a name or reference that refers to a value.

Arg2 Required Variant Lookup_vector or Array - In vector form, a range that contains only one row or one column. The values in lookup_vector can be text, numbers, or logical values. In array form, a range of cells that contains text, numbers, or logical values that you want to compare with lookup_value.

Arg3 Optional Variant Result_vector - Only used with the vector form. A range that contains only one row or column. It must be the same size as lookup_vector.

#RETURN-VALUE: Variant

#REMARKS:

A vector is a range of only one row or one column. The vector form of Lookup looks in a one-row or one-column range (known as a vector) for a value and returns a value from the same position in a second one-row or one-column range. Use this form of the Lookup function when you want to specify the range that contains the values that you want to match. The other form of Lookup automatically looks in the first column or row.

If Lookup can't find the lookup_value, it matches the largest value in lookup_vector that is less than or equal to lookup_value.

If lookup_value is smaller than the smallest value in lookup_vector, Lookup gives the #N/A error value.

The array form of Lookup looks in the first row or column of an array for the specified value and returns a value from the same position in the last row or column of the array. Use this form of Lookup when the values that you want to match are in the first row or column of the array. Use the other form of Lookup when you want to specify the location of the column or row.

The array form of Lookup is very similar to the HLookup and VLookup functions. The difference is that HLookup searches for lookup_value in the first row, VLookup searches in the first column, and Lookup searches according to the dimensions of array.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MDeterm(self, Arg1) -> float:
    '''Returns the matrix determinant of an array.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - a numeric array with an equal number of rows and columns.

#RETURN-VALUE: Double

#REMARKS:

Array can be given as a cell range, for example, A1:C3; as an array constant, such as {1,2,3;4,5,6;7,8,9}; or as a name to either of these.

MDeterm returns the #VALUE! error when:

The matrix determinant is a number derived from the values in array. For a three-row, three-column array, A1:C3, the determinant is defined as: MDETERM(A1:C3) equals A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)

Matrix determinants are generally used for solving systems of mathematical equations that involve several variables.

MDeterm is calculated with an accuracy of approximately 16 digits, which may lead to a small numeric error when the calculation is not complete. For example, the determinant of a singular matrix may differ from zero by 1E-16.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MDuration(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the modified Macauley duration for a security with an assumed par value of $100.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Coupon - the security's annual coupon rate.

Arg4 Required Variant Yld - the security's annual yield.

Arg5 Required Variant Frequency - the number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg6 Optional Variant Basis - the type of day count basis to use

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg6.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date is January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, frequency, and basis are truncated to integers.

If settlement or maturity is not a valid date, MDuration returns the #VALUE! error value.

If yld < 0 or if coupon < 0, MDuration returns the #NUM! error value.

If frequency is any number other than 1, 2, or 4, MDuration returns the #NUM! error value.

If basis < 0 or if basis > 4, MDuration returns the #NUM! error value.

If settlement ≥ maturity, MDuration returns the #NUM! error value.

Modified duration is defined as  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MInverse(self, Arg1) -> VBA_Variant:
    '''Returns the inverse matrix for the matrix stored in an array.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - a numeric array with an equal number of rows and columns.

#RETURN-VALUE: Variant

#REMARKS:

The size of the array must not exceed 52 columns by 52 rows. If it does, the function returns a #VALUE! error.

Array can be given as a cell range, such as A1:C3; as an array constant, such as {1,2,3;4,5,6;7,8,9}; or as a name for either of these.

If any cells in array are empty or contain text, MInverse returns the #VALUE! error value.

MInverse also returns the #VALUE! error value if array does not have an equal number of rows and columns.

Formulas that return arrays must be entered as array formulas.

Inverse matrices, like determinants, are generally used for solving systems of mathematical equations involving several variables. The product of a matrix and its inverse is the identity matrix—the square array in which the diagonal values equal 1, and all other values equal 0.

As an example of how a two-row, two-column matrix is calculated, suppose that the range A1:B2 contains the letters a, b, c, and d that represent any four numbers. The following table shows the inverse of the matrix A1:B2.

MInverse is calculated with an accuracy of approximately 16 digits, which may lead to a small numeric error when the calculation is not complete.

Some square matrices cannot be inverted and will return the #NUM! error value with MInverse. The determinant for a noninvertable matrix is 0.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MIrr(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the modified internal rate of return for a series of periodic cash flows. MIrr considers both the cost of the investment and the interest received on reinvestment of cash.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Values - an array or a reference to cells that contain numbers. These numbers represent a series of payments (negative values) and income (positive values) occurring at regular periods.

Arg2 Required Double Finance_rate - the interest rate you pay on the money used in the cash flows.

Arg3 Required Double Reinvest_rate - the interest rate you receive on the cash flows as you reinvest them.

#RETURN-VALUE: Double

#REMARKS:

Values must contain at least one positive value and one negative value to calculate the modified internal rate of return; otherwise, MIrr returns the #DIV/0! error value.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

MIrr uses the order of values to interpret the order of cash flows. Be sure to enter your payment and income values in the sequence that you want and with the correct signs (positive values for cash received, negative values for cash paid).

If n is the number of cash flows in values, frate is the finance_rate, and rrate is the reinvest_rate, the formula for MIrr is:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MMult(self, Arg1, Arg2) -> VBA_Variant:
    '''Returns the matrix product of two arrays. The result is an array with the same number of rows as array1 and the same number of columns as array2.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg2 Required Variant Array1, array2 - the arrays you want to multiply.

#RETURN-VALUE: Variant

#REMARKS:

The number of columns in array1 must be the same as the number of rows in array2, and both arrays must contain only numbers.

Array1 and array2 can be given as cell ranges, array constants, or references.

MMult returns the #VALUE! error when:

The matrix product array a of two arrays b and c is as follows, where i is the row number, and j is the column number:

Formulas that return arrays must be entered as array formulas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MRound(self, Arg1, Arg2) -> float:
    '''Returns a number rounded to the desired multiple.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the value to round.

Arg2 Required Variant Multiple - the multiple to which you want to round number.

#RETURN-VALUE: Double

#REMARKS:

MRound rounds up, away from zero, if the remainder of dividing number by multiple is greater than or equal to half the value of multiple.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Match(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the relative position of an item in an array that matches a specified value in a specified order. Use Match instead of one of the Lookup functions when you need the position of an item in a range instead of the item itself.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Lookup_value: the value that you use to find the value that you want in a table.

Arg2 Required Variant Lookup_array: a contiguous range of cells containing possible lookup values. Lookup_array must be an array or an array reference.

Arg3 Optional Variant Match_type: the number -1, 0, or 1. Match_type specifies how Microsoft Excel matches lookup_value with values in lookup_array.

#RETURN-VALUE: Double

#REMARKS:

Lookup_value is the value that you want to match in lookup_array. For example, when you look up a number in a telephone book, you are using the person's name as the lookup value, but the telephone number is the value that you want.

Lookup_value can be a value (number, text, or logical value) or a cell reference to a number, text, or logical value.

If match_type is 1, Match finds the largest value that is less than or equal to lookup_value. Lookup_array must be placed in ascending order: ...-2, -1, 0, 1, 2, ..., A-Z, FALSE, TRUE.

If match_type is 0, Match finds the first value that is exactly equal to lookup_value. Lookup_array can be in any order. Note that Match is case-insensitive.

If match_type is -1, Match finds the smallest value that is greater than or equal to lookup_value. Lookup_array must be placed in descending order: TRUE, FALSE, Z-A, ...2, 1, 0, -1, -2, ..., and so on.

If match_type is omitted, it is assumed to be 1.

Match returns the position of the matched value within lookup_array, not the value itself. For example, MATCH("b",{"a","b","c"},0) returns 2, the relative position of "b" within the array {"a","b","c"}.

Match does not distinguish between uppercase and lowercase letters when matching text values.

If Match is unsuccessful in finding a match, it returns the #N/A error value.

If match_type is 0 and lookup_value is text, you can use the wildcard characters, question mark (?) and asterisk (*), in lookup_value. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

For each value in the first column of the first worksheet, this example searches through the entire workbook for a matching value. If the macro finds a matching value, it sets the original value on the first worksheet to be bold.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

For each value in the first column of the first worksheet, this example searches through the entire workbook for a matching value. If the macro finds a matching value, it sets the original value on the first worksheet to be bold.

Sub HighlightMatches()
    Application.ScreenUpdating = False
    
    'Declare variables
    Dim var As Variant, iSheet As Integer, iRow As Long, iRowL As Long, bln As Boolean
       
       'Set up the count as the number of filled rows in the first column of Sheet1.
       iRowL = Cells(Rows.Count, 1).End(xlUp).Row
       
       'Cycle through all the cells in that column:
       For iRow = 1 To iRowL
          'For every cell that is not empty, search through the first column in each worksheet in the
          'workbook for a value that matches that cell value.

          If Not IsEmpty(Cells(iRow, 1)) Then
             For iSheet = ActiveSheet.Index + 1 To Worksheets.Count
                bln = False
                var = Application.Match(Cells(iRow, 1).Value, Worksheets(iSheet).Columns(1), 0)
                
                'If you find a matching value, indicate success by setting bln to true and exit the loop;
                'otherwise, continue searching until you reach the end of the workbook.
                If Not IsError(var) Then
                   bln = True
                   Exit For
                End If
             Next iSheet
          End If
          
          'If you don't find a matching value, don't bold the value in the original list;
          'if you do find a value, bold it.
          If bln = False Then
             Cells(iRow, 1).Font.Bold = False
             Else
             Cells(iRow, 1).Font.Bold = True
          End If
       Next iRow
    Application.ScreenUpdating = True
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Max(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the largest value in a set of values.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 – Arg30 Required Variant Number1, number2... - 1 to 30 numbers for which you want to find the maximum value.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are used. Empty cells, logical values, or text in the array or reference are ignored.

If the arguments contain no numbers, Max returns 0 (zero).

Arguments that are error values or text that cannot be translated into numbers cause errors.

If you want to include logical values and text representations of numbers in a reference as part of the calculation, use the MAXA function.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MaxIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):  pass

  def Median(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the median of the given numbers. The median is the number in the middle of a set of numbers.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 numbers for which you want the median.

#RETURN-VALUE: Double

#REMARKS:

If there is an even number of numbers in the set, Median calculates the average of the two numbers in the middle.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Min(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the smallest number in a set of values.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 – Arg30 Required Variant Number1, number2... - 1 to 30 numbers for which you want to find the minimum value.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are used. Empty cells, logical values, or text in the array or reference are ignored.

If the arguments contain no numbers, Min returns 0.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If you want to include logical values and text representations of numbers in a reference as part of the calculation, use the MINA function.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MinIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):  pass

  def Mode(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the most frequently occurring, or repetitive, value in an array or range of data.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 arguments for which you want to calculate the mode. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If the data set contains no duplicate data points, Mode returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Mode_Mult(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> VBA_Variant:
    '''Returns a vertical array of the most frequently occurring, or repetitive, values in an array or range of data.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number1 - The first number argument for which you want to calculate the mode.

Arg2 - Arg30 Optional Variant Number2 - Number30 - Number arguments from 2 to 30 for which you want to calculate the mode. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Variant

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If the data set contains no duplicate data points, Mode_Mult returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Mode_Sngl(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the most frequently occurring, or repetitive, value in an array or range of data.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 arguments for which you want to calculate the mode. You can also use a single array or a reference to an array instead of arguments separated by commas (,).

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If the data set contains no duplicate data points, Mode_Sngl returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def MultiNomial(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the ratio of the factorial of a sum of values to the product of factorials.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 values for which you want the multinomial.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, MultiNomial returns the #VALUE! error value.

If any argument is less than zero, MultiNomial returns the #NUM! error value.

The multinomial is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Munit(self, Arg1) -> VBA_Variant:
    '''Returns the unit matrix for the specified dimension.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Integer specifying the dimension of the unit matrix that you want to return.

#RETURN-VALUE: Variant
    '''

  def NPer(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Rate - the interest rate per period.

Arg2 Required Double Pmt - the payment made each period; it cannot change over the life of the annuity. Typically, pmt contains principal and interest but no other fees or taxes.

Arg3 Required Double Pv - the present value, or the lump-sum amount that a series of future payments is worth right now.

Arg4 Optional Variant Fv - the future value, or a cash balance that you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0).

Arg5 Optional Variant Type - the number 0 or 1 and indicates when payments are due.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NegBinomDist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the negative binomial distribution. NegBinomDist returns the probability that there will be number_f failures before the number_s-th success, when the constant probability of a success is probability_s. This function is similar to the binomial distribution, except that the number of successes is fixed, and the number of trials is variable. Like the binomial, trials are assumed to be independent.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number_f - the number of failures.

Arg2 Required Double Number_s - the threshold number of successes.

Arg3 Required Double Probability_s - the probability of a success.

#RETURN-VALUE: Double

#REMARKS:

For example, you need to find 10 people with excellent reflexes, and you know the probability that a candidate has these qualifications is 0.3. NegBinomDist calculates the probability that you'll interview a certain number of unqualified candidates before finding all 10 qualified candidates.

Number_f and number_s are truncated to integers.

If any argument is nonnumeric, NegBinomDist returns the #VALUE! error value.

If probability_s < 0 or if probability > 1, NegBinomDist returns the #NUM! error value.

If number_f < 0 or number_s < 1, NegBinomDist returns the #NUM! error value.

The equation for the negative binomial distribution is as follows, where x is number_f, r is number_s, and p is probability_s:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NegBinom_Dist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the negative binomial distribution. NegBinom_Dist returns the probability that there will be number_f failures before the number_s-th success, when the constant probability of a success is probability_s. This function is similar to the binomial distribution, except that the number of successes is fixed, and the number of trials is variable. Like the binomial, trials are assumed to be independent.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number_f - the number of failures.

Arg2 Required Double Number_s - the threshold number of successes.

Arg3 Required Double Probability_s - the probability of a success.

Arg4 Optional Variant Cumulative - A logical value that determines the form of the function. If cumulative is True, NegBinom_Dist returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

For example, you need to find 10 people with excellent reflexes, and you know the probability that a candidate has these qualifications is 0.3. NegBinom_Dist calculates the probability that you'll interview a certain number of unqualified candidates before finding all 10 qualified candidates.

Number_f and number_s are truncated to integers.

If any argument is nonnumeric, NegBinom_Dist returns the #VALUE! error value.

If probability_s < 0 or if probability > 1, NegBinom_Dist returns the #NUM! error value.

If number_f < 0 or number_s < 1, NegBinom_Dist returns the #NUM! error value.

The equation for the negative binomial distribution is as follows, where x is number_f, r is number_s, and p is probability_s:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NetworkDays(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the number of whole working days between start_date and end_date. Working days exclude weekends and any dates identified in holidays. Use NetworkDays to calculate employee benefits that accrue based on the number of days worked during a specific term.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Start_date - a date that represents the start date.

Arg2 Required Variant End_date - a date that represents the end date.

Arg3 Optional Variant Holidays - an optional range of one or more dates to exclude from the working calendar, such as state and federal holidays and floating holidays. The list can be either a range of cells that contains the dates or an array constant of the serial numbers that represent the dates.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

If any argument is not a valid date, NetworkDays returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NetworkDays_Intl(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the number of whole workdays between two dates using parameters to indicate which and how many days are weekend days. Weekend days and any days that are specified as holidays are not considered as workdays.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Start_date - The start date for which the difference is to be computed. The start_date can be earlier than, the same as, or later than the end_date.

Arg2 Required Variant End_date - The end date for which the difference is to be computed. The start_date can be earlier than, the same as, or later than the end_date.

Arg3 Optional Variant Weekend - Indicates the days of the week that are weekend days and are not included in the number of whole working days between start_date and end_date. Weekend is a weekend number or string that specifies when weekends occur. Weekend number values indicate the weekend days listed in the following table.Weekend numberWeekend days 1 or omittedSaturday, Sunday2Sunday, Monday3Monday, Tuesday  4Tuesday, Wednesday 5Wednesday, Thursday 6Thursday, Friday7Friday, Saturday11Sunday only12Monday only13Tuesday only 14Wednesday only15Thursday only 16Friday only17Saturday only 

Arg4 Optional Variant Holidays - An optional set of one or more dates that are to be excluded from the working day calendar. Holidays is a range of cells that contain the dates, or an array constant of the serial values that represent those dates. The ordering of dates or serial values in holidays can be arbitrary.

#RETURN-VALUE: Double

#REMARKS:

If start_date is later than end_date, the return value will be negative, and the magnitude will be the number of whole workdays.

If start_date is out of range for the current date base value, NetworkDays_Intl returns the #NUM! error value.

If end_date is out of range for the current date base value, NetworkDays_Intl returns the #NUM! error value.

If a weekend string is of invalid length or contains invalid characters, NetworkDays_Intl returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Nominal(self, Arg1, Arg2) -> float:
    '''Returns the nominal annual interest rate, given the effective rate and the number of compounding periods per year.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Effect_rate - the effective interest rate.

Arg2 Required Variant Npery - the number of compounding periods per year.

#RETURN-VALUE: Double

#REMARKS:

Npery is truncated to an integer.

If either argument is nonnumeric, Nominal returns the #VALUE! error value.

If effect_rate ≤ 0 or if npery < 1, Nominal returns the #NUM! error value.

Nominal is related to Effect as shown in the following equation:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NormDist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the normal distribution for the specified mean and standard deviation. This function has a very wide range of applications in statistics, including hypothesis testing.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value for which you want the distribution.

Arg2 Required Double Mean - the arithmetic mean of the distribution.

Arg3 Required Double Standard_dev - the standard deviation of the distribution.

Arg4 Required Boolean Cumulative - a logical value that determines the form of the function. If cumulative is True, NormDist returns the cumulative distribution function; if False, it returns the probability mass function.

#RETURN-VALUE: Double

#REMARKS:

If mean or standard_dev is nonnumeric, NormDist returns the #VALUE! error value.

If standard_dev ≤ 0, NormDist returns the #NUM! error value.

If mean = 0, standard_dev = 1, and cumulative = TRUE, NormDist returns the standard normal distribution, NormSDist.

The equation for the normal density function (cumulative = FALSE) is:

When cumulative = TRUE, the formula is the integral from negative infinity to x of the given formula.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NormInv(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - a probability corresponding to the normal distribution.

Arg2 Required Double Mean - the arithmetic mean of the distribution.

Arg3 Required Double Standard_dev - the standard deviation of the distribution.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, NormInv returns the #VALUE! error value.

If probability < 0 or if probability > 1, NormInv returns the #NUM! error value.

If standard_dev ≤ 0, NormInv returns the #NUM! error value.

If mean = 0 and standard_dev = 1, NormInv uses the standard normal distribution (see NormSInv).

Given a value for probability, NormInv seeks that value x such that NORMDIST(x, mean, standard_dev, TRUE) = probability. Thus, precision of NormInv depends on precision of NormDist. NormInv uses an iterative search technique. If the search has not converged after 100 iterations, the function returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NormSDist(self, Arg1) -> float:
    '''Returns the standard normal cumulative distribution function. The distribution has a mean of 0 (zero) and a standard deviation of one. Use this function in place of a table of standard normal curve areas.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Z - the value for which you want the distribution.

#RETURN-VALUE: Double

#REMARKS:

If z is nonnumeric, NormSDist returns the #VALUE! error value.

The equation for the standard normal cumulative distribution function is:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NormSInv(self, Arg1) -> float:
    '''Returns the inverse of the standard normal cumulative distribution. The distribution has a mean of zero and a standard deviation of one.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - a probability corresponding to the normal distribution.

#RETURN-VALUE: Double

#REMARKS:

If probability is nonnumeric, NormSInv returns the #VALUE! error value.

If probability ≤ 0 or if probability ≥ 1, NormSInv returns the #NUM! error value.

Given a value for probability, NormSInv seeks that value z such that NORMSDIST(z) = probability. Thus, precision of NormSInv depends on precision of NormSDist.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Norm_Dist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the normal distribution for the specified mean and standard deviation. This function has a wide range of applications in statistics, including hypothesis testing.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The value for which you want the distribution.

Arg2 Required Double Mean - The arithmetic mean of the distribution.

Arg3 Required Double Standard_dev - The standard deviation of the distribution.

Arg4 Required Boolean Cumulative - A logical value that determines the form of the function. If cumulative is True, Norm_Dist returns the cumulative distribution function; if False, it returns the probability mass function.

#RETURN-VALUE: Double

#REMARKS:

If mean or standard_dev is nonnumeric, Norm_Dist returns the #VALUE! error value.

If standard_dev ≤ 0, Norm_Dist returns the #NUM! error value.

If mean = 0, standard_dev = 1, and cumulative = TRUE, Norm_Dist returns the standard normal distribution, Norm_S_Dist.

The equation for the normal density function (cumulative = FALSE) is:

When cumulative = TRUE, the formula is the integral from negative infinity to x of the given formula.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Norm_Inv(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - A probability corresponding to the normal distribution.

Arg2 Required Double Mean - The arithmetic mean of the distribution.

Arg3 Required Double Standard_dev - The standard deviation of the distribution.

#RETURN-VALUE: Double

#REMARKS:

If any argument is non-numeric, Norm_Inv returns the #VALUE! error value.

If probability ≤ 0 or if probability ≥ 1, Norm_Inv returns the #NUM! error value.

If standard_dev ≤ 0, Norm_Inv returns the #NUM! error value.

If mean = 0 and standard_dev = 1, Norm_Inv uses the standard normal distribution (see Norm_S_Inv).

Given a value for probability, Norm_Inv seeks that value x such that NORM_DIST(x, mean, standard_dev, TRUE) = probability. Thus, precision of Norm_Inv depends on precision of Norm_Dist.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Norm_S_Dist(self, Arg1, Arg2) -> float:
    '''Returns the standard normal cumulative distribution function. The distribution has a mean of 0 (zero) and a standard deviation of one. Use this function in place of a table of standard normal curve areas.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Z - The value for which you want the distribution.

Arg2 Optional Variant Cumulative - A logical value that determines the form of the function. If cumulative is True, Norm_S_Dist returns the cumulative distribution function; if False, it returns the probability mass function.

#RETURN-VALUE: Double

#REMARKS:

If z is non-numeric, Norm_S_Dist returns the #VALUE! error value.

The equation for the standard normal cumulative distribution function is:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Norm_S_Inv(self, Arg1) -> float:
    '''Returns the inverse of the standard normal cumulative distribution. The distribution has a mean of 0 (zero) and a standard deviation of one.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - A probability corresponding to the normal distribution.

#RETURN-VALUE: Double

#REMARKS:

If probability is non-numeric, Norm_S_Inv returns the #VALUE! error value.

If probability < 0 or if probability > 1, Norm_S_Inv returns the #NUM! error value.

Given a value for probability, Norm_S_Inv seeks that value z such that NORM_S_DIST(z) = probability. Thus, precision of Norm_S_Inv depends on precision of Norm_S_Dist. Norm_S_Inv uses an iterative search technique. If the search has not converged after 100 iterations, the function returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Npv(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Calculates the net present value of an investment by using a discount rate and a series of future payments (negative values) and income (positive values).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Rate - the rate of discount over the length of one period.

Arg2 - Arg30 Required Variant Value1, value2, ... - 1 to 29 arguments representing the payments and income.

#RETURN-VALUE: Double

#REMARKS:

Value1, value2, ... must be equally spaced in time and occur at the end of each period.

Npv uses the order of value1, value2, ... to interpret the order of cash flows. Be sure to enter your payment and income values in the correct sequence.

Arguments that are numbers, empty cells, logical values, or text representations of numbers are counted; arguments that are error values or text that cannot be translated into numbers are ignored.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

The Npv investment begins one period before the date of the value1 cash flow and ends with the last cash flow in the list. The Npv calculation is based on future cash flows. If your first cash flow occurs at the beginning of the first period, the first value must be added to the Npv result, not included in the values arguments.

If n is the number of cash flows in the list of values, the formula for Npv is:

Npv is similar to the Pv function (present value). The primary difference between Pv and Npv is that Pv allows cash flows to begin either at the end or at the beginning of the period. Unlike the variable Npv cash flow values, Pv cash flows must be constant throughout the investment. For information about annuities and financial functions, see Pv.

Npv is also related to the Irr function (internal rate of return). Irr is the rate for which Npv equals zero: NPV(IRR(...), ...) = 0.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def NumberValue(self, Arg1, Arg2, Arg3) -> float:
    '''Converts text to number in a locale-independent manner.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String String representing the number that you want to convert.

Arg2 Required String Character used as the decimal separator in the string.

Arg3 Required String Character used as the group separator in the string.

#RETURN-VALUE: Double
    '''

  def Oct2Bin(self, Arg1, Arg2) -> str:
    '''Converts an octal number to binary.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the octal number that you want to convert. Number may not contain more than 10 characters. The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant Places - the number of characters to use. If places is omitted, Oct2Bin uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number is negative, Oct2Bin ignores places and returns a 10-character binary number.

If number is negative, it cannot be less than 7777777000, and if number is positive, it cannot be greater than 777.

If number is not a valid octal number, Oct2Bin returns the #NUM! error value.

If Oct2Bin requires more than places characters, it returns the #NUM! error value.

If places is not an integer, it is truncated.

If places is nonnumeric, Oct2Bin returns the #VALUE! error value.

If places is negative, Oct2Bin returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Oct2Dec(self, Arg1) -> str:
    '''Converts an octal number to decimal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the octal number that you want to convert. Number may not contain more than 10 octal characters (30 bits). The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

#RETURN-VALUE: String

#REMARKS:

If number is not a valid octal number, Oct2Dec returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Oct2Hex(self, Arg1, Arg2) -> str:
    '''Converts an octal number to hexadecimal.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the octal number that you want to convert. Number may not contain more than 10 octal characters (30 bits). The most significant bit of number is the sign bit. The remaining 29 bits are magnitude bits. Negative numbers are represented using two's-complement notation.

Arg2 Optional Variant Places - the number of characters to use. If places is omitted, Oct2Hex uses the minimum number of characters necessary. Places is useful for padding the return value with leading 0s (zeros).

#RETURN-VALUE: String

#REMARKS:

If number is negative, Oct2Hex ignores places and returns a 10-character hexadecimal number.

If number is not a valid octal number, Oct2Hex returns the #NUM! error value.

If Oct2Hex requires more than places characters, it returns the #NUM! error value.

If places is not an integer, it is truncated.

If places is nonnumeric, Oct2Hex returns the #VALUE! error value.

If places is negative, Oct2Hex returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Odd(self, Arg1) -> float:
    '''Returns number rounded up to the nearest odd integer.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the value to round.

#RETURN-VALUE: Double

#REMARKS:

If number is nonnumeric, Odd returns the #VALUE! error value.

Regardless of the sign of number, a value is rounded up when adjusted away from zero. If number is an odd integer, no rounding occurs.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OddFPrice(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9) -> float:
    '''Returns the price per $100 face value of a security having an odd (short or long) first period.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Issue - the security's issue date.

Arg4 Required Variant First_coupon - the security's first coupon date.

Arg5 Required Variant Rate - the security's interest rate.

Arg6 Required Variant Yld - the security's annual yield.

Arg7 Required Variant Redemption - the security's redemption value per $100 face value.

Arg8 Required Variant Frequency - the number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg9 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg9.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, issue, first_coupon, and basis are truncated to integers.

If settlement, maturity, issue, or first_coupon is not a valid date, OddFPrice returns the #VALUE! error value.

If rate < 0 or if yld < 0, OddFPrice returns the #NUM! error value.

If basis < 0 or if basis > 4, OddFPrice returns the #NUM! error value.

The following date condition must be satisfied; otherwise, OddFPrice returns the #NUM! error value: maturity > first_coupon > settlement > issue.

OddFPrice is calculated as follows. Odd short first coupon:

where:

Odd long first coupon:

where:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OddFYield(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9) -> float:
    '''Returns the yield of a security that has an odd (short or long) first period.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Issue - the security's issue date.

Arg4 Required Variant First_coupon - the security's first coupon date.

Arg5 Required Variant Rate - the security's interest rate.

Arg6 Required Variant Pr - the security's price.

Arg7 Required Variant Redemption - the security's redemption value per $100 face value.

Arg8 Required Variant Frequency - the number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg9 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg9.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, issue, first_coupon, and basis are truncated to integers.

If settlement, maturity, issue, or first_coupon is not a valid date, OddFYield returns the #VALUE! error value.

If rate < 0 or if pr ≤ 0, OddFYield returns the #NUM! error value.

If basis < 0 or if basis > 4, OddFYield returns the #NUM! error value.

The following date condition must be satisfied; otherwise, OddFYield returns the #NUM! error value: maturity > first_coupon > settlement > issue.

Excel uses an iterative technique to calculate OddFYield. This function uses the Newton method based on the formula used for the function OddFPrice. The yield is changed through 100 iterations until the estimated price with the given yield is close to the price. See OddFPrice for the formula that OddFYield uses.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OddLPrice(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8) -> float:
    '''Returns the price per $100 face value of a security having an odd (short or long) last coupon period.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Last_interest - the security's last coupon date.

Arg4 Required Variant Rate - the security's interest rate.

Arg5 Required Variant Yld - the security's annual yield.

Arg6 Required Variant Redemption - the security's redemption value per $100 face value.

Arg7 Required Variant Frequency - the number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg8 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg8.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, last_interest, and basis are truncated to integers.

If settlement, maturity, or last_interest is not a valid date, OddLPrice returns the #VALUE! error value.

If rate < 0 or if yld < 0, OddLPrice returns the #NUM! error value.

If basis < 0 or if basis > 4, OddLPrice returns the #NUM! error value.

The following date condition must be satisfied; otherwise, OddLPrice returns the #NUM! error value: maturity > settlement > last_interest.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def OddLYield(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8) -> float:
    '''Returns the yield of a security that has an odd (short or long) last period.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Last_interest - the security's last coupon date.

Arg4 Required Variant Rate - the security's interest rate.

Arg5 Required Variant Pr - the security's price.

Arg6 Required Variant Redemption - the security's redemption value per $100 face value.

Arg7 Required Variant Frequency - the number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg8 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg8.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, last_interest, and basis are truncated to integers.

If settlement, maturity, or last_interest is not a valid date, OddLYield returns the #VALUE! error value.

If rate < 0 or if pr ≤ 0, OddLYield returns the #NUM! error value.

If basis < 0 or if basis > 4, OddLYield returns the #NUM! error value.

The following date condition must be satisfied; otherwise, OddLYield returns the #NUM! error value: maturity > settlement > last_interest.

OddLYield is calculated as follows:

where:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Or(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> bool:
    '''Returns True if any argument is True; returns False if all arguments are False.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Logical1, logical2, ... - 1 to 30 conditions that you want to test that can be either True or False.

#RETURN-VALUE: Boolean

#REMARKS:

The arguments must evaluate to logical values such as True or False, or in arrays or references that contain logical values.

If an array or reference argument contains text or empty cells, those values are ignored.

If the specified range contains no logical values, Or returns the #VALUE! error value.

Use an Or array formula to see if a value occurs in an array. To enter an array formula, press Ctrl+Shift+Enter.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PDuration(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the number of periods required by an investment to reach a specified value.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Interest rate per period.

Arg2 Required Double Present value of the investment.

Arg3 Required Double Desired future value of the investment.

#RETURN-VALUE: Double
    '''

  def Pearson(self, Arg1, Arg2) -> float:
    '''Returns the Pearson product moment correlation coefficient, r, a dimensionless index that ranges from -1.0 to 1.0 inclusive and reflects the extent of a linear relationship between two data sets.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array1 - a set of independent values.

Arg2 Required Variant Array2 - a set of dependent values.

#RETURN-VALUE: Double

#REMARKS:

The arguments must be either numbers or names, array constants, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If array1 and array2 are empty or have a different number of data points, Pearson returns the #N/A error value.

The formula for the Pearson product moment correlation coefficient, r, is as follows, where x and y are the sample means AVERAGE(array1) and AVERAGE(array2):

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PercentRank(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the rank of a value in a data set as a percentage of the data set. This function can be used to evaluate the relative standing of a value within a data set. For example, you can use PercentRank to evaluate the standing of an aptitude test score among all scores for the test.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - the array or range of data with numeric values that defines relative standing.

Arg2 Required Double X - the value for which you want to know the rank.

Arg3 Optional Variant Significance - an optional value that identifies the number of significant digits for the returned percentage value. If omitted, PercentRank uses three digits (0.xxx).

#RETURN-VALUE: Double

#REMARKS:

If array is empty, PercentRank returns the #NUM! error value.

If significance < 1, PercentRank returns the #NUM! error value.

If x does not match one of the values in array, PercentRank interpolates to return the correct percentage rank.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PercentRank_Exc(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the rank of a value in a data set as a percentage (0..1, exclusive) of the data set.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - The array or range of data with numeric values that defines relative standing.

Arg2 Required Double X - The value for which you want to know the rank.

Arg3 Optional Variant Significance - A value that identifies the number of significant digits for the returned percentage value. If omitted, PercentRank_Exc uses three digits (0.xxx).

#RETURN-VALUE: Double

#REMARKS:

If array is empty, PercentRank_Exc returns the #NUM! error value.

If significance < 1, PercentRank_Exc returns the #NUM! error value.

If x does not match one of the values in array, PercentRank_Exc interpolates to return the correct percentage rank.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PercentRank_Inc(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the rank of a value in a data set as a percentage (0..1, inclusive) of the data set. This function can be used to evaluate the relative standing of a value within a data set. For example, you can use PercentRank_Inc to evaluate the standing of an aptitude test score among all scores for the test.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - The array or range of data with numeric values that defines relative standing.

Arg2 Required Double X - The value for which you want to know the rank.

Arg3 Optional Variant Significance - An optional value that identifies the number of significant digits for the returned percentage value. If omitted, PercentRank_Inc uses three digits (0.xxx).

#RETURN-VALUE: Double

#REMARKS:

If array is empty, PercentRank_Inc returns the #NUM! error value.

If significance < 1, PercentRank_Inc returns the #NUM! error value.

If x does not match one of the values in array, PercentRank_Inc interpolates to return the correct percentage rank.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Percentile(self, Arg1, Arg2) -> float:
    '''Returns the k-th percentile of values in a range. Use this function to establish a threshold of acceptance. For example, you can decide to examine candidates who score above the 90th percentile.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - the array or range of data that defines relative standing.

Arg2 Required Double K - the percentile value in the range 0..1, inclusive.

#RETURN-VALUE: Double

#REMARKS:

If array is empty, Percentile returns the #NUM! error value.

If k is nonnumeric, Percentile returns the #VALUE! error value.

If k is < 0 or if k > 1, Percentile returns the #NUM! error value.

If k is not a multiple of 1/(n - 1), Percentile interpolates to determine the value at the k-th percentile.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Percentile_Exc(self, Arg1, Arg2) -> float:
    '''Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - The array or range of data that defines relative standing.

Arg2 Required Double K - The percentile value in the range 0..1, exclusive.

#RETURN-VALUE: Double

#REMARKS:

If array is empty, Percentile_Exc returns the #NUM! error value.

If k is nonnumeric, Percentile_Exc returns the #VALUE! error value.

If k is ≤ 0 or if k ≥ 1, Percentile_Exc returns the #NUM! error value.

If k is not a multiple of 1/(n - 1), Percentile_Exc interpolates to determine the value at the k-th percentile.

Percentile_Exc will interpolate when the value for the specified percentile lies between two values in the array. If it cannot interpolate for the percentile, k specified, Excel returns a #NUM! error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Percentile_Inc(self, Arg1, Arg2) -> float:
    '''Returns the k-th percentile of values in a range. Use this function to establish a threshold of acceptance. For example, you can examine candidates who score above the 90th percentile.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - The array or range of data that defines relative standing.

Arg2 Required Double K - The percentile value in the range 0..1, inclusive.

#RETURN-VALUE: Double

#REMARKS:

If array is empty, Percentile_Inc returns the #NUM! error value.

If k is nonnumeric, Percentile_Inc returns the #VALUE! error value.

If k is < 0 or if k > 1, Percentile_Inc returns the #NUM! error value.

If k is not a multiple of 1/(n - 1), Percentile_Inc interpolates to determine the value at the k-th percentile.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Permut(self, Arg1, Arg2) -> float:
    '''Returns the number of permutations for a given number of objects that can be selected from number objects. A permutation is any set or subset of objects or events where internal order is significant. Permutations are different from combinations, for which the internal order is not significant. Use this function for lottery-style probability calculations.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - an integer that describes the number of objects.

Arg2 Required Double Number_chosen - an integer that describes the number of objects in each permutation.

#RETURN-VALUE: Double

#REMARKS:

Both arguments are truncated to integers.

If number or number_chosen is nonnumeric, Permut returns the #VALUE! error value.

If number ≤ 0 or if number_chosen < 0, Permut returns the #NUM! error value.

If number < number_chosen, Permut returns the #NUM! error value.

The equation for the number of permutations is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Permutationa(self, Arg1, Arg2) -> float:
    '''Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Total number of objects.

Arg2 Required Double Number of objects in each permutation.

#RETURN-VALUE: Double
    '''

  def Phi(self, Arg1) -> float:
    '''Returns the value of the density function for a standard normal distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number for which you want the density of the standard normal distribution.

#RETURN-VALUE: Double
    '''

  def Phonetic(self, Arg1) -> float:
    '''Extracts the phonetic (furigana) characters from a text string.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Reference - a text string or a reference to a single cell or a range of cells that contain a furigana text string.

#RETURN-VALUE: Double

#REMARKS:

If reference is a range of cells, the furigana text string in the upper-left corner cell of the range is returned.

If the reference is a range of nonadjacent cells, the #N/A error value is returned.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Pi(self) -> float:
    '''Returns the number 3.14159265358979, the mathematical constant pi, accurate to 15 digits.

#RETURN-VALUE: Double
    '''

  def Pmt(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Calculates the payment for a loan based on constant payments and a constant interest rate.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Rate - the interest rate for the loan.

Arg2 Required Double Nper - the total number of payments for the loan.

Arg3 Required Double Pv - the present value, or the total amount that a series of future payments is worth now; also known as the principal.

Arg4 Optional Variant Fv - the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (zero), that is, the future value of a loan is 0.

Arg5 Optional Variant Type - the number 0 (zero) or 1; indicates when payments are due.

#RETURN-VALUE: Double

#REMARKS:

For a more complete description of the arguments in Pmt, see the Pv function.

The following table describes the values that can be used for Arg5.

The payment returned by Pmt includes principal and interest but no taxes, reserve payments, or fees sometimes associated with loans.

Make sure that you are consistent about the units that you use for specifying rate and nper. If you make monthly payments on a four-year loan at an annual interest rate of 12 percent, use 12%/12 for rate and 4*12 for nper. If you make annual payments on the same loan, use 12 percent for rate and 4 for nper.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Poisson(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the Poisson distribution. A common application of the Poisson distribution is predicting the number of events over a specific time, such as the number of cars arriving at a toll plaza in 1 minute.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the number of events.

Arg2 Required Double Mean - the expected numeric value.

Arg3 Required Boolean Cumulative - a logical value that determines the form of the probability distribution returned. If cumulative is True, Poisson returns the cumulative Poisson probability that the number of random events occurring will be between zero and x inclusive; if False, it returns the Poisson probability mass function that the number of events occurring will be exactly x.

#RETURN-VALUE: Double

#REMARKS:

If x is not an integer, it is truncated.

If x or mean is nonnumeric, Poisson returns the #VALUE! error value.

If x < 0, Poisson returns the #NUM! error value.

If mean ≤ 0, Poisson returns the #NUM! error value.

Poisson is calculated as follows. For cumulative = False:

For cumulative = True:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Poisson_Dist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the Poisson distribution. A common application of the Poisson distribution is predicting the number of events over a specific time, such as the number of cars arriving at a toll plaza in one minute.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The number of events.

Arg2 Required Double Mean - The expected numeric value.

Arg3 Required Boolean Cumulative - A logical value that determines the form of the probability distribution returned. If cumulative is True, Poisson_Dist returns the cumulative Poisson probability that the number of random events occurring will be between 0 (zero) and x inclusive; if False, it returns the Poisson probability mass function that the number of events occurring will be exactly x.

#RETURN-VALUE: Double

#REMARKS:

If x is not an integer, it is truncated.

If x or mean is nonnumeric, Poisson_Dist returns the #VALUE! error value.

If x < 0, Poisson_Dist returns the #NUM! error value.

If mean ≤ 0, Poisson_Dist returns the #NUM! error value.

Poisson_Dist is calculated as follows. For cumulative = False:

For cumulative = True:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Power(self, Arg1, Arg2) -> float:
    '''Returns the result of a number raised to a power.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the base number. It can be any real number.

Arg2 Required Double Power - the exponent to which the base number is raised.

#RETURN-VALUE: Double

#REMARKS:

The "^" operator can be used instead of Power to indicate to what power the base number is to be raised, such as in 5^2.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Ppmt(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the payment on the principal for a given period for an investment based on periodic, constant payments and a constant interest rate.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Rate - the interest rate per period.

Arg2 Required Double Per - the period and must be in the range 1 to nper.

Arg3 Required Double Nper - the total number of payment periods in an annuity.

Arg4 Required Double Pv - the present value—the total amount that a series of future payments is worth now.

Arg5 Optional Variant Fv - the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (zero), that is, the future value of a loan is 0.

Arg6 Optional Variant Type - the number 0 or 1 and indicates when payments are due.

#RETURN-VALUE: Double

#REMARKS:

For a more complete description of the arguments in Ppmt, see the Pv function.

The following table describes the values that can be used for Arg6.

Make sure that you are consistent about the units that you use for specifying rate and nper. If you make monthly payments on a four-year loan at 12 percent annual interest, use 12%/12 for rate and 4*12 for nper. If you make annual payments on the same loan, use 12% for rate and 4 for nper.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Price(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> float:
    '''Returns the price per $100 face value of a security that pays periodic interest.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Rate - the security's annual coupon rate.

Arg4 Required Variant Yld - the security's annual yield.

Arg5 Required Variant Redemption - the security's redemption value per $100 face value.

Arg6 Required Variant Frequency - the number of coupon payments per year. For annual payments, frequency = 1; for semiannual, frequency = 2; for quarterly, frequency = 4.

Arg7 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg7.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, frequency, and basis are truncated to integers.

If settlement or maturity is not a valid date, Price returns the #VALUE! error value.

If yld < 0 or if rate < 0, Price returns the #NUM! error value.

If redemption ≤ 0, Price returns the #NUM! error value.

If frequency is any number other than 1, 2, or 4, Price returns the #NUM! error value.

If basis < 0 or if basis > 4, Price returns the #NUM! error value.

If settlement ≥ maturity, Price returns the #NUM! error value.

Price is calculated as follows:

where:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PriceDisc(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the price per $100 face value of a discounted security.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Discount - the security's discount rate.

Arg4 Required Variant Redemption - the security's redemption value per $100 face value.

Arg5 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg5.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, and basis are truncated to integers.

If settlement or maturity is not a valid date, PriceDisc returns the #VALUE! error value.

If discount ≤ 0 or if redemption ≤ 0, PriceDisc returns the #NUM! error value.

If basis < 0 or if basis > 4, PriceDisc returns the #NUM! error value.

If settlement ≥ maturity, PriceDisc returns the #NUM! error value.

PriceDisc is calculated as follows:



where:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PriceMat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the price per $100 face value of a security that pays interest at maturity.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Issue - the security's issue date, expressed as a serial date number.

Arg4 Required Variant Rate - the security's interest rate at date of issue.

Arg5 Required Variant Yld - the security's annual yield.

Arg6 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg6.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, issue, and basis are truncated to integers.

If settlement, maturity, or issue is not a valid date, PriceMat returns the #VALUE! error value.

If rate < 0 or if yld < 0, PriceMat returns the #NUM! error value.

If basis < 0 or if basis > 4, PriceMat returns the #NUM! error value.

If settlement ≥ maturity, PriceMat returns the #NUM! error value.

PriceMat is calculated as follows:



where:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Prob(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the probability that values in a range are between two limits. If upper_limit is not supplied, returns the probability that values in x_range are equal to lower_limit.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant X_range - the range of numeric values of x with which there are associated probabilities.

Arg2 Required Variant Prob_range - a set of probabilities associated with values in x_range.

Arg3 Required Double Lower_limit - the lower bound on the value for which you want a probability.

Arg4 Optional Variant Upper_limit - the optional upper bound on the value for which you want a probability.

#RETURN-VALUE: Double

#REMARKS:

If any value in prob_range ≤ 0 or if any value in prob_range > 1, Prob returns the #NUM! error value.

If the sum of the values in prob_range ≥ 1, Prob returns the #NUM! error value.

If upper_limit is omitted, Prob returns the probability of being equal to lower_limit.

If x_range and prob_range contain a different number of data points, Prob returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Product(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Multiplies all the numbers given as arguments and returns the product.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 numbers that you want to multiply.

#RETURN-VALUE: Double

#REMARKS:

Arguments that are numbers, logical values, or text representations of numbers are counted; arguments that are error values or text that cannot be translated into numbers cause errors.

If an argument is an array or reference, only numbers in the array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Proper(self, Arg1) -> str:
    '''Capitalizes the first letter in a text string and any other letters in text that follow any character other than a letter. Converts all other letters to lowercase letters.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Text - text enclosed in quotation marks, a formula that returns text, or a reference to a cell containing the text that you want to partially capitalize.

#RETURN-VALUE: String
    '''

  def Pv(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the present value of an investment. The present value is the total amount that a series of future payments is worth now. For example, when you borrow money, the loan amount is the present value to the lender.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Rate - the interest rate per period. For example, if you obtain an automobile loan at a 10 percent annual interest rate and make monthly payments, your interest rate per month is 10%/12, or 0.83%. You would enter 10%/12, or 0.83%, or 0.0083, into the formula as the rate.

Arg2 Required Double Nper - the total number of payment periods in an annuity. For example, if you get a four-year car loan and make monthly payments, your loan has 4*12 (or 48) periods. You would enter 48 into the formula for nper.

Arg3 Required Double Pmt - the payment made each period and cannot change over the life of the annuity. Typically, pmt includes principal and interest but no other fees or taxes. For example, the monthly payments on a $10,000, four-year car loan at 12 percent are $263.33. You would enter -263.33 into the formula as the pmt. If pmt is omitted, you must include the fv argument.

Arg4 Optional Variant Fv - the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0). For example, if you want to save $50,000 to pay for a special project in 18 years, $50,000 is the future value. You could then make a conservative guess at an interest rate and determine how much you must save each month. If fv is omitted, you must include the pmt argument.

Arg5 Optional Variant Type - the number 0 or 1; indicates when payments are due.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg5.

Make sure that you are consistent about the units you use for specifying rate and nper. If you make monthly payments on a four-year loan at 12 percent annual interest, use 12%/12 for rate and 4*12 for nper. If you make annual payments on the same loan, use 12% for rate and 4 for nper.

The following functions apply to annuities: An annuity is a series of constant cash payments made over a continuous period. For example, a car loan or a mortgage is an annuity. For more information, see the description for each annuity function.

In annuity functions, cash you pay out, such as a deposit to savings, is represented by a negative number; cash you receive, such as a dividend check, is represented by a positive number. For example, a $1,000 deposit to the bank would be represented by the argument -1000 if you are the depositor and by the argument 1000 if you are the bank.

Microsoft Excel solves for one financial argument in terms of the others.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Quartile(self, Arg1, Arg2) -> float:
    '''Returns the quartile of a data set. Quartiles often are used in sales and survey data to divide populations into groups. For example, you can use Quartile to find the top 25 percent of incomes in a population.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - the array or cell range of numeric values for which you want the quartile value.

Arg2 Required Double Quart - indicates which value to return.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg2.

If array is empty, Quartile returns the #NUM! error value.

If quart is not an integer, it is truncated.

If quart < 0 or if quart > 4, Quartile returns the #NUM! error value.

Min, Median, and Max return the same value as Quartile when quart is equal to 0 (zero), 2, and 4, respectively.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Quartile_Exc(self, Arg1, Arg2) -> float:
    '''Returns the quartile of the data set, based on percentile values from 0..1, exclusive.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - The array or cell range of numeric values for which you want the quartile value.

Arg2 Required Double Quart - The value to return.

#RETURN-VALUE: Double

#REMARKS:

If array is empty, Quartile_Exc returns the #NUM! error value.

If quart is not an integer, it is truncated.

If quart ≤ 0 or if quart ≥ 4, Quartile_Exc returns the #NUM! error value.

Min, Median, and Max return the same value as Quartile_Exc when quart is equal to 0 (zero), 2, and 4, respectively.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Quartile_Inc(self, Arg1, Arg2) -> float:
    '''Returns the quartile of a data set based on percentile values from 0..1, inclusive. Quartiles often are used in sales and survey data to divide populations into groups. For example, you can use Quartile_Inc to find the top 25 percent of incomes in a population.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - the array or cell range of numeric values for which you want the quartile value.

Arg2 Required Double Quart - The value to return.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg2.

If array is empty, Quartile_Inc returns the #NUM! error value.

If quart is not an integer, it is truncated.

If quart < 0 or if quart > 4, Quartile_Inc returns the #NUM! error value.

Min, Median, and Max return the same value as Quartile_Inc when quart is equal to 0 (zero), 2, and 4, respectively.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Quotient(self, Arg1, Arg2) -> float:
    '''Returns the integer portion of a division. Use this function when you want to discard the remainder of a division.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Numerator - the dividend.

Arg2 Required Variant Denominator - the divisor.

#RETURN-VALUE: Double

#REMARKS:

If either argument is nonnumeric, Quotient returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RSq(self, Arg1, Arg2) -> float:
    '''Returns the square of the Pearson product moment correlation coefficient through data points in known_y's and known_x's. For more information, see Pearson. The r-squared value can be interpreted as the proportion of the variance in y attributable to the variance in x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Known_y's - an array or range of data points.

Arg2 Required Variant Known_x's - an array or range of data points.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If known_y's and known_x's are empty or have a different number of data points, RSq returns the #N/A error value.

If known_y's and known_x's contain only one data point, RSq returns the #DIV/0! error value.

The equation for the Pearson product moment correlation coefficient, r, is as follows, where x and y are the sample means AVERAGE(known_x's) and AVERAGE(known_y's). RSq returns r2, which is the square of this correlation coefficient.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RTD(self, progID, server, topic1, topic2, topic3, topic4, topic5, topic6, topic7, topic8, topic9, topic10, topic11, topic12, topic13, topic14, topic15, topic16, topic17, topic18, topic19, topic20, topic21, topic22, topic23, topic24, topic25, topic26, topic27, topic28) -> VBA_Variant:
    '''This method connects to a source to receive real-time data (RTD).

#PARAMETERS:

Name Required/Optional Data type Description

progID Required Variant A string representing the real-time server programmatic identifier.

server Required Variant A server name, Null string, or vbNullString constant.

topic1 Required Variant A String representing a topic.

topic2 – topic28 Optional Variant A String representing a topic.

#RETURN-VALUE: Variant

#REMARKS:

The server argument is required in Visual Basic for Applications (VBA), even though it can be omitted on a worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Radians(self, Arg1) -> float:
    '''Converts degrees to radians.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Angle - an angle in degrees that you want to convert.

#RETURN-VALUE: Double
    '''

  def RandArray(self, Arg1, Arg2, Arg3, Arg4, Arg5):  pass

  def RandBetween(self, Arg1, Arg2) -> float:
    '''Returns a random integer number between the numbers that you specify. A new random integer number is returned every time the worksheet is calculated.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Bottom - the smallest integer RandBetween will return.

Arg2 Required Variant Top - the largest integer RandBetween will return.

#RETURN-VALUE: Double
    '''

  def Rank(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the rank of a number in a list of numbers. The rank of a number is its size relative to other values in a list. If you were to sort the list, the rank of the number would be its position.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the number whose rank you want to find.

Arg2 Required Range Ref - an array of, or a reference to, a list of numbers. Nonnumeric values in ref are ignored.

Arg3 Optional Variant Order - a number specifying how to rank number.

#RETURN-VALUE: Double

#REMARKS:

If order is 0 (zero) or omitted, Microsoft Excel ranks number as if ref were a list sorted in descending order.

If order is any nonzero value, Excel ranks number as if ref were a list sorted in ascending order.

Rank gives duplicate numbers the same rank. However, the presence of duplicate numbers affects the ranks of subsequent numbers. For example, in a list of integers sorted in ascending order, if the number 10 appears twice and has a rank of 5, 11 would have a rank of 7 (no number would have a rank of 6).

For some purposes you might want to use a definition of rank that takes ties into account. In the previous example, you would want a revised rank of 5.5 for the number 10. To do this, add the following correction factor to the value returned by Rank. This correction factor is appropriate both for the case where rank is computed in descending order (order = 0 or omitted) or ascending order (order = nonzero value).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Rank_Avg(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the rank of a number in a list of numbers; that is, its size relative to other values in the list. If more than one value has the same rank, the average rank is returned.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - The number whose rank you want to find.

Arg2 Required Range Ref - An array of, or a reference to, a list of numbers. Non-numeric values in reference are ignored.

Arg3 Optional Variant Order - A number that specifies how to rank number. If the order is 0 (zero) or omitted, Microsoft Excel ranks the number as if the reference were a list sorted in descending order. If the order is any non-zero value, Excel ranks number as if the reference were a list sorted in ascending order.

#RETURN-VALUE: Double
    '''

  def Rank_Eq(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the rank of a number in a list of numbers. The rank of a number is its size relative to other values in a list. If you were to sort the list, the rank of the number would be its position.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - The number whose rank you want to find.

Arg2 Required Range Ref - An array of, or a reference to, a list of numbers. Non-numeric values in reference are ignored.

Arg3 Optional Variant Order - A number that specifies how to rank the number.

#RETURN-VALUE: Double

#REMARKS:

If the order is 0 (zero) or omitted, Microsoft Excel ranks the number as if the reference were a list sorted in descending order.

If the order is any non-zero value, Excel ranks the number as if the reference were a list sorted in ascending order.

Rank_Eq gives duplicate numbers the same rank. However, the presence of duplicate numbers affects the ranks of subsequent numbers. For example, in a list of integers sorted in ascending order, if the number 10 appears twice and has a rank of 5, 11 would have a rank of 7 (no number would have a rank of 6).

For some purposes you might want to use a definition of rank that takes ties into account. In the previous example, you would want a revised rank of 5.5 for the number 10. To do this, add the following correction factor to the value returned by Rank_Eq. This correction factor is appropriate both for the case where rank is computed in descending order (order = 0 or omitted) or ascending order (order = nonzero value).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Rate(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the interest rate per period of an annuity. Rate is calculated by iteration and can have zero or more solutions. If the successive results of Rate don't converge to within 0.0000001 after 20 iterations, Rate returns the #NUM! error value.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Nper - the total number of payment periods in an annuity.

Arg2 Required Double Pmt - the payment made each period and cannot change over the life of the annuity. Typically, pmt includes principal and interest but no other fees or taxes. If pmt is omitted, you must include the fv argument.

Arg3 Required Double Pv - the present value—the total amount that a series of future payments is worth now.

Arg4 Optional Variant Fv - the future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0).

Arg5 Optional Variant Type - the number 0 or 1; indicates when payments are due.

Arg6 Optional Variant Guess - your guess for what the rate will be.

#RETURN-VALUE: Double

#REMARKS:

For a complete description of the arguments nper, pmt, pv, fv, and type, see Pv.

The following table describes the values that can be used for Arg5.

If you omit guess, it is assumed to be 10 percent.

If Rate does not converge, try different values for guess. Rate usually converges if guess is between 0 and 1.

Make sure that you are consistent about the units that you use for specifying guess and nper. If you make monthly payments on a four-year loan at 12 percent annual interest, use 12%/12 for guess and 4*12 for nper. If you make annual payments on the same loan, use 12% for guess and 4 for nper.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Received(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the amount received at maturity for a fully invested security.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Investment - the amount invested in the security.

Arg4 Required Variant Discount - the security's discount rate.

Arg5 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg5.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, and basis are truncated to integers.

If settlement or maturity is not a valid date, Received returns the #VALUE! error value.

If investment ≤ 0 or if discount ≤ 0, Received returns the #NUM! error value.

If basis < 0 or if basis > 4, Received returns the #NUM! error value.

If settlement ≥ maturity, Received returns the #NUM! error value.

Received is calculated as follows, where B = number of days in a year, depending on the day count basis, and DSM = number of days from settlement to maturity:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Replace(self, Arg1, Arg2, Arg3, Arg4) -> str:
    '''Replaces part of a text string, based on the number of characters that you specify, with a different text string.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Text in which you want to replace some characters.

Arg2 Required Double The position of the character in Arg1 that you want to replace with Arg4.

Arg3 Required Double The number of characters in Arg1 that you want the Replace method to replace with Arg4.

Arg4 Required String Text that will replace characters in Arg1.

#RETURN-VALUE: A String value that represents the new string, after replacement.

#EXAMPLE:

This example replaces abcdef with ac-ef and notifies the user during this process.

Sub UseReplace() 
 
 Dim strCurrent As String 
 Dim strReplaced As String 
 
 strCurrent = "abcdef" 
 
 ' Notify user and display current string. 
 MsgBox "The current string is: " & strCurrent 
 
 ' Replace "cd" with "-". 
 strReplaced = Application.WorksheetFunction.Replace _ 
 (Arg1:=strCurrent, Arg2:=3, _ 
 Arg3:=2, Arg4:="-") 
 
 ' Notify user and display replaced string. 
 MsgBox "The replaced string is: " & strReplaced 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ReplaceB(self, Arg1, Arg2, Arg3, Arg4) -> str:
    '''Replaces part of a text string, based on the number of bytes that you specify, with a different text string.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Old_text - text in which you want to replace some characters.

Arg2 Required Double Start_num - the position of the character in old_text that you want to replace with new_text.

Arg3 Required Double Num_chars - the number of characters in old_text that you want Replace to replace with new_text.

Arg4 Required String New_text - the text that will replace characters in old_text.

#RETURN-VALUE: String

#REMARKS:

Replace is intended for use with languages that use the single-byte character set (SBCS), whereas ReplaceB is intended for use with languages that use the double-byte character set (DBCS). The default language setting on your computer affects the return value in the following way:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Rept(self, Arg1, Arg2) -> str:
    '''Repeats text a given number of times. Use Rept to fill a cell with a number of instances of a text string.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Text - the text that you want to repeat.

Arg2 Required Double Number_times - a positive number specifying the number of times to repeat text.

#RETURN-VALUE: String

#REMARKS:

If number_times is 0 (zero), Rept returns "" (empty text).

If number_times is not an integer, it is truncated.

The result of the Rept function cannot be longer than 32,767 characters, or Rept returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Roman(self, Arg1, Arg2) -> str:
    '''Converts an arabic numeral to roman, as text.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the Arabic numeral that you want converted.

Arg2 Optional Variant Form - a number specifying the type of roman numeral you want. The roman numeral style ranges from Classic to Simplified, becoming more concise as the value of form increases.

#RETURN-VALUE: String

#REMARKS:

The following table describes the values that can be used for Arg2.

If number is negative, the #VALUE! error value is returned.

If number is greater than 3999, the #VALUE! error value is returned.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Round(self, Arg1, Arg2) -> float:
    '''Rounds a number to a specified number of digits.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - the number that you want to round.

Arg2 Required Double Num_digits - specifies the number of digits to which you want to round number.

#RETURN-VALUE: Double

#REMARKS:

If num_digits is greater than 0 (zero), number is rounded to the specified number of decimal places.

If num_digits is 0, number is rounded to the nearest integer.

If num_digits is less than 0, number is rounded to the left of the decimal point.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RoundBahtDown(self, Arg1):  pass

  def RoundBahtUp(self, Arg1):  pass

  def RoundDown(self, Arg1, Arg2) -> float:
    '''Rounds a number down, toward 0 (zero).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - any real number that you want rounded down.

Arg2 Required Double Num_digits - the number of digits to which you want to round number.

#RETURN-VALUE: Double

#REMARKS:

RoundDown behaves like Round, except that it always rounds a number down.

If num_digits is greater than 0 (zero), number is rounded down to the specified number of decimal places.

If num_digits is 0, number is rounded down to the nearest integer.

If num_digits is less than 0, number is rounded down to the left of the decimal point.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def RoundUp(self, Arg1, Arg2) -> float:
    '''Rounds a number up, away from 0 (zero).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - any real number that you want rounded up.

Arg2 Required Double Num_digits - the number of digits to which you want to round number.

#RETURN-VALUE: Double

#REMARKS:

RoundUp behaves like Round, except that it always rounds a number up.

If num_digits is greater than 0 (zero), number is rounded up to the specified number of decimal places.

If num_digits is 0, number is rounded up to the nearest integer.

If num_digits is less than 0, number is rounded up to the left of the decimal point.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Rri(self, Arg1, Arg2, Arg3) -> float:
    '''Returns an equivalent interest rate for the growth of an investment.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number of periods for the investment.

Arg2 Required Double Present value of the investment.

Arg3 Required Double Future value of the investment.

#RETURN-VALUE: Double
    '''

  def Search(self, Arg1, Arg2, Arg3) -> float:
    '''Search and SearchB locate one text string within a second text string, and return the number of the starting position of the first text string from the first character of the second text string.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Find_text - the text that you want to find.

Arg2 Required String Within_text - the text in which you want to search for find_text.

Arg3 Optional Variant Start_num - the character number in within_text at which you want to start searching.

#RETURN-VALUE: Double

#REMARKS:

Search is intended for use with languages that use the single-byte character set (SBCS), whereas SearchB is intended for use with languages that use the double-byte character set (DBCS). The default language setting on your computer affects the return value in the following way:

Use Search and SearchB to determine the location of a character or text string within another text string so that you can use the Mid and MidB or Replace and ReplaceB functions to change the text.

Search and SearchB are not case-sensitive. If you want to do a case-sensitive search, you can use Find and FindB.

Use the wildcard characters, question mark (?) and asterisk (*), in find_text. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

If find_text is not found, the #VALUE! error value is returned.

If start_num is omitted, it is assumed to be 1.

If start_num is not greater than 0 (zero) or is greater than the length of within_text, the #VALUE! error value is returned.

Use start_num to skip a specified number of characters. Using Search as an example, suppose you are working with the text string AYF0093.YoungMensApparel. To find the number of the first "Y" in the descriptive part of the text string, set start_num equal to 8 so that the serial-number portion of the text is not searched. Search begins with character 8, finds find_text at the next character, and returns the number 9.

Search always returns the number of characters from the start of within_text, counting the characters you skip if start_num is greater than 1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SearchB(self, Arg1, Arg2, Arg3) -> float:
    '''Search and SearchB locate one text string within a second text string, and return the number of the starting position of the first text string from the first character of the second text string.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Find_text - the text that you want to find.

Arg2 Required String Within_text - the text in which you want to search for find_text.

Arg3 Optional Variant Start_num - the character number in within_text at which you want to start searching.

#RETURN-VALUE: Double

#REMARKS:

Search is intended for use with languages that use the single-byte character set (SBCS), whereas SearchB is intended for use with languages that use the double-byte character set (DBCS). The default language setting on your computer affects the return value in the following way:

Use Search and SearchB to determine the location of a character or text string within another text string so that you can use the Mid and MidB or Replace and ReplaceB functions to change the text.

Search and SearchB are not case-sensitive. If you want to do a case-sensitive search, you can use Find and FindB.

Use the wildcard characters, question mark (?) and asterisk (*), in find_text. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

If find_text is not found, the #VALUE! error value is returned.

If start_num is omitted, it is assumed to be 1.

If start_num is not greater than 0 (zero) or is greater than the length of within_text, the #VALUE! error value is returned.

Use start_num to skip a specified number of characters. Using Search as an example, suppose you are working with the text string AYF0093.YoungMensApparel. To find the number of the first "Y" in the descriptive part of the text string, set start_num equal to 8 so that the serial-number portion of the text is not searched. Search begins with character 8, finds find_text at the next character, and returns the number 9.

Search always returns the number of characters from the start of within_text, counting the characters you skip if start_num is greater than 1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Sec(self, Arg1) -> float:
    '''Returns the secant of an angle.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Angle in radians for which you want the secant.

#RETURN-VALUE: Double
    '''

  def Sech(self, Arg1) -> float:
    '''Returns the hyperbolic secant of an angle.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Angle in radians for which you want the hyperbolic secant.

#RETURN-VALUE: Double
    '''

  def Sequence(self, Arg1, Arg2, Arg3, Arg4):  pass

  def SeriesSum(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the sum of a power series based on the following formula:

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant X - the input value to the power series.

Arg2 Required Variant N - the initial power to which you want to raise x.

Arg3 Required Variant M - the step by which to increase n for each term in the series.

Arg4 Required Variant Coefficients - a set of coefficients by which each successive power of x is multiplied. The number of values in coefficients determines the number of terms in the power series. For example, if there are three values in coefficients, there will be three terms in the power series.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, SeriesSum returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Single(self, Arg1):  pass

  def Sinh(self, Arg1) -> float:
    '''Returns the hyperbolic sine of a number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number is any real number.

#RETURN-VALUE: Double

#REMARKS:

The formula for the hyperbolic sine is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Skew(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the skewness of a distribution. Skewness characterizes the degree of asymmetry of a distribution around its mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 arguments for which you want to calculate skewness. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If there are fewer than three data points, or the sample standard deviation is zero, Skew returns the #DIV/0! error value.

The equation for skewness is defined as:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Skew_p(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant 1 to 254 numbers or names, arrays, or references that contain numbers for which you want the population skewness.

Arg2 - Arg30 Optional Variant 1 to 254 numbers or names, arrays, or references that contain numbers for which you want the population skewness.

#RETURN-VALUE: Double
    '''

  def Sln(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the straight-line depreciation of an asset for one period.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Cost - the initial cost of the asset.

Arg2 Required Double Salvage - the value at the end of the depreciation (sometimes called the salvage value of the asset).

Arg3 Required Double Life - the number of periods over which the asset is depreciated (sometimes called the useful life of the asset).

#RETURN-VALUE: Double
    '''

  def Slope(self, Arg1, Arg2) -> float:
    '''Returns the slope of the linear regression line through data points in known_y's and known_x's. The slope is the vertical distance divided by the horizontal distance between any two points on the line, which is the rate of change along the regression line.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Known_y's - an array or cell range of numeric dependent data points.

Arg2 Required Variant Known_x's - the set of independent data points.

#RETURN-VALUE: Double

#REMARKS:

The arguments must be either numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If known_y's and known_x's are empty or have a different number of data points, Slope returns the #N/A error value.

The equation for the slope of the regression line is as follows, where x and y are the sample means AVERAGE(known_x's) and AVERAGE(known_y's):

The underlying algorithm used in the Slope and Intercept functions is different than the underlying algorithm used in the LinEst function. The difference between these algorithms can lead to different results when data is undetermined and collinear. For example, if the data points of the known_y's argument are 0 and the data points of the known_x's argument are 1:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Small(self, Arg1, Arg2) -> float:
    '''Returns the k-th smallest value in a data set. Use this function to return values with a particular relative standing in a data set.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - an array or range of numerical data for which you want to determine the k-th smallest value.

Arg2 Required Double K - the position (from the smallest) in the array or range of data to return.

#RETURN-VALUE: Double

#REMARKS:

If array is empty, Small returns the #NUM! error value.

If k ≤ 0 or if k exceeds the number of data points, Small returns the #NUM! error value.

If n is the number of data points in array, SMALL(array,1) equals the smallest value, and SMALL(array,n) equals the largest value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Sort(self, Arg1, Arg2, Arg3, Arg4):  pass

  def SortBy(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def SqrtPi(self, Arg1) -> float:
    '''Returns the square root of (number * pi).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number - the number by which pi is multiplied.

#RETURN-VALUE: Double

#REMARKS:

If number < 0, SqrtPi returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def StDev(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Estimates standard deviation based on a sample. The standard deviation is a measure of how widely values are dispersed from the average value (the mean).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 number arguments corresponding to a sample of a population. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

StDev assumes that its arguments are a sample of the population. If your data represents the entire population, compute the standard deviation by using StDevP.

The standard deviation is calculated using the "unbiased" or "n-1" method.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

StDev uses the following formula, where x is the sample mean AVERAGE(number1,number2,...) and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def StDevP(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Calculates standard deviation based on the entire population given as arguments. The standard deviation is a measure of how widely values are dispersed from the average value (the mean).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 number arguments corresponding to a population. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

StDevP assumes that its arguments are the entire population. If your data represents a sample of the population, compute the standard deviation by using StDev.

For large sample sizes, StDev and StDevP return approximately equal values.

The standard deviation is calculated by using the "biased" or "n" method.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

StDevP uses the following formula, where x is the sample mean AVERAGE(number1,number2,...) and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def StDev_P(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Calculates standard deviation based on the entire population given as arguments. The standard deviation is a measure of how widely values are dispersed from the average value (the mean).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 number arguments corresponding to a population. You can also use a single array or a reference to an array instead of arguments separated by commas (,).

#RETURN-VALUE: Double

#REMARKS:

StDev_P assumes that its arguments are the entire population. If your data represents a sample of the population, compute the standard deviation by using StDev_S.

For large sample sizes, StDev_S and StDev_P return approximately equal values.

The standard deviation is calculated by using the "biased" or "n" method.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

StDev_P  uses the following formula, where x is the sample mean AVERAGE(number1,number2,...) and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def StDev_S(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Estimates standard deviation based on a sample. The standard deviation is a measure of how widely values are dispersed from the average value (the mean).

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 number arguments corresponding to a sample of a population. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

StDev_S assumes that its arguments are a sample of the population. If your data represents the entire population, compute the standard deviation using StDev_P.

The standard deviation is calculated by using the "unbiased" or "n-1" method.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

StDev_S uses the following formula, where x is the sample mean AVERAGE(number1,number2,...) and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def StEyx(self, Arg1, Arg2) -> float:
    '''Returns the standard error of the predicted y-value for each x in the regression. The standard error is a measure of the amount of error in the prediction of y for an individual x.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Known_y's - an array or range of dependent data points.

Arg2 Required Variant Known_x's - an array or range of independent data points.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

Arguments that are error values or text that cannot be translated into numbers cause errors.

If known_y's and known_x's have a different number of data points, StEyx returns the #N/A error value.

If known_y's and known_x's are empty or have less than three data points, StEyx returns the #DIV/0! error value.

The equation for the standard error of the predicted y is as follows, where x and y are the sample means AVERAGE(known_x's) and AVERAGE(known_y's), and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Standardize(self, Arg1, Arg2, Arg3) -> float:
    '''Returns a normalized value from a distribution characterized by mean and standard_dev.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value that you want to normalize.

Arg2 Required Double Mean - the arithmetic mean of the distribution.

Arg3 Required Double Standard_dev - the standard deviation of the distribution.

#RETURN-VALUE: Double

#REMARKS:

If standard_dev ≤ 0, Standardize returns the #NUM! error value.

The equation for the normalized value is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def StockHistory(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):  pass

  def Substitute(self, Arg1, Arg2, Arg3, Arg4) -> str:
    '''Substitutes new_text for old_text in a text string. Use Substitute when you want to replace specific text in a text string; use Replace when you want to replace any text that occurs in a specific location in a text string.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Text - the text or the reference to a cell containing text for which you want to substitute characters.

Arg2 Required String Old_text - the text that you want to replace.

Arg3 Required String New_text - the text that you want to replace old_text with.

Arg4 Optional Variant Instance_num - specifies which occurrence of old_text you want to replace with new_text. If you specify instance_num, only that instance of old_text is replaced. Otherwise, every occurrence of old_text in text is changed to new_text.

#RETURN-VALUE: String
    '''

  def Subtotal(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Creates subtotals.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double A number indicating the aggregation function to be used by the method.

Arg2 Required Range The first Range object for which a subtotal is to be calculated.

Arg3 - Arg30 Optional Variant Subsequent Range objects for which a subtotal is to be calculated.

#RETURN-VALUE: A Double value that represents the subtotal.
    '''

  def Sum(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Adds all the numbers in a range of cells.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 arguments for which you want the total value or sum.

#RETURN-VALUE: Double

#REMARKS:

Numbers, logical values, and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, or text in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SumIf(self, Arg1, Arg2, Arg3) -> float:
    '''Adds the cells specified by a given criteria.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Range - the range of cells that you want evaluated by criteria.

Arg2 Required Variant Criteria - the criteria in the form of a number, expression, or text that defines which cells will be added. For example, criteria can be expressed as 32, "32", ">32", or "apples".

Arg3 Optional Variant Sum_range - the actual cells to add if their corresponding cells in range match criteria. If sum_range is omitted, the cells in range are both evaluated by criteria and added if they match criteria.

#RETURN-VALUE: Double

#REMARKS:

Sum_range does not have to be the same size and shape as range. The actual cells that are added are determined by using the top, left cell in sum_range as the beginning cell, and then including cells that correspond in size and shape to range. For example:

Use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) preceding the character.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SumIfs(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29) -> float:
    '''Adds the cells in a range that meet multiple criteria.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Range Sum_range - the range to sum.

Arg2 Required Range Criteria_range1, criteria_range2... - One or more ranges in which to evaluate the associated criteria.

Arg3 - Arg30 Required Variant Criteria1, criteria2... - One or more criteria in the form of a number, expression, cell reference, or text that define which cells will be added. For example, criteria can be expressed as 32, "32", ">32", "apples", or B4.

#RETURN-VALUE: Double

#REMARKS:

Each cell in sum_range is summed only if all the corresponding criteria specified are true for that cell.

Cells in sum_range that contain TRUE evaluate as 1; cells in sum_range that contain FALSE evaluate as 0 (zero).

Use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.

Each criteria_range does not have to be the same size and shape as sum_range. The actual cells that are added are determined by using the top, left cell in that criteria_range as the beginning cell, and then including cells that correspond in size and shape to sum_range. For example:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SumProduct(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Multiplies corresponding components in the given arrays, and returns the sum of those products.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Array1, array2, array3... - 2 to 30 arrays whose components you want to multiply and then add.

#RETURN-VALUE: Double

#REMARKS:

The array arguments must have the same dimensions. If they don't, SumProduct returns the #VALUE! error value.

SumProduct treats array entries that are not numeric as if they were zeros.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SumSq(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Returns the sum of the squares of the arguments.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Number1, number2... - 1 to 30 arguments for which you want the sum of the squares. You can also use a single array or a reference to an array instead of arguments separated by commas.

#RETURN-VALUE: Double

#REMARKS:

Arguments can either be numbers or names, arrays, or references that contain numbers.

Numbers, logical values, and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SumX2MY2(self, Arg1, Arg2) -> float:
    '''Returns the sum of the difference of squares of corresponding values in two arrays.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array_x - the first array or range of values.

Arg2 Required Variant Array_y - the second array or range of values.

#RETURN-VALUE: Double

#REMARKS:

The arguments should be either numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If array_x and array_y have a different number of dimensions, SumX2MY2 returns the #N/A error value.

The equation for the sum of the difference of squares is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SumX2PY2(self, Arg1, Arg2) -> float:
    '''Returns the sum of the sum of squares of corresponding values in two arrays. The sum of the sum of squares is a common term in many statistical calculations.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array_x - the first array or range of values.

Arg2 Required Variant Array_y - the second array or range of values.

#RETURN-VALUE: Double

#REMARKS:

The arguments should be either numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If array_x and array_y have a different number of dimensions, SumX2PY2 returns the #N/A error value.

The equation for the sum of the sum of squares is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SumXMY2(self, Arg1, Arg2) -> float:
    '''Returns the sum of squares of differences of corresponding values in two arrays.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array_x - the first array or range of values.

Arg2 Required Variant Array_y - the second array or range of values.

#RETURN-VALUE: Double

#REMARKS:

The arguments should be either numbers or names, arrays, or references that contain numbers.

If an array or reference argument contains text, logical values, or empty cells, those values are ignored; however, cells with the value zero are included.

If array_x and array_y have a different number of dimensions, SumXMY2 returns the #N/A error value.

The equation for the sum of squared differences is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Syd(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the sum-of-years' digits depreciation of an asset for a specified period.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Cost - the initial cost of the asset.

Arg2 Required Double Salvage - the value at the end of the depreciation (sometimes called the salvage value of the asset).

Arg3 Required Double Life - the number of periods over which the asset is depreciated (sometimes called the useful life of the asset).

Arg4 Required Double Per - the period and must use the same units as life.

#RETURN-VALUE: Double

#REMARKS:

SYD is calculated as follows:  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def TBillEq(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the bond-equivalent yield for a Treasury bill.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the Treasury bill's settlement date. The security settlement date is the date after the issue date when the Treasury bill is traded to the buyer.

Arg2 Required Variant Maturity - the Treasury bill's maturity date. The maturity date is the date when the Treasury bill expires.

Arg3 Optional Variant Discount - the Treasury bill's discount rate.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

Settlement and maturity are truncated to integers.

If settlement or maturity is not a valid date, TBillEq returns the #VALUE! error value.

If discount ≤ 0, TBillEq returns the #NUM! error value.

If settlement > maturity, or if maturity is more than one year after settlement, TBillEq returns the #NUM! error value.

TBillEq is calculated as TBILLEQ = (365 x rate)/(360-(rate x DSM)), where DSM is the number of days between settlement and maturity computed according to the 360 days per year basis.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def TBillPrice(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the price per $100 face value for a Treasury bill.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the Treasury bill's settlement date. The security settlement date is the date after the issue date when the Treasury bill is traded to the buyer.

Arg2 Required Variant Maturity - the Treasury bill's maturity date. The maturity date is the date when the Treasury bill expires.

Arg3 Optional Variant Discount - the Treasury bill's discount rate.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

Settlement and maturity are truncated to integers.

If settlement or maturity is not a valid date, TBillPrice returns the #VALUE! error value.

If discount ≤ 0, TBillPrice returns the #NUM! error value.

If settlement > maturity, or if maturity is more than one year after settlement, TBillPrice returns the #NUM! error value.

TBillPrice is calculated as follows, where DSM = number of days from settlement to maturity, excluding any maturity date that is more than one calendar year after the settlement date:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def TBillYield(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the yield for a Treasury bill.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the Treasury bill's settlement date. The security settlement date is the date after the issue date when the Treasury bill is traded to the buyer.

Arg2 Required Variant Maturity - the Treasury bill's maturity date. The maturity date is the date when the Treasury bill expires.

Arg3 Optional Variant Pr - the Treasury bill's price per $100 face value.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

Settlement and maturity are truncated to integers.

If settlement or maturity is not a valid date, TBillYield returns the #VALUE! error value.

If pr ≤ 0, TBillYield returns the #NUM! error value.

If settlement ≥ maturity, or if maturity is more than one year after settlement, TBillYield returns the #NUM! error value.

TBillYield is calculated as follows, where DSM = number of days from settlement to maturity, excluding any maturity date that is more than one calendar year after the settlement date:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def TDist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the Percentage Points (probability) for the Student t-distribution where a numeric value (x) is a calculated value of t for which the Percentage Points are to be computed. The t-distribution is used in the hypothesis testing of small sample data sets. Use this function in place of a table of critical values for the t-distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the numeric value at which to evaluate the distribution.

Arg2 Required Double Degrees_freedom - an integer indicating the number of degrees of freedom.

Arg3 Required Double Tails - specifies the number of distribution tails to return. If tails = 1, TDist returns the one-tailed distribution. If tails = 2, TDist returns the two-tailed distribution.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, TDist returns the #VALUE! error value.

If degrees_freedom < 1, TDist returns the #NUM! error value.

The degrees_freedom and tails arguments are truncated to integers.

If tails is any value other than 1 or 2, TDist returns the #NUM! error value.

If x < 0, TDist returns the #NUM! error value.

If tails = 1, TDist is calculated as TDIST = P(X>x), where X is a random variable that follows the t-distribution.

If tails = 2, TDist is calculated as TDIST = P(|X| > x) = P(X > x or X < -x).

Because x < 0 is not allowed, to use TDist when x < 0, note that TDIST(-x,df,1) = 1 – TDIST(x,df,1) = P(X > -x) and TDIST(-x,df,2) = TDIST(x df,2) = P(|X| > x).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def TInv(self, Arg1, Arg2) -> float:
    '''Returns the t-value of the Student's t-distribution as a function of the probability and the degrees of freedom.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - the probability associated with the two-tailed Student's t-distribution.

Arg2 Required Double Degrees_freedom - the number of degrees of freedom with which to characterize the distribution.

#RETURN-VALUE: Double

#REMARKS:

If either argument is nonnumeric, TInv returns the #VALUE! error value.

If probability < 0 or if probability > 1, TInv returns the #NUM! error value.

If degrees_freedom is not an integer, it is truncated.

If degrees_freedom < 1, TInv returns the #NUM! error value.

TInv returns the value t, such that P(|X| > t) = probability where X is a random variable that follows the t-distribution and P(|X| > t) = P(X < -t or X > t).

A one-tailed t-value can be returned by replacing probability with 2*probability. For a probability of 0.05 and degrees of freedom of 10, the two-tailed value is calculated with TINV(0.05,10), which returns 2.228139.

The one-tailed value for the same probability and degrees of freedom can be calculated with TINV(2*0.05,10), which returns 1.812462.

Given a value for probability, TInv seeks that value x such that TDIST(x, degrees_freedom, 2) = probability. Thus, precision of TInv depends on precision of TDist.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def TTest(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the probability associated with a Student's t-Test. Use TTest to determine whether two samples are likely to have come from the same two underlying populations that have the same mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array1 - the first data set.

Arg2 Required Variant Array2 - the second data set.

Arg3 Required Double Tails - specifies the number of distribution tails. If tails = 1, TTest uses the one-tailed distribution. If tails = 2, TTest uses the two-tailed distribution.

Arg4 Required Double Type - the kind of t-Test to perform.

#RETURN-VALUE: Double

#REMARKS:

The following table represents possible values for Arg4.

If array1 and array2 have a different number of data points, and type = 1 (paired), TTest returns the #N/A error value.

The tails and type arguments are truncated to integers.

If tails or type is nonnumeric, TTest returns the #VALUE! error value.

If tails is any value other than 1 or 2, TTest returns the #NUM! error value.

TTest uses the data in array1 and array2 to compute a non-negative t-statistic. If tails=1, TTest returns the probability of a higher value of the t-statistic under the assumption that array1 and array2 are samples from populations with the same mean.

The value returned by TTest when tails=2 is double that returned when tails=1 and corresponds to the probability of a higher absolute value of the t-statistic under the "same population means" assumption.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def T_Dist(self, Arg1, Arg2, Arg3) -> float:
    '''Returns a Student t-distribution where a numeric value (x) is a calculated value of t for which the Percentage Points are computed.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The numeric value at which to evaluate the distribution.

Arg2 Required Double Deg_freedom - An integer that indicates the number of degrees of freedom.

Arg3 Required Boolean Cumulative - A logical value that determines the form of the function. If cumulative is True, T_Dist returns the cumulative distribution function; if False, it returns the probability density function.

#RETURN-VALUE: Double

#REMARKS:

If any argument is nonnumeric, T_Dist returns the #VALUE! error value.

If deg_freedom < 1, T_Dist returns the #NUM! error value.

If x < 0, T_Dist returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def T_Dist_2T(self, Arg1, Arg2) -> float:
    '''Returns the two-tailed Student t-distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The numeric value at which to evaluate the distribution.

Arg2 Required Double Deg_freedom - An integer that indicates the number of degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

If any argument is non-numeric, T_Dist_2T returns the #VALUE! error value.

If deg_freedom < 1, T_Dist_2T returns the #NUM! error value.

If x < 0, T_Dist_2T returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def T_Dist_RT(self, Arg1, Arg2) -> float:
    '''Returns the right-tailed Student t-distribution where a numeric value (x) is a calculated value of t for which the Percentage Points are to be computed. The t-distribution is used in the hypothesis testing of small sample data sets. Use this function in place of a table of critical values for the t-distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The numeric value at which to evaluate the distribution.

Arg2 Required Double Degrees_freedom - An integer that indicates the number of degrees of freedom.

#RETURN-VALUE: Double

#REMARKS:

If any argument is non-numeric, T_Dist_RT returns the #VALUE! error value.

If degrees_freedom < 1, T_Dist_RT returns the #NUM! error value.

The degrees_freedom and tails arguments are truncated to integers.

If tails is any value other than 1 or 2, T_Dist_RT returns the #NUM! error value.

If x < 0, T_Dist_RT returns the #NUM! error value.

If tails = 1, T_Dist_RT is calculated as T_DIST_RT = P(X>x), where X is a random variable that follows the t-distribution.

If tails = 2, T_Dist_RT is calculated as T_DIST_RT = P(|X| > x) = P(X > x or X < -x).

Because x < 0 is not allowed, to use T_Dist_RT when x < 0, note that T_DIST_RT(-x,df) = 1 – T_DIST_RT(x,df) = P(X > -x) and T_DIST_2T(-x,df) = T_DIST_2T(x df) = P(|X| > x).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def T_Inv(self, Arg1, Arg2) -> float:
    '''Returns the left-tailed inverse of the Student t-distribution.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - The probability associated with the Student t-distribution.

Arg2 Required Double Deg_freedom - The number of degrees of freedom with which to characterize the distribution.

#RETURN-VALUE: Double

#REMARKS:

If either argument is non-numeric, T_Inv returns the #VALUE! error value.

If probability < 0 or if probability > 1, T_Inv returns the #NUM! error value.

If deg_freedom is not an integer, it is truncated.

If deg_freedom < 1, T_Inv returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def T_Inv_2T(self, Arg1, Arg2) -> float:
    '''Returns the t-value of the Student t-distribution as a function of the probability and the degrees of freedom.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Probability - The probability associated with the two-tailed Student t-distribution.

Arg2 Required Double Degrees_freedom - The number of degrees of freedom with which to characterize the distribution.

#RETURN-VALUE: Double

#REMARKS:

If either argument is non-numeric, T_Inv_2T returns the #VALUE! error value.

If probability < 0 or if probability > 1, T_Inv_2T returns the #NUM! error value.

If degrees_freedom is not an integer, it is truncated.

If degrees_freedom < 1, T_Inv_2T returns the #NUM! error value.

T_Inv_2T returns the value t, such that P(|X| > t) = probability where X is a random variable that follows the t-distribution and P(|X| > t) = P(X < -t or X > t).

A one-tailed t-value can be returned by replacing probability with 2*probability. For a probability of 0.05 and degrees of freedom of 10, the two-tailed value is calculated with T_INV_2T(0.05,10), which returns 2.28139.

The one-tailed value for the same probability and degrees of freedom can be calculated with T_INV_2T(2*0.05,10), which returns 1.812462.

Given a value for probability, T_Inv_2T seeks that value x such that T_DIST_RT(x, degrees_freedom, 2) = probability. Thus, precision of T_Inv_2T depends on precision of T_Dist_RT. T_Inv_2T uses an iterative search technique. If the search has not converged after 100 iterations, the function returns the #N/A error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def T_Test(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the probability associated with a Student t-Test. Use T_Test to determine whether two samples are likely to have come from the same two underlying populations that have the same mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array1 - The first data set.

Arg2 Required Variant Array2 - The second data set.

Arg3 Required Double Tails - Specifies the number of distribution tails. If tails = 1, T_Test uses the one-tailed distribution. If tails = 2, T_Test uses the two-tailed distribution.

Arg4 Required Double Type - The kind of t-Test to perform.

#RETURN-VALUE: Double

#REMARKS:

The following table represents possible values for Arg4.

If array1 and array2 have a different number of data points, and type = 1 (paired), T_Test returns the #N/A error value.

The tails and type arguments are truncated to integers.

If tails or type is non-numeric, T_Test returns the #VALUE! error value.

If tails is any value other than 1 or 2, T_Test returns the #NUM! error value.

T_Test uses the data in array1 and array2 to compute a non-negative t-statistic. If tails=1, T_Test returns the probability of a higher value of the t-statistic under the assumption that array1 and array2 are samples from populations with the same mean.

The value returned by T_Test when tails=2 is double that returned when tails=1 and corresponds to the probability of a higher absolute value of the t-statistic under the "same population means" assumption.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Tanh(self, Arg1) -> float:
    '''Returns the hyperbolic tangent of a number.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Number - any real number.

#RETURN-VALUE: Double

#REMARKS:

The formula for the hyperbolic tangent is  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Text(self, Arg1, Arg2) -> str:
    '''Converts a value to text in a specific number format.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant A numeric value, a formula that evaluates to a numeric value, or a reference to a cell containing a numeric value.

Arg2 Required String A number format in text form in the Category box on the Number tab in the Format Cells dialog box.

#RETURN-VALUE: String
    '''

  def TextJoin(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29):  pass

  def ThaiDayOfWeek(self, Arg1):  pass

  def ThaiDigit(self, Arg1):  pass

  def ThaiMonthOfYear(self, Arg1):  pass

  def ThaiNumSound(self, Arg1):  pass

  def ThaiNumString(self, Arg1):  pass

  def ThaiStringLength(self, Arg1):  pass

  def ThaiYear(self, Arg1):  pass

  def Transpose(self, Arg1) -> VBA_Variant:
    '''Returns a vertical range of cells as a horizontal range, or vice versa. Transpose must be entered as an array formula in a range that has the same number of rows and columns, respectively, as an array has columns and rows. Use Transpose to shift the vertical and horizontal orientation of an array on a worksheet.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - an array or range of cells on a worksheet that you want to transpose. The transpose of an array is created by using the first row of the array as the first column of the new array, the second row of the array as the second column of the new array, and so on.

#RETURN-VALUE: Variant
    '''

  def Trend(self, Arg1, Arg2, Arg3, Arg4) -> VBA_Variant:
    '''Returns values along a linear trend. Fits a straight line (using the method of least squares) to the arrays known_y's and known_x's. Returns the y-values along that line for the array of new_x's that you specify.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Known_y's - the set of y-values that you already know in the relationship y = mx + b.

Arg2 Optional Variant Known_x's - an optional set of x-values that you may already know in the relationship y = mx + b.

Arg3 Optional Variant New_x's - new x-values for which you want Trend to return corresponding y-values.

Arg4 Optional Variant Const - a logical value specifying whether to force the constant b to equal 0.

#RETURN-VALUE: Variant

#REMARKS:

If the array known_y's is in a single column, each column of known_x's is interpreted as a separate variable.

If the array known_y's is in a single row, each row of known_x's is interpreted as a separate variable.

The array known_x's can include one or more sets of variables. If only one variable is used, known_y's and known_x's can be ranges of any shape, as long as they have equal dimensions. If more than one variable is used, known_y's must be a vector (that is, a range with a height of one row or a width of one column).

If known_x's is omitted, it is assumed to be the array {1,2,3,...} that is the same size as known_y's.

New_x's must include a column (or row) for each independent variable, just as known_x's does. So, if known_y's is in a single column, known_x's and new_x's must have the same number of columns. If known_y's is in a single row, known_x's and new_x's must have the same number of rows.

If you omit new_x's, it is assumed to be the same as known_x's.

If you omit both known_x's and new_x's, they are assumed to be the array {1,2,3,...} that is the same size as known_y's.

If const is True or omitted, b is calculated normally.

If const is False, b is set equal to 0 (zero), and the m-values are adjusted so that y = mx.

For information about how Microsoft Excel fits a line to data, see LinEst.

Use Trend for polynomial curve fitting by regressing against the same variable raised to different powers. For example, suppose column A contains y-values and column B contains x-values. You can enter x^2 in column C, x^3 in column D, and so on, and then regress columns B through D against column A.

Formulas that return arrays must be entered as array formulas.

When entering an array constant for an argument such as known_x's, use commas to separate values in the same row, and use semicolons to separate rows.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Trim(self, Arg1) -> str:
    '''Removes all spaces from text except for single spaces between words. Use Trim on text that you have received from another application that may have irregular spacing.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Text - the text from which you want spaces removed.

#RETURN-VALUE: String

#REMARKS:

The WorksheetFunction.Trim method in Excel differs from the Trim function in VBA, which removes only leading and trailing spaces.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def TrimMean(self, Arg1, Arg2) -> float:
    '''Returns the mean of the interior of a data set. TrimMean calculates the mean taken by excluding a percentage of data points from the top and bottom tails of a data set. Use this function when you wish to exclude outlying data from your analysis.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array - the array or range of values to trim and average.

Arg2 Required Double Percent - the fractional number of data points to exclude from the calculation. For example, if percent = 0.2, 4 points are trimmed from a data set of 20 points (20 x 0.2): 2 from the top and 2 from the bottom of the set.

#RETURN-VALUE: Double

#REMARKS:

If percent < 0 or percent > 1, TrimMean returns the #NUM! error value.

TrimMean rounds the number of excluded data points down to the nearest multiple of 2. If percent = 0.1, 10 percent of 30 data points equals 3 points. For symmetry, TrimMean excludes a single value from the top and bottom of the data set.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def USDollar(self, Arg1, Arg2) -> str:
    '''Converts a number to text format and applies a currency symbol. The name of the method (and the symbol that it applies) depends upon the language settings.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double A reference to a cell containing a number, or a formula that evaluates to a number.

Arg2 Required Double The number of digits to the right of the decimal point. If Arg2 is negative, the number is rounded to the left of the decimal point. If you omit decimals, it is assumed to be 2.

#RETURN-VALUE: String

#REMARKS:

The USDollar method converts a number to text by using currency format, with the decimals rounded to the specified place. The format used is $#,##0.00_);($#,##0.00).

The major difference between formatting a cell that contains a number with the Format Cells command and formatting a number directly with the Dollar method is that Dollar converts its result to text. A number formatted with the Format Cells command is still a number. You can continue to use numbers formatted with Dollar in formulas, because Excel converts numbers entered as text values to numbers when it calculates.

The following example displays the first number in a currency format, two digits to the right of the decimal point ($1,234.57).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example displays the first number in a currency format, two digits to the right of the decimal point ($1,234.57).

=DOLLAR(A2, 2)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Unichar(self, Arg1) -> str:
    '''Returns the Unicode character referenced by the given numeric value.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Unicode number representing a character.

#RETURN-VALUE: String
    '''

  def Unicode(self, Arg1) -> float:
    '''Returns the number (code point) corresponding to the first character of the text.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required String Character that you want the Unicode value of.

#RETURN-VALUE: Double
    '''

  def Unique(self, Arg1, Arg2, Arg3):  pass

  def VLookup(self, Arg1, Arg2, Arg3, Arg4) -> VBA_Variant:
    '''Searches for a value in the first column of a table array and returns a value in the same row from another column in the table array.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Lookup_value - the value to search in the first column of the table array. Lookup_value can be a value or a reference. If lookup_value is smaller than the smallest value in the first column of table_array, VLookup returns the #N/A error value.

Arg2 Required Variant Table_array - two or more columns of data. Use a reference to a range or a range name. The values in the first column of table_array are the values searched by lookup_value. These values can be text, numbers, or logical values. Uppercase and lowercase text are equivalent.

Arg3 Required Variant Col_index_num - the column number in table_array from which the matching value must be returned. A col_index_num of 1 returns the value in the first column in table_array; a col_index_num of 2 returns the value in the second column in table_array, and so on.

Arg4 Optional Variant Range_lookup - a logical value that specifies whether you want the VLookup method to find an exact match or an approximate match.

#RETURN-VALUE: Variant

#REMARKS:

The V in VLookup stands for vertical. Use the VLookup method instead of the HLookup method when your comparison values are located in a column to the left of the data that you want to find.

If Col_index_num is less than 1, the VLookup method generates an error.

If Col_index_num is greater than the number of columns in table_array, the VLookup method generates an error.

If Range_lookup is True or omitted, an exact or approximate match is returned. If an exact match is not found, the next largest value that is less than lookup_value is returned. The values in the first column of table_array must be placed in ascending sort order; otherwise, the VLookup method may not give the correct value.

If Range_lookup is False, the VLookup method will only find an exact match. In this case, the values in the first column of table_array don't need to be sorted. If there are two or more values in the first column of table_array that match the lookup_value, the first value found is used. If an exact match is not found, an error is generated.

When searching text values in the first column of table_array, ensure that the data in the first column of table_array does not have leading spaces, trailing spaces, inconsistent use of straight (' or ") and curly (‘ or “) quotation marks, or nonprinting characters. In these cases, the VLookup method may give an incorrect or unexpected value. For information about how to clean or trim values, see the Clean and Trim methods.

When searching number or date values, ensure that the data in the first column of table_array is not stored as text values. In this case, the VLookup method may give an incorrect or unexpected value.

If range_lookup is False and lookup_value is text, you can use the wildcard characters, question mark (?) and asterisk (*), in lookup_value. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) preceding the character.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ValueToText(self, Arg1, Arg2):  pass

  def Var(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Estimates variance based on a sample.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 number arguments corresponding to a sample of a population.

#RETURN-VALUE: Double

#REMARKS:

Var assumes that its arguments are a sample of the population. If your data represents the entire population, compute the variance by using VarP.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

Var uses the following formula, where x is the sample mean AVERAGE(number1,number2,...) and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def VarP(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Calculates variance based on the entire population.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 number arguments corresponding to a population.

#RETURN-VALUE: Double

#REMARKS:

VarP assumes that its arguments are the entire population. If your data represents a sample of the population, compute the variance by using Var.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

The equation for VarP is as follows, where x is the sample mean AVERAGE(number1,number2,...) and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Var_P(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Calculates variance based on the entire population.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 number arguments that correspond to a population.

#RETURN-VALUE: Double

#REMARKS:

Var_P assumes that its arguments are the entire population. If your data represents a sample of the population, compute the variance by using Var_S.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

The equation for Var_P is as follows, where x is the sample mean AVERAGE(number1,number2,...) and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Var_S(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> float:
    '''Estimates variance based on a sample.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 - Arg30 Required Variant Number1, number2... - 1 to 30 number arguments corresponding to a sample of a population.

#RETURN-VALUE: Double

#REMARKS:

Var_S assumes that its arguments are a sample of the population. If your data represents the entire population, compute the variance by using Var_P.

Arguments can either be numbers or names, arrays, or references that contain numbers.

Logical values and text representations of numbers that you type directly into the list of arguments are counted.

If an argument is an array or reference, only numbers in that array or reference are counted. Empty cells, logical values, text, or error values in the array or reference are ignored.

Arguments that are error values or text that cannot be translated into numbers cause errors.

Var_S uses the following formula, where x is the sample mean AVERAGE(number1,number2,...) and n is the sample size:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Vdb(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7) -> float:
    '''Returns the depreciation of an asset for any period that you specify, including partial periods, by using the double-declining balance method or some other method that you specify. Vdb stands for variable declining balance.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double Cost - the initial cost of the asset.

Arg2 Required Double Salvage - the value at the end of the depreciation (sometimes called the salvage value of the asset). This value can be 0.

Arg3 Required Double Life - the number of periods over which the asset is depreciated (sometimes called the useful life of the asset).

Arg4 Required Double Start_period - the starting period for which you want to calculate the depreciation. Start_period must use the same units as life.

Arg5 Required Double End_period - the ending period for which you want to calculate the depreciation. End_period must use the same units as life.

Arg6 Optional Variant Factor - the rate at which the balance declines. If factor is omitted, it is assumed to be 2 (the double-declining balance method). Change factor if you don't want to use the double-declining balance method. For a description of the double-declining balance method, see Ddb.

Arg7 Optional Variant No_switch - a logical value specifying whether to switch to straight-line depreciation when depreciation is greater than the declining balance calculation.

#RETURN-VALUE: Double

#REMARKS:

If no_switch is True, Microsoft Excel does not switch to straight-line depreciation even when the depreciation is greater than the declining balance calculation.

If no_switch is False or omitted, Excel switches to straight-line depreciation when depreciation is greater than the declining balance calculation.

All arguments except no_switch must be positive numbers.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def WebService(self, Arg1) -> VBA_Variant:
    '''Underlying function that calls the web service asynchronously, using an HTTP GET request, and returns the response.

#PARAMETERS:

Name Required/Optional Data type Description

Url Required String The URL of the web service to make the HTTP GET request to.

#RETURN-VALUE: Variant

#REMARKS:

The URL parameter is limited to 2048 characters.

Variant

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def WeekNum(self, Arg1, Arg2) -> float:
    '''Returns a number that indicates where the week falls numerically within a year.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Serial_num - a date within the week. Dates should be entered by using the DATE function, or as results of other formulas or functions. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.

Arg2 Optional Variant Return_type - a number that determines on which day the week begins. The default is 1.

#RETURN-VALUE: Double

#REMARKS:

The following table represents possible values for Arg2.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Weekday(self, Arg1, Arg2) -> float:
    '''Returns the day of the week corresponding to a date. The day is given as an integer, ranging from 1 (Sunday) to 7 (Saturday), by default.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Serial_number - a sequential number that represents the date of the day you are trying to find. Dates should be entered by using the DATE function, or as results of other formulas or functions. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.

Arg2 Optional Variant Return_type - a number that determines the type of return value.

#RETURN-VALUE: Double

#REMARKS:

The following table represents possible values for Arg2.

Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Weibull(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the Weibull distribution. Use this distribution in reliability analysis, such as calculating a device's mean time to failure.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - the value at which to evaluate the function.

Arg2 Required Double Alpha - a parameter to the distribution.

Arg3 Required Double Beta - a parameter to the distribution.

Arg4 Required Boolean Cumulative - determines the form of the function.

#RETURN-VALUE: Double

#REMARKS:

If x, alpha, or beta is nonnumeric, Weibull returns the #VALUE! error value.

If x < 0, Weibull returns the #NUM! error value.

If alpha ≤ 0 or if beta ≤ 0, Weibull returns the #NUM! error value.

The equation for the Weibull cumulative distribution function is  

The equation for the Weibull probability density function is  

When alpha = 1, Weibull returns the exponential distribution with  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Weibull_Dist(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the Weibull distribution. Use this distribution in reliability analysis, such as calculating the mean time to failure for a device.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Double X - The value at which to evaluate the function.

Arg2 Required Double Alpha - A parameter to the distribution.

Arg3 Required Double Beta - A parameter to the distribution.

Arg4 Required Boolean Cumulative - Determines the form of the function.

#RETURN-VALUE: Double

#REMARKS:

If x, alpha, or beta is non-numeric, Weibull_Dist returns the #VALUE! error value.

If x < 0, Weibull_Dist returns the #NUM! error value.

If alpha ≤ 0 or if beta ≤ 0, Weibull_Dist returns the #NUM! error value.

The equation for the Weibull cumulative distribution function is  

The equation for the Weibull probability density function is  

When alpha = 1, Weibull_Dist returns the exponential distribution with  

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def WorkDay(self, Arg1, Arg2, Arg3) -> float:
    '''Returns a number that represents a date that is the indicated number of working days before or after a date (the starting date). Working days exclude weekends and any dates identified as holidays. Use WorkDay to exclude weekends or holidays when you calculate invoice due dates, expected delivery times, or the number of days of work performed.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Start_date - a date that represents the start date.

Arg2 Required Variant Days - the number of nonweekend and nonholiday days before or after start_date. A positive value for days yields a future date; a negative value yields a past date.

Arg3 Optional Variant Holidays - an optional list of one or more dates to exclude from the working calendar, such as state and federal holidays and floating holidays. The list can be either a range of cells that contain the dates or an array constant of the serial numbers that represent the dates.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

If any argument is not a valid date, WorkDay returns the #VALUE! error value.

If start_date plus days yields an invalid date, WorkDay returns the #NUM! error value.

If days is not an integer, it is truncated.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def WorkDay_Intl(self, Arg1, Arg2, Arg3, Arg4) -> float:
    '''Returns the serial number of the date before or after a specified number of workdays with custom weekend parameters. Weekend parameters indicate which and how many days are weekend days. Weekend days and any days that are specified as holidays are not considered as workdays.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Start_date - The start date, truncated to integer.

Arg2 Required Variant Days - The number of workdays before or after the start_date. A positive value yields a future date; a negative value yields a past date; a 0 (zero) value yields the start_date. Day-offset is truncated to an integer.

Arg3 Optional Variant Weekend - Indicates the days of the week that are weekend days and are not considered working days. Weekend is a weekend number or string that specifies when weekends occur. Weekend number values indicate the following weekend days.Weekend numberWeekend days 1 or omittedSaturday, Sunday2Sunday, Monday3Monday, Tuesday  4Tuesday, Wednesday 5Wednesday, Thursday 6Thursday, Friday7Friday, Saturday11Sunday only12Monday only13Tuesday only 14Wednesday only15Thursday only 16Friday only17Saturday only 

Arg4 Optional Variant Holidays - An optional set of one or more dates that are to be excluded from the working day calendar. Holidays is a range of cells that contain the dates, or an array constant of the serial values that represent those dates. The ordering of dates or serial values in holidays can be arbitrary.

#RETURN-VALUE: Double

#REMARKS:

If start_date is out of range for the current date base value, WorkDay_Intl returns the #NUM! error value.

If any date in holidays is out of range for the current date base value, WorkDay_Intl returns the #NUM! error value.

If start_date plus day-offset yields an invalid date, WorkDay_Intl returns the #NUM! error value.

If a weekend string is of invalid length or contains invalid characters, WorkDay_Intl returns the #VALUE! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def XLookup(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6):  pass

  def XMatch(self, Arg1, Arg2, Arg3, Arg4):  pass

  def Xirr(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the internal rate of return for a schedule of cash flows that is not necessarily periodic. To calculate the internal rate of return for a series of periodic cash flows, use the Irr function.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Values - a series of cash flows that corresponds to a schedule of payments in dates. The first payment is optional and corresponds to a cost or payment that occurs at the beginning of the investment. If the first value is a cost or payment, it must be a negative value. All succeeding payments are discounted based on a 365-day year. The series of values must contain at least one positive and one negative value.

Arg2 Required Variant Dates - a schedule of payment dates that corresponds to the cash flow payments. The first payment date indicates the beginning of the schedule of payments. All other dates must be later than this date, but they may occur in any order. Dates should be entered by using the DATE function, or as results of other formulas or functions. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.

Arg3 Optional Variant Guess - a number that you guess is close to the result of Xirr.

#RETURN-VALUE: Double

#REMARKS:

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

Numbers in dates are truncated to integers.

Xirr expects at least one positive cash flow and one negative cash flow; otherwise, Xirr returns the #NUM! error value.

If any number in dates is not a valid date, Xirr returns the #VALUE! error value.

If any number in dates precedes the starting date, Xirr returns the #NUM! error value.

If values and dates contain a different number of values, Xirr returns the #NUM! error value.

In most cases, you don't need to provide guess for the Xirr calculation. If omitted, guess is assumed to be 0.1 (10 percent).

Xirr is closely related to Xnpv, the net present value function. The rate of return calculated by Xirr is the interest rate corresponding to XNPV = 0.

Excel uses an iterative technique for calculatingXirr. Using a changing rate (starting with guess), Xirr cycles through the calculation until the result is accurate within 0.000001 percent. If Xirr can't find a result that works after 100 tries, the #NUM! error value is returned.

The rate is changed until:

where:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Xnpv(self, Arg1, Arg2) -> float:
    '''Returns the net present value for a schedule of cash flows that is not necessarily periodic. Read/write Double.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant A series of cash flows that corresponds to a schedule of payments in dates. The first payment is optional and corresponds to a cost or payment that occurs at the beginning of the investment.

Arg2 Required Variant A schedule of payment dates that corresponds to the cash flow payments. The first payment date indicates the beginning of the schedule of payments. All other dates must be later than this date, but they may occur in any order.

#RETURN-VALUE: Double

#REMARKS:

To calculate the net present value for a series of cash flows that is periodic, use the Npv method.

The following example returns the net present value for an investment with the above cost and returns. The cash flows are discounted at 9 percent (2086.6476 or 2086.65).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example returns the net present value for an investment with the above cost and returns. The cash flows are discounted at 9 percent (2086.6476 or 2086.65).

Dim npv As Double 
npv = Application.Evaluate("=XNPV(.09,A2:A6,B2:B6)")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Xor(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30) -> bool:
    '''Returns a logical exclusive OR of all arguments.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant 1 to 254 conditions that you want to test that can be either True or False; can be logical values, arrays, or references.

Arg2 - Arg30 Optional Variant 1 to 254 conditions that you want to test that can be either True or False; can be logical values, arrays, or references.

#RETURN-VALUE: Boolean
    '''

  def YearFrac(self, Arg1, Arg2, Arg3) -> float:
    '''Calculates the fraction of the year represented by the number of whole days between two dates (the start_date and the end_date). Use the YearFrac worksheet function to identify the proportion of a whole year's benefits or obligations to assign to a specific term.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Start_date - a date that represents the start date.

Arg2 Required Variant End_date - a date that represents the end date.

Arg3 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table represents possible values for Arg3.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

All arguments are truncated to integers.

If start_date or end_date are not valid dates, YearFrac returns the #VALUE! error value.

If basis < 0 or if basis > 4, YearFrac returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def YieldDisc(self, Arg1, Arg2, Arg3, Arg4, Arg5) -> float:
    '''Returns the annual yield for a discounted security.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Pr - the security's price per $100 face value.

Arg4 Required Variant Redemption - the security's redemption value per $100 face value.

Arg5 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg5.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, and basis are truncated to integers.

If settlement or maturity is not a valid date, YieldDisc returns the #VALUE! error value.

If pr ≤ 0 or if redemption ≤ 0, YieldDisc returns the #NUM! error value.

If basis < 0 or if basis > 4, YieldDisc returns the #NUM! error value.

If settlement ≥ maturity, YieldDisc returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def YieldMat(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6) -> float:
    '''Returns the annual yield of a security that pays interest at maturity.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Settlement - the security's settlement date. The security settlement date is the date after the issue date when the security is traded to the buyer.

Arg2 Required Variant Maturity - the security's maturity date. The maturity date is the date when the security expires.

Arg3 Required Variant Issue - the security's issue date, expressed as a serial date number.

Arg4 Required Variant Rate - the security's interest rate at date of issue.

Arg5 Required Variant Pr - the security's price per $100 face value.

Arg6 Optional Variant Basis - the type of day count basis to use.

#RETURN-VALUE: Double

#REMARKS:

The following table describes the values that can be used for Arg6.

Microsoft Excel stores dates as sequential serial numbers so they can be used in calculations. By default, January 1, 1900 is serial number 1, and January 1, 2008 is serial number 39448 because it is 39,448 days after January 1, 1900. Microsoft Excel for the Macintosh uses a different date system as its default.

The settlement date is the date a buyer purchases a coupon, such as a bond. The maturity date is the date when a coupon expires. For example, suppose a 30-year bond is issued on January 1, 2008, and is purchased by a buyer six months later. The issue date would be January 1, 2008, the settlement date would be July 1, 2008, and the maturity date would be January 1, 2038, which is 30 years after the January 1, 2008, issue date.

Settlement, maturity, issue, and basis are truncated to integers.

If settlement, maturity, or issue is not a valid date, YieldMat returns the #VALUE! error value.

If rate < 0 or if pr ≤ 0, YieldMat returns the #NUM! error value.

If basis < 0 or if basis > 4, YieldMat returns the #NUM! error value.

If settlement ≥ maturity, YieldMat returns the #NUM! error value.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def ZTest(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the one-tailed probability-value of a z-test. For a given hypothesized population mean, ZTest returns the probability that the sample mean would be greater than the average of observations in the data set (array); that is, the observed sample mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array is the array or range of data against which to test the hypothesized population mean.

Arg2 Required Double The value to test.

Arg3 Optional Variant Sigma is the population (known) standard deviation. If omitted, the sample standard deviation is used.

#RETURN-VALUE: Double

#REMARKS:

If array is empty, ZTest returns the #N/A error value.

ZTest is calculated as follows when sigma is not omitted:

ZTest is calculated as follows when sigma is omitted, where x is the sample mean AVERAGE(array), s is the sample standard deviation STDEV(array), and n is the number of observations in the sample COUNT(array):

ZTest represents the probability that the sample mean would be greater than the observed value AVERAGE(array), when the underlying population mean is μ0. From the symmetry of the Normal distribution, if AVERAGE(array) < μ0, ZTest will return a value greater than 0.5.

The following Excel formula can be used to calculate the two-tailed probability that the sample mean would be further from μ0 (in either direction) than AVERAGE(array), when the underlying population mean is μ0:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Z_Test(self, Arg1, Arg2, Arg3) -> float:
    '''Returns the one-tailed probability-value of a z-test. For a given hypothesized population mean, Z_Test returns the probability that the sample mean would be greater than the average of observations in the data set (array); that is, the observed sample mean.

#PARAMETERS:

Name Required/Optional Data type Description

Arg1 Required Variant Array is the array or range of data against which to test the hypothesized population mean.

Arg2 Required Double The value to test.

Arg3 Optional Variant Sigma is the population (known) standard deviation. If omitted, the sample standard deviation is used.

#RETURN-VALUE: Double

#REMARKS:

If array is empty, Z_Test returns the #N/A error value.

Z_Test is calculated as follows when sigma is not omitted:

Z_Test is calculated as follows when sigma is omitted, where x is the sample mean AVERAGE(array); s is the sample standard deviation STDEV_S(array); and n is the number of observations in the sample COUNT(array):

Z_Test represents the probability that the sample mean would be greater than the observed value AVERAGE(array), when the underlying population mean is μ0. From the symmetry of the Normal distribution, if AVERAGE(array) < μ0, Z_Test will return a value greater than 0.5.

The following Excel formula can be used to calculate the two-tailed probability that the sample mean would be further from μ0 (in either direction) than AVERAGE(array), when the underlying population mean is μ0:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _WSFunction(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def __len__(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Areas:
  '''A collection of the areas, or contiguous blocks of cells, within a selection.

#REMARKS:

There's no singular Area object; individual members of the Areas collection are Range objects. The Areas collection contains one Range object for each discrete, contiguous range of cells within the selection. If the selection contains only one area, the Areas collection contains a single Range object that corresponds to that selection.

Use the Areas property of the Range object to return the Areas collection. The following example clears the current selection if it contains more than one area.

Use Areas (index), where index is the area index number, to return a single Range object from the collection. The index numbers correspond to the order in which the areas were selected. The following example clears the first area in the current selection if the selection contains more than one area.

Some operations cannot be performed on more than one area in a selection at the same time; you must loop through the individual areas in the selection and perform the operations on each area separately. The following example performs the operation named myOperation on the selected range if the selection contains only one area; if the selection contains multiple areas, the example performs myOperation on each individual area in the selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Areas property of the Range object to return the Areas collection. The following example clears the current selection if it contains more than one area.

If Selection.Areas.Count <> 1 Then Selection.Clear

Use Areas (index), where index is the area index number, to return a single Range object from the collection. The index numbers correspond to the order in which the areas were selected. The following example clears the first area in the current selection if the selection contains more than one area.

If Selection.Areas.Count <> 1 Then 
 Selection.Areas(1).Clear 
End If

Some operations cannot be performed on more than one area in a selection at the same time; you must loop through the individual areas in the selection and perform the operations on each area separately. The following example performs the operation named myOperation on the selected range if the selection contains only one area; if the selection contains multiple areas, the example performs myOperation on each individual area in the selection.

Set rangeToUse = Selection 
If rangeToUse.Areas.Count = 1 Then 
 myOperation rangeToUse 
Else 
 For Each singleArea in rangeToUse.Areas 
 myOperation singleArea 
 Next 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an Areas object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents an Areas object.

This example displays the number of columns in the selection on Sheet1. The code also tests for a multiple-area selection; if one exists, the code loops on the areas of the multiple-area selection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of columns in the selection on Sheet1. The code also tests for a multiple-area selection; if one exists, the code loops on the areas of the multiple-area selection.

Sub DisplayColumnCount() 
 Dim iAreaCount As Integer 
 Dim i As Integer 
 
 Worksheets("Sheet1").Activate 
 iAreaCount = Selection.Areas.Count 
 
 If iAreaCount <= 1 Then 
 MsgBox "The selection contains " & Selection.Columns.Count & " columns." 
 Else 
 For i = 1 To iAreaCount 
 MsgBox "Area " & i & " of the selection contains " & _ 
 Selection.Areas(i).Columns.Count & " columns." 
 Next i 
 End If 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an Areas object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an Areas object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Borders:
  '''A collection of four Border objects that represent the four borders of a Range  object or Style object.

#REMARKS:

Use the Borders property to return the Borders collection, which contains all four borders. You can apply different borders to each side of a cell or range. For more information how to apply borders to a range of cells, see Range.Borders property.

You can set border properties for an individual border only with Range and Style objects. Other bordered objects, such as error bars and series lines, have a border that's treated as a single entity, regardless of how many sides it has. For these objects, you must return and set properties for the entire border as a unit. For more information, see the Border object.

The following example adds a double border to cell A1 on worksheet one.

Use Borders (index), where index identifies the border, to return a single Border object. Index can be one of the following XlBordersIndex constants: xlDiagonalDown, xlDiagonalUp, xlEdgeBottom, xlEdgeLeft, xlEdgeRight, xlEdgeTop, xlInsideHorizontal, or xlInsideVertical.

The following example sets the color of the bottom border of cells A1:G1 to red.

The following example generates a thin border around all cells in the range.

The following example changes only the inner cell borders of the range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Worksheets(1).Range("A1").Borders.LineStyle = xlDouble

Worksheets("Sheet1").Range("A1:G1"). _ 
 Borders(xlEdgeBottom).Color = RGB(255, 0, 0)

Dim rng As Range: Set rng = ws.Range("B6", "D8")
        
With rng.Borders
   .LineStyle = xlContinuous
   .Weight = xlThin
End With

Dim rngInner As Range: Set rngInner = ws.Range("B2", "D4")
        
With rngInner.Borders(xlInsideHorizontal)
  .LineStyle = xlContinuous
  .Weight = xlThin
End With

With rngInner.Borders(xlInsideVertical)
  .LineStyle = xlContinuous
  .Weight = xlThin
End With
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Borders object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Color: VBA_Variant
    '''Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant.

#SYNTAX:

expression.Color

expression An expression that returns a Borders object.

This example sets the color of the tick-mark labels on the value axis on Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This example sets the color of the tick-mark labels on the value axis on Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the color of the tick-mark labels on the value axis on Chart1.

Charts("Chart1").Axes(xlValue).TickLabels.Font.Color = _ 
 RGB(0, 255, 0)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ColorIndex: VBA_Variant
    '''Returns or sets a Variant value that represents the color of all four borders.

#SYNTAX:

expression.ColorIndex

expression A variable that represents a Borders object.

This property returns Null if all four borders aren't the same color.

The color is specified as an index value into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns Null if all four borders aren't the same color.

The color is specified as an index value into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Borders object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Borders object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LineStyle: XlLineStyle
    '''Returns or sets the line style for the border. Read/write XlLineStyle, xlGray25, xlGray50, xlGray75, or xlAutomatic.

#SYNTAX:

expression.LineStyle

expression A variable that represents a Borders object.

This example puts a border around the chart area and the plot area of Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example puts a border around the chart area and the plot area of Chart1.

With Charts("Chart1") 
 .ChartArea.Border.LineStyle = xlDashDot 
 With .PlotArea.Border 
 .LineStyle = xlDashDotDot 
 .Weight = xlThick 
 End With 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: CellFormat
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Borders object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ThemeColor: VBA_Variant
    '''Returns or sets the theme color in the applied color scheme that is associated with the specified object. Read/write Variant.

#SYNTAX:

expression.ThemeColor

expression A variable that represents a Borders object.

Attempting to access a theme color for an object whose color is not currently themed will result in an invalid request run-time error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Attempting to access a theme color for an object whose color is not currently themed will result in an invalid request run-time error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TintAndShade: float
    '''Returns or sets a Single that lightens or darkens a color.

#SYNTAX:

expression.TintAndShade

expression A variable that represents a Borders object.

You can enter a number from -1 (darkest) to 1 (lightest) for the TintAndShade property. Zero (0) is neutral.

Attempting to set this property to a value less than -1 or more than 1 results in a run-time error: "The specified value is out of range." This property works for both theme colors and nontheme colors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can enter a number from -1 (darkest) to 1 (lightest) for the TintAndShade property. Zero (0) is neutral.

Attempting to set this property to a value less than -1 or more than 1 results in a run-time error: "The specified value is out of range." This property works for both theme colors and nontheme colors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Value: LineStyle
    '''Synonym for Borders.LineStyle.

#SYNTAX:

expression.Value

expression A variable that represents a Borders object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Weight: XlBorderWeight
    '''Returns or sets an XlBorderWeight value that represents the weight of the border.

#SYNTAX:

expression.Weight

expression A variable that represents a Borders object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Characters:
  '''Represents characters in an object that contains text.

#REMARKS:

The Characters object lets you modify any sequence of characters contained in the full text string.

Use Characters (start, length), where start is the start character number and length is the number of characters, to return a Characters object.

The following example adds text to cell B1 and then makes the second word bold.

The Characters property of the Range object is necessary only when you need to change some of an object's text without affecting the rest (you cannot use the Characters property to format a portion of the text if the object doesn't support rich text). To change all the text at the same time, you can usually apply the appropriate method or property directly to the object. The following example formats the contents of cell A5 as italic.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds text to cell B1 and then makes the second word bold.

With Worksheets("Sheet1").Range("B1") 
 .Value = "New Title" 
 .Characters(5, 5).Font.Bold = True 
End With

The Characters property of the Range object is necessary only when you need to change some of an object's text without affecting the rest (you cannot use the Characters property to format a portion of the text if the object doesn't support rich text). To change all the text at the same time, you can usually apply the appropriate method or property directly to the object. The following example formats the contents of cell A5 as italic.

Worksheets("Sheet1").Range("A5").Font.Italic = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Characters object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Characters object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Font: Font
    '''Returns a Font object that represents the font of the specified object.

#SYNTAX:

expression.Font

expression A variable that represents a Characters object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Characters object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Delete(self) -> VBA_Variant:
    '''Deletes the object.

#RETURN-VALUE: Variant
    '''

  def Insert(self, String) -> VBA_Variant:
    '''Inserts a string preceding the selected characters.

#PARAMETERS:

Name Required/Optional Data type Description

String Required String The string to insert.

#RETURN-VALUE: Variant
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # Caption:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Characters 的 Caption 属性', 'xlmain11.chm', 0, -2146827284), None)
    # Count:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Characters 的 Count 属性', 'xlmain11.chm', 0, -2146827284), None)
    # PhoneticCharacters:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Text:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Characters 的 Text 属性', 'xlmain11.chm', 0, -2146827284), None)



class DisplayFormat:
  '''Represents the display settings for an associated Range object. Read-only.

#REMARKS:

Actions such as changing the conditional formatting or table style of a range can cause what is displayed in the current user interface to be inconsistent with the values in the corresponding properties of the Range object. Use the properties of the DisplayFormat object to return the values as they are displayed in the current user interface.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.AddIndent: VBA_Variant
    '''Returns a value that indicates if Microsoft Excel automatically indents text of the associated Range object when the text alignment in a cell is set to equal distribution (either horizontally or vertically), as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.AddIndent

expression A variable that represents a DisplayFormat object.

Variant

Returns True if text is automatically indented when the text alignment in the cell is set, either horizontally or vertically, to equal distribution.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant

#REMARKS:

Returns True if text is automatically indented when the text alignment in the cell is set, either horizontally or vertically, to equal distribution.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a DisplayFormat object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Borders: Borders
    '''Returns a Borders object that represents the borders of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.Borders

expression A variable that represents a DisplayFormat object.

Borders

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Borders
    '''

    self.Characters: Characters
    '''Returns a Characters object that represents a range of characters within the text of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.Characters (Start, Length)

expression A variable that represents a DisplayFormat object.

Characters

The Characters object is not a collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Characters

#REMARKS:

The Characters object is not a collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a DisplayFormat object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Font: Font
    '''Returns a Font object that represents the font of the associated Range as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.Font

expression A variable that represents a DisplayFormat object.

Font

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Font
    '''

    self.FormulaHidden: VBA_Variant
    '''Returns a value that indicates if the formula of the associated Range object is hidden when the worksheet is protected as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.FormulaHidden

expression A variable that represents a DisplayFormat object.

Variant

Returns True if the formula is hidden when the worksheet is protected.

Returns Null if the range contains some cells with FormulaHidden equal to True and some cells with FormulaHidden equal to False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant

#REMARKS:

Returns True if the formula is hidden when the worksheet is protected.

Returns Null if the range contains some cells with FormulaHidden equal to True and some cells with FormulaHidden equal to False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HorizontalAlignment: VBA_Variant
    '''Returns a value that represents the horizontal alignment of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.HorizontalAlignment

expression A variable that represents a DisplayFormat object.

Variant

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant
    '''

    self.IndentLevel: VBA_Variant
    '''Returns a value that represents the indent level of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.IndentLevel

expression A variable that represents a DisplayFormat object.

Variant

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant
    '''

    self.Interior: Interior
    '''Returns an Interior object that represents the interior of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.Interior

expression A variable that represents a DisplayFormat object.

Interior

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Interior
    '''

    self.Locked: VBA_Variant
    '''Returns a value that indicates if the associated Range object is locked as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.Locked

expression A variable that represents a DisplayFormat object.

Variant

Returns True if the range is locked, False if the range can be modified when the sheet is protected, or Null if the range contains both locked and unlocked cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant

#REMARKS:

Returns True if the range is locked, False if the range can be modified when the sheet is protected, or Null if the range contains both locked and unlocked cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MergeCells: VBA_Variant
    '''Returns a value that indicates if the associated Range object contains merged cells as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.MergeCells

expression A variable that represents a DisplayFormat object.

Variant

Returns True if the range contains merged cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant

#REMARKS:

Returns True if the range contains merged cells.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NumberFormat: VBA_Variant
    '''Returns a value that represents the format code of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.NumberFormat

expression A variable that represents a DisplayFormat object.

Variant

This property returns Null if all cells in the specified range don't have the same number format.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant

#REMARKS:

This property returns Null if all cells in the specified range don't have the same number format.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NumberFormatLocal: VBA_Variant
    '''Returns a value that represents the format code of the associated Range object as a string in the language of the user as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.NumberFormatLocal

expression A variable that represents a DisplayFormat object.

Variant

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant
    '''

    self.Orientation: VBA_Variant
    '''Returns a value that represents the text orientation of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.Orientation

expression A variable that represents a DisplayFormat object.

Variant

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a DisplayFormat object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ReadingOrder: int
    '''Returns the reading order of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.ReadingOrder

expression A variable that represents a DisplayFormat object.

Long

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Long
    '''

    self.ShrinkToFit: VBA_Variant
    '''Returns a value that indicates if Microsoft Excel automatically shrinks text to fit in the available column width of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.ShrinkToFit

expression A variable that represents a DisplayFormat object.

Variant

Returns True if text automatically shrinks to fit in the available column width.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant

#REMARKS:

Returns True if text automatically shrinks to fit in the available column width.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Style: Style
    '''Returns a value, containing a Style object, that represents the style of the associated Range object as it is displayed in the current user interface.

#SYNTAX:

expression.Style

expression A variable that represents a DisplayFormat object.

Variant

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant
    '''

    self.VerticalAlignment: VBA_Variant
    '''Returns a value that represents the vertical alignment of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.VerticalAlignment

expression A variable that represents a DisplayFormat object.

Variant

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant
    '''

    self.WrapText: VBA_Variant
    '''Returns a value that indicates if Microsoft Excel wraps the text of the associated Range object as it is displayed in the current user interface. Read-only.

#SYNTAX:

expression.WrapText

expression A variable that represents a DisplayFormat object.

Variant

Returns True if text is wrapped in all cells within the range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Variant

#REMARKS:

Returns True if text is wrapped in all cells within the range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def GetCharacters(self, Start, Length):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Errors:
  '''Represents the various spreadsheet errors for a range.

#REMARKS:

Use the Errors property of the Range object to return an Errors object.

After an Errors object is returned, you can use the Value property of the Error object to check for particular error-checking conditions. The following example places a number as text in cell A1, and then notifies the user when the value of cell A1 contains a number as text.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

After an Errors object is returned, you can use the Value property of the Error object to check for particular error-checking conditions. The following example places a number as text in cell A1, and then notifies the user when the value of cell A1 contains a number as text.

Sub ErrorValue() 
 
 ' Place a number written as text in cell A1. 
 Range("A1").Formula = "'1" 
 
 If Range("A1").Errors.Item(xlNumberAsText).Value = True Then 
 MsgBox "Cell A1 has a number as text." 
 Else 
 MsgBox "Cell A1 is a number." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an Errors object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an Errors object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an Errors object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Font:
  '''Contains the font attributes (font name, font size, color, and so on) for an object.

#REMARKS:

If you don't want to format all the text in a cell or graphic the same way, use the Characters property of the Range object to return a subset of the text.

Use the Font property to return the Font object. The following example formats cells A1:C5 as bold.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Font property to return the Font object. The following example formats cells A1:C5 as bold.

Worksheets("Sheet1").Range("A1:C5").Font.Bold = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Font object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Background: VBA_Variant
    '''Returns or sets the type of background for text used in charts. Read/write Variant, which is set to one of the constants of XlBackground.

#SYNTAX:

expression.Background

expression A variable that represents a Font object.

XlBackground can be one of the following constants.

This example adds a chart title to embedded chart one on the first worksheet, and then sets the font size and background type for the title. This example assumes that a chart exists on the first worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

XlBackground can be one of the following constants.

This example adds a chart title to embedded chart one on the first worksheet, and then sets the font size and background type for the title. This example assumes that a chart exists on the first worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a chart title to embedded chart one on the first worksheet, and then sets the font size and background type for the title. This example assumes that a chart exists on the first worksheet.

Sub UseBackground() 
 
 With Worksheets(1).ChartObjects(1).Chart 
 .HasTitle = True 
 .ChartTitle.Text = "Rainfall Totals by Month" 
 With .ChartTitle.Font 
 .Size = 10 
 .Background = xlBackgroundTransparent 
 End With 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Bold: VBA_Variant
    '''True if the font is bold. Read/write Variant.

#SYNTAX:

expression.Bold

expression A variable that represents a Font object.

This example sets the font to bold for the range A1:A5 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the font to bold for the range A1:A5 on Sheet1.

Worksheets("Sheet1").Range("A1:A5").Font.Bold = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Color: VBA_Variant
    '''Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant.

#SYNTAX:

expression.Color

expression An expression that returns a Font object.

This example sets the color of the tick-mark labels on the value axis on Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This example sets the color of the tick-mark labels on the value axis on Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the color of the tick-mark labels on the value axis on Chart1.

Charts("Chart1").Axes(xlValue).TickLabels.Font.Color = _ 
 RGB(0, 255, 0)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ColorIndex: VBA_Variant
    '''Returns or sets a Variant value that represents the color of the font.

#SYNTAX:

expression.ColorIndex

expression A variable that represents a Font object.

The color is specified as an index value into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone.

This example changes the font color in cell A1 on Sheet1 to red.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The color is specified as an index value into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone.

This example changes the font color in cell A1 on Sheet1 to red.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example changes the font color in cell A1 on Sheet1 to red.

Worksheets("Sheet1").Range("A1").Font.ColorIndex = 3

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Font object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FontStyle: str
    '''Returns or sets the font style. Read/write String.

#SYNTAX:

expression.FontStyle

expression A variable that represents a Font object.

Changing this property may affect other Font properties (such as Bold and Italic). Acceptable values are Regular, Italic, Bold, and Bold Italic.

This example sets the font style for cell A1 on Sheet1 to bold and italic.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Changing this property may affect other Font properties (such as Bold and Italic). Acceptable values are Regular, Italic, Bold, and Bold Italic.

This example sets the font style for cell A1 on Sheet1 to bold and italic.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the font style for cell A1 on Sheet1 to bold and italic.

Worksheets("Sheet1").Range("A1").Font.FontStyle = "Bold Italic"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Italic: bool
    '''True if the font style is italic. Read/write Boolean.

#SYNTAX:

expression.Italic

expression A variable that represents a Font object.

This example sets the font style to italic for the range A1:A5 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the font style to italic for the range A1:A5 on Sheet1.

Worksheets("Sheet1").Range("A1:A5").Font.Italic = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Name: VBA_Variant
    '''Returns or sets a Variant value that represents the name of the object.

#SYNTAX:

expression.Name

expression A variable that represents a Font object.

The name of a Font object is a String.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The name of a Font object is a String.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OutlineFont: bool
    self.Parent: DisplayFormat
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Font object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Shadow: bool
    self.Size: VBA_Variant
    '''Returns or sets the size of the font. Read/write Variant.

#SYNTAX:

expression.Size

expression A variable that represents a Font object.

This example sets the font size for cells A1:D10 on Sheet1 to 12 points.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the font size for cells A1:D10 on Sheet1 to 12 points.

With Worksheets("Sheet1").Range("A1:D10") 
 .Value = "Test" 
 .Font.Size = 12 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Strikethrough: bool
    '''True if the font is struck through with a horizontal line. Read/write Boolean.

#SYNTAX:

expression.Strikethrough

expression A variable that represents a Font object.

This example sets the font in the active cell on Sheet1 to strikethrough.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the font in the active cell on Sheet1 to strikethrough.

Worksheets("Sheet1").Activate 
ActiveCell.Font.Strikethrough = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Subscript: VBA_Variant
    '''True if the font is formatted as subscript. False by default. Read/write Variant.

#SYNTAX:

expression.Subscript

expression A variable that represents a Font object.

This example makes the second character in cell A1 a subscript character.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example makes the second character in cell A1 a subscript character.

Worksheets("Sheet1").Range("A1") _ 
 .Characters(2, 1).Font.Subscript = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Superscript: VBA_Variant
    '''True if the font is formatted as superscript; False by default. Read/write Variant.

#SYNTAX:

expression.Superscript

expression A variable that represents a Font object.

This example makes the last character in cell A1 a superscript character.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example makes the last character in cell A1 a superscript character.

n = Worksheets("Sheet1").Range("A1").Characters.Count 
Worksheets("Sheet1").Range("A1") _ 
 .Characters(n, 1).Font.Superscript = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ThemeColor: VBA_Variant
    '''Returns or sets the theme color in the applied color scheme that is associated with the specified object. Read/write Variant.

#SYNTAX:

expression.ThemeColor

expression A variable that represents a Font object.

Attempting to access a theme color for an object whose color is not currently themed will result in an invalid request run-time error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Attempting to access a theme color for an object whose color is not currently themed will result in an invalid request run-time error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ThemeFont: XlThemeFont
    '''Returns or sets the theme font in the applied font scheme that is associated with the specified object. Read/write XlThemeFont.

#SYNTAX:

expression.ThemeFont

expression A variable that represents a Font object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TintAndShade: float
    '''Returns or sets a Single that lightens or darkens a color.

#SYNTAX:

expression.TintAndShade

expression A variable that represents a Font object.

You can enter a number from -1 (darkest) to 1 (lightest) for the TintAndShade property. Zero (0) is neutral.

Attempting to set this property to a value less than -1 or more than 1 results in a run-time error: "The specified value is out of range." This property works for both theme colors and non-theme colors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can enter a number from -1 (darkest) to 1 (lightest) for the TintAndShade property. Zero (0) is neutral.

Attempting to set this property to a value less than -1 or more than 1 results in a run-time error: "The specified value is out of range." This property works for both theme colors and non-theme colors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Underline: VBA_Variant
    '''Returns or sets the type of underline applied to the font. Read/write Variant.

#SYNTAX:

expression.Underline

expression A variable that represents a Font object.

Can be one of the XlUnderlineStyle constants.

This example sets the font in the active cell on Sheet1 to single underline.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Can be one of the XlUnderlineStyle constants.

This example sets the font in the active cell on Sheet1 to single underline.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the font in the active cell on Sheet1 to single underline.

Worksheets("Sheet1").Activate 
ActiveCell.Font.Underline = xlUnderlineStyleSingle

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class FormatConditions:
  '''Represents the collection of conditional formats for a single range.

#REMARKS:

The FormatConditions collection can contain multiple conditional formats. Each format is represented by a FormatCondition object.

Use the FormatConditions property to return a FormatConditions object. Use the Add method to create a new conditional format, and use the Modify method of the FormatCondition object to change an existing conditional format.

The following example adds a conditional format to cells E1:E10.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a conditional format to cells E1:E10.

With Worksheets(1).Range("e1:e10").FormatConditions _ 
 .Add(xlCellValue, xlGreater, "=$a$1") 
 With .Borders 
 .LineStyle = xlContinuous 
 .Weight = xlThin 
 .ColorIndex = 6 
 End With 
 With .Font 
 .Bold = True 
 .ColorIndex = 3 
 End With 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a FormatConditions object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a FormatConditions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a FormatConditions object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a FormatConditions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Type, Operator, Formula1, Formula2, String, TextOperator, DateOperator, ScopeType) -> FormatCondition:
    '''Adds a new conditional format.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required XlFormatConditionType Specifies whether the conditional format is based on a cell value or an expression.

Operator Optional Variant The conditional format operator. Can be one of the following XlFormatConditionOperator constants: xlBetween, xlEqual, xlGreater, xlGreaterEqual, xlLess, xlLessEqual, xlNotBetween, or xlNotEqual. If Type is xlExpression, the Operator argument is ignored.

Formula1 Optional Variant The value or expression associated with the conditional format. Can be a constant value, a string value, a cell reference, or a formula.

Formula2 Optional Variant The value or expression associated with the second part of the conditional format when Operator is xlBetween or xlNotBetween (otherwise, this argument is ignored). Can be a constant value, a string value, a cell reference, or a formula.

#RETURN-VALUE: A FormatCondition object that represents the new conditional format.

#REMARKS:

Use the Modify method to modify an existing conditional format, or use the Delete method to delete an existing format before adding a new one.

This example adds a conditional format to cells E1:E10.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a conditional format to cells E1:E10.

With Worksheets(1).Range("e1:e10").FormatConditions _ 
 .Add(xlCellValue, xlGreater, "=$a$1") 
 With .Borders 
 .LineStyle = xlContinuous 
 .Weight = xlThin 
 .ColorIndex = 6 
 End With 
 With .Font 
 .Bold = True 
 .ColorIndex = 3 
 End With 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddAboveAverage(self) -> AboveAverage:
    '''Returns a new AboveAverage object representing a conditional formatting rule for the specified range.

#RETURN-VALUE: AboveAverage object

#REMARKS:

The AboveAverage object is used to find values above or below an average or standard deviation in a range of cells. For example, you can find the above average performers in an annual performance review, or you can locate manufactured materials that fall below two standard deviations in a quality rating.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddColorScale(self, ColorScaleType) -> ColorScale:
    '''Returns a new ColorScale object representing a conditional formatting rule that uses gradations in cell colors to indicate relative differences in the values of cells included in a selected range.

#PARAMETERS:

Name Required/Optional Data type Description

ColorScaleType Required Long The type of color scale.

#RETURN-VALUE: ColorScale object

#REMARKS:

Color scales are visual guides that help you understand data distribution and variation. A color scale helps you identify relative differences in the values of cells in a given range by using color variation. Different colors and gradations between colors represent differences in cell values.

For example, in a three-color scale, you can specify that cells with the highest relative data values are green, cells with intermediate values are yellow, and cells with the lowest values are red.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddDatabar(self) -> Databar:
    '''Returns a Databar object representing a data bar conditional formatting rule for the specified range.

#RETURN-VALUE: Databar object

#REMARKS:

Data bars help you see the value of a cell relative to other cells. The length of the data bar represents the value in the cell. A longer bar represents a higher value and a shorter bar represents a lower value.

Data bars are useful in spotting higher and lower numbers, especially with large amounts of data, such as top and bottom selling toys in a holiday sales report.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddIconSetCondition(self) -> IconSetCondition:
    '''Returns a new IconSetCondition object that represents an icon set conditional formatting rule for the specified range.

#RETURN-VALUE: IconSetCondition object

#REMARKS:

Use an icon set to annotate and classify data into three to five categories separated by a threshold value. Each icon represents a range of values. For example, in the 3 Arrows icon set, the red up arrow represents higher values, the yellow sideways arrow represents middle values, and the green down arrow represents lower values.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddTop10(self) -> Top10:
    '''Returns a Top10 object representing a conditional formatting rule for the specified range.

#RETURN-VALUE: Top10 object

#REMARKS:

Using the Top10 object, you can find the highest and lowest values in a range of cells based on a cutoff value that you specify. For example, you can find the top five selling products in a regional report, the bottom 15 percent of products in a customer survey, or the top 25 salaries in a department personnel analysis.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddUniqueValues(self) -> UniqueValues:
    '''Returns a new UniqueValues object representing a conditional formatting rule for the specified range.

#RETURN-VALUE: UniqueValues object

#REMARKS:

Use the UniqueValues object to quickly visualize cells that contain either unique or duplicate values.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Delete(self) -> None:
    '''Deletes the object.'''

  def Item(self, Index) -> VBA_object:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The name or index number for the object.

#RETURN-VALUE: An Object value that represents an object contained by the collection.

#EXAMPLE:

This example sets format properties for an existing conditional format for cells E1:E10.

With Worksheets(1).Range("e1:e10").FormatConditions.Item(1) 
 With .Borders 
 .LineStyle = xlContinuous 
 .Weight = xlThin 
 .ColorIndex = 6 
 End With 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Hyperlinks:
  '''Represents the collection of hyperlinks for a worksheet or range.

#REMARKS:

Each hyperlink is represented by a Hyperlink object.

Use the Hyperlinks property of the Worksheet object to return the Hyperlinks collection. The following example checks the hyperlinks on worksheet one for a link that contains the word Microsoft.

Use the Add method to create a hyperlink and add it to the Hyperlinks collection. The following example creates a new hyperlink for cell E5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Hyperlinks property of the Worksheet object to return the Hyperlinks collection. The following example checks the hyperlinks on worksheet one for a link that contains the word Microsoft.

For Each h in Worksheets(1).Hyperlinks 
 If Instr(h.Name, "Microsoft") <> 0 Then h.Follow 
Next

Use the Add method to create a hyperlink and add it to the Hyperlinks collection. The following example creates a new hyperlink for cell E5.

With Worksheets(1) 
 .Hyperlinks.Add .Range("E5"), "https://example.microsoft.com" 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Hyperlinks object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Hyperlinks object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Hyperlinks object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Hyperlinks object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Anchor, Address, SubAddress, ScreenTip, TextToDisplay) -> Hyperlink:
    '''Adds a hyperlink to the specified range or shape.

#PARAMETERS:

Name Required/Optional Data type Description

Anchor Required Object The anchor for the hyperlink. Can be either a Range or Shape object.

Address Required String The address of the hyperlink.

SubAddress Optional Variant The subaddress of the hyperlink.

ScreenTip Optional Variant The screen tip to be displayed when the mouse pointer is paused over the hyperlink.

TextToDisplay Optional Variant The text to be displayed for the hyperlink.

#RETURN-VALUE: A Hyperlink object that represents the new hyperlink.

#REMARKS:

When you specify the TextToDisplay argument, the text must be a string.

This example adds a hyperlink to cell A5.

This example adds an email hyperlink to cell A5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a hyperlink to cell A5.

With Worksheets(1) 
 .Hyperlinks.Add Anchor:=.Range("a5"), _ 
 Address:="https://example.microsoft.com", _ 
 ScreenTip:="Microsoft Web Site", _ 
 TextToDisplay:="Microsoft" 
End With

This example adds an email hyperlink to cell A5.

With Worksheets(1) 
 .Hyperlinks.Add Anchor:=.Range("a5"), _ 
 Address:="mailto:someone@example.com?subject=hello", _ 
 ScreenTip:="Write us today", _ 
 TextToDisplay:="Support" 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Delete(self) -> None:
    '''Deletes the object.

#REMARKS:

Calling the Delete method on the specified Hyperlinks object is equivalent to using both the Clear Hyperlinks and Clear Formats commands from the Clear drop-down list in the Editing section of the Home tab. Not only hyperlinks will be removed; cell formatting will be removed also. If you only want to remove the hyperlink, see the Range.ClearHyperlinks method.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Interior:
  '''Represents the interior of an object.

#EXAMPLE:

Use the Interior property of the Range object to return the Interior object. The following example sets the color for the interior of cell A1 to red.

Worksheets("Sheet1").Range("A1").Interior.ColorIndex = 3

This example gets the value of the color of a cell in column A by using the ColorIndex property, and then uses that value to sort the range by color.

Sub ColorSort()
   'Set up your variables and turn off screen updating.
   Dim iCounter As Integer
   Application.ScreenUpdating = False
   
   'For each cell in column A, go through and place the color index value of the cell in column C.
   For iCounter = 2 To 55
      Cells(iCounter, 3) = _
         Cells(iCounter, 1).Interior.ColorIndex
   Next iCounter
   
   'Sort the rows based on the data in column C
   Range("C1") = "Index"
   Columns("A:C").Sort key1:=Range("C2"), _
      order1:=xlAscending, header:=xlYes
   
   'Clear out the temporary sorting value in column C, and turn screen updating back on.
   Columns(3).ClearContents
   Application.ScreenUpdating = True
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an Interior object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Color: VBA_Variant
    '''Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant.

#SYNTAX:

expression.Color

expression An expression that returns an Interior object.

This example sets the color of the tick-mark labels on the value axis on Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This example sets the color of the tick-mark labels on the value axis on Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the color of the tick-mark labels on the value axis on Chart1.

Charts("Chart1").Axes(xlValue).TickLabels.Font.Color = _ 
 RGB(0, 255, 0)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ColorIndex: VBA_Variant
    '''Returns or sets a Variant value that represents the color of the interior.

#SYNTAX:

expression.ColorIndex

expression A variable that represents an Interior object.

The color is specified as an index value into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The color is specified as an index value into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an Interior object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Gradient: VBA_Object
    '''Returns or sets the Gradient property of an Interior object of a selection. Read-only.

#SYNTAX:

expression.Gradient

expression A variable that represents an Interior object.

Object

Uses either LinearGradient or RectangularGradient.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Object

#REMARKS:

Uses either LinearGradient or RectangularGradient.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: DisplayFormat
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an Interior object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Pattern: VBA_Variant
    '''Returns or sets a Variant value, containing an XlPattern constant, that represents the interior pattern.

#SYNTAX:

expression.Pattern

expression A variable that represents an Interior object.

This example adds a crisscross pattern to the interior of cell A1 on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a crisscross pattern to the interior of cell A1 on Sheet1.

Worksheets("Sheet1").Range("A1"). _ 
 Interior.Pattern = xlPatternCrissCross

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PatternColor: VBA_Variant
    '''Returns or sets the color of the interior pattern as an RGB value. Read/write Variant.

#SYNTAX:

expression.PatternColor

expression A variable that represents an Interior object.

This example sets the color of the interior pattern for rectangle one on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the color of the interior pattern for rectangle one on Sheet1.

With Worksheets("Sheet1").Rectangles(1).Interior 
 .Pattern = xlGrid 
 .PatternColor = RGB(255,0,0) 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PatternColorIndex: XlColorIndex | xlColorIndexAutomatic | xlColorIndexNone | int
    '''Returns or sets the color of the interior pattern as an index into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone. Read/write Long.

#SYNTAX:

expression.PatternColorIndex

expression A variable that represents an Interior object.

Set this property to xlColorIndexAutomatic to specify the automatic pattern for cells or the automatic fill style for drawing objects.

Set this property to xlColorIndexNone to specify that you don't want a pattern (this is the same as setting the Pattern property of the Interior object to xlPatternNone).

This example sets the color of the interior pattern for rectangle one on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Set this property to xlColorIndexAutomatic to specify the automatic pattern for cells or the automatic fill style for drawing objects.

Set this property to xlColorIndexNone to specify that you don't want a pattern (this is the same as setting the Pattern property of the Interior object to xlPatternNone).

This example sets the color of the interior pattern for rectangle one on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the color of the interior pattern for rectangle one on Sheet1.

With Worksheets("Sheet1").Rectangles(1).Interior 
 .Pattern = xlChecker 
 .PatternColorIndex = 5 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PatternThemeColor: VBA_Variant
    '''Returns or sets a theme color pattern for an Interior object. Read/write Variant.

#SYNTAX:

expression.PatternThemeColor

expression A variable that represents an Interior object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PatternTintAndShade: VBA_Variant
    '''Returns or sets a tint and shade pattern for an Interior object. Read/write Variant.

#SYNTAX:

expression.PatternTintAndShade

expression A variable that represents an Interior object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ThemeColor: VBA_Variant
    '''Returns or sets a Variant value, containing an XlThemeColor constant, that represents the color. Read/write Variant.

#SYNTAX:

expression.ThemeColor

expression A variable that represents an Interior object.

Attempting to access a theme color for an object whose color is not currently themed will result in an invalid request run-time error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Attempting to access a theme color for an object whose color is not currently themed will result in an invalid request run-time error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TintAndShade: float
    '''Returns or sets a Single that lightens or darkens a color.

#SYNTAX:

expression.TintAndShade

expression A variable that represents an Interior object.

You can enter a number from -1 (darkest) to 1 (lightest) for the TintAndShade property. Zero (0) is neutral.

Attempting to set this property to a value less than -1 or more than 1 results in a run-time error: "The specified value is out of range." This property works for both theme colors and nontheme colors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can enter a number from -1 (darkest) to 1 (lightest) for the TintAndShade property. Zero (0) is neutral.

Attempting to set this property to a value less than -1 or more than 1 results in a run-time error: "The specified value is out of range." This property works for both theme colors and nontheme colors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # InvertIfNegative:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)



class Phonetic:
  '''Contains information about a specific phonetic text string in a cell.

#REMARKS:

In Microsoft Excel 97, this object contained the formatting attributes for any phonetic text in the specified range.

Use Phonetics (index), where index is the index number of the phonetic text, to return a single Phonetic object.

The following example sets the first phonetic text string in the active cell to "フリガナ".

The Phonetic property of the Range object provides compatibility with earlier versions of Microsoft Excel. You should use Phonetics (index), where index is the index number of the phonetic text, to return a single Phonetic object. To demonstrate compatibility with earlier versions of Microsoft Excel, the following example adds Furigana characters to the range A1:C4. If you add Furigana characters to a range, a new Phonetic object is automatically created.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use Phonetics (index), where index is the index number of the phonetic text, to return a single Phonetic object.

The following example sets the first phonetic text string in the active cell to "フリガナ".

ActiveCell.Phonetics(1).Text = "フリガナ"

The Phonetic property of the Range object provides compatibility with earlier versions of Microsoft Excel. You should use Phonetics (index), where index is the index number of the phonetic text, to return a single Phonetic object. To demonstrate compatibility with earlier versions of Microsoft Excel, the following example adds Furigana characters to the range A1:C4. If you add Furigana characters to a range, a new Phonetic object is automatically created.

With Range("A1:C4").Phonetic 
    .CharacterType = xlHiragana 
    .Alignment = xlPhoneticAlignCenter 
    .Font.Name = "MS P ゴシック" 
    .Font.FontStyle = "標準" 
    .Font.Size = 6 
    .Font.Strikethrough = False 
    .Font.Underline = xlUnderlineStyleNone 
    .Font.ColorIndex = xlAutomatic 
    .Visible = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Alignment: int
    '''Returns or sets a Long value that represents the alignment for the specified phonetic text or tick label.

#SYNTAX:

expression.Alignment

expression A variable that represents a Phonetic object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Phonetic object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CharacterType: XlPhoneticCharacterType
    '''Returns or sets the type of phonetic text in the specified cell. Read/write XlPhoneticCharacterType.

#SYNTAX:

expression.CharacterType

expression A variable that represents a Phonetic object.

This example changes the first phonetic text string in the active cell from Furigana to Hiragana.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example changes the first phonetic text string in the active cell from Furigana to Hiragana.

ActiveCell.Phonetics(1).CharacterType = xlHiragana

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Phonetic object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Font: Font
    '''Returns a Font object that represents the font of the specified object.

#SYNTAX:

expression.Font

expression A variable that represents a Phonetic object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Phonetic object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Text: str
    '''Returns or sets the text for the specified object. Read/write String.

#SYNTAX:

expression.Text

expression A variable that represents a Phonetic object.

For the Phonetic object, this property returns or sets its phonetic text. You cannot set this property to Null.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

For the Phonetic object, this property returns or sets its phonetic text. You cannot set this property to Null.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Visible: bool
    '''Returns or sets a Boolean value that determines whether the object is visible. Read/write.

#SYNTAX:

expression.Visible

expression A variable that represents a Phonetic object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Phonetics:
  '''A collection of all the Phonetic objects in the specified range.

#REMARKS:

Each Phonetic object contains information about a specific phonetic text string.

Use the Phonetics property of the Range object to return the Phonetics collection. The following example makes all phonetic text in the range A1:C4 visible.

Use Phonetics (index), where index is the index number of the phonetic text, to return a single Phonetic object. The following example sets the first phonetic text string in the active cell to "フリガナ".

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Phonetics property of the Range object to return the Phonetics collection. The following example makes all phonetic text in the range A1:C4 visible.

Range("A1:C4").Phonetics.Visible = True

Use Phonetics (index), where index is the index number of the phonetic text, to return a single Phonetic object. The following example sets the first phonetic text string in the active cell to "フリガナ".

ActiveCell.Phonetics(1).Text = "フリガナ"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Alignment: int
    '''Returns or sets a Long value that represents the alignment for the specified phonetic text or tick label.

#SYNTAX:

expression.Alignment

expression A variable that represents a Phonetics object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Phonetics object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CharacterType: XlPhoneticCharacterType
    '''Returns or sets the type of phonetic text in the specified cell. Read/write XlPhoneticCharacterType.

#SYNTAX:

expression.CharacterType

expression A variable that represents a Phonetics object.

This example changes the first phonetic text string in the active cell from Furigana to Hiragana.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example changes the first phonetic text string in the active cell from Furigana to Hiragana.

ActiveCell.Phonetics(1).CharacterType = xlHiragana

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Phonetics object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Phonetics object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Font: Font
    '''Returns a Font object that represents the font of the specified object.

#SYNTAX:

expression.Font

expression A variable that represents a Phonetics object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Length: int
    '''Returns a Long value that represents the number of characters of phonetic text from the position you've specified with the Start property.

#SYNTAX:

expression.Length

expression A variable that represents a Phonetics object.

This example returns the length of the second phonetic text string in the active cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example returns the length of the second phonetic text string in the active cell.

ActiveCell.FormulaR1C1 = "東京都渋谷区代々木" 
ActiveCell.Phonetics.Add Start:=1, Length:=3, Text:="トウキョウト" 
ActiveCell.Phonetics.Add Start:=4, Length:=3, Text:="シブヤク" 
MsgBox ActiveCell.Phonetics(2).Length

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Phonetics object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Visible: bool
    '''Returns or sets a Boolean value that determines whether the object is visible. Read/write.

#SYNTAX:

expression.Visible

expression A variable that represents a Phonetics object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Start, Length, Text) -> None:
    '''Adds phonetic text to the specified cell.

#PARAMETERS:

Name Required/Optional Data type Description

Start Required Long The position that represents the first character in the specified cell.

Length Required Long The number of characters from the Start position to the end of the text in the cell.

Text Required String Collectively, the characters that represent the phonetic text in the cell.

#EXAMPLE:

This example adds three phonetic text strings to the active cell. The example then sets the character type to Hiragana, sets the font color to blue, and sets the text to visible.

ActiveCell.FormulaR1C1 = "東京都渋谷区代々木" 
ActiveCell.Phonetics.Add Start:=1, Length:=3, Text:="トウキョウト" 
ActiveCell.Phonetics.Add Start:=4, Length:=3, Text:="シブヤク" 
ActiveCell.Phonetics.CharacterType = xlHiragana 
ActiveCell.Phonetics.Font.Color = vbBlue 
ActiveCell.Phonetics.Visible = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Delete(self) -> None:
    '''Deletes the object.'''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # Start:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Text:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)



class SmartTags:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.Parent: _Worksheet
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, SmartTagType):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class SoundNote:
  def __init__(self):
    self.Application: Application
    self.Creator: int
    self.Parent: Range
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Delete(self):  pass

  def Import(self, Filename):  pass

  def Play(self):  pass

  def Record(self):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class SparklineGroups:
  '''Represents a collection of sparkline groups.

#REMARKS:

The SparklineGroups object can contain multiple SparklineGroup objects.

Use the SparklineGroups property of the Range object to return an existing SparklineGroups collection from its parent range.

Use the Add method to create a group of new sparklines.

Use the Group method to create a group of existing sparklines.

This example selects the range A1:A4 and groups the sparklines in that range. If the sparklines in the sparkline group are line sparklines, the markers are displayed in red.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example selects the range A1:A4 and groups the sparklines in that range. If the sparklines in the sparkline group are line sparklines, the markers are displayed in red.

Range("A1:A4").Select 
Selection.SparklineGroups.Group Location := Range("A1") 
Selection.SparklineGroups.Item(1).Points.Markers.Visible = True 
Selection.SparklineGroups.Item(1).Points.Markers.Color.Color = 255

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a SparklineGroups object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns the count of sparkline groups in the associated Range object. Read-only.

#SYNTAX:

expression.Count

expression A variable that represents a SparklineGroups object.

Long

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Long
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a SparklineGroups object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the Range object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a SparklineGroups object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Type, SourceData) -> SparklineGroup:
    '''Creates a new sparkline group and returns a SparklineGroup object.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required XlSparkType The type of sparkline.

SourceData Required String Represents the range to use to create the sparkline.

#RETURN-VALUE: SparklineGroup

#EXAMPLE:

This example adds a sparkline group to the range A1:A4. The sparklines in the group are column sparklines and are bound to the data in the range B1:E4.

Range("$A$1:$A$4").SparklineGroups.Add Type:=xlSparkColumn, SourceData:= _ 
 "Sheet2!B1:E4"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Clear(self) -> None:
    '''Clears the selected sparklines.

#RETURN-VALUE: Nothing
    '''

  def ClearGroups(self) -> None:
    '''Clears the selected sparkline groups.

#RETURN-VALUE: Nothing
    '''

  def Group(self, Location) -> None:
    '''Groups the selected sparklines.

#PARAMETERS:

Name Required/Optional Data type Description

Location Required Range The location of the first cell in the group.

#RETURN-VALUE: Nothing

#EXAMPLE:

This example selects the range A1:A4 and groups the sparklines in that range.

Range("A1:A4").Select 
Selection.SparklineGroups.Group Location:=Range("A1")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def Ungroup(self) -> None:
    '''Ungroups the sparklines in the selected sparkline group.

#RETURN-VALUE: Nothing

#EXAMPLE:

The following code example selects the range A1:A4 and ungroups the sparklines in that range.

Range("A1:A4").Select 
Selection.SparklineGroups.Ungroup

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Style:
  '''Represents a style description for a range.

#REMARKS:

The Style object contains all style attributes (font, number format, alignment, and so on) as properties. There are several built-in styles, including Normal, Currency, and Percent. Using the Style object is a fast and efficient way to change several cell-formatting properties on multiple cells at the same time.

For the Workbook object, the Style object is a member of the Styles collection. The Styles collection contains all the defined styles for the workbook.

You can change the appearance of a cell by changing properties of the style applied to that cell. Keep in mind, however, that changing a style property affects all cells already formatted with that style.

Styles are sorted alphabetically by style name. The style index number denotes the position of the specified style in the sorted list of style names. Styles(1) is the first style in the alphabetic list, and Styles(Styles.Count) is the last one in the list.

For more information about creating and modifying a style, see the Styles object.

Use the Style property to return the Style object used with a Range object. The following example applies the Percent style to cells A1:A10 on Sheet1.

Use Styles (index), where index is the style index number or name, to return a single Style object from the workbook Styles collection. The following example changes the Normal style for the active workbook by setting the style's Bold property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Style property to return the Style object used with a Range object. The following example applies the Percent style to cells A1:A10 on Sheet1.

Worksheets("Sheet1").Range("A1:A10").Style = "Percent"

Use Styles (index), where index is the style index number or name, to return a single Style object from the workbook Styles collection. The following example changes the Normal style for the active workbook by setting the style's Bold property.

ActiveWorkbook.Styles("Normal").Font.Bold = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.AddIndent: bool
    '''Returns or sets a Boolean value that indicates if text is automatically indented when the text alignment in a cell is set to equal distribution (either horizontally or vertically).

#SYNTAX:

expression.AddIndent

expression A variable that represents a Style object.

Set the value of this property to True to automatically indent text when the text alignment in the cell is set, either horizontally or vertically, to equal distribution.

To set text alignment to equal distribution, you can set the VerticalAlignment property of the Range object to xlVAlignDistributed when the value of the Orientation property is xlVertical, and you can set the HorizontalAlignment property to xlHAlignDistributed when the value of the Orientation property is xlHorizontal.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Set the value of this property to True to automatically indent text when the text alignment in the cell is set, either horizontally or vertically, to equal distribution.

To set text alignment to equal distribution, you can set the VerticalAlignment property of the Range object to xlVAlignDistributed when the value of the Orientation property is xlVertical, and you can set the HorizontalAlignment property to xlHAlignDistributed when the value of the Orientation property is xlHorizontal.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Style object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Borders: Borders
    '''Returns a Borders collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format).

#SYNTAX:

expression.Borders

expression A variable that represents a Style object.

This example sets the color of the bottom border of cell B2 on Sheet1 to a thin red border.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the color of the bottom border of cell B2 on Sheet1 to a thin red border.

Sub SetRangeBorder() 
 
 With Worksheets("Sheet1").Range("B2").Borders(xlEdgeBottom) 
 .LineStyle = xlContinuous 
 .Weight = xlThin 
 .ColorIndex = 3 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.BuiltIn: bool
    '''True if the style is a built-in style. Read-only Boolean.

#SYNTAX:

expression.BuiltIn

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Style object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Font: Font
    '''Returns a Font object that represents the font of the specified object.

#SYNTAX:

expression.Font

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FormulaHidden: bool
    '''Returns or sets a Boolean value that indicates if the formula will be hidden when the worksheet is protected.

#SYNTAX:

expression.FormulaHidden

expression A variable that represents a Style object.

Don't confuse this property with the Hidden property of the Range object. The formula will not be hidden if the workbook is protected and the worksheet is not, but only if the worksheet is protected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Don't confuse this property with the Hidden property of the Range object. The formula will not be hidden if the workbook is protected and the worksheet is not, but only if the worksheet is protected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HorizontalAlignment: XlHAlign
    '''Returns or sets an XlHAlign value that represents the horizontal alignment for the specified object.

#SYNTAX:

expression.HorizontalAlignment

expression A variable that represents a Style object.

Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IncludeAlignment: bool
    '''True if the style includes the AddIndent, HorizontalAlignment, VerticalAlignment, WrapText, IndentLevel, and Orientation properties of the Style object. Read/write Boolean.

#SYNTAX:

expression.IncludeAlignment

expression A variable that represents a Style object.

This example sets the style attached to cell A1 on Sheet1 to include alignment format.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the style attached to cell A1 on Sheet1 to include alignment format.

Worksheets("Sheet1").Range("A1").Style.IncludeAlignment = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IncludeBorder: bool
    '''True if the style includes the Color, ColorIndex, LineStyle, and Weight properties of the Border object. Read/write Boolean.

#SYNTAX:

expression.IncludeBorder

expression A variable that represents a Style object.

This example sets the style attached to cell A1 on Sheet1 to include border format.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the style attached to cell A1 on Sheet1 to include border format.

Worksheets("Sheet1").Range("A1").Style.IncludeBorder = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IncludeFont: bool
    '''True if the style includes the Background, Bold, Color, ColorIndex, FontStyle, Italic, Name, Size, Strikethrough, Subscript, Superscript, and Underline font properties. Read/write Boolean.

#SYNTAX:

expression.IncludeFont

expression A variable that represents a Style object.

This example sets the style attached to cell A1 on Sheet1 to include font format.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the style attached to cell A1 on Sheet1 to include font format.

Worksheets("Sheet1").Range("A1").Style.IncludeFont = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IncludeNumber: bool
    '''True if the style includes the NumberFormat property. Read/write Boolean.

#SYNTAX:

expression.IncludeNumber

expression A variable that represents a Style object.

This example sets the style attached to cell A1 on Sheet1 to include number format.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the style attached to cell A1 on Sheet1 to include number format.

Worksheets("Sheet1").Range("A1").Style.IncludeNumber = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IncludePatterns: bool
    '''True if the style includes the Color, ColorIndex, InvertIfNegative, Pattern, PatternColor, and PatternColorIndex properties of the Interior object. Read/write Boolean.

#SYNTAX:

expression.IncludePatterns

expression A variable that represents a Style object.

This example sets the style attached to cell A1 on Sheet1 to include pattern format.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the style attached to cell A1 on Sheet1 to include pattern format.

Worksheets("Sheet1").Range("A1").Style.IncludePatterns = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IncludeProtection: bool
    '''True if the style includes the FormulaHidden and Locked protection properties. Read/write Boolean.

#SYNTAX:

expression.IncludeProtection

expression A variable that represents a Style object.

This example sets the style attached to cell A1 on Sheet1 to include protection format.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the style attached to cell A1 on Sheet1 to include protection format.

Worksheets("Sheet1").Range("A1").Style.IncludeProtection = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.IndentLevel: int
    '''Returns or sets a Long value that represents the indent level for the style.

#SYNTAX:

expression.IndentLevel

expression A variable that represents a Style object.

Using this property to set the indent level to a number less than 0 (zero) or greater than 15 causes an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Using this property to set the indent level to a number less than 0 (zero) or greater than 15 causes an error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Interior: Interior
    '''Returns an Interior object that represents the interior of the specified object.

#SYNTAX:

expression.Interior

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Locked: bool
    '''Returns or sets a Boolean value that indicates if the object is locked.

#SYNTAX:

expression.Locked

expression A variable that represents a Style object.

This property returns True if the object is locked or False if the object can be modified when the sheet is protected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property returns True if the object is locked or False if the object can be modified when the sheet is protected.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Name: str
    '''Returns a String value that represents the name of the object.

#SYNTAX:

expression.Name

expression A variable that represents a Style object.

This example displays the name of style one in the active workbook, first in the language of the macro and then in the language of the user.

The following example displays the name of the default ListObject object in Sheet1 of the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name of style one in the active workbook, first in the language of the macro and then in the language of the user.

With ActiveWorkbook.Styles(1) 
 MsgBox "The name of the style: " & .Name 
 MsgBox "The localized name of the style: " & .NameLocal 
End With

The following example displays the name of the default ListObject object in Sheet1 of the active workbook.

Sub Test 
 Dim wrksht As Worksheet 
 Dim oListObj As ListObject 
 
 Set wrksht = ActiveWorkbook.Worksheets("Sheet1") 
 Set oListObj = wrksht.ListObjects(1) 
 
 MsgBox oListObj.Name 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NameLocal: str
    '''Returns or sets the name of the object, in the language of the user. Read-only String.

#SYNTAX:

expression.NameLocal

expression A variable that represents a Style object.

If the style is a built-in style, this property returns the name of the style in the language of the current locale.

This example displays the name and localized name of style one in the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the style is a built-in style, this property returns the name of the style in the language of the current locale.

This example displays the name and localized name of style one in the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the name and localized name of style one in the active workbook.

With ActiveWorkbook.Styles(1) 
 MsgBox "The name of the style is " & .Name 
 MsgBox "The localized name of the style is " & .NameLocal 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NumberFormat: str
    '''Returns or sets a String value that represents the format code for the object.

#SYNTAX:

expression.NumberFormat

expression A variable that represents a Style object.

The format code is the same string as the Format Codes option in the Format Cells dialog box. The Format function uses different format code strings than do the NumberFormat and NumberFormatLocal properties.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The format code is the same string as the Format Codes option in the Format Cells dialog box. The Format function uses different format code strings than do the NumberFormat and NumberFormatLocal properties.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.NumberFormatLocal: str
    '''Returns or sets a String value that represents the format code for the object as a string in the language of the user.

#SYNTAX:

expression.NumberFormatLocal

expression A variable that represents a Style object.

The Format function uses different format code strings than do the NumberFormat and NumberFormatLocal properties.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The Format function uses different format code strings than do the NumberFormat and NumberFormatLocal properties.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Orientation: XlOrientation
    '''Returns or sets an XlOrientation value that represents the text orientation.

#SYNTAX:

expression.Orientation

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ReadingOrder: XlReadingOrder | xlRTL | xlLTR | xlContext | int
    '''Returns or sets the reading order for the specified object. Can be one of the following XlReadingOrder constants: xlRTL (right-to-left), xlLTR (left-to-right), or xlContext. Read/write Long.

#SYNTAX:

expression.ReadingOrder

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ShrinkToFit: bool
    '''Returns or sets a Boolean value that indicates if text automatically shrinks to fit in the available column width.

#SYNTAX:

expression.ShrinkToFit

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Value: str
    '''Returns a String value that represents the name of the specified style.

#SYNTAX:

expression.Value

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.VerticalAlignment: XlVAlign
    '''Returns or sets an XlVAlign value that represents the vertical alignment of the specified object.

#SYNTAX:

expression.VerticalAlignment

expression A variable that represents a Style object.

Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Some of these constants may not be available to you, depending on the language support (U.S. English, for example) that you've selected or installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.WrapText: bool
    '''Returns or sets a Boolean value that indicates if Microsoft Excel wraps the text in the object.

#SYNTAX:

expression.WrapText

expression A variable that represents a Style object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self._Default: str
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Delete(self) -> VBA_Variant:
    '''Deletes the object.

#RETURN-VALUE: Variant
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __call__(self):  pass

  def __getattr__(self, attr):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # MergeCells:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 Style 的 MergeCells 属性', 'xlmain11.chm', 0, -2146827284), None)



class Validation:
  '''Represents data validation for a worksheet range.

#EXAMPLE:

Use the Validation property of the Range object to return the Validation object. The following example changes the data validation for cell E5.

Range("e5").Validation _ 
 .Modify xlValidateList, xlValidAlertStop, "=$A$1:$A$10"

Use the Add method to add data validation to a range and create a new Validation object. The following example adds data validation to cell E5.

With Range("e5").Validation 
 .Add Type:=xlValidateWholeNumber, _ 
 AlertStyle:=xlValidAlertInformation, _ 
 Minimum:="5", Maximum:="10" 
 .InputTitle = "Integers" 
 .ErrorTitle = "Integers" 
 .InputMessage = "Enter an integer from five to ten" 
 .ErrorMessage = "You must enter a number from five to ten" 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Validation object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Validation object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ErrorTitle: str
    '''Returns or sets the title of the data-validation error dialog box. Read/write String.

#SYNTAX:

expression.ErrorTitle

expression A variable that represents a Validation object.

This example adds data validation to cell E5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds data validation to cell E5.

With Range("e5").Validation 
 .Add xlValidateWholeNumber, _ 
 xlValidAlertInformation, xlBetween, "5", "10" 
 .InputTitle = "Integers" 
 .ErrorTitle = "Integers" 
 .InputMessage = "Enter an integer from five to ten" 
 .ErrorMessage = "You must enter a number from five to ten" 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.InputTitle: str
    '''Returns or sets the title of the data-validation input dialog box. Read/write String. Limited to 32 characters.

#SYNTAX:

expression.InputTitle

expression A variable that represents a Validation object.

This example turns on data validation for cell E5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns on data validation for cell E5.

With Range("e5").Validation 
 .Add xlValidateWholeNumber, _ 
 xlValidAlertInformation, xlBetween, "5", "10" 
 .InputTitle = "Integers" 
 .ErrorTitle = "Integers" 
 .InputMessage = "Enter an integer from five to ten" 
 .ErrorMessage = "You must enter a number from five to ten" 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Validation object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Value: bool
    '''Returns a Boolean value that indicates if all the validation criteria are met (that is, if the range contains valid data).

#SYNTAX:

expression.Value

expression A variable that represents a Validation object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Type, AlertStyle, Operator, Formula1, Formula2) -> None:
    '''Adds data validation to the specified range.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required XlDVType The validation type.

AlertStyle Optional Variant The validation alert style. Can be one of the following XlDVAlertStyle constants: xlValidAlertInformation, xlValidAlertStop, or xlValidAlertWarning.

Operator Optional Variant The data validation operator. Can be one of the following XlFormatConditionOperator constants: xlBetween, xlEqual, xlGreater, xlGreaterEqual, xlLess, xlLessEqual, xlNotBetween, or xlNotEqual.

Formula1 Optional Variant The first part of the data validation equation. Value must not exceed 255 characters.

Formula2 Optional Variant The second part of the data validation equation when Operator is xlBetween or xlNotBetween (otherwise, this argument is ignored).

#REMARKS:

The Add method requires different arguments, depending on the validation type, as shown in the following table.

This example adds data validation to cell E5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds data validation to cell E5.

With Range("e5").Validation 
 .Add Type:=xlValidateWholeNumber, _ 
 AlertStyle:= xlValidAlertStop, _ 
 Operator:=xlBetween, Formula1:="5", Formula2:="10" 
 .InputTitle = "Integers" 
 .ErrorTitle = "Integers" 
 .InputMessage = "Enter an integer from five to ten" 
 .ErrorMessage = "You must enter a number from five to ten" 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Delete(self) -> None:
    '''Deletes the object.'''

  def Modify(self, Type, AlertStyle, Operator, Formula1, Formula2) -> None:
    '''Modifies data validation for a range.

#PARAMETERS:

Name Required/Optional Data type Description

Type Optional Variant An XlDVType value that represents the validation type.

AlertStyle Optional Variant An XlDVAlertStyle value that represents the validation alert style.

Operator Optional Variant An XlFormatConditionOperator value that represents the data validation operator.

Formula1 Optional Variant The first part of the data validation equation.

Formula2 Optional Variant The second part of the data validation equation when Operator is xlBetween or xlNotBetween; otherwise, this argument is ignored.

#REMARKS:

The Modify method requires different arguments, depending on the validation type, as shown in the following table.

This example changes data validation for cell E5.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example changes data validation for cell E5.

Range("e5").Validation _ 
 .Modify xlValidateList, xlValidAlertStop, _ 
 xlBetween, "=$A$1:$A$10"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __call__(self):  pass

  def __getattr__(self, attr):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # AlertStyle:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ErrorMessage:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Formula1:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Formula2:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # IMEMode:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # IgnoreBlank:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # InCellDropdown:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # InputMessage:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Operator:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ShowError:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ShowInput:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Type:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)



class Worksheet(_Worksheet):
  '''Represents a worksheet.

#REMARKS:

The Worksheet object is a member of the Worksheets collection. The Worksheets collection contains all the Worksheet objects in a workbook.

The Worksheet object is also a member of the Sheets collection. The Sheets collection contains all the sheets in the workbook (both chart sheets and worksheets).

Use Worksheets (index), where index is the worksheet index number or name, to return a single Worksheet object. The following example hides worksheet one in the active workbook.

The worksheet index number denotes the position of the worksheet on the workbook's tab bar. Worksheets(1) is the first (leftmost) worksheet in the workbook, and Worksheets(Worksheets.Count) is the last one. All worksheets are included in the index count, even if they are hidden.

The worksheet name is shown on the tab for the worksheet. Use the Name property to set or return the worksheet name. The following example protects the scenarios on Sheet1.

When a worksheet is the active sheet, you can use the ActiveSheet property to refer to it. The following example uses the Activate method to activate Sheet1, sets the page orientation to landscape mode, and then prints the worksheet.

This example uses the BeforeDoubleClick event to open a specified set of files in Notepad. To use this example, your worksheet must contain the following data:

When you double-click cell A1, the files specified in cell A1 are opened in Notepad.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use Worksheets (index), where index is the worksheet index number or name, to return a single Worksheet object. The following example hides worksheet one in the active workbook.

Worksheets(1).Visible = False

The worksheet index number denotes the position of the worksheet on the workbook's tab bar. Worksheets(1) is the first (leftmost) worksheet in the workbook, and Worksheets(Worksheets.Count) is the last one. All worksheets are included in the index count, even if they are hidden.

The worksheet name is shown on the tab for the worksheet. Use the Name property to set or return the worksheet name. The following example protects the scenarios on Sheet1.

Dim strPassword As String 
strPassword = InputBox ("Enter the password for the worksheet") 
Worksheets("Sheet1").Protect password:=strPassword, scenarios:=True

When a worksheet is the active sheet, you can use the ActiveSheet property to refer to it. The following example uses the Activate method to activate Sheet1, sets the page orientation to landscape mode, and then prints the worksheet.

Worksheets("Sheet1").Activate 
ActiveSheet.PageSetup.Orientation = xlLandscape 
ActiveSheet.PrintOut

This example uses the BeforeDoubleClick event to open a specified set of files in Notepad. To use this example, your worksheet must contain the following data:

When you double-click cell A1, the files specified in cell A1 are opened in Notepad.

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
   'Define your variables.
   Dim sFile As String, sPath As String, sTxt As String, sExe As String, sSfx As String
   
   'If you did not double-click on A1, then exit the function.
   If Target.Address <> "$A$1" Then Exit Sub
   
   'If you did double-click on A1, then override the default double-click behavior with this function.
   Cancel = True
   
   'Set the path to the files, the path to Notepad, the file extension of the files, and the names of the files,
   'based on the information on the worksheet.
   sPath = Range("D1").Value
   sExe = Range("D2").Value
   sSfx = Range("D3").Value
   sFile = Range("A1").Value
   
   'Remove the spaces between the file names.
   sFile = WorksheetFunction.Substitute(sFile, " ", "")
   
   'Go through each file in the list (separated by commas) and
   'create the path, call the executable, and move on to the next comma.
   Do While InStr(sFile, ",")
      sTxt = sPath & "\" & Left(sFile, InStr(sFile, ",") - 1) & "." & sSfx
      If Dir(sTxt) <> "" Then Shell sExe & " " & sTxt, vbNormalFocus
      sFile = Right(sFile, Len(sFile) - InStr(sFile, ","))
   Loop
   
   'Finish off the last file name in the list
   sTxt = sPath & "\" & sFile & "." & sSfx
   If Dir(sTxt) <> "" Then Shell sExe & " " & sTxt, vbNormalNoFocus
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.__dict__: dict
    self.__module__: str
    self._dispobj_: _Worksheet

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def __maybe__call__(self, args, kwargs):  pass

  def __maybe__int__(self, args):  pass

  def __maybe__iter__(self):  pass

  def __maybe__len__(self):  pass

  def __maybe__nonzero__(self):  pass

  def __maybe__str__(self, args):  pass


  #unknown:
    # coclass_interfaces:  <class 'list'>
    # coclass_sources:  <class 'list'>
    # default_interface:  <class 'type'>
    # default_source:  <class 'type'>



class XPath:
  '''Represents an XPath that has been mapped to a Range or ListColumn object.

#REMARKS:

Use the SetValue method to map an XPath to a range or list column. The SetValue method is also used to change the properties of an existing XPath.

Use the Clear method to remove an XPath that has been mapped to a range or list column.

The following example creates an XML list based on the Contacts schema map that is attached to the workbook, and then uses the SetValue method to bind each column to an XPath.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example creates an XML list based on the Contacts schema map that is attached to the workbook, and then uses the SetValue method to bind each column to an XPath.

Sub CreateXMLList() 
 Dim mapContact As XmlMap 
 Dim strXPath As String 
 Dim lstContacts As ListObject 
 Dim lcNewCol As ListColumn 
 
 ' Specify the schema map to use. 
 Set mapContact = ActiveWorkbook.XmlMaps("Contacts") 
 
 ' Create a new list. 
 Set lstContacts = ActiveSheet.ListObjects.Add 
 
 ' Specify the first element to map. 
 strXPath = "/Root/Person/FirstName" 
 ' Map the element. 
 lstContacts.ListColumns(1).XPath.SetValue mapContact, strXPath 
 
 ' Specify the element to map. 
 strXPath = "/Root/Person/LastName" 
 ' Add a column to the list. 
 Set lcNewCol = lstContacts.ListColumns.Add 
 ' Map the element. 
 lcNewCol.XPath.SetValue mapContact, strXPath 
 
 strXPath = "/Root/Person/Address/Zip" 
 Set lcNewCol = lstContacts.ListColumns.Add 
 lcNewCol.XPath.SetValue mapContact, strXPath 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an XPath object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an XPath object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Range
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an XPath object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Value: str
    '''Returns a String that represents the XPath for the specified object.

#SYNTAX:

expression.Value

expression A variable that represents an XPath object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self._Default: str
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Clear(self) -> None:
    '''Clears all XPath schema information for the mapped range.

#REMARKS:

Clear affects the entire range mapped to the XPath object.

This method does not clear the data from the cells mapped to the specified XPath. Use the Clear method of the Range object to clear the data from the cells.

If the specified XPath is mapped in an XML list, the schema mapping is removed, but the list is not deleted from the worksheet.

If the mapped range is a single-cell, the single-cell is removed and the data remains.

This method produces an error if any of the following conditions are true:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SetValue(self, Map, XPath, SelectionNamespace, Repeating) -> None:
    '''Maps the specified XPath object to a ListColumn object or Range collection. If the XPath object has previously been mapped to the ListColumn object or Range collection, the SetValue method sets the properties of the XPath object.

#PARAMETERS:

Name Required/Optional Data type Description

Map Required XmlMap The map info that the mapped range will be associated with.

XPath Required String A valid XPath expression that tells Excel what XML data should appear in this mapped range. The XPath string can also contain valid filters, in which case, only a subset of the data that the XPath points to will ever appear in this mapped range.

SelectionNamespace Optional Variant Specifies any namespace prefixes used in the XPath argument. This argument can be omitted if the XPath object doesn't contain any prefixes, or if the XPath object uses the Microsoft Excel internal prefixes.

Repeating Optional Variant Specifies whether the XPath object is to be bound to a column in an XML list or mapped to a single cell. Set to True to bind the XPath object to a column in an XML list. False forces a non-repeating cell to be created. If the range is greater than a single cell and False is specified, a run-time error occurs.

#REMARKS:

See the IsExportable property of the XMLMap object for a discussion on XPath support in Excel. If the XPath expression is invalid or if the XPath specified has already been mapped, a run-time error occurs.

If Excel cannot resolve the namespace, a run-time error occurs.

This method produces an error if any of the following conditions are true:

If the range is a single cell, Excel defaults to creating a single-mapped, non-repeating mapped cell. The non-repeating cell is given no header.

The exception to the preceding statement occurs when the single-cell range lies within a ListObject, in which case, mapping information is applied to the entire column.

If the range spans multiple cells, Excel creates a repeating XML list. Excel treats the selected range as all data values, so when the XML list is created, the range is shifted down by one row, and the header is placed in the cell that the top of the range occupied. The insert row lies at the bottom of the shifted range.

The following example creates an XML list based on the Contacts schema map that is attached to the workbook, and then uses the SetValue method to bind each column to an XPath object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example creates an XML list based on the Contacts schema map that is attached to the workbook, and then uses the SetValue method to bind each column to an XPath object.

Sub CreateXMLList() 
    Dim mapContact As XmlMap 
    Dim strXPath As String 
    Dim lstContacts As ListObject 
    Dim objNewCol As ListColumn 
 
    ' Specify the schema map to use. 
    Set mapContact = ActiveWorkbook.XmlMaps("Contacts") 
     
    ' Create a new list. 
    Set lstContacts = ActiveSheet.ListObjects.Add 
         
    ' Specify the first element to map. 
    strXPath = "/Root/Person/FirstName" 
    ' Map the element. 
    lstContacts.ListColumns(1).XPath.SetValue mapContact, strXPath 
 
    ' Specify the second element to map. 
    strXPath = "/Root/Person/LastName" 
    ' Add a column to the list. 
    Set objNewCol = lstContacts.ListColumns.Add 
    ' Map the element. 
    objNewCol.XPath.SetValue mapContact, strXPath 
 
    strXPath = "/Root/Person/Address/Zip" 
    Set objNewCol = lstContacts.ListColumns.Add 
    objNewCol.XPath.SetValue mapContact, strXPath 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __call__(self):  pass

  def __getattr__(self, attr):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # Map:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467259), None)
    # Repeating:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467259), None)



class Menus:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.Parent: MenuBar
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Caption, Before, Restore):  pass

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class _Application:
  def __init__(self):
    self.ActiveCell: Range
    self.ActiveEncryptionSession: int
    self.ActiveMenuBar: MenuBar
    self.ActivePrinter: str
    self.ActiveSheet: _Worksheet
    self.ActiveWindow: Window
    self.ActiveWorkbook: Workbook
    self.AddIns: AddIns
    self.AddIns2: AddIns2
    self.AlertBeforeOverwriting: bool
    self.AltStartupPath: str
    self.AlwaysUseClearType: bool
    self.Application: Application
    self.ArbitraryXMLSupportAvailable: bool
    self.AskToUpdateLinks: bool
    self.Assistance: CDispatch
    self.Assistant: CDispatch
    self.AutoCorrect: AutoCorrect
    self.AutoFormatAsYouTypeReplaceHyperlinks: bool
    self.AutoPercentEntry: bool
    self.AutoRecover: AutoRecover
    self.AutomationSecurity: int
    self.Build: float
    self.COMAddIns: CDispatch
    self.CSVDisplayNumberConversionWarning: bool
    self.CSVKeepColumnAsTextIfMultipleEntriesAreText: bool
    self.CalculateBeforeSave: bool
    self.Calculation: int
    self.CalculationInterruptKey: int
    self.CalculationState: int
    self.CalculationVersion: int
    self.Caller: int
    self.CanPlaySounds: bool
    self.CanRecordSounds: bool
    self.Caption: str
    self.CellDragAndDrop: bool
    self.Cells: Range
    self.ChartDataPointTrack: bool
    self.Charts: Sheets
    self.ClipboardFormats: tuple
    self.ClusterConnector: str
    self.ColorButtons: bool
    self.Columns: Range
    self.CommandBars: CDispatch
    self.CommandUnderlines: int
    self.ConstrainNumeric: bool
    self.ControlCharacters: float
    self.ConvertNumbersWithECharacter: bool
    self.CopyObjectsWithCells: bool
    self.Creator: int
    self.Cursor: int
    self.CursorMovement: float
    self.CustomListCount: float
    self.CutCopyMode: int
    self.DDEAppReturnCode: float
    self.DataEntryMode: int
    self.DataPrivacyOptions: CDispatch
    self.DecimalSeparator: str
    self.DefaultFilePath: str
    self.DefaultPivotTableLayoutOptions: DefaultPivotTableLayoutOptions
    self.DefaultSaveFormat: int
    self.DefaultSheetDirection: int
    self.DefaultWebOptions: DefaultWebOptions
    self.DeferAsyncQueries: bool
    self.DialogSheets: Sheets
    self.Dialogs: Dialogs
    self.DisplayAlerts: bool
    self.DisplayClipboardWindow: bool
    self.DisplayCommentIndicator: int
    self.DisplayDocumentActionTaskPane: bool
    self.DisplayDocumentInformationPanel: bool
    self.DisplayExcel4Menus: bool
    self.DisplayFormulaAutoComplete: bool
    self.DisplayFormulaBar: bool
    self.DisplayFullScreen: bool
    self.DisplayFunctionToolTips: bool
    self.DisplayInfoWindow: bool
    self.DisplayInsertOptions: bool
    self.DisplayNoteIndicator: bool
    self.DisplayPasteOptions: bool
    self.DisplayRecentFiles: bool
    self.DisplayScrollBars: bool
    self.DisplayStatusBar: bool
    self.EditDirectlyInCell: bool
    self.EnableAnimations: bool
    self.EnableAutoComplete: bool
    self.EnableCancelKey: int
    self.EnableCheckFileExtensions: bool
    self.EnableEvents: bool
    self.EnableLargeOperationAlert: bool
    self.EnableLivePreview: bool
    self.EnableMacroAnimations: bool
    self.EnableSound: bool
    self.EnableTipWizard: bool
    self.ErrorCheckingOptions: ErrorCheckingOptions
    self.Excel4IntlMacroSheets: Sheets
    self.Excel4MacroSheets: Sheets
    self.ExtendList: bool
    self.FeatureInstall: int
    self.FileExportConverters: FileExportConverters
    self.FileValidation: int
    self.FileValidationPivot: int
    self.FindFormat: CellFormat
    self.FixedDecimal: bool
    self.FixedDecimalPlaces: int
    self.FlashFill: bool
    self.FlashFillMode: bool
    self.FormulaBarHeight: int
    self.GenerateGetPivotData: bool
    self.GenerateTableRefs: int
    self.Height: float
    self.HighQualityModeForGraphics: bool
    self.HinstancePtr: int
    self.Hwnd: int
    self.IgnoreRemoteRequests: bool
    self.Interactive: bool
    self.International: tuple
    self.IsSandboxed: bool
    self.Iteration: bool
    self.LanguageSettings: CDispatch
    self.LargeButtons: bool
    self.LargeOperationCellThousandCount: int
    self.Left: float
    self.LibraryPath: str
    self.MailSystem: float
    self.MapPaperSize: bool
    self.MathCoprocessorAvailable: bool
    self.MaxChange: float
    self.MaxIterations: float
    self.MeasurementUnit: int
    self.MemoryFree: int
    self.MemoryTotal: int
    self.MemoryUsed: int
    self.MenuBars: MenuBars
    self.MergeInstances: bool
    self.Modules: Modules
    self.MouseAvailable: bool
    self.MoveAfterReturn: bool
    self.MoveAfterReturnDirection: int
    self.MultiThreadedCalculation: MultiThreadedCalculation
    self.Name: str
    self.Names: Names
    self.NetworkTemplatesPath: str
    self.NewWorkbook: CDispatch
    self.ODBCErrors: ODBCErrors
    self.ODBCTimeout: int
    self.OLEDBErrors: OLEDBErrors
    self.OperatingSystem: str
    self.OrganizationName: str
    self.Parent: Application
    self.Path: str
    self.PathSeparator: str
    self.PivotTableSelection: bool
    self.PrintCommunication: bool
    self.ProductCode: str
    self.PromptForSummaryInfo: bool
    self.ProtectedViewWindows: ProtectedViewWindows
    self.QuickAnalysis: QuickAnalysis
    self.Quitting: bool
    self.RTD: RTD
    self.Ready: bool
    self.RecentFiles: RecentFiles
    self.RecordRelative: bool
    self.ReferenceStyle: int
    self.ReplaceFormat: CellFormat
    self.RollZoom: bool
    self.Rows: Range
    self.SaveISO8601Dates: bool
    self.ScreenUpdating: bool
    self.Selection: Range
    self.Sheets: Sheets
    self.SheetsInNewWorkbook: float
    self.ShowChartTipNames: bool
    self.ShowChartTipValues: bool
    self.ShowConvertToDataType: bool
    self.ShowDevTools: bool
    self.ShowMenuFloaties: bool
    self.ShowQuickAnalysis: bool
    self.ShowSelectionFloaties: bool
    self.ShowStartupDialog: bool
    self.ShowToolTips: bool
    self.ShowWindowsInTaskbar: bool
    self.SmartArtColors: CDispatch
    self.SmartArtLayouts: CDispatch
    self.SmartArtQuickStyles: CDispatch
    self.SmartTagRecognizers: SmartTagRecognizers
    self.Speech: Speech
    self.SpellingOptions: SpellingOptions
    self.StandardFont: str
    self.StandardFontSize: float
    self.StartupPath: str
    self.StatusBar: bool
    self.TemplatesPath: str
    self.ThousandsSeparator: str
    self.Toolbars: Toolbars
    self.Top: float
    self.TransitionMenuKey: str
    self.TransitionMenuKeyAction: float
    self.TransitionNavigKeys: bool
    self.TruncateLargeNumbers: bool
    self.TruncateLeadingZeros: bool
    self.UILanguage: int
    self.UsableHeight: float
    self.UsableWidth: float
    self.UseClusterConnector: bool
    self.UseSystemSeparators: bool
    self.UsedObjects: UsedObjects
    self.UserControl: bool
    self.UserLibraryPath: str
    self.UserName: str
    self.Value: str
    self.Version: str
    self.Visible: bool
    self.WarnOnFunctionNameConflict: bool
    self.Watches: Watches
    self.Width: float
    self.WindowState: int
    self.Windows: Windows
    self.WindowsForPens: bool
    self.Workbooks: Workbooks
    self.WorksheetFunction: WorksheetFunction
    self.Worksheets: Sheets
    self._Default: str
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def ActivateMicrosoftApp(self, Index):  pass

  def AddChartAutoFormat(self, Chart, Name, Description):  pass

  def AddCustomList(self, ListArray, ByRow):  pass

  def Calculate(self):  pass

  def CalculateFull(self):  pass

  def CalculateFullRebuild(self):  pass

  def CalculateUntilAsyncQueriesDone(self):  pass

  def CentimetersToPoints(self, Centimeters):  pass

  def CheckAbort(self, KeepAbort):  pass

  def CheckSpelling(self, Word, CustomDictionary, IgnoreUppercase):  pass

  def ConvertFormula(self, Formula, FromReferenceStyle, ToReferenceStyle, ToAbsolute, RelativeTo):  pass

  def DDEExecute(self, Channel, String):  pass

  def DDEInitiate(self, App, Topic):  pass

  def DDEPoke(self, Channel, Item, Data):  pass

  def DDERequest(self, Channel, Item):  pass

  def DDETerminate(self, Channel):  pass

  def DeleteChartAutoFormat(self, Name):  pass

  def DeleteCustomList(self, ListNum):  pass

  def DisplayXMLSourcePane(self, XmlMap):  pass

  def DoubleClick(self):  pass

  def Dummy1(self, Arg1, Arg2, Arg3, Arg4):  pass

  def Dummy10(self, arg):  pass

  def Dummy11(self):  pass

  def Dummy12(self, p1, p2):  pass

  def Dummy13(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def Dummy14(self):  pass

  def Dummy2(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8):  pass

  def Dummy20(self, grfCompareFunctions):  pass

  def Dummy3(self):  pass

  def Dummy4(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15):  pass

  def Dummy5(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13):  pass

  def Dummy6(self):  pass

  def Dummy7(self):  pass

  def Dummy8(self, Arg1):  pass

  def Dummy9(self):  pass

  def Evaluate(self, Name):  pass

  def ExecuteExcel4Macro(self, String):  pass

  def FileDialog(self, fileDialogType):  pass

  def FindFile(self):  pass

  def GetCaller(self, Index):  pass

  def GetClipboardFormats(self, Index):  pass

  def GetCustomListContents(self, ListNum):  pass

  def GetCustomListNum(self, ListArray):  pass

  def GetFileConverters(self, Index1, Index2):  pass

  def GetInternational(self, Index):  pass

  def GetOpenFilename(self, FileFilter, FilterIndex, Title, ButtonText, MultiSelect):  pass

  def GetPhonetic(self, Text):  pass

  def GetPreviousSelections(self, Index):  pass

  def GetRegisteredFunctions(self, Index1, Index2):  pass

  def GetSaveAsFilename(self, InitialFilename, FileFilter, FilterIndex, Title, ButtonText):  pass

  def Goto(self, Reference, Scroll):  pass

  def Help(self, HelpFile, HelpContextID):  pass

  def InchesToPoints(self, Inches):  pass

  def InputBox(self, Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type):  pass

  def Intersect(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def MacroOptions(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile, ArgumentDescriptions):  pass

  def MailLogoff(self):  pass

  def MailLogon(self, Name, Password, DownloadNewMail):  pass

  def NextLetter(self):  pass

  def OnKey(self, Key, Procedure):  pass

  def OnRepeat(self, Text, Procedure):  pass

  def OnTime(self, EarliestTime, Procedure, LatestTime, Schedule):  pass

  def OnUndo(self, Text, Procedure):  pass

  def Quit(self):  pass

  def Range(self, Cell1, Cell2):  pass

  def RecordMacro(self, BasicCode, XlmCode):  pass

  def RegisterXLL(self, Filename):  pass

  def Repeat(self):  pass

  def ResetTipWizard(self):  pass

  def Run(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def Save(self, Filename):  pass

  def SaveWorkspace(self, Filename):  pass

  def SendKeys(self, Keys, Wait):  pass

  def SetDefaultChart(self, FormatName, Gallery):  pass

  def SharePointVersion(self, bstrUrl):  pass

  def ShortcutMenus(self, Index):  pass

  def Support(self, Object, ID, arg):  pass

  def Undo(self):  pass

  def Union(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def Volatile(self, Volatile):  pass

  def Wait(self, Time):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Evaluate(self, Name):  pass

  def _FindFile(self):  pass

  def _MacroOptions(self, Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile):  pass

  def _Run2(self, Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def _WSFunction(self, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30):  pass

  def _Wait(self, Time):  pass

  def __call__(self):  pass

  def __getattr__(self, attr):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #unknown:
    # ActiveChart:  <class 'NoneType'>
    # ActiveDialog:  <class 'NoneType'>
    # ActiveProtectedViewWindow:  <class 'NoneType'>
    # FileConverters:  <class 'NoneType'>
    # MailSession:  <class 'NoneType'>
    # OnCalculate:  <class 'NoneType'>
    # OnData:  <class 'NoneType'>
    # OnDoubleClick:  <class 'NoneType'>
    # OnEntry:  <class 'NoneType'>
    # OnSheetActivate:  <class 'NoneType'>
    # OnSheetDeactivate:  <class 'NoneType'>
    # OnWindow:  <class 'NoneType'>
    # PreviousSelections:  <class 'NoneType'>
    # RegisteredFunctions:  <class 'NoneType'>

  #getattr Exception:
    # AnswerWizard:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Dummy101:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Dummy22:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # Dummy23:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # FileFind:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # FileSearch:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # FormatStaleValues:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467263), None)
    # Hinstance:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147418113), None)
    # SensitivityLabelPolicy:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147220726), None)
    # ThisCell:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ThisWorkbook:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # VBE:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不信任到 Visual Basic Project 的程序连接\n', 'xlmain11.chm', 0, -2146827284), None)



class Comments:
  '''A collection of cell comments.

#REMARKS:

Each comment is represented by a Comment object.

Use the Comments property of the Worksheet object to return the Comments collection. The following example hides all the comments on worksheet one.

Use the AddComment method of the Range object to add a comment to a range. The following example adds a comment to cell E5 on worksheet one.

Use Comments (index), where index is the comment number, to return a single comment from the Comments collection. The following example hides comment two on worksheet one.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Comments property of the Worksheet object to return the Comments collection. The following example hides all the comments on worksheet one.

Set cmt = Worksheets(1).Comments 
For Each c In cmt 
 c.Visible = False 
Next

Use the AddComment method of the Range object to add a comment to a range. The following example adds a comment to cell E5 on worksheet one.

With Worksheets(1).Range("e5").AddComment 
 .Visible = False 
 .Text "reviewed on " & Date 
End With

Use Comments (index), where index is the comment number, to return a single comment from the Comments collection. The following example hides comment two on worksheet one.

Worksheets(1).Comments(2).Visible = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Comments object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Comments object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Comments object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Comments object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index) -> Comment:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Long The index number for the object.

#RETURN-VALUE: A Comment object contained by the collection.

#EXAMPLE:

This example hides comment two.

Worksheets(1).Comments.Item(2).Visible = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class CommentsThreaded:
  '''A collection of top-level CommentThreaded objects in a Worksheet, or a collection of replies in a single threaded comment.

#REMARKS:

Each threaded comment is represented by a CommentThreaded object.

Use the CommentsThreaded property of the Worksheet object to return the CommentsThreaded collection. The following example updates the text of all the threaded comments on worksheet one.

Use the AddCommentThreaded method of the Range object to add a threaded comment to a range. The following example adds a threaded comment to cell E5 on worksheet one.

Use CommentsThreaded (index), where index is the threaded comment number, to return a single threaded comment from the CommentsThreaded collection. The following example updates the text of threaded comment two on worksheet one.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the CommentsThreaded property of the Worksheet object to return the CommentsThreaded collection. The following example updates the text of all the threaded comments on worksheet one.

Set cmt = Worksheets(1).CommentsThreaded 
For Each c In cmt 
 c.Text "Updated Comment"
Next

Use the AddCommentThreaded method of the Range object to add a threaded comment to a range. The following example adds a threaded comment to cell E5 on worksheet one.

Worksheets(1).Range("e5").AddCommentThreaded("This is a Threaded Comment")

Use CommentsThreaded (index), where index is the threaded comment number, to return a single threaded comment from the CommentsThreaded collection. The following example updates the text of threaded comment two on worksheet one.

Worksheets(1).CommentsThreaded(2).Text "Updated Text"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a CommentsThreaded object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a CommentsThreaded object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a CommentsThreaded object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a CommentsThreaded object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index) -> CommentThreaded:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Long The index number for the object.

#RETURN-VALUE: A CommentThreaded object contained by the collection.

#EXAMPLE:

This example updates the text of threaded comment two.

Worksheets(1).CommentsThreaded.Item(2).Text "Updated Comment"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class CustomProperties:
  '''A collection of CustomProperty objects that represents additional information. The information can be used as metadata for XML.

#REMARKS:

Use the CustomProperties property of the Worksheet object to return a CustomProperties collection.

After a CustomProperties collection is returned, you can add metadata to worksheets and perform additional actions depending on which you choose to work with.

To add metadata to a worksheet, use the CustomProperties property with the Add method.

The following example demonstrates this feature. In this example, Microsoft Excel adds identifier information to the active worksheet and returns the name and value to the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example demonstrates this feature. In this example, Microsoft Excel adds identifier information to the active worksheet and returns the name and value to the user.

Sub CheckCustomProperties() 
 
 Dim wksSheet1 As Worksheet 
 
 Set wksSheet1 = Application.ActiveSheet 
 
 ' Add metadata to worksheet. 
 wksSheet1.CustomProperties.Add _ 
 Name:="Market", Value:="Nasdaq" 
 
 ' Display metadata. 
 With wksSheet1.CustomProperties.Item(1) 
 MsgBox .Name & vbTab & .Value 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a CustomProperties object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a CustomProperties object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a CustomProperties object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a CustomProperties object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name, Value) -> CustomProperty:
    '''Adds custom property information.

#PARAMETERS:

Name Required/Optional Data type Description

Name Required String The name of the custom property.

Value Required Variant The value of the custom property.

#RETURN-VALUE: A CustomProperty object that represents the custom property information.

#EXAMPLE:

This example adds identifier information to the active worksheet and returns the name and value to the user.

Sub CheckCustomProperties() 
 
 Dim wksSheet1 As Worksheet 
 
 Set wksSheet1 = Application.ActiveSheet 
 
 ' Add metadata to worksheet. 
 wksSheet1.CustomProperties.Add _ 
 Name:="Market", Value:="Nasdaq" 
 
 ' Display metadata. 
 With wksSheet1.CustomProperties.Item(1) 
 MsgBox .Name & vbTab & .Value 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class HPageBreaks:
  '''The collection of horizontal page breaks within the print area.

#REMARKS:

Each horizontal page break is represented by an HPageBreak object.

If you add a page break that does not intersect the print area, the newly-added HPageBreak object will not appear in the HPageBreaks collection for the print area. The contents of the collection may change if the print area is resized or redefined.

When the Application property, Count property, Item property, Parent property, or Add method is used in conjunction with the HPageBreaks property of the Worksheet object:

Use the HPageBreaks property to return the HPageBreaks collection. Use the Add method to add a horizontal page break. The following example adds a horizontal page break above the active cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the HPageBreaks property to return the HPageBreaks collection. Use the Add method to add a horizontal page break. The following example adds a horizontal page break above the active cell.

ActiveSheet.HPageBreaks.Add Before:=ActiveCell

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an HPageBreaks object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents an HPageBreaks object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an HPageBreaks object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Sheets
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an HPageBreaks object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Before) -> HPageBreak:
    '''Adds a horizontal page break.

#PARAMETERS:

Name Required/Optional Data type Description

Before Required Object A Range object. The range above which the new page break will be added.

#RETURN-VALUE: An HPageBreak object that represents the new horizontal page break.

#EXAMPLE:

This example adds a horizontal page break above cell F25 and adds a vertical page break to the left of this cell.

With Worksheets(1) 
 .HPageBreaks.Add .Range("F25") 
 .VPageBreaks.Add .Range("F25") 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ListObjects:
  '''A collection of all the ListObject objects on a worksheet. Each ListObject object represents a table on the worksheet.

#REMARKS:

Use the ListObjects property of the Worksheet object to return the ListObjects collection.

The following example creates a new ListObjects collection that represents all the tables on a worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example creates a new ListObjects collection that represents all the tables on a worksheet.

Set myWorksheetLists = Worksheets(1).ListObjects

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ListObjects object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns an Integer value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a ListObjects object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ListObjects object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ListObjects object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, SourceType, Source, LinkSource, XlListObjectHasHeaders, Destination, TableStyleName) -> ListObject:
    '''Creates a new list object.

#PARAMETERS:

Name Required/Optional Data type Description

SourceType Optional XlListObjectSourceType Indicates the kind of source for the query.

Source Optional Variant When SourceType = xlSrcRange: A Range object representing the data source. If omitted, the Source will default to the range returned by list range detection code.When SourceType = xlSrcExternal: An array of String values specifying a connection to the source, containing the following elements:0 - URL to SharePoint site1 - ListName2 - ViewGUID When SourceType = xlSrcQuery: Accepts ODBC or OLEDB connection string (this also works with xlSrcExternal).When SourceType = xlSrcModel: Accepts a WorkbookConnection object (see TableObject for example).

LinkSource Optional Boolean Indicates whether an external data source is to be linked to the ListObject object. If SourceType is xlSrcExternal, the default is True. Invalid if SourceType is xlSrcRange, and will return an error if not omitted.

XlListObjectHasHeaders Optional Variant An XlYesNoGuess constant that indicates whether the data being imported has column labels. If the Source does not contain headers, Excel will automatically generate headers. Default value: xlGuess.

Destination Optional Variant A Range object specifying a single-cell reference as the destination for the top-left corner of the new list object. If the Range object refers to more than one cell, an error is generated.The Destination argument must be specified when SourceType is set to xlSrcExternal. The Destination argument is ignored if SourceType is set to xlSrcRange.The destination range must be on the worksheet that contains the ListObjects collection specified by expression. New columns will be inserted at the Destination to fit the new list. Therefore, existing data will not be overwritten.

TableStyleName Optional String The name of a TableStyle; for example "TableStyleLight1".

#RETURN-VALUE: A ListObject object that represents the new list object.

#REMARKS:

When the list has headers, the first row of cells will be converted to Text, if not already set to text. The conversion will be based on the visible text for the cell. This means that if there is a date value with a Date format that changes with locale, the conversion to a list might produce different results depending on the current system locale. Moreover, if there are two cells in the header row that have the same visible text, an incremental Integer will be appended to make each column header unique.

The following example adds a new ListObject object based on data from a Microsoft SharePoint Foundation site to the default ListObjects collection and places the list in cell A1 in the first worksheet of the workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a new ListObject object based on data from a Microsoft SharePoint Foundation site to the default ListObjects collection and places the list in cell A1 in the first worksheet of the workbook.

Set objListObject = ActiveWorkbook.Worksheets(1).ListObjects.Add(SourceType:= xlSrcExternal, _ 
Source:= Array(strServerName, strListName, strListGUID), LinkSource:=True, _ 
XlListObjectHasHeaders:=xlGuess, Destination:=Range("A1")), 
TableStyleName:=xlGuess, Destination:=Range("A10"))

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _Add(self, SourceType, Source, LinkSource, XlListObjectHasHeaders, Destination):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class NamedSheetViewCollection:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.Parent: _Worksheet
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name):  pass

  def EnterTemporary(self):  pass

  def Exit(self):  pass

  def GetActive(self):  pass

  def GetItem(self, Name):  pass

  def GetItemAt(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Outline:
  '''Represents an outline on a worksheet.

#EXAMPLE:

Use the Outline property of the Worksheet object to return an Outline object.

The following example sets the outline on Sheet4 so that only the first outline level is shown.

Worksheets("sheet4").Outline.ShowLevels 1

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an Outline object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AutomaticStyles: bool
    '''True if the outline uses automatic styles. Read/write Boolean.

#SYNTAX:

expression.AutomaticStyles

expression A variable that represents an Outline object.

This example sets the outline on Sheet1 to use automatic styles.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the outline on Sheet1 to use automatic styles.

Worksheets("Sheet1").Outline.AutomaticStyles = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an Outline object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an Outline object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SummaryColumn: XlSummaryColumn
    '''Returns or sets the location of the summary columns in the outline. Read/write XlSummaryColumn.

#SYNTAX:

expression.SummaryColumn

expression A variable that represents an Outline object.

This example creates an outline with automatic styles, with the summary row above the detail rows, and with the summary column to the right of the detail columns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates an outline with automatic styles, with the summary row above the detail rows, and with the summary column to the right of the detail columns.

Worksheets("Sheet1").Activate 
Selection.AutoOutline 
With ActiveSheet.Outline 
 .SummaryRow = xlAbove 
 .SummaryColumn = xlRight 
 .AutomaticStyles = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SummaryRow: XlSummaryRow
    '''Returns or sets the location of the summary rows in the outline. Read/write XlSummaryRow.

#SYNTAX:

expression.SummaryRow

expression A variable that represents an Outline object.

Set XlSummaryRow to xlAbove for Microsoft Word-style outlines, where category headers are above the detailed information.

Set XlSummaryRow to xlBelow for accounting-style outlines, where summations are below the detailed information.

This example creates an outline with automatic styles, with the summary row above the detail rows, and with the summary column to the right of the detail columns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Set XlSummaryRow to xlAbove for Microsoft Word-style outlines, where category headers are above the detailed information.

Set XlSummaryRow to xlBelow for accounting-style outlines, where summations are below the detailed information.

This example creates an outline with automatic styles, with the summary row above the detail rows, and with the summary column to the right of the detail columns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates an outline with automatic styles, with the summary row above the detail rows, and with the summary column to the right of the detail columns.

Worksheets("Sheet1").Activate 
Selection.AutoOutline 
With ActiveSheet.Outline 
 .SummaryRow = xlAbove 
 .SummaryColumn = xlRight 
 .AutomaticStyles = True 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def ShowLevels(self, RowLevels, ColumnLevels) -> VBA_Variant:
    '''Displays the specified number of row and/or column levels of an outline.

#PARAMETERS:

Name Required/Optional Data type Description

RowLevels Optional Variant Specifies the number of row levels of an outline to display. If the outline has fewer levels than the number specified, Microsoft Excel displays all the levels. If this argument is 0 (zero) or is omitted, no action is taken on rows.

ColumnLevels Optional Variant Specifies the number of column levels of an outline to display. If the outline has fewer levels than the number specified, Excel displays all the levels. If this argument is 0 (zero) or is omitted, no action is taken on columns.

#RETURN-VALUE: Variant

#REMARKS:

You must specify at least one argument.

This example displays row levels one through three and column level one of the outline on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays row levels one through three and column level one of the outline on Sheet1.

Worksheets("Sheet1").Outline _ 
 .ShowLevels rowLevels:=3, columnLevels:=1

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class PageSetup:
  '''Represents the page setup description.

#REMARKS:

The PageSetup object contains all page setup attributes (left margin, bottom margin, paper size, and so on) as properties.

Use the PageSetup property of the Worksheet object to return a PageSetup object.

The following example sets the orientation to landscape mode and then prints the worksheet.

The With statement makes it easier and faster to set several properties at the same time. The following example sets all the margins for worksheet one.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the PageSetup property of the Worksheet object to return a PageSetup object.

The following example sets the orientation to landscape mode and then prints the worksheet.

With Worksheets("Sheet1") 
 .PageSetup.Orientation = xlLandscape 
 .PrintOut 
End With

The With statement makes it easier and faster to set several properties at the same time. The following example sets all the margins for worksheet one.

With Worksheets(1).PageSetup 
 .LeftMargin = Application.InchesToPoints(0.5) 
 .RightMargin = Application.InchesToPoints(0.75) 
 .TopMargin = Application.InchesToPoints(1.5) 
 .BottomMargin = Application.InchesToPoints(1) 
 .HeaderMargin = Application.InchesToPoints(0.5) 
 .FooterMargin = Application.InchesToPoints(0.5) 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.AlignMarginsHeaderFooter: bool
    '''Returns True for Excel to align the header and the footer with the margins set in the page setup options. Read/write Boolean.

#SYNTAX:

expression.AlignMarginsHeaderFooter

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a PageSetup object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.BlackAndWhite: bool
    '''True if elements of the document will be printed in black and white. Read/write Boolean.

#SYNTAX:

expression.BlackAndWhite

expression A variable that represents a PageSetup object.

This property applies only to worksheet pages.

This example causes Sheet1 to be printed in black and white.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property applies only to worksheet pages.

This example causes Sheet1 to be printed in black and white.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes Sheet1 to be printed in black and white.

Worksheets("Sheet1").PageSetup.BlackAndWhite = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.BottomMargin: float
    '''Returns or sets the size of the bottom margin, in points. Read/write Double.

#SYNTAX:

expression.BottomMargin

expression A variable that represents a PageSetup object.

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

These two examples set the bottom margin of Sheet1 to 0.5 inch (36 points).

This example displays the current setting for the bottom margin on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

These two examples set the bottom margin of Sheet1 to 0.5 inch (36 points).

This example displays the current setting for the bottom margin on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

These two examples set the bottom margin of Sheet1 to 0.5 inch (36 points).

Worksheets("Sheet1").PageSetup.BottomMargin = _ 
 Application.InchesToPoints(0.5) 
 
Worksheets("Sheet1").PageSetup.BottomMargin = 36

This example displays the current setting for the bottom margin on Sheet1.

marginInches = Worksheets("Sheet1").PageSetup.BottomMargin / _ 
 Application.InchesToPoints(1) 
MsgBox "The current bottom margin is " & marginInches & " inches"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CenterFooter: str
    '''Center aligns the footer information in the PageSetup object. Read/write String.

#SYNTAX:

expression.CenterFooter

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CenterFooterPicture: Graphic
    '''Returns a Graphic object that represents the picture for the center section of the footer. Used to set attributes about the picture.

#SYNTAX:

expression.CenterFooterPicture

expression A variable that represents a PageSetup object.

The CenterFooterPicture property is read-only, but the properties on it are not all read-only.

It's required that "&G" be a part of the CenterFooter property string for the image to show up in the center footer.

The following example adds a picture titled Sample.jpg from the C:\ drive to the center section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The CenterFooterPicture property is read-only, but the properties on it are not all read-only.

It's required that "&G" be a part of the CenterFooter property string for the image to show up in the center footer.

The following example adds a picture titled Sample.jpg from the C:\ drive to the center section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a picture titled Sample.jpg from the C:\ drive to the center section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Sub InsertPicture() 
 
 With ActiveSheet.PageSetup.CentertFooterPicture 
 .FileName = "C:\Sample.jpg" 
 .Height = 275.25 
 .Width = 463.5 
 .Brightness = 0.36 
 .ColorType = msoPictureGrayscale 
 .Contrast = 0.39 
 .CropBottom = -14.4 
 .CropLeft = -28.8 
 .CropRight = -14.4 
 .CropTop = 21.6 
 End With 
 
 ' Enable the image to show up in the center footer. 
 ActiveSheet.PageSetup.CenterFooter = "&G" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CenterHeader: str
    '''Center aligns the header information in the PageSetup object. Read/write String.

#SYNTAX:

expression.CenterHeader

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CenterHeaderPicture: Graphic
    '''Returns a Graphic object that represents the picture for the center section of the header. Used to set attributes about the picture.

#SYNTAX:

expression.CenterHeaderPicture

expression A variable that represents a PageSetup object.

The CenterHeaderPicture property is read-only, but the properties on it are not all read-only.

It's required that "&G" be a part of the CenterHeader property string for the image to show up in the center header.

The following example adds a picture titled Sample.jpg from the C:\ drive to the center section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The CenterHeaderPicture property is read-only, but the properties on it are not all read-only.

It's required that "&G" be a part of the CenterHeader property string for the image to show up in the center header.

The following example adds a picture titled Sample.jpg from the C:\ drive to the center section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a picture titled Sample.jpg from the C:\ drive to the center section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Sub InsertPicture() 
 
 With ActiveSheet.PageSetup.CentertHeaderPicture 
 .FileName = "C:\Sample.jpg" 
 .Height = 275.25 
 .Width = 463.5 
 .Brightness = 0.36 
 .ColorType = msoPictureGrayscale 
 .Contrast = 0.39 
 .CropBottom = -14.4 
 .CropLeft = -28.8 
 .CropRight = -14.4 
 .CropTop = 21.6 
 End With 
 
 ' Enable the image to show up in the center header. 
 ActiveSheet.PageSetup.CenterHeader = "&G" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CenterHorizontally: bool
    '''True if the sheet is centered horizontally on the page when it's printed. Read/write Boolean.

#SYNTAX:

expression.CenterHorizontally

expression A variable that represents a PageSetup object.

This example centers Sheet1 horizontally when it's printed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example centers Sheet1 horizontally when it's printed.

Worksheets("Sheet1").PageSetup.CenterHorizontally = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CenterVertically: bool
    '''True if the sheet is centered vertically on the page when it's printed. Read/write Boolean.

#SYNTAX:

expression.CenterVertically

expression A variable that represents a PageSetup object.

This example centers Sheet1 vertically when it's printed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example centers Sheet1 vertically when it's printed.

Worksheets("Sheet1").PageSetup.CenterVertically = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ChartSize: int
    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a PageSetup object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DifferentFirstPageHeaderFooter: bool
    '''True if a different header or footer is used on the first page. Read/write Boolean.

#SYNTAX:

expression.DifferentFirstPageHeaderFooter

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Draft: bool
    '''True if the sheet will be printed without graphics. Read/write Boolean.

#SYNTAX:

expression.Draft

expression A variable that represents a PageSetup object.

Setting this property to True makes printing faster (at the expense of not printing graphics).

This example turns off graphics printing for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Setting this property to True makes printing faster (at the expense of not printing graphics).

This example turns off graphics printing for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off graphics printing for Sheet1.

Worksheets("Sheet1").PageSetup.Draft = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.EvenPage: Page
    '''Returns or sets the alignment of text on the even page of a workbook or section.

#SYNTAX:

expression.EvenPage

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FirstPage: Page
    '''Returns or sets the alignment of text on the first page of a workbook or section.

#SYNTAX:

expression.FirstPage

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FirstPageNumber: xlAutomatic | Constants | int
    '''Returns or sets the first page number that will be used when this sheet is printed. If xlAutomatic, Microsoft Excel chooses the first page number. The default is xlAutomatic (Constants). Read/write Long.

#SYNTAX:

expression.FirstPageNumber

expression A variable that represents a PageSetup object.

This example sets the first page number of Sheet1 to 100.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the first page number of Sheet1 to 100.

Worksheets("Sheet1").PageSetup.FirstPageNumber = 100

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FitToPagesTall: VBA_Variant
    '''Returns or sets the number of pages tall that the worksheet will be scaled to when it's printed. Applies only to worksheets. Read/write Variant.

#SYNTAX:

expression.FitToPagesTall

expression A variable that represents a PageSetup object.

If this property is False, Microsoft Excel scales the worksheet according to the FitToPagesWide property.

If the Zoom property is True, the FitToPagesTall property is ignored.

This example causes Microsoft Excel to print Sheet1 exactly one page tall and wide.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If this property is False, Microsoft Excel scales the worksheet according to the FitToPagesWide property.

If the Zoom property is True, the FitToPagesTall property is ignored.

This example causes Microsoft Excel to print Sheet1 exactly one page tall and wide.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes Microsoft Excel to print Sheet1 exactly one page tall and wide.

With Worksheets("Sheet1").PageSetup 
 .Zoom = False 
 .FitToPagesTall = 1 
 .FitToPagesWide = 1 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FitToPagesWide: VBA_Variant
    '''Returns or sets the number of pages wide that the worksheet will be scaled to when it's printed. Applies only to worksheets. Read/write Variant.

#SYNTAX:

expression.FitToPagesWide

expression A variable that represents a PageSetup object.

If this property is False, Microsoft Excel scales the worksheet according to the FitToPagesTall property.

If the Zoom property is True, the FitToPagesWide property is ignored.

This example causes Microsoft Excel to print Sheet1 exactly one page wide and tall.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If this property is False, Microsoft Excel scales the worksheet according to the FitToPagesTall property.

If the Zoom property is True, the FitToPagesWide property is ignored.

This example causes Microsoft Excel to print Sheet1 exactly one page wide and tall.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes Microsoft Excel to print Sheet1 exactly one page wide and tall.

With Worksheets("Sheet1").PageSetup 
 .Zoom = False 
 .FitToPagesTall = 1 
 .FitToPagesWide = 1 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FooterMargin: float
    '''Returns or sets the distance from the bottom of the page to the footer, in points. Read/write Double.

#SYNTAX:

expression.FooterMargin

expression A variable that represents a PageSetup object.

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

This example sets the footer margin of Sheet1 to 0.5 inch.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

This example sets the footer margin of Sheet1 to 0.5 inch.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the footer margin of Sheet1 to 0.5 inch.

Worksheets("Sheet1").PageSetup.FooterMargin = _ 
 Application.InchesToPoints(0.5)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.HeaderMargin: float
    '''Returns or sets the distance from the top of the page to the header, in points. Read/write Double.

#SYNTAX:

expression.HeaderMargin

expression A variable that represents a PageSetup object.

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

This example sets the header margin of Sheet1 to 0.5 inch.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

This example sets the header margin of Sheet1 to 0.5 inch.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the header margin of Sheet1 to 0.5 inch.

Worksheets("Sheet1").PageSetup.HeaderMargin = _ 
 Application.InchesToPoints(0.5)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LeftFooter: PageSetup
    '''Returns or sets the alignment of text on the left footer of a workbook or section.

#SYNTAX:

expression.LeftFooter

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LeftFooterPicture: Graphic
    '''Returns a Graphic object that represents the picture for the left section of the footer. Used to set attributes about the picture.

#SYNTAX:

expression.LeftFooterPicture

expression A variable that represents a PageSetup object.

The LeftFooterPicture property is read-only, but the properties on it are not all read-only.

It's required that "&G" be a part of the LeftFooter property string for the image to show up in the left footer.

The following example adds a picture titled Sample.jpg from the C:\ drive to the left section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The LeftFooterPicture property is read-only, but the properties on it are not all read-only.

It's required that "&G" be a part of the LeftFooter property string for the image to show up in the left footer.

The following example adds a picture titled Sample.jpg from the C:\ drive to the left section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a picture titled Sample.jpg from the C:\ drive to the left section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Sub InsertPicture() 
 
 With ActiveSheet.PageSetup.LeftFooterPicture 
 .FileName = "C:\Sample.jpg" 
 .Height = 275.25 
 .Width = 463.5 
 .Brightness = 0.36 
 .ColorType = msoPictureGrayscale 
 .Contrast = 0.39 
 .CropBottom = -14.4 
 .CropLeft = -28.8 
 .CropRight = -14.4 
 .CropTop = 21.6 
 End With 
 
 ' Enable the image to show up in the left footer. 
 ActiveSheet.PageSetup.LeftFooter = "&G" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LeftHeader: PageSetup
    '''Returns or sets the alignment of text on the left header of a workbook or section.

#SYNTAX:

expression.LeftHeader

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LeftHeaderPicture: Graphic
    '''Returns a Graphic object that represents the picture for the left section of the header. Used to set attributes about the picture.

#SYNTAX:

expression.LeftHeaderPicture

expression A variable that represents a PageSetup object.

The LeftHeaderPicture property is read-only, but not all of its properties are read-only.

It's required that "&G" be a part of the LeftHeader property string for the image to show up in the left header.

The following example adds a picture titled Sample.jpg from the C:\ drive to the left section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The LeftHeaderPicture property is read-only, but not all of its properties are read-only.

It's required that "&G" be a part of the LeftHeader property string for the image to show up in the left header.

The following example adds a picture titled Sample.jpg from the C:\ drive to the left section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a picture titled Sample.jpg from the C:\ drive to the left section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Sub InsertPicture() 
 
 With ActiveSheet.PageSetup.LeftHeaderPicture 
 .FileName = "C:\Sample.jpg" 
 .Height = 275.25 
 .Width = 463.5 
 .Brightness = 0.36 
 .ColorType = msoPictureGrayscale 
 .Contrast = 0.39 
 .CropBottom = -14.4 
 .CropLeft = -28.8 
 .CropRight = -14.4 
 .CropTop = 21.6 
 End With 
 
 ' Enable the image to show up in the left header. 
 ActiveSheet.PageSetup.LeftHeader = "&G" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LeftMargin: float
    '''Returns or sets the size of the left margin, in points. Read/write Double.

#SYNTAX:

expression.LeftMargin

expression A variable that represents a PageSetup object.

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

This example sets the left margin of Sheet1 to 1.5 inches.

This example sets the left margin of Sheet1 to 2 centimeters.

This example displays the current left-margin setting for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

This example sets the left margin of Sheet1 to 1.5 inches.

This example sets the left margin of Sheet1 to 2 centimeters.

This example displays the current left-margin setting for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the left margin of Sheet1 to 1.5 inches.

Worksheets("Sheet1").PageSetup.LeftMargin = _ 
 Application.InchesToPoints(1.5)

This example sets the left margin of Sheet1 to 2 centimeters.

Worksheets("Sheet1").PageSetup.LeftMargin = _ 
 Application.CentimetersToPoints(2)

This example displays the current left-margin setting for Sheet1.

marginInches = Worksheets("Sheet1").PageSetup.LeftMargin / _ 
 Application.InchesToPoints(1) 
MsgBox "The current left margin is " & marginInches & " inches"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OddAndEvenPagesHeaderFooter: bool
    '''True if the specified PageSetup object has different headers and footers for odd-numbered and even-numbered pages. Read/write Boolean.

#SYNTAX:

expression.OddAndEvenPagesHeaderFooter

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Order: XlOrder
    '''Returns or sets an XlOrder value that represents the order that Microsoft Excel uses to number pages when printing a large worksheet.

#SYNTAX:

expression.Order

expression A variable that represents a PageSetup object.

This example breaks Sheet1 into pages when the worksheet is printed. Numbering and printing proceed from the first page to the pages to the right, and then move down and continue printing across the sheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example breaks Sheet1 into pages when the worksheet is printed. Numbering and printing proceed from the first page to the pages to the right, and then move down and continue printing across the sheet.

Worksheets("Sheet1").PageSetup.Order = xlOverThenDown

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Orientation: XlPageOrientation
    '''Returns or sets an XlPageOrientation value that represents the portrait or landscape printing mode.

#SYNTAX:

expression.Orientation

expression A variable that represents a PageSetup object.

This example sets Sheet1 to be printed in landscape orientation.

This example sets the currently active sheet to be printed in portrait orientation.

This procedure switches the orientation to the opposite option.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets Sheet1 to be printed in landscape orientation.

Worksheets("Sheet1").PageSetup.Orientation = xlLandscape

This example sets the currently active sheet to be printed in portrait orientation.

ActiveSheet.PageSetup.Orientation = xlPortrait

This procedure switches the orientation to the opposite option.

Sub SwitchOrientation()
    Dim ps As PageSetup
    Set ps = ActiveSheet.PageSetup

    If ps.Orientation = xlLandscape Then
        ps.Orientation = xlPortrait
    Else
        ps.Orientation = xlLandscape
    End If
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Pages: Pages
    '''Returns or sets the count or item number of the pages in the Pages collection.

#SYNTAX:

expression.Pages

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PaperSize: XlPaperSize
    '''Returns or sets the size of the paper. Read/write XlPaperSize.

#SYNTAX:

expression.PaperSize

expression A variable that represents a PageSetup object.

Some printers may not support all the paper sizes listed on the XlPaperSize enumeration.

This example sets the paper size to legal for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Some printers may not support all the paper sizes listed on the XlPaperSize enumeration.

This example sets the paper size to legal for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the paper size to legal for Sheet1.

Worksheets("Sheet1").PageSetup.PaperSize = xlPaperLegal

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintArea: str
    '''Returns or sets the range to be printed as a String using A1-style references in the language of the macro. Read/write String.

#SYNTAX:

expression.PrintArea

expression A variable that represents a PageSetup object.

Set this property to False or to the empty string ("") to set the print area to the entire sheet.

This property applies only to worksheet pages.

This example sets the print area to cells A1:C5 on Sheet1.

This example sets the print area to the current region on Sheet1. Note that you use the Address property to return an A1-style address.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Set this property to False or to the empty string ("") to set the print area to the entire sheet.

This property applies only to worksheet pages.

This example sets the print area to cells A1:C5 on Sheet1.

This example sets the print area to the current region on Sheet1. Note that you use the Address property to return an A1-style address.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the print area to cells A1:C5 on Sheet1.

Worksheets("Sheet1").PageSetup.PrintArea = "$A$1:$C$5"

This example sets the print area to the current region on Sheet1. Note that you use the Address property to return an A1-style address.

Worksheets("Sheet1").Activate 
ActiveSheet.PageSetup.PrintArea = _ 
 ActiveCell.CurrentRegion.Address

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintComments: XlPrintLocation
    '''Returns or sets the way comments are printed with the sheet. Read/write XlPrintLocation.

#SYNTAX:

expression.PrintComments

expression A variable that represents a PageSetup object.

This example causes comments to be printed as end notes when worksheet one is printed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example causes comments to be printed as end notes when worksheet one is printed.

Worksheets(1).PageSetup.PrintComments = xlPrintSheetEnd

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintErrors: XlPrintErrors
    '''Sets or returns an XlPrintErrors constant specifying the type of print error displayed. This feature allows users to suppress the display of error values when printing a worksheet. Read/write.

#SYNTAX:

expression.PrintErrors

expression A variable that represents a PageSetup object.

In this example, Microsoft Excel uses a formula that returns an error on the active worksheet. The PrintErrors property is set to display dashes. A Print Preview window displays the dashes for the print error. This example assumes that a printer driver has been installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel uses a formula that returns an error on the active worksheet. The PrintErrors property is set to display dashes. A Print Preview window displays the dashes for the print error. This example assumes that a printer driver has been installed.

Sub UsePrintErrors() 
 
 Dim wksOne As Worksheet 
 
 Set wksOne = Application.ActiveSheet 
 
 ' Create a formula that returns an error value. 
 Range("A1").Value = 1 
 Range("A2").Value = 0 
 Range("A3").Formula = "=A1/A2" 
 
 ' Change print errors to display dashes. 
 wksOne.PageSetup.PrintErrors = xlPrintErrorsDash 
 
 ' Use the Print Preview window to see the dashes used for print errors. 
 ActiveWindow.SelectedSheets.PrintPreview 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintGridlines: bool
    '''True if cell gridlines are printed on the page. Applies only to worksheets. Read/write Boolean.

#SYNTAX:

expression.PrintGridlines

expression A variable that represents a PageSetup object.

This example prints cell gridlines when Sheet1 is printed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example prints cell gridlines when Sheet1 is printed.

Worksheets("Sheet1").PageSetup.PrintGridlines = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintHeadings: bool
    '''True if row and column headings are printed with this page. Applies only to worksheets. Read/write Boolean.

#SYNTAX:

expression.PrintHeadings

expression A variable that represents a PageSetup object.

The DisplayHeadings property of the Window object controls the on-screen display of headings.

This example turns off the printing of headings for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The DisplayHeadings property of the Window object controls the on-screen display of headings.

This example turns off the printing of headings for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off the printing of headings for Sheet1.

Worksheets("Sheet1").PageSetup.PrintHeadings = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintNotes: bool
    '''True if cell notes are printed as end notes with the sheet. Applies only to worksheets. Read/write Boolean.

#SYNTAX:

expression.PrintNotes

expression A variable that represents a PageSetup object.

Use the PrintComments property to print comments as text boxes or end notes.

This example turns off the printing of notes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use the PrintComments property to print comments as text boxes or end notes.

This example turns off the printing of notes.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example turns off the printing of notes.

Worksheets("Sheet1").PageSetup.PrintNotes = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintQuality: VBA_Variant
    '''Returns or sets the print quality. Read/write Variant.

#SYNTAX:

expression.PrintQuality (Index)

expression A variable that represents a PageSetup object.

This example sets the print quality on a printer with non-square pixels. The array specifies both horizontal and vertical print quality. This example may cause an error, depending on the printer driver you are using.

This example displays the current setting for horizontal print quality.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the print quality on a printer with non-square pixels. The array specifies both horizontal and vertical print quality. This example may cause an error, depending on the printer driver you are using.

Worksheets("Sheet1").PageSetup.PrintQuality = Array(240, 140)

This example displays the current setting for horizontal print quality.

MsgBox "Horizontal Print Quality is " & _ 
 Worksheets("Sheet1").PageSetup.PrintQuality(1)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintTitleColumns: str
    '''Returns or sets the columns that contain the cells to be repeated on the left side of each page, as a String in A1-style notation in the language of the macro. Read/write String.

#SYNTAX:

expression.PrintTitleColumns

expression A variable that represents a PageSetup object.

If you specify only part of a column or columns, Microsoft Excel expands the range to full columns.

Set this property to False or to the empty string ("") to turn off title columns.

This property applies only to worksheet pages.

This example defines row three as the title row, and it defines columns one through three as the title columns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you specify only part of a column or columns, Microsoft Excel expands the range to full columns.

Set this property to False or to the empty string ("") to turn off title columns.

This property applies only to worksheet pages.

This example defines row three as the title row, and it defines columns one through three as the title columns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example defines row three as the title row, and it defines columns one through three as the title columns.

Worksheets("Sheet1").Activate 
ActiveSheet.PageSetup.PrintTitleRows = ActiveSheet.Rows(3).Address 
ActiveSheet.PageSetup.PrintTitleColumns = _ 
 ActiveSheet.Columns("A:C").Address

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PrintTitleRows: str
    '''Returns or sets the rows that contain the cells to be repeated at the top of each page, as a String in A1-style notation in the language of the macro. Read/write String.

#SYNTAX:

expression.PrintTitleRows

expression A variable that represents a PageSetup object.

If you specify only part of a row or rows, Microsoft Excel expands the range to full rows.

Set this property to False or to the empty string ("") to turn off title rows.

This property applies only to worksheet pages.

This example defines row three as the title row, and it defines columns one through three as the title columns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you specify only part of a row or rows, Microsoft Excel expands the range to full rows.

Set this property to False or to the empty string ("") to turn off title rows.

This property applies only to worksheet pages.

This example defines row three as the title row, and it defines columns one through three as the title columns.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example defines row three as the title row, and it defines columns one through three as the title columns.

Worksheets("Sheet1").Activate 
ActiveSheet.PageSetup.PrintTitleRows = ActiveSheet.Rows(3).Address 
ActiveSheet.PageSetup.PrintTitleColumns = _ 
 ActiveSheet.Columns("A:C").Address

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RightFooter: str
    '''Returns or sets the distance (in points) between the right edge of the page and the right boundary of the footer. Read/write String.

#SYNTAX:

expression.RightFooter

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RightFooterPicture: Graphic
    '''Returns a Graphic object that represents the picture for the right section of the footer. Used to set attributes of the picture.

#SYNTAX:

expression.RightFooterPicture

expression A variable that represents a PageSetup object.

The RightFooterPicture property itself is read-only, but not all of its properties are read-only.

It's required that "&G" be a part of the RightFooter property string for the image to show up in the right footer.

The following example adds a picture titled Sample.jpg from the C:\ drive to the right section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The RightFooterPicture property itself is read-only, but not all of its properties are read-only.

It's required that "&G" be a part of the RightFooter property string for the image to show up in the right footer.

The following example adds a picture titled Sample.jpg from the C:\ drive to the right section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a picture titled Sample.jpg from the C:\ drive to the right section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Sub InsertPicture() 
 
 With ActiveSheet.PageSetup.RightFooterPicture 
 .FileName = "C:\Sample.jpg" 
 .Height = 275.25 
 .Width = 463.5 
 .Brightness = 0.36 
 .ColorType = msoPictureGrayscale 
 .Contrast = 0.39 
 .CropBottom = -14.4 
 .CropLeft = -28.8 
 .CropRight = -14.4 
 .CropTop = 21.6 
 End With 
 
 ' Enable the image to show up in the right footer. 
 ActiveSheet.PageSetup.RightFooter = "&G" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RightHeader: str
    '''Returns or sets the right part of the header. Read/write String.

#SYNTAX:

expression.RightHeader

expression A variable that represents a PageSetup object.

This example prints the file name in the upper-right corner of every page.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example prints the file name in the upper-right corner of every page.

Worksheets("Sheet1").PageSetup.RightHeader = "&F"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RightHeaderPicture: Graphic
    '''Returns a Graphic object that represents the picture for the right section of the header. Used to set attributes about the picture.

#SYNTAX:

expression.RightHeaderPicture

expression A variable that represents a PageSetup object.

The RightHeaderPicture property is read-only, but not all of its properties are read-only.

It's required that "&G" be a part of the RightHeader property string for the image to show up in the right header.

The following example adds a picture titled Sample.jpg from the C:\ drive to the right section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The RightHeaderPicture property is read-only, but not all of its properties are read-only.

It's required that "&G" be a part of the RightHeader property string for the image to show up in the right header.

The following example adds a picture titled Sample.jpg from the C:\ drive to the right section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a picture titled Sample.jpg from the C:\ drive to the right section of the header. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Sub InsertPicture() 
 
 With ActiveSheet.PageSetup.RightHeaderPicture 
 .FileName = "C:\Sample.jpg" 
 .Height = 275.25 
 .Width = 463.5 
 .Brightness = 0.36 
 .ColorType = msoPictureGrayscale 
 .Contrast = 0.39 
 .CropBottom = -14.4 
 .CropLeft = -28.8 
 .CropRight = -14.4 
 .CropTop = 21.6 
 End With 
 
 ' Enable the image to show up in the right header. 
 ActiveSheet.PageSetup.RightHeader = "&G" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RightMargin: float
    '''Returns or sets the size of the right margin, in points. Read/write Double.

#SYNTAX:

expression.RightMargin

expression A variable that represents a PageSetup object.

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

This example sets the right margin of Sheet1 to 1.5 inches.

This example sets the right margin of Sheet1 to 2 centimeters.

This example displays the current right-margin setting for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

This example sets the right margin of Sheet1 to 1.5 inches.

This example sets the right margin of Sheet1 to 2 centimeters.

This example displays the current right-margin setting for Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the right margin of Sheet1 to 1.5 inches.

Worksheets("Sheet1").PageSetup.RightMargin = _ 
 Application.InchesToPoints(1.5)

This example sets the right margin of Sheet1 to 2 centimeters.

Worksheets("Sheet1").PageSetup.RightMargin = _ 
 Application.CentimetersToPoints(2)

This example displays the current right-margin setting for Sheet1.

marginInches = Worksheets("Sheet1").PageSetup.RightMargin / _ 
 Application.InchesToPoints(1) 
MsgBox "The current right margin is " & marginInches & " inches"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ScaleWithDocHeaderFooter: bool
    '''Returns or sets if the header and footer should be scaled with the document when the size of the document changes. Read/write Boolean.

#SYNTAX:

expression.ScaleWithDocHeaderFooter

expression A variable that represents a PageSetup object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TopMargin: float
    '''Returns or sets the size of the top margin, in points. Read/write Double.

#SYNTAX:

expression.TopMargin

expression A variable that represents a PageSetup object.

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

These two examples set the top margin of Sheet1 to 0.5 inch (36 points).

This example displays the current top-margin setting.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Margins are set or returned in points. Use either the InchesToPoints method or the CentimetersToPoints method to do the conversion.

These two examples set the top margin of Sheet1 to 0.5 inch (36 points).

This example displays the current top-margin setting.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

These two examples set the top margin of Sheet1 to 0.5 inch (36 points).

Worksheets("Sheet1").PageSetup.TopMargin = _ 
 Application.InchesToPoints(0.5) 
 
Worksheets("Sheet1").PageSetup.TopMargin = 36

This example displays the current top-margin setting.

marginInches = ActiveSheet.PageSetup.TopMargin / _ 
 Application.InchesToPoints(1) 
MsgBox "The current top margin is " & marginInches & " inches"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Zoom: VBA_Variant
    '''Returns or sets a Variant value that represents a percentage (between 10 and 400 percent) by which Microsoft Excel will scale the worksheet for printing.

#SYNTAX:

expression.Zoom

expression A variable that represents a PageSetup object.

This property applies only to worksheets.

If this property is False, the FitToPagesWide and FitToPagesTall properties control how the worksheet is scaled.

All scaling retains the aspect ratio of the original document.

This example scales Sheet1 by 150 percent when the worksheet is printed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property applies only to worksheets.

If this property is False, the FitToPagesWide and FitToPagesTall properties control how the worksheet is scaled.

All scaling retains the aspect ratio of the original document.

This example scales Sheet1 by 150 percent when the worksheet is printed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example scales Sheet1 by 150 percent when the worksheet is printed.

Worksheets("Sheet1").PageSetup.Zoom = 150

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def GetPrintQuality(self, Index):  pass

  def SetPrintQuality(self, Index, arg1):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class _Workbook:
  def __init__(self):
    self.AcceptLabelsInFormulas: bool
    self.AccuracyVersion: int
    self.ActiveSheet: _Worksheet
    self.Application: Application
    self.Author: str
    self.AutoSaveOn: bool
    self.AutoUpdateFrequency: int
    self.BuiltinDocumentProperties: CDispatch
    self.CalculationVersion: int
    self.CaseSensitive: bool
    self.ChangeHistoryDuration: int
    self.ChartDataPointTrack: bool
    self.Charts: Sheets
    self.CheckCompatibility: bool
    self.CodeName: str
    self.Colors: tuple
    self.Comments: str
    self.ConflictResolution: int
    self.Connections: Connections
    self.ConnectionsDisabled: bool
    self.CreateBackup: bool
    self.Creator: int
    self.CustomDocumentProperties: CDispatch
    self.CustomViews: CustomViews
    self.CustomXMLParts: CDispatch
    self.Date1904: bool
    self.DefaultPivotTableStyle: TableStyle
    self.DefaultSlicerStyle: TableStyle
    self.DefaultTableStyle: TableStyle
    self.DefaultTimelineStyle: TableStyle
    self.DialogSheets: Sheets
    self.DisplayDrawingObjects: int
    self.DisplayInkComments: bool
    self.DoNotPromptForConvert: bool
    self.DocumentInspectors: CDispatch
    self.EnableAutoRecover: bool
    self.EncryptionProvider: str
    self.EnvelopeVisible: bool
    self.Excel4IntlMacroSheets: Sheets
    self.Excel4MacroSheets: Sheets
    self.Excel8CompatibilityMode: bool
    self.FileFormat: float
    self.Final: bool
    self.ForceFullCalculation: bool
    self.FullName: str
    self.FullNameURLEncoded: str
    self.HasMailer: bool
    self.HasPassword: bool
    self.HasRoutingSlip: bool
    self.HasVBProject: bool
    self.HighlightChangesOnScreen: bool
    self.IconSets: IconSets
    self.InactiveListBorderVisible: bool
    self.IsAddin: bool
    self.IsInplace: bool
    self.KeepChangeHistory: bool
    self.Keywords: str
    self.ListChangesOnNewSheet: bool
    self.Model: Model
    self.Modules: Sheets
    self.MultiUserEditing: bool
    self.Name: str
    self.Names: Names
    self.Parent: _Application
    self.Password: str
    self.PasswordEncryptionAlgorithm: str
    self.PasswordEncryptionFileProperties: bool
    self.PasswordEncryptionKeyLength: int
    self.PasswordEncryptionProvider: str
    self.Path: str
    self.PersonalViewListSettings: bool
    self.PersonalViewPrintSettings: bool
    self.PivotTables: PivotTables
    self.PrecisionAsDisplayed: bool
    self.ProtectStructure: bool
    self.ProtectWindows: bool
    self.PublishObjects: PublishObjects
    self.Queries: Queries
    self.ReadOnly: bool
    self.ReadOnlyRecommended: bool
    self.RemovePersonalInformation: bool
    self.Research: Research
    self.RevisionNumber: int
    self.Routed: bool
    self.RoutingSlip: RoutingSlip
    self.SaveLinkValues: bool
    self.Saved: bool
    self.Sheets: Sheets
    self.ShowConflictHistory: bool
    self.ShowPivotChartActiveFields: bool
    self.ShowPivotTableFieldList: bool
    self.Signatures: CDispatch
    self.SlicerCaches: SlicerCaches
    self.SmartDocument: CDispatch
    self.Styles: Styles
    self.Subject: str
    self.Sync: CDispatch
    self.TableStyles: TableStyles
    self.TemplateRemoveExtData: bool
    self.Theme: CDispatch
    self.Title: str
    self.UpdateLinks: int
    self.UpdateRemoteReferences: bool
    self.UseWholeCellCriteria: bool
    self.UseWildcards: bool
    self.UserStatus: tuple
    self.VBASigned: bool
    self.WebOptions: WebOptions
    self.Windows: Windows
    self.WorkIdentity: str
    self.Worksheets: Sheets
    self.WritePassword: str
    self.WriteReserved: bool
    self.WriteReservedBy: str
    self.XmlMaps: XmlMaps
    self.XmlNamespaces: XmlNamespaces
    self._CodeName: str
    self._ReadOnlyRecommended: bool
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def AcceptAllChanges(self, When, Who, Where):  pass

  def Activate(self):  pass

  def AddToFavorites(self):  pass

  def ApplyTheme(self, Filename):  pass

  def BreakLink(self, Name, Type):  pass

  def CanCheckIn(self):  pass

  def ChangeFileAccess(self, Mode, WritePassword, Notify):  pass

  def ChangeLink(self, Name, NewName, Type):  pass

  def CheckIn(self, SaveChanges, Comments, MakePublic):  pass

  def CheckInWithVersion(self, SaveChanges, Comments, MakePublic, VersionType):  pass

  def Close(self, SaveChanges, Filename, RouteWorkbook):  pass

  def ConvertComments(self):  pass

  def CreateForecastSheet(self, Timeline, Values, ForecastStart, ForecastEnd, ConfInt, Seasonality, DataCompletion, Aggregation, ChartType, ShowStatsTable):  pass

  def DeleteNumberFormat(self, NumberFormat):  pass

  def Dummy16(self):  pass

  def Dummy17(self, calcid):  pass

  def Dummy26(self):  pass

  def Dummy27(self):  pass

  def EnableConnections(self):  pass

  def EndReview(self):  pass

  def ExclusiveAccess(self):  pass

  def ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr, WorkIdentity):  pass

  def FollowHyperlink(self, Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo):  pass

  def ForwardMailer(self):  pass

  def GetColors(self, Index):  pass

  def GetWorkflowTasks(self):  pass

  def GetWorkflowTemplates(self):  pass

  def HighlightChangesOptions(self, When, Who, Where):  pass

  def LinkInfo(self, Name, LinkInfo, Type, EditionRef):  pass

  def LinkSources(self, Type):  pass

  def LockServerFile(self):  pass

  def LookUpInDocs(self, Filename):  pass

  def MergeWorkbook(self, Filename):  pass

  def NewWindow(self):  pass

  def OpenLinks(self, Name, ReadOnly, Type):  pass

  def PivotCaches(self):  pass

  def PivotTableWizard(self, SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection):  pass

  def Post(self, DestName):  pass

  def PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, IgnorePrintAreas):  pass

  def PrintPreview(self, EnableChanges):  pass

  def Protect(self, Password, Structure, Windows):  pass

  def ProtectSharing(self, Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword, FileFormat):  pass

  def PublishToDocs(self, Title, DisclosureScope, OverwriteUrl):  pass

  def PublishToPBI(self, PublishType, nameConflict, bstrGroupName):  pass

  def PurgeChangeHistoryNow(self, Days, SharingPassword):  pass

  def RecheckSmartTags(self):  pass

  def RefreshAll(self):  pass

  def RejectAllChanges(self, When, Who, Where):  pass

  def ReloadAs(self, Encoding):  pass

  def RemoveDocumentInformation(self, RemoveDocInfoType):  pass

  def RemoveUser(self, Index):  pass

  def Reply(self):  pass

  def ReplyAll(self):  pass

  def ReplyWithChanges(self, ShowMessage):  pass

  def ResetColors(self):  pass

  def Route(self):  pass

  def RunAutoMacros(self, Which):  pass

  def Save(self):  pass

  def SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout, Local, WorkIdentity):  pass

  def SaveAsXMLData(self, Filename, Map):  pass

  def SaveCopyAs(self, Filename):  pass

  def SendFaxOverInternet(self, Recipients, Subject, ShowMessage):  pass

  def SendForReview(self, Recipients, Subject, ShowMessage, IncludeAttachment):  pass

  def SendMail(self, Recipients, Subject, ReturnReceipt):  pass

  def SendMailer(self, FileFormat, Priority):  pass

  def SetColors(self, Index, arg1):  pass

  def SetLinkOnData(self, Name, Procedure):  pass

  def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties):  pass

  def ToggleFormsDesign(self):  pass

  def Unprotect(self, Password):  pass

  def UnprotectSharing(self, SharingPassword):  pass

  def UpdateFromFile(self):  pass

  def UpdateLink(self, Name, Type):  pass

  def WebPagePreview(self):  pass

  def XmlImport(self, Url, ImportMap, Overwrite, Destination):  pass

  def XmlImportXml(self, Data, ImportMap, Overwrite, Destination):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _ExportAsFixedFormat(self, Type, Filename, Quality, IncludeDocProperties, IgnorePrintAreas, From, To, OpenAfterPublish, FixedFormatExtClassPtr):  pass

  def _PrintOut(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName):  pass

  def _PrintOut_(self, From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate):  pass

  def _Protect(self, Password, Structure, Windows):  pass

  def _ProtectSharing(self, Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword):  pass

  def _SaveAs(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout, Local):  pass

  def _SaveAs_(self, Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass

  def sblt(self, s):  pass


  #unknown:
    # ActiveChart:  <class 'NoneType'>
    # ActiveSlicer:  <class 'NoneType'>
    # CommandBars:  <class 'NoneType'>
    # OnSave:  <class 'NoneType'>
    # OnSheetActivate:  <class 'NoneType'>
    # OnSheetDeactivate:  <class 'NoneType'>
    # SharedWorkspace:  <class 'NoneType'>
    # SmartTagOptions:  <class 'NoneType'>

  #getattr Exception:
    # AutoUpdateSaveChanges:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Container:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ContentTypeProperties:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '此文档必须包含内容类型属性。在文档管理系统中，内容类型属性是常见的文件必需属性。', 'xlmain11.chm', 0, -2147216381), None)
    # DocumentLibraryVersions:  (-2147352567, '发生意外。', (0, None, '不存在此文件的任何版本。', None, 0, -2147217328), None)
    # HTMLProject:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '此版本的 Excel 不再支持此方法或属性。', 'xlmain11.chm', 0, -2146827284), None)
    # Mailer:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Permission:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147467259), None)
    # SensitivityLabel:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147220726), None)
    # ServerPolicy:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147023728), None)
    # ServerViewableItems:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # UserControl:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2147352573), None)
    # VBProject:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不信任到 Visual Basic Project 的程序连接\n', 'xlmain11.chm', 0, -2146827284), None)



class Protection:
  '''Represents the various types of protection options available for a worksheet.

#REMARKS:

Use the Protection property of the Worksheet object to return a Protection object.

After a Protection object is returned, you can use the Protection properties to set or return protection options.

The following example demonstrates how to use the AllowInsertingColumns property of the Protection object, placing three numbers in the top row and protecting the worksheet. This example then checks to see if the protection setting for allowing the insertion of columns is False and sets it to True, if necessary. Finally, it notifies the user to insert a column.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example demonstrates how to use the AllowInsertingColumns property of the Protection object, placing three numbers in the top row and protecting the worksheet. This example then checks to see if the protection setting for allowing the insertion of columns is False and sets it to True, if necessary. Finally, it notifies the user to insert a column.

Sub SetProtection() 
 
 Range("A1").Formula = "1" 
 Range("B1").Formula = "3" 
 Range("C1").Formula = "4" 
 ActiveSheet.Protect 
 
 ' Check the protection setting of the worksheet and act accordingly. 
 If ActiveSheet.Protection.AllowInsertingColumns = False Then 
 ActiveSheet.Protect AllowInsertingColumns:=True 
 MsgBox "Insert a column between 1 and 3" 
 Else 
 MsgBox "Insert a column between 1 and 3" 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.AllowDeletingColumns: bool
    '''Returns True if the deletion of columns is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowDeletingColumns

expression A variable that represents a Protection object.

The AllowDeletingColumns property can be set by using the Protect method arguments.

The columns containing the cells to be deleted must be unlocked when the sheet is protected.

This example unlocks column A, and then allows the user to delete column A on the protected worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The AllowDeletingColumns property can be set by using the Protect method arguments.

The columns containing the cells to be deleted must be unlocked when the sheet is protected.

This example unlocks column A, and then allows the user to delete column A on the protected worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example unlocks column A, and then allows the user to delete column A on the protected worksheet.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 'Unlock column A. 
 Columns("A:A").Locked = False 
 
 ' Allow column A to be deleted on a protected worksheet. 
 If ActiveSheet.Protection.AllowDeletingColumns = False Then 
 ActiveSheet.Protect AllowDeletingColumns:=True 
 End If 
 
 MsgBox "Column A can be deleted on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowDeletingRows: bool
    '''Returns True if the deletion of rows is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowDeletingRows

expression A variable that represents a Protection object.

The AllowDeletingRows property can be set by using the Protect method arguments.

The rows containing the cells to be deleted must be unlocked when the sheet is protected.

This example unlocks row 1, and then allows the user to delete row 1 on the protected worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The AllowDeletingRows property can be set by using the Protect method arguments.

The rows containing the cells to be deleted must be unlocked when the sheet is protected.

This example unlocks row 1, and then allows the user to delete row 1 on the protected worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example unlocks row 1, and then allows the user to delete row 1 on the protected worksheet.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 'Unlock row 1. 
 Rows("1:1").Locked = False 
 
 ' Allow row 1 to be deleted on a protected worksheet. 
 If ActiveSheet.Protection.AllowDeletingRows = False Then 
 ActiveSheet.Protect AllowDeletingRows:=True 
 End If 
 
 MsgBox "Row 1 can be deleted on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowEditRanges: AllowEditRanges
    '''Returns an AllowEditRanges object.

#SYNTAX:

expression.AllowEditRanges

expression A variable that represents a Protection object.

In this example, Microsoft Excel allows edits to range A1:A4 on the active worksheet and notifies the user of the title and address of the specified range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel allows edits to range A1:A4 on the active worksheet and notifies the user of the title and address of the specified range.

Sub UseAllowEditRanges() 
 
 Dim wksOne As Worksheet 
 Dim strPwd1 As String 
 
 Set wksOne = Application.ActiveSheet 
 
 strPwd1 = InputBox("Enter Password") 
 
 ' Unprotect worksheet. 
 wksOne.Unprotect 
 
 ' Establish a range that can allow edits 
 ' on the protected worksheet. 
 wksOne.Protection.AllowEditRanges.Add _ 
 Title:="Classified", _ 
 Range:=Range("A1:A4"), _ 
 Password:=strPwd1 
 
 ' Notify the user 
 ' the title and address of the range. 
 With wksOne.Protection.AllowEditRanges.Item(1) 
 MsgBox "Title of range: " & .Title 
 MsgBox "Address of range: " & .Range.Address 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowFiltering: bool
    '''Returns True if the user is allowed to make use of an AutoFilter that was created before the sheet was protected. Read-only Boolean.

#SYNTAX:

expression.AllowFiltering

expression A variable that represents a Protection object.

The AllowFiltering property can be set by using the Protect method arguments.

The AllowFiltering property allows the user to change filter criteria on an existing AutoFilter. The user cannot create or remove an AutoFilter on a protected worksheet.

The cells to be filtered must be unlocked when the sheet is protected.

This example allows the user to filter row 1 on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The AllowFiltering property can be set by using the Protect method arguments.

The AllowFiltering property allows the user to change filter criteria on an existing AutoFilter. The user cannot create or remove an AutoFilter on a protected worksheet.

The cells to be filtered must be unlocked when the sheet is protected.

This example allows the user to filter row 1 on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to filter row 1 on the protected worksheet and notifies the user.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Unlock row 1. 
 Rows("1:1").Locked = False 
 
 ' Allow row 1 to be filtered on a protected worksheet. 
 If ActiveSheet.Protection.AllowFiltering = False Then 
 ActiveSheet.Protect AllowFiltering:=True 
 End If 
 
 MsgBox "Row 1 can be filtered on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowFormattingCells: bool
    '''Returns True if the formatting of cells is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowFormattingCells

expression A variable that represents a Protection object.

The AllowFormattingCells property can be set by using the Protect method arguments.

Use of this property disables the protection tab, allowing the user to change all formats, but not to unlock or unhide ranges.

This example allows the user to format cells on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The AllowFormattingCells property can be set by using the Protect method arguments.

Use of this property disables the protection tab, allowing the user to change all formats, but not to unlock or unhide ranges.

This example allows the user to format cells on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to format cells on the protected worksheet and notifies the user.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Allow cells to be formatted on a protected worksheet. 
 If ActiveSheet.Protection.AllowFormattingCells = False Then 
 ActiveSheet.Protect AllowFormattingCells:=True 
 End If 
 
 MsgBox "Cells can be formatted on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowFormattingColumns: bool
    '''Returns True if the formatting of columns is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowFormattingColumns

expression A variable that represents a Protection object.

The AllowFormattingColumns property can be set by using the Protect method arguments.

This example allows the user to format columns on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The AllowFormattingColumns property can be set by using the Protect method arguments.

This example allows the user to format columns on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to format columns on the protected worksheet and notifies the user.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Allow columns to be formatted on a protected worksheet. 
 If ActiveSheet.Protection.AllowFormattingColumns = False Then 
 ActiveSheet.Protect AllowFormattingColumns:=True 
 End If 
 
 MsgBox "Columns can be formatted on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowFormattingRows: bool
    '''Returns True if the formatting of rows is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowFormattingRows

expression A variable that represents a Protection object.

The AllowFormattingRows property can be set by using the Protect method arguments.

This example allows the user to format the rows on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The AllowFormattingRows property can be set by using the Protect method arguments.

This example allows the user to format the rows on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to format the rows on the protected worksheet and notifies the user.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Allow rows to be formatted on a protected worksheet. 
 If ActiveSheet.Protection.AllowFormattingRows = False Then 
 ActiveSheet.Protect AllowFormattingRows:=True 
 End If 
 
 MsgBox "Rows can be formatted on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowInsertingColumns: bool
    '''Returns True if the insertion of columns is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowInsertingColumns

expression A variable that represents a Protection object.

An inserted column inherits its formatting (by default) from the column to its left, which means that it may have locked cells. In other words, users may not be able to delete columns that they have inserted.

The AllowInsertingColumns property can be set by using the Protect method arguments.

This example allows the user to insert columns on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

An inserted column inherits its formatting (by default) from the column to its left, which means that it may have locked cells. In other words, users may not be able to delete columns that they have inserted.

The AllowInsertingColumns property can be set by using the Protect method arguments.

This example allows the user to insert columns on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to insert columns on the protected worksheet and notifies the user.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Allow columns to be inserted on a protected worksheet. 
 If ActiveSheet.Protection.AllowInsertingColumns = False Then 
 ActiveSheet.Protect AllowInsertingColumns:=True 
 End If 
 
 MsgBox "Columns can be inserted on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowInsertingHyperlinks: bool
    '''Returns True if the insertion of hyperlinks is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowInsertingHyperlinks

expression A variable that represents a Protection object.

Hyperlinks can only be inserted in unlocked or unprotected cells on a protected worksheet.

The AllowInsertingHyperlinks property can be set by using the Protect method arguments.

This example allows the user to insert a hyperlink in cell A1 on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Hyperlinks can only be inserted in unlocked or unprotected cells on a protected worksheet.

The AllowInsertingHyperlinks property can be set by using the Protect method arguments.

This example allows the user to insert a hyperlink in cell A1 on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to insert a hyperlink in cell A1 on the protected worksheet and notifies the user.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Unlock cell A1. 
 Range("A1").Locked = False 
 
 ' Allow hyperlinks to be inserted on a protected worksheet. 
 If ActiveSheet.Protection.AllowInsertingHyperlinks = False Then 
 ActiveSheet.Protect AllowInsertingHyperlinks:=True 
 End If 
 
 MsgBox "Hyperlinks can be inserted on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowInsertingRows: bool
    '''Returns True if the insertion of rows is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowInsertingRows

expression A variable that represents a Protection object.

The AllowInsertingRows property can be set by using the Protect method arguments.

This example allows the user to insert rows on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The AllowInsertingRows property can be set by using the Protect method arguments.

This example allows the user to insert rows on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to insert rows on the protected worksheet and notifies the user.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Allow rows to be inserted on a protected worksheet. 
 If ActiveSheet.Protection.AllowInsertingRows = False Then 
 ActiveSheet.Protect AllowInsertingRows:=True 
 End If 
 
 MsgBox "Rows can be inserted on this protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowSorting: bool
    '''Returns True if the sorting option is allowed on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowSorting

expression A variable that represents a Protection object.

Sorting can only be performed on unlocked or unprotected cells in a protected worksheet.

The AllowSorting property can be set by using the Protect method arguments.

This example allows the user to sort unlocked or unprotected cells on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Sorting can only be performed on unlocked or unprotected cells in a protected worksheet.

The AllowSorting property can be set by using the Protect method arguments.

This example allows the user to sort unlocked or unprotected cells on the protected worksheet and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to sort unlocked or unprotected cells on the protected worksheet and notifies the user.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Unlock cells A1 through B5. 
 Range("A1:B5").Locked = False 
 
 ' Allow sorting to be performed on the protected worksheet. 
 If ActiveSheet.Protection.AllowSorting = False Then 
 ActiveSheet.Protect AllowSorting:=True 
 End If 
 
 MsgBox "For cells A1 through B5, sorting can be performed on the protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.AllowUsingPivotTables: bool
    '''Returns True if the user is allowed to manipulate PivotTables on a protected worksheet. Read-only Boolean.

#SYNTAX:

expression.AllowUsingPivotTables

expression A variable that represents a Protection object.

The AllowUsingPivotTables property applies to non-OLAP source data.

The AllowUsingPivotTables property can be set by using the Protect method arguments.

This example allows the user to access the PivotTable report and notifies the user. It assumes that a non-OLAP PivotTable report exists on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The AllowUsingPivotTables property applies to non-OLAP source data.

The AllowUsingPivotTables property can be set by using the Protect method arguments.

This example allows the user to access the PivotTable report and notifies the user. It assumes that a non-OLAP PivotTable report exists on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the user to access the PivotTable report and notifies the user. It assumes that a non-OLAP PivotTable report exists on the active worksheet.

Sub ProtectionOptions() 
 
 ActiveSheet.Unprotect 
 
 ' Allow PivotTables to be manipulated on a protected worksheet. 
 If ActiveSheet.Protection.Allow UsingPivotTables = False Then 
 ActiveSheet.Protect AllowUsingPivotTables:=True 
 End If 
 
 MsgBox "PivotTables can be manipulated on the protected worksheet." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class QueryTables:
  '''A collection of QueryTable objects.

#REMARKS:

Each QueryTable object represents a worksheet table built from data returned from an external data source.

Use the QueryTables property of the Worksheet object to return the QueryTables collection.

The following example displays the number of query tables on the active worksheet.

Use the Add method to create a new query table and add it to the QueryTables collection. The following example creates a new query table.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the QueryTables property of the Worksheet object to return the QueryTables collection.

The following example displays the number of query tables on the active worksheet.

MsgBox ActiveSheet.QueryTables.Count

Use the Add method to create a new query table and add it to the QueryTables collection. The following example creates a new query table.

Dim qt As QueryTable 
sqlstring = "select 96Sales.totals from 96Sales where profit < 5" 
connstring = _ 
 "ODBC;DSN=96SalesData;UID=Rep21;PWD=NUyHwYQI;Database=96Sales" 
With ActiveSheet.QueryTables.Add(Connection:=connstring, _ 
 Destination:=Range("B1"), Sql:=sqlstring) 
 .Refresh 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a QueryTables object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a QueryTables object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a QueryTables object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a QueryTables object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Connection, Destination, Sql) -> QueryTable:
    '''Creates a new query table.

#PARAMETERS:

Name Required/Optional Data type Description

Connection Required Variant The data source for the query table. Can be one of the following:A string containing an OLE DB or ODBC connection string. The ODBC connection string has the form ODBC;<connection string>.A QueryTable object from which the query information is initially copied, including the connection string and the SQL text, but not including the Destination range. Specifying a QueryTable object causes the Sql argument to be ignored.An ADO or DAO Recordset object. Data is read from the ADO or DAO recordset. Microsoft Excel retains the recordset until the query table is deleted or the connection is changed. The resulting query table cannot be edited.A web query. A string in the form URL;<url> where URL; is required but not localized and the rest of the string is used for the URL of the web query.Data Finder. A string in the form FINDER;<data finder file path> where FINDER; is required but not localized. The rest of the string is the path and file name of a Data Finder file (*.dqy or *.iqy). The file is read when the Add method is run; subsequent calls to the Connection  property of the query table will return strings beginning with ODBC; or URL; as appropriate.A text file. A string in the form TEXT;<text file path and name> where TEXT; is required but not localized.

Destination Required Range The cell in the upper-left corner of the query table destination range (the range where the resulting query table will be placed). The destination range must be on the worksheet that contains the QueryTables object specified by expression.

Sql Optional Variant The SQL query string to be run on the ODBC data source. This argument is optional when you are using an ODBC data source (if you don't specify it here, you should set it by using the Sql property of the query table before the table is refreshed). You cannot use this argument when a QueryTable object, text file, or ADO or DAO Recordset object is specified as the data source.

#RETURN-VALUE: A QueryTable object that represents the new query table.

#REMARKS:

A query created by this method isn't run until the Refresh method is called.

This example creates a query table based on an ADO recordset. The example preserves the existing column sorting and filtering settings and layout information for backward compatibility.

This example imports a fixed width text file into a new query table. The first column in the text file is five characters wide and is imported as text. The second column is four characters wide and is skipped. The remainder of the text file is imported into the third column and has the General format applied to it.

This example creates a new query table on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example creates a query table based on an ADO recordset. The example preserves the existing column sorting and filtering settings and layout information for backward compatibility.

Dim cnnConnect As ADODB.Connection 
Dim rstRecordset As ADODB.Recordset 
 
Set cnnConnect = New ADODB.Connection 
cnnConnect.Open "Provider=SQLOLEDB;" & _ 
    "Data Source=srvdata;" & _ 
    "User ID=testac;Password=4me2no;" 
 
Set rstRecordset = New ADODB.Recordset 
rstRecordset.Open _ 
    Source:="Select Name, Quantity, Price From Products", _ 
    ActiveConnection:=cnnConnect, _ 
    CursorType:=adOpenDynamic, _ 
    LockType:=adLockReadOnly, _ 
    Options:=adCmdText 
 
With ActiveSheet.QueryTables.Add( _ 
        Connection:=rstRecordset, _ 
        Destination:=Range("A1")) 
    .Name = "Contact List" 
    .FieldNames = True 
    .RowNumbers = False 
    .FillAdjacentFormulas = False 
    .PreserveFormatting = True 
    .RefreshOnFileOpen = False 
    .BackgroundQuery = True 
    .RefreshStyle = xlInsertDeleteCells 
    .SavePassword = True 
    .SaveData = True 
    .AdjustColumnWidth = True 
    .RefreshPeriod = 0 
    .PreserveColumnInfo = True 
    .Refresh BackgroundQuery:=False 
End With

This example imports a fixed width text file into a new query table. The first column in the text file is five characters wide and is imported as text. The second column is four characters wide and is skipped. The remainder of the text file is imported into the third column and has the General format applied to it.

Set shFirstQtr = Workbooks(1).Worksheets(1) 
Set qtQtrResults = shFirstQtr.QueryTables.Add( _ 
    Connection := "TEXT;C:\My Documents\19980331.txt", 
    Destination := shFirstQtr.Cells(1,1)) 
With qtQtrResults 
    .TextFileParsingType = xlFixedWidth 
    .TextFileFixedColumnWidths := Array(5,4) 
    .TextFileColumnDataTypes := _ 
        Array(xlTextFormat, xlSkipColumn, xlGeneralFormat) 
    .Refresh 
End With

This example creates a new query table on the active worksheet.

sqlstring = "select 96Sales.totals from 96Sales where profit < 5" 
connstring = _ 
    "ODBC;DSN=96SalesData;UID=Rep21;PWD=NUyHwYQI;Database=96Sales" 
With ActiveSheet.QueryTables.Add(Connection:=connstring, _ 
        Destination:=Range("B1"), Sql:=sqlstring) 
    .Refresh 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index) -> QueryTable:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The name or index number for the object.

#RETURN-VALUE: A QueryTable object contained by the collection.

#EXAMPLE:

This example sets a query table so that formulas to the right of the query table are automatically updated whenever it's refreshed.

Sheets("sheet1").QueryTables.Item(1).FillAdjacentFormulas = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Shapes:
  '''A collection of all the Shape objects on the specified sheet.

#REMARKS:

Each Shape object represents an object in the drawing layer, such as an AutoShape, freeform, OLE object, or picture.

Use the Shapes property of the Worksheet object to return the Shapes collection. The following example selects all the shapes on myDocument.

Use Shapes (index), where index is the shape's name or index number, to return a single Shape object. The following example sets the fill to a preset shade for shape one on myDocument.

Use Range (index), where index is the shape's name or index number or an array of shape names or index numbers, to return a ShapeRange collection that represents a subset of the Shapes collection. The following example sets the fill pattern for shapes one and three on myDocument.

An ActiveX control on a sheet has two names: the name of the shape that contains the control, which you can see in the Name box when you view the sheet, and the code name for the control, which you can see in the cell to the right of (Name) in the Properties window. When you first add a control to a sheet, the shape name and code name match. However, if you change either the shape name or code name, the other isn't automatically changed to match.

You use the code name of a control in the names of its event procedures. However, when you return a control from the Shapes or OLEObjects collection for a sheet, you must use the shape name, not the code name, to refer to the control by name. For example, assume that you add a check box to a sheet and that both the default shape name and the default code name are CheckBox1. If you then change the control code name by typing chkFinished next to (Name) in the Properties window, you must use chkFinished in event procedures names, but you still have to use CheckBox1 to return the control from the Shapes or OLEObject collection, as shown in the following example.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Shapes property of the Worksheet object to return the Shapes collection. The following example selects all the shapes on myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes.SelectAll

Use Shapes (index), where index is the shape's name or index number, to return a single Shape object. The following example sets the fill to a preset shade for shape one on myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes(1).Fill.PresetGradient _ 
 msoGradientHorizontal, 1, msoGradientBrass

Use Range (index), where index is the shape's name or index number or an array of shape names or index numbers, to return a ShapeRange collection that represents a subset of the Shapes collection. The following example sets the fill pattern for shapes one and three on myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes.Range(Array(1, 3)).Fill.Patterned _ 
 msoPatternHorizontalBrick

An ActiveX control on a sheet has two names: the name of the shape that contains the control, which you can see in the Name box when you view the sheet, and the code name for the control, which you can see in the cell to the right of (Name) in the Properties window. When you first add a control to a sheet, the shape name and code name match. However, if you change either the shape name or code name, the other isn't automatically changed to match.

You use the code name of a control in the names of its event procedures. However, when you return a control from the Shapes or OLEObjects collection for a sheet, you must use the shape name, not the code name, to refer to the control by name. For example, assume that you add a check box to a sheet and that both the default shape name and the default code name are CheckBox1. If you then change the control code name by typing chkFinished next to (Name) in the Properties window, you must use chkFinished in event procedures names, but you still have to use CheckBox1 to return the control from the Shapes or OLEObject collection, as shown in the following example.

Private Sub chkFinished_Click() 
 ActiveSheet.OLEObjects("CheckBox1").Object.Value = 1 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Shapes object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Shapes object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Shapes object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Shapes object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add3DModel(self, Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height) -> Shape:
    '''Creates a 3D model from an existing file. Returns a Shape object that represents the new 3D model.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The file from which the 3D model is to be created.

LinkToFile Optional Variant Determines whether the 3D model will be linked to the file from which it was created.

SaveWithDocument Optional Variant Determines whether the linked 3D model will be saved with the document into which it is inserted.

Left Optional Variant The position (in points) of the upper-left corner of the 3D model relative to the upper-left corner of the document.

Top Optional Variant The position (in points) of the upper-left corner of the 3D model relative to the top of the document.

Width Optional Variant The width of the 3D model, in points (enter -1 to auto-calculate a width based on the 3D model dimensions).

Height Optional Variant The height of the 3D model, in points (enter -1 to auto-calculate a height based on the 3D model dimensions).

#RETURN-VALUE: Shape

#REMARKS:

The value of the  LinkToFile parameter can be one of these MsoTriState constants.

The value of the SaveWithDocument parameter can be one of these MsoTriState constants.

This example adds a 3D model created from the file sphere.glb to mySheet. The inserted 3D model is embedded in the active document.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a 3D model created from the file sphere.glb to mySheet. The inserted 3D model is embedded in the active document.

Set mySheet = Application.ActiveWorkbook.ActiveSheet
Set myShape = mySheet.Shapes.Add3DModel(FileName:="c:\my 3d models\sphere.glb", LinkToFile:=False, SaveWithDocument:=True, Left:=100, Top:=100, Width:=70, Height:=70 )

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddCallout(self, Type, Left, Top, Width, Height) -> Shape:
    '''Creates a borderless line callout. Returns a Shape object that represents the new callout.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required MsoCalloutType The type of callout line.

Left Required Single The position (in points) of the upper-left corner of the callout's bounding box relative to the upper-left corner of the document.

Top Required Single The position (in points) of the upper-left corner of the callout's bounding box relative to the top of the document.

Width Required Single The width of the callout's bounding box, in points.

Height Required Single The height of the callout's bounding box, in points.

#RETURN-VALUE: Shape

#REMARKS:

You can insert a greater variety of callouts by using the AddShape method.

This example adds a borderless callout with a freely rotating one-segment callout line to myDocument and then sets the callout angle to 30 degrees.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a borderless callout with a freely rotating one-segment callout line to myDocument and then sets the callout angle to 30 degrees.

Set myDocument = Worksheets(1) 
myDocument.Shapes.AddCallout(Type:=msoCalloutTwo, _ 
    Left:=50, Top:=50, Width:=200, Height:=100) _ 
    .Callout.Angle = msoCalloutAngle30

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddCanvas(self, Left, Top, Width, Height):  pass

  def AddChart(self, XlChartType, Left, Top, Width, Height):  pass

  def AddChart2(self, Style, XlChartType, Left, Top, Width, Height, NewLayout) -> Shape:
    '''Adds a chart to the document. Returns a Shape object that represents a chart and adds it to the specified collection.

#PARAMETERS:

Name Required/Optional Data type Description

Style Optional Variant The chart style. Use "-1" to get the default style for the chart type specified in XlChartType.

XlChartType Optional Variant The type of chart.

Left Optional Variant The position, in points, of the left edge of the chart, relative to the anchor.

Top Optional Variant The position, in points, of the top edge of the chart, relative to the anchor.

Width Optional Variant The width, in points, of the chart.

Height Optional Variant The height, in points, of the chart.

NewLayout Optional Variant If NewLayout is True, the chart is inserted by using the new dynamic formatting rules (Title is on, and Legend is on only if there are multiple series).

#RETURN-VALUE: Shape
    '''

  def AddConnector(self, Type, BeginX, BeginY, EndX, EndY) -> Shape:
    '''Creates a connector. Returns a Shape object that represents the new connector. When a connector is added, it's not connected to anything. Use the BeginConnect and EndConnect methods to attach the beginning and end of a connector to other shapes in the document.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required MsoConnectorType The connector type to add.

BeginX Required Single The horizontal position (in points) of the connector's starting point relative to the upper-left corner of the document.

BeginY Required Single The vertical position (in points) of the connector's starting point relative to the upper-left corner of the document.

EndX Required Single The horizontal position (in points) of the connector's end point relative to the upper-left corner of the document.

EndY Required Single The vertical position (in points) of the connector's end point relative to the upper-left corner of the document.

#RETURN-VALUE: Shape

#REMARKS:

When you attach a connector to a shape, the size and position of the connector are automatically adjusted, if necessary. Therefore, if you are going to attach a connector to other shapes, the position and dimensions that you specify when adding the connector are irrelevant.

The following example adds a curved connector to a new canvas in a new worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a curved connector to a new canvas in a new worksheet.

Sub AddCanvasConnector() 
 
    Dim wksNew As Worksheet 
    Dim shpCanvas As Shape 
 
    Set wksNew = Worksheets.Add 
 
    'Add drawing canvas to new worksheet 
    Set shpCanvas = wksNew.Shapes.AddCanvas( _ 
        Left:=150, Top:=150, Width:=200, Height:=300) 
 
    'Add connector to the drawing canvas 
    shpCanvas.CanvasItems.AddConnector _ 
        Type:=msoConnectorStraight, BeginX:=150, _ 
        BeginY:=150, EndX:=200, EndY:=200 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddCurve(self, SafeArrayOfPoints) -> Shape:
    '''Returns a Shape object that represents a Bézier curve on a worksheet.

#PARAMETERS:

Name Required/Optional Data type Description

SafeArrayOfPoints Required Variant An array of coordinate pairs that specifies the vertices and control points of the curve. The first point that you specify is the starting vertex, and the next two points are control points for the first Bézier segment. Then, for each additional segment of the curve, you specify a vertex and two control points.The last point that you specify is the ending vertex for the curve. Note that you must always specify 3n + 1 points, where n is the number of segments in the curve.

#RETURN-VALUE: Shape

#EXAMPLE:

The following example adds a two-segment Bézier curve to myDocument.

Dim pts(1 To 7, 1 To 2) As Single 
pts(1, 1) = 0 
pts(1, 2) = 0 
pts(2, 1) = 72 
pts(2, 2) = 72 
pts(3, 1) = 100 
pts(3, 2) = 40 
pts(4, 1) = 20 
pts(4, 2) = 50 
pts(5, 1) = 90 
pts(5, 2) = 120 
pts(6, 1) = 60 
pts(6, 2) = 30 
pts(7, 1) = 150 
pts(7, 2) = 90 
Set myDocument = Worksheets(1) 
myDocument.Shapes.AddCurve SafeArrayOfPoints:=pts

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddDiagram(self, Type, Left, Top, Width, Height):  pass

  def AddFormControl(self, Type, Left, Top, Width, Height) -> Shape:
    '''Creates a Microsoft Excel control. Returns a Shape object that represents the new control.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required XlFormControl The Microsoft Excel control type. You cannot create an edit box on a worksheet.

Left Required Long The initial coordinates of the new object (in points) relative to the upper-left corner of cell A1 on a worksheet or to the upper-left corner of a chart.

Top Required Long The initial coordinates of the new object (in points) relative to the top of row 1 on a worksheet, or to the top of the chart area on a chart.

Width Required Long The initial size of the new object, in points.

Height Required Long The initial size of the new object, in points.

#RETURN-VALUE: Shape

#REMARKS:

Use the AddOLEObject method or the Add method of the OLEObjects collection to create an ActiveX control.

This example adds a list box to worksheet one and sets the fill range for the list box.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a list box to worksheet one and sets the fill range for the list box.

With Worksheets(1) 
 Set lb = .Shapes.AddFormControl(xlListBox, 100, 10, 100, 100) 
 lb.ControlFormat.ListFillRange = "A1:A10" 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddLabel(self, Orientation, Left, Top, Width, Height) -> Shape:
    '''Creates a label. Returns a Shape object that represents the new label.

#PARAMETERS:

Name Required/Optional Data type Description

Orientation Required MsoTextOrientation The text orientation within the label.

Left Required Single The position (in points) of the upper-left corner of the label relative to the upper-left corner of the document.

Top Required Single The position (in points) of the upper-left corner of the label relative to the top of the document.

Width Required Single The width of the label, in points.

Height Required Single The height of the label, in points.

#RETURN-VALUE: Shape

#EXAMPLE:

This example adds a vertical label that contains the text Test Label to myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes.AddLabel(msoTextOrientationVertical, _ 
    100, 100, 60, 150) _ 
    .TextFrame.Characters.Text = "Test Label"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddLine(self, BeginX, BeginY, EndX, EndY) -> Shape:
    '''As it applies to the Shapes object, returns a Shape object that represents the new line on a worksheet.

#PARAMETERS:

Name Required/Optional Data type Description

BeginX Required Single The position (in points) of the line's starting point relative to the upper-left corner of the document.

BeginY Required Single The position (in points) of the line's starting point relative to the upper-left corner of the document.

EndX Required Single The position (in points) of the line's end point relative to the upper-left corner of the document.

EndY Required Single The position (in points) of the line's end point relative to the upper-left corner of the document.

#RETURN-VALUE: Shape

#EXAMPLE:

This example adds a blue dashed line to myDocument.

Set myDocument = Worksheets(1) 
With myDocument.Shapes.AddLine(10, 10, 250, 250).Line 
 .DashStyle = msoLineDashDotDot 
 .ForeColor.RGB = RGB(50, 0, 128) 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddOLEObject(self, ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height) -> Shape:
    '''Creates an OLE object. Returns a Shape object that represents the new OLE object.

#PARAMETERS:

Name Required/Optional Data type Description

ClassType Optional Variant A string that contains the programmatic identifier for the object to be created. You must specify either ClassType or FileName. If ClassType is specified, FileName and Link are ignored.

FileName Optional Variant The file from which the object is to be created. If the path isn't specified, the current working folder is used. You must specify either the ClassType or FileName argument for the object, but not both.

Link Optional Variant True to link the OLE object to the file from which it was created. False to make the OLE object an independent copy of the file. If you specified a value for ClassType, this argument must be False. The default value is False.

DisplayAsIcon Optional Variant True to display the OLE object as an icon. The default value is False.

IconFileName Optional Variant The file that contains the icon to be displayed.

IconIndex Optional Variant The index of the icon within IconFileName. The order of icons in the specified file corresponds to the order in which the icons appear in the Change Icon dialog box (accessed from the Object dialog box when the Display as icon check box is selected). The first icon in the file has the index number 0 (zero). If an icon with the given index number doesn't exist in IconFileName, the icon with the index number 1 (the second icon in the file) is used. The default value is 0 (zero).

IconLabel Optional Variant A label (caption) to be displayed beneath the icon.

Left Optional Variant The position (in points) of the upper-left corner of the new object relative to the upper-left corner of the document. The default value is 0 (zero).

Top Optional Variant The position (in points) of the upper-left corner of the new object relative to the top of the document. The default value is 0 (zero).

Width Optional Variant The initial dimensions of the OLE object, in points.

Height Optional Variant The initial dimensions of the OLE object, in points.

#RETURN-VALUE: Shape

#EXAMPLE:

This example adds a linked Word document to myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes.AddOLEObject Left:=100, Top:=100, _ 
 Width:=200, Height:=300, _ 
 FileName:="c:\my documents\testing.doc", link:=True

This example adds a new command button to myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes.AddOLEObject Left:=100, Top:=100, _ 
 Width:=100, Height:=200, _ 
 ClassType:="Forms.CommandButton.1"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddPicture(self, Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height) -> Shape:
    '''Creates a picture from an existing file. Returns a Shape object that represents the new picture.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The file from which the picture is to be created.

LinkToFile Required MsoTriState The file to link to. Use msoFalse to make the picture an independent copy of the file. Use msoTrue to link the picture to the file from which it was created.

SaveWithDocument Required MsoTriState To save the picture with the document. Use msoFalse to store only the link information in the document. Use msoTrue to save the linked picture with the document into which it's inserted. This argument must be msoTrue if LinkToFile is msoFalse.

Left Required Single The position (in points) of the upper-left corner of the picture relative to the upper-left corner of the document.

Top Required Single The position (in points) of the upper-left corner of the picture relative to the top of the document.

Width Required Single The width of the picture, in points (enter -1 to retain the width of the existing file).

Height Required Single The height of the picture, in points (enter -1 to retain the height of the existing file).

#RETURN-VALUE: Shape

#EXAMPLE:

This example adds a picture created from the file Music.bmp to myDocument. The inserted picture is linked to the file from which it was created and is saved with myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes.AddPicture _ 
    "c:\microsoft office\clipart\music.bmp", _ 
    True, True, 100, 100, 70, 70

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddPicture2(self, Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height, Compress) -> Shape:
    '''Creates a picture from an existing file. Returns a Shape object that represents the new picture.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String The file from which the OLE object is to be created.

LinkToFile Required MsoTriState Determines whether the picture will be linked to the file from which it was created.

SaveWithDocument Required MsoTriState Determines whether the linked picture will be saved with the document into which it is inserted. This argument must be msoTrue if LinkToFile is msoFalse.

Left Required Single The position, measured in points, of the left edge of the picture relative to the left edge of the worksheet.

Top Required Single The position, measured in points, of the top edge of the picture relative to the top edge of the worksheet.

Width Optional Single The width of the picture, measured in points.

Height Optional Single The height of the picture, measured in points.

compress Optional MsoPictureCompress Determines whether the picture should be compressed when inserted.

#RETURN-VALUE: Shape
    '''

  def AddPolyline(self, SafeArrayOfPoints) -> Shape:
    '''Creates an open polyline or a closed polygon drawing. Returns a Shape object that represents the new polyline or polygon.

#PARAMETERS:

Name Required/Optional Data type Description

SafeArrayOfPoints Required Variant An array of coordinate pairs that specifies the polyline drawing's vertices.

#RETURN-VALUE: Shape

#REMARKS:

To form a closed polygon, assign the same coordinates to the first and last vertices in the polyline drawing.

This example adds a triangle to myDocument. Because the first and last points have the same coordinates, the polygon is closed and filled. The color of the triangle's interior will be the same as the default shape's fill color.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a triangle to myDocument. Because the first and last points have the same coordinates, the polygon is closed and filled. The color of the triangle's interior will be the same as the default shape's fill color.

Dim triArray(1 To 4, 1 To 2) As Single 
triArray(1, 1) = 25 
triArray(1, 2) = 100 
triArray(2, 1) = 100 
triArray(2, 2) = 150 
triArray(3, 1) = 150 
triArray(3, 2) = 50 
triArray(4, 1) = 25 ' Last point has same coordinates as first 
triArray(4, 2) = 100 
Set myDocument = Worksheets(1) 
myDocument.Shapes.AddPolyline triArray

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddShape(self, Type, Left, Top, Width, Height) -> Shape:
    '''Returns a Shape object that represents the new AutoShape on a worksheet.

#PARAMETERS:

Name Required/Optional Data type Description

Type Required MsoAutoShapeType Specifies the type of AutoShape to create.

Left Required Single The position (in points) of the upper-left corner of the AutoShape's bounding box relative to the upper-left corner of the document.

Top Required Single The position (in points) of the upper-left corner of the AutoShape's bounding box relative to the top of the document.

Width Required Single The width of the AutoShape's bounding box, in points.

Height Required Single The height of the AutoShape's bounding box, in points.

#RETURN-VALUE: Shape

#REMARKS:

To change the type of an AutoShape that you have added, set the AutoShapeType property.

This example adds a rectangle to myDocument.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds a rectangle to myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes.AddShape msoShapeRectangle, 50, 50, 100, 200

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddSmartArt(self, Layout, Left, Top, Width, Height) -> Shape:
    '''Creates a new SmartArt graphic with the specified layout.

#PARAMETERS:

Name Required/Optional Data type Description

Layout Required SmartArtLayout An object that represents the layout to use.

Left Optional Variant The distance, in points, from the left edge of the object to the left edge of column A (on a worksheet) or the left edge of the chart area (on a chart).

Top Optional Variant The distance, in points, from the top edge of the object to the top edge of the worksheet.

Width Optional Variant The width, in points, of the object.

Height Optional Variant The height, in points, of the object.

#RETURN-VALUE: Shape
    '''

  def AddTextEffect(self, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top) -> Shape:
    '''Creates a WordArt object. Returns a Shape object that represents the new WordArt object.

#PARAMETERS:

Name Required/Optional Data type Description

PresetTextEffect Required MsoPresetTextEffect The preset text effect.

Text Required String The text in the WordArt.

FontName Required String The name of the font used in the WordArt.

FontSize Required Single The size (in points) of the font used in the WordArt.

FontBold Required MsoTriState The font used in the WordArt to bold.

FontItalic Required MsoTriState The font used in the WordArt to italic.

Left Required Single The position (in points) of the upper-left corner of the WordArt's bounding box relative to the upper-left corner of the document.

Top Required Single The position (in points) of the upper-left corner of the WordArt's bounding box relative to the top of the document.

#RETURN-VALUE: Shape

#REMARKS:

When you add WordArt to a document, the height and width of the WordArt are automatically set based on the size and amount of text that you specify.

This example adds WordArt that contains the text Test to myDocument.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example adds WordArt that contains the text Test to myDocument.

Set myDocument = Worksheets(1) 
Set newWordArt = myDocument.Shapes.AddTextEffect( _ 
    PresetTextEffect:=msoTextEffect1, Text:="Test", _ 
    FontName:="Arial Black", FontSize:=36, _ 
    FontBold:=msoFalse, FontItalic:=msoFalse, Left:=10, _ 
    Top:=10)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddTextbox(self, Orientation, Left, Top, Width, Height) -> Shape:
    '''Creates a text box. Returns a Shape object that represents the new text box.

#PARAMETERS:

Name Required/Optional Data type Description

Orientation Required MsoTextOrientation The orientation of the textbox.

Left Required Single The position (in points) of the upper-left corner of the text box relative to the upper-left corner of the document.

Top Required Single The position (in points) of the upper-left corner of the text box relative to the top of the document.

Width Required Single The width of the text box, in points.

Height Required Single The height of the text box, in points.

#RETURN-VALUE: Shape

#EXAMPLE:

This example adds a text box that contains the text Test Box to myDocument.

Set myDocument = Worksheets(1) 
myDocument.Shapes.AddTextbox(msoTextOrientationHorizontal, _ 
    100, 100, 200, 50) _ 
    .TextFrame.Characters.Text = "Test Box"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def BuildFreeform(self, EditingType, X1, Y1) -> FreeformBuilder:
    '''Builds a freeform object. Returns a FreeformBuilder object that represents the freeform as it is being built.

#PARAMETERS:

Name Required/Optional Data type Description

EditingType Required MsoEditingType The editing property of the first node.

X1 Required Single The position (in points) of the first node in the freeform drawing relative to the upper-left corner of the document.

Y1 Required Single The position (in points) of the first node in the freeform drawing relative to the upper-left corner of the document.

#RETURN-VALUE: FreeformBuilder

#EXAMPLE:

This example adds a freeform with five vertices to myDocument.

Set myDocument = Worksheets(1) 
With myDocument.Shapes.BuildFreeform(msoEditingCorner, 360, 200) 
    .AddNodes msoSegmentCurve, msoEditingCorner, _ 
        380, 230, 400, 250, 450, 300 
    .AddNodes msoSegmentCurve, msoEditingAuto, 480, 200 
    .AddNodes msoSegmentLine, msoEditingAuto, 480, 400 
    .AddNodes msoSegmentLine, msoEditingAuto, 360, 200 
    .ConvertToShape 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index) -> Shape:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The name or index number for the object.

#RETURN-VALUE: A Shape object contained by the collection.

#REMARKS:

The text name of the object is the value of the Name property.

This example sets the OnAction property for shape two in a Shapes collection. If the ss variable doesn't represent a Shapes object, this example fails.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the OnAction property for shape two in a Shapes collection. If the ss variable doesn't represent a Shapes object, this example fails.

Dim ss As Shape 
ss.Item(2).OnAction = "ShapeAction"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Range(self, Index):  pass

  def SelectAll(self) -> None:
    '''Selects all the shapes in the specified Shapes collection.

#EXAMPLE:

This example selects all the shapes on myDocument, and then creates a ShapeRange collection containing all the shapes.

Set myDocument = Worksheets(1) 
myDocument.Shapes.SelectAll

Set sr = Selection.ShapeRange

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Sort:
  '''Represents a sort of a range of data.

#EXAMPLE:

The following procedure builds and sorts data in a range on the active worksheet.

Sub SortData() 
 
 'Building data to sort on the active sheet. 
 Range("A1").Value = "Name" 
 Range("A2").Value = "Bill" 
 Range("A3").Value = "Rod" 
 Range("A4").Value = "John" 
 Range("A5").Value = "Paddy" 
 Range("A6").Value = "Kelly" 
 Range("A7").Value = "William" 
 Range("A8").Value = "Janet" 
 Range("A9").Value = "Florence" 
 Range("A10").Value = "Albert" 
 Range("A11").Value = "Mary" 
 MsgBox "The list is out of order. Hit Ok to continue...", vbInformation 
 
 'Selecting a cell within the range. 
 Range("A2").Select 
 
 'Applying sort. 
 With ActiveWorkbook.Worksheets(ActiveSheet.Name).Sort 
 .SortFields.Clear 
 .SortFields.Add Key:=Range("A2:A11"), _ 
 SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal 
 .SetRange Range("A1:A11") 
 .Header = xlYes 
 .MatchCase = False 
 .Orientation = xlTopToBottom 
 .SortMethod = xlPinYin 
 .Apply 
 End With 
 MsgBox "Sort complete.", vbInformation 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Sort object.

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Sort object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Header: XlYesNoGuess
    '''Specifies whether the first row contains header information. Read/write XlYesNoGuess.

#SYNTAX:

expression.Header

expression A variable that represents a Sort object.

xlNo is the default value. You can specify xlGuess if you want Excel to attempt to determine the header.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

xlNo is the default value. You can specify xlGuess if you want Excel to attempt to determine the header.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.MatchCase: bool
    '''Set to True to perform a case-sensitive sort, or set to False to perform a non-case-sensitive sort. Read/write.

#SYNTAX:

expression.MatchCase

expression A variable that represents a Sort object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Orientation: XlSortOrientation
    '''Specifies the orientation for the sort. Read/write XlSortOrientation.

#SYNTAX:

expression.Orientation

expression A variable that represents a Sort object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Sort object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SortFields: SortFields
    '''Returns the SortFields object that represents the collection of sort fields associated with the Sort object. Read-only.

#SYNTAX:

expression.SortFields

expression A variable that represents a Sort object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.SortMethod: XlSortMethod
    '''Specifies the sort method for Chinese languages. Read/write XlSortMethod.

#SYNTAX:

expression.SortMethod

expression A variable that represents a Sort object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Apply(self) -> None:
    '''Sorts the range based on the currently applied sort states.'''

  def SetRange(self, Rng) -> None:
    '''Sets the range over which the sort occurs.

#PARAMETERS:

Name Required/Optional Data type Description

Rng Required Range Specifies the range over which the sort represented by the Sort object occurs.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # Rng:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)



class Tab:
  '''Represents the tab of a chart or a worksheet.

#REMARKS:

Use the Tab property of the Chart object or Worksheet object to return a Tab object.

After a Tab object is returned, you can use the ColorIndex property to determine the settings of a tab for a chart or worksheet.

In the following example, Microsoft Excel determines if the worksheet's first tab color index is set to none, and then notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, Microsoft Excel determines if the worksheet's first tab color index is set to none, and then notifies the user.

Sub CheckTab() 
 
 ' Determine if color index of 1st tab is set to none. 
 If Worksheets(1).Tab.ColorIndex = xlColorIndexNone Then 
 MsgBox "The color index is set to none for the first " & _ 
 "worksheet tab." 
 Else 
 MsgBox "The color index for the tab of the first worksheet " & _ 
 "is not set none." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Tab object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Color: VBA_Variant
    '''Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant.

#SYNTAX:

expression.Color

expression An expression that returns a Tab object.

This example sets the color of the tick-mark labels on the value axis on Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This example sets the color of the tick-mark labels on the value axis on Chart1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the color of the tick-mark labels on the value axis on Chart1.

Charts("Chart1").Axes(xlValue).TickLabels.Font.Color = _ 
 RGB(0, 255, 0)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ColorIndex: VBA_Variant
    '''Returns or sets a Variant value that represents the color of the specified worksheet tab or chart tab.

#SYNTAX:

expression.ColorIndex

expression A variable that represents a Tab object.

After a Tab object is returned, you can use the ColorIndex property to determine the settings of a tab for a chart or worksheet.

The color is specified as an index value in the current color palette from 1 to 56 or the XlColorIndex value xlColorIndexNone.

In the following example, Microsoft Excel determines whether the first worksheet's tab color index is set to none and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

After a Tab object is returned, you can use the ColorIndex property to determine the settings of a tab for a chart or worksheet.

The color is specified as an index value in the current color palette from 1 to 56 or the XlColorIndex value xlColorIndexNone.

In the following example, Microsoft Excel determines whether the first worksheet's tab color index is set to none and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In the following example, Microsoft Excel determines whether the first worksheet's tab color index is set to none and notifies the user.

Sub CheckTab() 
 
 ' Determine if color index of 1st tab is set to none. 
 If Worksheets(1).Tab.ColorIndex = xlColorIndexNone Then 
  MsgBox "The color index is set to none for the first " & _ 
  "worksheet tab." 
 Else 
  MsgBox "The color index for the tab of the first worksheet " & _ 
  "is not set to none." 
 End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Tab object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Worksheet
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Tab object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ThemeColor: XlThemeColor
    '''Returns or sets the theme color in the applied color scheme that is associated with the specified object. Read/write XlThemeColor.

#SYNTAX:

expression.ThemeColor

expression A variable that represents a Tab object.

Attempting to access a theme color for an object whose color is not currently themed will result in an invalid request run-time error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Attempting to access a theme color for an object whose color is not currently themed will result in an invalid request run-time error.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TintAndShade: float
    '''Returns or sets a Single that lightens or darkens a color.

#SYNTAX:

expression.TintAndShade

expression A variable that represents a Tab object.

You can enter a number from -1 (darkest) to 1 (lightest) for the TintAndShade property. Zero (0) is neutral.

Attempting to set this property to a value less than -1 or more than 1 is not recommended. Excel will correct the value internally to some value that falls within the range of valid values. This property works for both theme colors and nontheme colors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can enter a number from -1 (darkest) to 1 (lightest) for the TintAndShade property. Zero (0) is neutral.

Attempting to set this property to a value less than -1 or more than 1 is not recommended. Excel will correct the value internally to some value that falls within the range of valid values. This property works for both theme colors and nontheme colors.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class VPageBreaks:
  '''A collection of vertical page breaks within the print area.

#REMARKS:

Each vertical page break is represented by a VPageBreak object.

When the Application property, Count property, Creator property, Item property, Parent property, or Add method is used in conjunction with the VPageBreaks property:

Use the VPageBreaks property of the Sheets object to return the VPageBreaks collection. Use the Add method to add a vertical page break.

If you add a page break that does not intersect the print area, the newly-added VPageBreak object does not appear in the VPageBreaks collection for the print area. The contents of the collection may change if the print area is resized or redefined.

The following example adds a vertical page break to the left of the active cell.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the VPageBreaks property of the Sheets object to return the VPageBreaks collection. Use the Add method to add a vertical page break.

If you add a page break that does not intersect the print area, the newly-added VPageBreak object does not appear in the VPageBreaks collection for the print area. The contents of the collection may change if the print area is resized or redefined.

The following example adds a vertical page break to the left of the active cell.

ActiveSheet.VPageBreaks.Add Before:=ActiveCell

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a VPageBreaks object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a VPageBreaks object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a VPageBreaks object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Sheets
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a VPageBreaks object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Before) -> VPageBreak:
    '''Adds a vertical page break.

#PARAMETERS:

Name Required/Optional Data type Description

Before Required Object A Range object. The range to the left of which the new page break will be added.

#RETURN-VALUE: A VPageBreak object that represents the new vertical page break.

#EXAMPLE:

This example adds a horizontal page break above cell F25 and adds a vertical page break to the left of this cell.

With Worksheets(1) 
 .HPageBreaks.Add .Range("F25") 
 .VPageBreaks.Add .Range("F25") 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Pane:
  '''Represents a pane of a window.

#REMARKS:

Pane objects exist only for worksheets and Microsoft Excel 4.0 macro sheets. The Pane object is a member of the Panes collection. The Panes collection contains all of the panes shown in a single window.

Use Panes (index), where index is the pane index number, to return a single Pane object.

The following example splits the window in which worksheet one is displayed and then scrolls through the pane in the lower-left corner until row five is at the top of the pane.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use Panes (index), where index is the pane index number, to return a single Pane object.

The following example splits the window in which worksheet one is displayed and then scrolls through the pane in the lower-left corner until row five is at the top of the pane.

Worksheets(1).Activate 
ActiveWindow.Split = True 
ActiveWindow.Panes(3).ScrollRow = 5

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Pane object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Pane object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Index: int
    '''Returns a Long value that represents the index number of the object within the collection of similar objects.

#SYNTAX:

expression.Index

expression A variable that represents a Pane object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Window
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Pane object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ScrollColumn: int
    '''Returns or sets the number of the leftmost column in the pane or window. Read/write Long.

#SYNTAX:

expression.ScrollColumn

expression A variable that represents a Pane object.

If the window is split, the ScrollColumn property of the Window object refers to the upper-left pane.

If the panes are frozen, the ScrollColumn property of the Window object excludes the frozen areas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the window is split, the ScrollColumn property of the Window object refers to the upper-left pane.

If the panes are frozen, the ScrollColumn property of the Window object excludes the frozen areas.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ScrollRow: int
    '''Returns or sets the number of the row that appears at the top of the pane or window. Read/write Long.

#SYNTAX:

expression.ScrollRow

expression A variable that represents a Pane object.

If the window is split, the ScrollRow property of the Window object refers to the upper-left pane.

If the panes are frozen, the ScrollRow property of the Window object excludes the frozen areas.

This example moves row ten to the top of the window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the window is split, the ScrollRow property of the Window object refers to the upper-left pane.

If the panes are frozen, the ScrollRow property of the Window object excludes the frozen areas.

This example moves row ten to the top of the window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example moves row ten to the top of the window.

Worksheets("Sheet1").Activate 
ActiveWindow.ScrollRow = 10

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.VisibleRange: Range
    '''Returns a Range object that represents the range of cells that are visible in the window or pane. If a column or row is partially visible, it's included in the range. Read-only.

#SYNTAX:

expression.VisibleRange

expression A variable that represents a Pane object.

This example displays the number of cells visible on Sheet1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays the number of cells visible on Sheet1.

Worksheets("Sheet1").Activate 
MsgBox "There are " & Windows(1).VisibleRange.Cells.Count _ 
 & " cells visible"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Activate(self) -> bool:
    '''Activates the pane.

#RETURN-VALUE: Boolean

#REMARKS:

If the pane isn't in the active window, the window that the pane belongs to will also be activated.

You cannot activate a frozen pane.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def LargeScroll(self, Down, Up, ToRight, ToLeft) -> VBA_Variant:
    '''Scrolls the contents of the window by pages.

#PARAMETERS:

Name Required/Optional Data type Description

Down Optional Variant The number of pages to scroll the contents down.

Up Optional Variant The number of pages to scroll the contents up.

ToRight Optional Variant The number of pages to scroll the contents to the right.

ToLeft Optional Variant The number of pages to scroll the contents to the left.

#RETURN-VALUE: Variant

#REMARKS:

If Down and Up are both specified, the contents of the window are scrolled by the difference of the arguments. For example, if Down is 3 and Up is 6, the contents are scrolled up three pages.

If ToLeft and ToRight are both specified, the contents of the window are scrolled by the difference of the arguments. For example, if ToLeft is 3 and ToRight is 6, the contents are scrolled to the right three pages.

Any of the arguments can be a negative number.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def PointsToScreenPixelsX(self, Points) -> int:
    '''Returns or sets a pixel point on the screen.

#PARAMETERS:

Name Required/Optional Data type Description

Points Required Long Location of the pixel on the screen.

#RETURN-VALUE: Long
    '''

  def PointsToScreenPixelsY(self, Points) -> int:
    '''Returns or sets the location of the pixel on the screen.

#PARAMETERS:

Name Required/Optional Data type Description

Points Required Long Location of the starting point.

#RETURN-VALUE: Long
    '''

  def ScrollIntoView(self, Left, Top, Width, Height, Start) -> None:
    '''Scrolls the document window so that the contents of a specified rectangular area are displayed in either the upper-left or lower-right corner of the document window or pane (depending on the value of the Start argument).

#PARAMETERS:

Name Required/Optional Data type Description

Left Required Long The horizontal position of the rectangle (in points) from the left edge of the document window or pane.

Top Required Long The vertical position of the rectangle (in points) from the top of the document window or pane.

Width Required Long The width of the rectangle, in points.

Height Required Long The height of the rectangle, in points.

Start Optional Variant True to have the upper-left corner of the rectangle appear in the upper-left corner of the document window or pane. False to have the lower-right corner of the rectangle appear in the lower-right corner of the document window or pane. The default value is True.

#REMARKS:

The Start argument is useful for orienting the screen display when the rectangle is larger than the document window or pane.

This example defines a 100-by-200-pixel rectangle in the active document window, positioned 20 pixels from the top of the window and 50 pixels from the left edge of the window. The example then scrolls the document up and to the left so that the upper-left corner of the rectangle is aligned with the upper-left corner of the window.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example defines a 100-by-200-pixel rectangle in the active document window, positioned 20 pixels from the top of the window and 50 pixels from the left edge of the window. The example then scrolls the document up and to the left so that the upper-left corner of the rectangle is aligned with the upper-left corner of the window.

ActiveWindow.ScrollIntoView _ 
 Left:=50, Top:=20, _ 
 Width:=100, Height:=200

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def SmallScroll(self, Down, Up, ToRight, ToLeft) -> VBA_Variant:
    '''Scrolls the contents of the window by rows or columns.

#PARAMETERS:

Name Required/Optional Data type Description

Down Optional Variant The number of rows to scroll the contents down.

Up Optional Variant The number of rows to scroll the contents up.

ToRight Optional Variant The number of columns to scroll the contents to the right.

ToLeft Optional Variant The number of columns to scroll the contents to the left.

#RETURN-VALUE: Variant

#REMARKS:

If Down and Up are both specified, the contents of the window are scrolled by the difference of the arguments. For example, if Down is 3 and Up is 6, the contents are scrolled up three rows.

If ToLeft and ToRight are both specified, the contents of the window are scrolled by the difference of the arguments. For example, if ToLeft is 3 and ToRight is 6, the contents are scrolled to the right three columns.

Any of these arguments can be a negative number.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class WorksheetView:
  def __init__(self):
    self.Application: Application
    self.Creator: int
    self.DisplayFormulas: bool
    self.DisplayGridlines: bool
    self.DisplayHeadings: bool
    self.DisplayOutline: bool
    self.DisplayZeros: bool
    self.Parent: Window
    self.Sheet: _Worksheet
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Panes:
  '''A collection of all the Pane objects shown in the specified window.

#REMARKS:

Pane objects exist only for worksheets and Microsoft Excel 4.0 macro sheets.

Use the Panes property of the Windows object to return the Panes collection.

The following example freezes panes in the active window if the window contains more than one pane.

Use Panes (index), where index is the pane index number, to return a single Pane object. The following example scrolls through the upper-left pane of the window in which Sheet1 is displayed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Panes property of the Windows object to return the Panes collection.

The following example freezes panes in the active window if the window contains more than one pane.

If ActiveWindow.Panes.Count > 1 Then _ 
 ActiveWindow.FreezePanes = True

Use Panes (index), where index is the pane index number, to return a single Pane object. The following example scrolls through the upper-left pane of the window in which Sheet1 is displayed.

Worksheets("sheet1").Activate 
Windows(1).Panes(1).LargeScroll down:=1

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Panes object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Panes object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Panes object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Window
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Panes object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class SheetViews:
  '''A collection of all the sheet views in the specified or active workbook window.

#EXAMPLE:

The following example returns the view count of the active window.

ActiveWindow.SheetViews.Count

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a SheetViews object.

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns the number of objects in the collection. Read-only Long.

#SYNTAX:

expression.Count

expression A variable that represents a SheetViews object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a SheetViews object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Window
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a SheetViews object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class LazyDispatchItem:
  def __init__(self):
    self.__dict__: dict
    self.__module__: str
    self.bIsDispatch: int
    self.bIsSink: int
    self.bWritten: int
    self.defaultDispatchName: str
    self.hidden: int
    self.mapFuncs: dict
    self.propMap: dict
    self.propMapGet: dict
    self.propMapPut: dict
    self.typename: str

  def Build(self, typeinfo, attr, bForUser):  pass

  def CountInOutOptArgs(self, argTuple):  pass

  def MakeDispatchFuncMethod(self, entry, name, bMakeClass):  pass

  def MakeFuncMethod(self, entry, name, bMakeClass):  pass

  def MakeVarArgsFuncMethod(self, entry, name, bMakeClass):  pass

  def _AddFunc_(self, typeinfo, fdesc, bForUser):  pass

  def _AddVar_(self, typeinfo, vardesc, bForUser):  pass

  def _propMapGetCheck_(self, key, item):  pass

  def _propMapPutCheck_(self, key, item):  pass


  #unknown:
    # clsid:  <class 'NoneType'>
    # co_class:  <class 'NoneType'>
    # doc:  <class 'NoneType'>
    # python_name:  <class 'NoneType'>



class Graphic:
  '''Contains properties that apply to header and footer picture objects.

#REMARKS:

Use the following properties of the PageSetup object to return the Graphic object:

The following example adds a picture titled Sample.jpg from the C:\ drive to the left section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a picture titled Sample.jpg from the C:\ drive to the left section of the footer. This example assumes that a file called Sample.jpg exists on the C:\ drive.

Sub InsertPicture() 
 
 With ActiveSheet.PageSetup.LeftFooterPicture 
 .FileName = "C:\Sample.jpg" 
 .Height = 275.25 
 .Width = 463.5 
 .Brightness = 0.36 
 .ColorType = msoPictureGrayscale 
 .Contrast = 0.39 
 .CropBottom = -14.4 
 .CropLeft = -28.8 
 .CropRight = -14.4 
 .CropTop = 21.6 
 End With 
 
 ' Enable the image to show up in the left footer. 
 ActiveSheet.PageSetup.LeftFooter = "&G" 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Graphic object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Graphic object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Filename: str
    '''Returns or sets the URL (on the intranet or the web) or path (local or network) to the location where the specified source object was saved. Read/write String.

#SYNTAX:

expression.Filename

expression A variable that represents a Graphic object.

The FileName property generates an error if a folder in the specified path doesn't exist.

This example sets the location where the first item in the active workbook is to be saved.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The FileName property generates an error if a folder in the specified path doesn't exist.

This example sets the location where the first item in the active workbook is to be saved.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the location where the first item in the active workbook is to be saved.

ActiveWorkbook.PublishObjects(1).FileName = _ 
 "\\Server2\Q1\StockReport.htm"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: PageSetup
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Graphic object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # Brightness:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ColorType:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Contrast:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # CropBottom:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # CropLeft:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # CropRight:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # CropTop:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Height:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # LockAspectRatio:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # Width:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)



class Page:
  '''Represents a page in a workbook. Use the Page object and the related methods and properties for programmatically defining page layout in a workbook.

#REMARKS:

Use the Item property to access a specific page in a workbook. The following example accesses the first page in the active workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Dim objPage As Page 
 
Set objPage = ActiveWorkbook.ActiveWindow _ 
 .Panes(1).Pages.Item(1)
  '''

  def __init__(self):
    self.CenterFooter: HeaderFooter
    '''Specifies a picture or text to be center-aligned in the page footer.

#SYNTAX:

expression.CenterFooter

expression A variable that represents a Page object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.CenterHeader: HeaderFooter
    '''Specifies a picture or text to be center-aligned in the page header.

#SYNTAX:

expression.CenterHeader

expression A variable that represents a Page object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LeftFooter: HeaderFooter
    '''Specifies a picture or text to be left-aligned in the page footer.

#SYNTAX:

expression.LeftFooter

expression A variable that represents a Page object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LeftHeader: HeaderFooter
    '''Specifies a picture or text to be left-aligned in the page header.

#SYNTAX:

expression.LeftHeader

expression A variable that represents a Page object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RightFooter: HeaderFooter
    '''Specifies a picture or text to be right-aligned in the page footer.

#SYNTAX:

expression.RightFooter

expression A variable that represents a Page object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RightHeader: HeaderFooter
    '''Specifies a picture or text to be right-aligned in the page header.

#SYNTAX:

expression.RightHeader

expression A variable that represents a Page object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Pages:
  '''A collection of pages in a document. Use the Pages collection and the related objects and properties for programmatically defining page layout in a workbook.

#REMARKS:

Use the Pages property of the PageSetup object to return a Pages collection. The following example accesses all pages on the active worksheet.

Use the Item method to access an individual Page object that represents an individual page on a worksheet. The following example accesses the first page on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Dim objPages As Pages 
 
Set objPage = ActiveWorksheet. _ 
 ActiveWindow.Panes(1).Pages

Dim objPage As Page 
 
Set objPage = ActiveWorksheet.ActiveWindow _ 
 .Panes(1).Pages.Item(1)
  '''

  def __init__(self):
    self.Count: int
    '''Returns the number of objects in the collection. Read-only Long.

#SYNTAX:

expression.Count

expression A variable that represents a Pages object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Connections:
  '''A collection of WorkbookConnection objects for the specified workbook.

#EXAMPLE:

The following example shows how to add a connection to a workbook from an existing file.

ActiveWorkbook.Connections.AddFromFile _ 
 "C:\Documents and Settings\myComputer\My Documents\My Data Sources\Northwind 2007 Customers.odc"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Connections object.

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns the number of objects in the collection. Read-only Long.

#SYNTAX:

expression.Count

expression A variable that represents a Connections object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Connections object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Connections object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name, Description, ConnectionString, CommandText, lCmdtype) -> WorkbookConnection:
    '''Adds a new connection to the workbook.

#PARAMETERS:

Name Required/Optional Data type Description

Name Required String Name of the connection.

Description Required String Brief description about the connection.

ConnectionString Required Variant The connection string.

CommandText Required Variant The command text to create the connection.

lCmdtype Optional XlCmdType Command type.

CreateModelConnection Optional Boolean Specifies whether to create a connection to the PowerPivot model.

ImportRelationships Optional Boolean Specifies whether to import any existing relationships.

#RETURN-VALUE: WorkbookConnection
    '''

  def Add2(self, Name, Description, ConnectionString, CommandText, lCmdtype, CreateModelConnection, ImportRelationships):  pass

  def AddFromFile(self, Filename, CreateModelConnection, ImportRelationships) -> WorkbookConnection:
    '''Adds a connection from the specified file.

#PARAMETERS:

Name Required/Optional Data type Description

FileName Required String Name of the file.

CreateModelConnection Optional Boolean Specifies whether to create the connection to the model.

ImportRelationships Optional Boolean Specifies whether to import the connection relationship.

#RETURN-VALUE: WorkbookConnection
    '''

  def Item(self, Index) -> WorkbookConnection:
    '''This method creates a connection item.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant Index value of the item.

#RETURN-VALUE: WorkbookConnection
    '''

  def _AddFromFile(self, Filename):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class CustomViews:
  '''A collection of custom workbook views.

#REMARKS:

Each view is represented by a CustomView object.

Use the CustomViews property of the Workbook object to return the CustomViews collection.

Use the Add method to create a new custom view and add it to the CustomViews collection. The following example creates a new custom view named "Summary."

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the CustomViews property of the Workbook object to return the CustomViews collection.

Use the Add method to create a new custom view and add it to the CustomViews collection. The following example creates a new custom view named "Summary."

ActiveWorkbook.CustomViews.Add "Summary", True, True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a CustomViews object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a CustomViews object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a CustomViews object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a CustomViews object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, ViewName, PrintSettings, RowColSettings) -> CustomView:
    '''Creates a new custom view.

#PARAMETERS:

Name Required/Optional Data type Description

ViewName Required String The name of the new view.

PrintSettings Optional Variant True to include print settings in the custom view.

RowColSettings Optional Variant True to include settings for hidden rows and columns (including filter information) in the custom view.

#RETURN-VALUE: A CustomView object that represents the new custom view.

#EXAMPLE:

This example creates a new custom view named Summary in the active workbook.

ActiveWorkbook.CustomViews.Add "Summary", True, True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, ViewName) -> CustomView:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The name or index number for the object.

#RETURN-VALUE: A CustomView object contained by the collection.

#EXAMPLE:

This example includes print settings in the custom view named Current Inventory.

ThisWorkbook.CustomViews.Item("Current Inventory") _ 
 .PrintSettings = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, ViewName):  pass

  def __call__(self, ViewName):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class TableStyle:
  def __init__(self):
    self.Application: Application
    self.BuiltIn: bool
    self.Creator: int
    self.Name: str
    self.NameLocal: str
    self.Parent: TableStyles
    self.ShowAsAvailablePivotTableStyle: bool
    self.ShowAsAvailableSlicerStyle: bool
    self.ShowAsAvailableTableStyle: bool
    self.ShowAsAvailableTimelineStyle: bool
    self.TableStyleElements: TableStyleElements
    self._Default: str
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Delete(self):  pass

  def Duplicate(self, NewTableStyleName):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __call__(self):  pass

  def __getattr__(self, attr):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class IconSets:
  '''Represents a collection of icon sets used in an icon set conditional formatting rule.

#REMARKS:

The icon set for the conditional format is assigned by using the IconSet property of the IconSetCondition object. You set this property to one of the built-in icon sets by passing one of the constants of the XlIconSet enumeration as an index of the IconSets property of the Workbook object. See the example for details.

The following code example creates a range of numbers representing test scores, and then applies an icon set conditional formatting rule to that range. The type of icon set is then changed from the default icons to a five-arrow icon set. Finally, the threshold type is modified from percentile to a hard-coded number.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following code example creates a range of numbers representing test scores, and then applies an icon set conditional formatting rule to that range. The type of icon set is then changed from the default icons to a five-arrow icon set. Finally, the threshold type is modified from percentile to a hard-coded number.

Sub CreateIconSetCF() 
 
 Dim cfIconSet As IconSetCondition 
 
 'Fill cells with sample data from 1 to 10 
 With ActiveSheet 
 .Range("C1") = 55 
 .Range("C2") = 92 
 .Range("C3") = 88 
 .Range("C4") = 77 
 .Range("C5") = 66 
 .Range("C6") = 93 
 .Range("C7") = 76 
 .Range("C8") = 80 
 .Range("C9") = 79 
 .Range("C10") = 83 
 .Range("C11") = 66 
 .Range("C12") = 74 
 End With 
 
 Range("C1:C12").Select 
 
 'Create an icon set conditional format for the created sample data range 
 Set cfIconSet = Selection.FormatConditions.AddIconSetCondition 
 
 'Change the icon set to a five-arrow icon set 
 cfIconSet.IconSet = ActiveWorkbook.IconSets(xl5Arrows) 
 
 'The IconCriterion collection contains all IconCriteria 
 'By indexing into the collection you can modify each criterion 
 
 With cfIconSet.IconCriteria(1) 
 .Type = xlConditionValueNumber 
 .Value = 0 
 .Operator = 7 
 End With 
 With cfIconSet.IconCriteria(2) 
 .Type = xlConditionValueNumber 
 .Value = 60 
 .Operator = 7 
 End With 
 With cfIconSet.IconCriteria(3) 
 .Type = xlConditionValueNumber 
 .Value = 70 
 .Operator = 7 
 End With 
 With cfIconSet.IconCriteria(4) 
 .Type = xlConditionValueNumber 
 .Value = 80 
 .Operator = 7 
 End With 
 With cfIconSet.IconCriteria(5) 
 .Type = xlConditionValueNumber 
 .Value = 90 
 .Operator = 7 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an IconSets object.

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that specifies the number of icon sets available in the workbook. Read-only.

#SYNTAX:

expression.Count

expression A variable that represents an IconSets object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an IconSets object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an IconSets object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Model:
  def __init__(self):
    self.Application: Application
    '''Returns an Application object that represents the Microsoft Excel application. Read-only.

#SYNTAX:

expression.Application

expression A variable that represents a Model object.

APPLICATION

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: APPLICATION

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: XLCREATOR
    '''Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Model object.

Because the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL.

XLCREATOR

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: XLCREATOR

#REMARKS:

Because the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL.

XLCREATOR

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DataModelConnection: WorkbookConnection
    '''Returns the model WorkbookConnection object from the workbook connections collection that connects to the model.

#SYNTAX:

expression.DataModelConnection

expression A variable that represents a Model object.

WORKBOOKCONNECTION

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: WORKBOOKCONNECTION
    '''

    self.ModelFormatBoolean: ModelFormatBoolean
    '''Returns a ModelFormatBoolean object that represents formatting of type True/False in the data model. Read-only.

#SYNTAX:

expression.ModelFormatBoolean

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelFormatCurrency: ModelFormatCurrency
    '''Returns a ModelFormatCurrency object that represents formatting of type currency in the data model. Read-only.

#SYNTAX:

expression.ModelFormatCurrency

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelFormatDate: ModelFormatDate
    '''Returns a ModelFormatDate object that represents formatting of type date in the data model. Read-only.

#SYNTAX:

expression.ModelFormatDate

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelFormatDecimalNumber: ModelFormatDecimalNumber
    '''Returns a ModelFormatDecimalNumber object that represents formatting of type decimal number in the data model. Read-only.

#SYNTAX:

expression.ModelFormatDecimalNumber

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelFormatGeneral: ModelFormatGeneral
    '''Returns a ModelFormatGeneral object that represents formatting of type general in the data model. Read-only.

#SYNTAX:

expression.ModelFormatGeneral

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelFormatPercentageNumber: ModelFormatPercentageNumber
    '''Returns a ModelFormatPercentageNumber object that represents formatting of type percentage number in the data model. Read-only.

#SYNTAX:

expression.ModelFormatPercentageNumber

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelFormatScientificNumber: ModelFormatScientificNumber
    '''Returns a ModelFormatScientificNumber object that represents formatting of type scientific number in the data model. Read-only.

#SYNTAX:

expression.ModelFormatScientificNumber

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelFormatWholeNumber: ModelFormatWholeNumber
    '''Returns a ModelFormatWholeNumber object that represents formatting of type whole number in the data model. Read-only.

#SYNTAX:

expression.ModelFormatWholeNumber

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelMeasures: ModelMeasures
    '''Returns a ModelMeasures object that represents the collection of model measures in the data model. Read-only.

#SYNTAX:

expression.ModelMeasures

expression A variable that represents a Model object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelRelationships: ModelRelationships
    '''Returns a ModelRelationships object that represents the collection of relationships between data model tables. Read-only.

#SYNTAX:

expression.ModelRelationships

expression A variable that represents a Model object.

MODELRELATIONSHIPS

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: MODELRELATIONSHIPS
    '''

    self.ModelTables: ModelTables
    '''Returns a ModelTables object that represents a collection of tables inside the data model. Read-only.

#SYNTAX:

expression.ModelTables

expression A variable that represents a Model object.

MODELTABLES

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: MODELTABLES
    '''

    self.Name: STRING
    '''Returns a String value representing the name of the Model object. Read-only.

#SYNTAX:

expression.Name

expression A variable that represents a Model object.

STRING

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: STRING
    '''

    self.Parent: _Workbook
    '''Returns an Object that represents the parent object of the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Model object.

OBJECT

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: OBJECT
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def AddConnection(self, ConnectionToDataSource) -> WORKBOOKCONNECTION:
    '''Adds a new WorkbookConnection to the model with the same properties as the one supplied as an argument.

#PARAMETERS:

Name Required/Optional Data type Description

ConnectionToDataSource Required WORKBOOKCONNECTION The Workbook connection.

#RETURN-VALUE: WORKBOOKCONNECTION

#REMARKS:

This method only works on legacy/non-model external connections and will fail with a run-time error if called with an external model connection as its argument. When calling this method, a new model connection is created and it is named the same as the legacy connection with the existing logic for making the name unique applied (integer at the end).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def CreateModelWorkbookConnection(self, ModelTable) -> WORKBOOKCONNECTION:
    '''Returns a WorkbookConnection object of type ModelConnection.

#PARAMETERS:

Name Required/Optional Data type Description

ModelTable Required Variant Either a model table name or a model table object.

#RETURN-VALUE: WORKBOOKCONNECTION

#REMARKS:

This type of connection can only be used by query tables in Excel.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def GetModelFormatCurrency(self, Symbol, DecimalPlaces):  pass

  def GetModelFormatDate(self, FormatString):  pass

  def GetModelFormatDecimalNumber(self, UseThousandSeparator, DecimalPlaces):  pass

  def GetModelFormatPercentageNumber(self, UseThousandSeparator, DecimalPlaces):  pass

  def GetModelFormatScientificNumber(self, DecimalPlaces):  pass

  def GetModelFormatWholeNumber(self, UseThousandSeparator):  pass

  def Initialize(self) -> None:
    '''Initializes the Workbook's data model. This is called by default the first time the model is used.

#RETURN-VALUE: VOID
    '''

  def Refresh(self) -> None:
    '''Refreshes all data sources associated with the model, fully reprocesses the model, and updates all Excel data features associated with the model.

#RETURN-VALUE: VOID
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class PivotTables:
  '''A collection of all the PivotTable objects in the specified workbook.

#REMARKS:

Because PivotTable report programming can be complex, it's generally easiest to record PivotTable report actions and then revise the recorded code.

Use the PivotTables method to return the PivotTables collection. The following example displays the number of PivotTable reports on Sheet3.

Use the PivotTableWizard method to create a new PivotTable report and add it to the collection. The following example creates a new PivotTable report from a Microsoft Excel database (contained in the range A1:C100).

Use PivotTables (index), where index is the PivotTable index number or name, to return a single PivotTable object. The following example makes the Year field a row field in the first PivotTable report on Sheet3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the PivotTables method to return the PivotTables collection. The following example displays the number of PivotTable reports on Sheet3.

MsgBox Worksheets("sheet3").PivotTables.Count

Use the PivotTableWizard method to create a new PivotTable report and add it to the collection. The following example creates a new PivotTable report from a Microsoft Excel database (contained in the range A1:C100).

ActiveSheet.PivotTableWizard xlDatabase, Range("A1:C100")

Use PivotTables (index), where index is the PivotTable index number or name, to return a single PivotTable object. The following example makes the Year field a row field in the first PivotTable report on Sheet3.

Worksheets("sheet3").PivotTables(1) _ 
 .PivotFields("year").Orientation = xlRowField

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a PivotTables object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a PivotTables object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a PivotTables object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a PivotTables object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, PivotCache, TableDestination, TableName, ReadData, DefaultVersion) -> PivotTable:
    '''Adds a new PivotTable report. Returns a PivotTable object.

#PARAMETERS:

Name Required/Optional Data type Description

PivotCache Required PivotCache The PivotTable cache on which the new PivotTable report is based. The cache provides data for the report.

TableDestination Required Variant The cell in the upper-left corner of the PivotTable report's destination range (the range on the worksheet where the resulting report will be placed). You must specify a destination range on the worksheet that contains the PivotTables object specified by expression.

TableName Optional Variant The name of the new PivotTable report.

ReadData Optional Variant True to create a PivotTable cache that contains all records from the external database; this cache can be very large. False to enable setting some of the fields as server-based page fields before the data is actually read.

DefaultVersion Optional Variant The version of Microsoft Excel that the PivotTable was originally created in.

#RETURN-VALUE: A PivotTable object that represents the new PivotTable report.

#EXAMPLE:

This example creates a new PivotTable cache based on an OLAP provider, and then it creates a new PivotTable report based on the cache at cell A1 on the first worksheet.

Dim cnnConn As ADODB.Connection 
Dim rstRecordset As ADODB.Recordset 
Dim cmdCommand As ADODB.Command 
 
' Open the connection. 
Set cnnConn = New ADODB.Connection 
With cnnConn 
 .ConnectionString = _ 
 "Provider=Microsoft.Jet.OLEDB.4.0" 
 .Open "C:\perfdate\record.mdb" 
End With 
 
' Set the command text. 
Set cmdCommand = New ADODB.Command 
Set cmdCommand.ActiveConnection = cnnConn 
With cmdCommand 
 .CommandText = "Select Speed, Pressure, Time From DynoRun" 
 .CommandType = adCmdText 
 .Execute 
End With 
 
' Open the recordset. 
Set rstRecordset = New ADODB.Recordset 
Set rstRecordset.ActiveConnection = cnnConn 
rstRecordset.Open cmdCommand 
 
' Create PivotTable cache and report. 
Set objPivotCache = ActiveWorkbook.PivotCaches.Add( _ 
 SourceType:=xlExternal) 
Set objPivotCache.Recordset = rstRecordset 
 
ActiveSheet.PivotTables.Add _ 
 PivotCache:=objPivotCache, _ 
 TableDestination:=Range("A3"), _ 
 TableName:="Performance" 
 
With ActiveSheet.PivotTables("Performance") 
 .SmallGrid = False 
 With .PivotFields("Pressure") 
 .Orientation = xlRowField 
 .Position = 1 
 End With 
 With .PivotFields("Speed") 
 .Orientation = xlColumnField 
 .Position = 1 
 End With 
 With .PivotFields("Time") 
 .Orientation = xlDataField 
 .Position = 1 
 End With 
End With 
 
' Close the connections and clean up. 
cnnConn.Close 
Set cmdCommand = Nothing 
Set rstRecordSet = Nothing 
Set cnnConn = Nothing

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index) -> PivotTable:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The name or index number for the object.

#RETURN-VALUE: A PivotTable object contained by the collection.

#REMARKS:

The text name of the object is the value of the Name and Value properties.

This example makes the Year field a row field in the first PivotTable report on Sheet3.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example makes the Year field a row field in the first PivotTable report on Sheet3.

Worksheets("sheet3").PivotTables.Item(1) _ 
 .PivotFields("year").Orientation = xlRowField

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class PublishObjects:
  '''A collection of all PublishObject objects in the workbook.

#REMARKS:

Each PublishObject object represents an item in a workbook that has been saved to a webpage and can be refreshed according to values specified by the properties and methods of the object.

Use the PublishObjects property of the Workbook object to return the PublishObjects collection. The following example saves all static PublishObject objects in the active workbook to the webpage.

Use PublishObjects (index), where index is the index number of the specified item in the workbook, to return a single PublishObject object. The following example sets the location where the first item in workbook three is saved.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the PublishObjects property of the Workbook object to return the PublishObjects collection. The following example saves all static PublishObject objects in the active workbook to the webpage.

Set objPObjs = ActiveWorkbook.PublishObjects 
For Each objPO in objPObjs 
 If objPO.HtmlType = xlHTMLStatic Then 
 objPO.Publish 
 End If 
Next objPO

Use PublishObjects (index), where index is the index number of the specified item in the workbook, to return a single PublishObject object. The following example sets the location where the first item in workbook three is saved.

Workbooks(3).PublishObjects(1).FileName = _ 
 "\\myserver\public\finacct\statemnt.htm"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a PublishObjects object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a PublishObjects object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a PublishObjects object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a PublishObjects object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, SourceType, Filename, Sheet, Source, HtmlType, DivID, Title) -> PublishObject:
    '''Creates an object that represents an item in a document saved to a webpage. Such objects facilitate subsequent updates to the webpage while automated changes are being made to the document in Microsoft Excel. Returns a PublishObject object.

#PARAMETERS:

Name Required/Optional Data type Description

SourceType Required XlSourceType The source type.

FileName Optional Variant String. The URL (on the intranet or the web) or path (local or network) to which the source object was saved.

Sheet Optional Variant The name of the worksheet that was saved as a webpage.

Source Optional Variant A unique name used to identify items that have one of the following constants as their SourceType argument: xlSourceAutoFilter, xlSourceChart, xlSourcePivotTable, xlSourcePrintArea, xlSourceQuery, or xlSourceRange.If SourceType is xlSourceRange, Source specifies a range, which can be a defined name. If SourceType is xlSourceChart, xlSourcePivotTable, or xlSourceQuery, Source specifies the name of a chart, PivotTable report, or query table.

HtmlType Optional Variant Specifies whether the item is saved as an interactive Microsoft Office Web component or as static text and images. Can be one of the XlHTMLType constants: xlHtmlCalc, xlHtmlChart, xlHtmlList, or xlHtmlStatic.

DivID Optional Variant The unique identifier used in the HTML DIV tag to identify the item on the webpage.

Title Optional Variant The title of the webpage.

#RETURN-VALUE: A PublishObject object that represents the new item.

#EXAMPLE:

This example saves the range D5:D9 on the First Quarter worksheet in the active workbook to a webpage called Stockreport.htm.

With ActiveWorkbook.PublishObjects.Add(SourceType:=xlSourceRange, _ 
    Filename:="\\Server\Stockreport.htm", Sheet:="First Quarter", Source:="$G$3:$H$6", _ 
    HtmlType:=xlHtmlStatic, DivID:="Book1_4170") 
        .Publish (True) 
        .AutoRepublish = False 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Delete(self) -> None:
    '''Deletes the object.'''

  def Item(self, Index):  pass

  def Publish(self) -> None:
    '''Saves a copy of the item or items in the spreadsheet that have been added to the PublishObjects collection to a webpage.'''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Queries:
  '''The collection of WorkbookQuery objects introduced in Office 2016.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Queries object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: integer
    '''Returns an integer that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Queries object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Queries object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FastCombine: bool
    '''True to enable the fast combine feature, as long as the workbook is open. Read/write Boolean.

#SYNTAX:

expression.FastCombine

expression A variable that represents a Queries object.

For silent refresh operations, use the FastCombine property in conjunction with the Application.DisplayAlerts property set to False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

For silent refresh operations, use the FastCombine property in conjunction with the Application.DisplayAlerts property set to False.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Queries object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name, Formula, Description) -> WorkbookQuery:
    '''Adds a new WorkbookQuery object to the Queries collection.

#PARAMETERS:

Name Required/Optional Data type Description

Name Required String The name of the query.

Formula Required String The Power Query M formula for the new query.

Description Optional Variant The description of the query.

#RETURN-VALUE: WorkbookQuery

#EXAMPLE:

The following example shows how to add a query to a workbook from an existing CSV file.

Dim myConnection As WorkbookConnection
Dim mFormula As String
mFormula = _
"let Source = Csv.Document(File.Contents(""C:\data.txt""),null,""#(tab)"",null,1252) in Source"
query1 = ActiveWorkbook.Queries.Add("query1", mFormula)

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, NameOrIndex) -> WorkbookQuery:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

NameOrIndex Required Variant The name or index number of the item.

#RETURN-VALUE: WorkbookQuery
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, NameOrIndex):  pass

  def __call__(self, NameOrIndex):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Research:
  def __init__(self):
    self.Application: Application
    self.Creator: int
    self.Parent: _Workbook
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def IsResearchService(self, ServiceID):  pass

  def Query(self, ServiceID, QueryString, QueryLanguage, UseSelection, LaunchQuery):  pass

  def SetLanguagePair(self, LanguageFrom, LanguageTo):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class RoutingSlip:
  def __init__(self):
    self.Application: Application
    self.Creator: int
    self.Parent: _Workbook
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def GetRecipients(self, Index):  pass

  def Reset(self):  pass

  def SetRecipients(self, Index, arg1):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # Delivery:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 RoutingSlip 的 Delivery 属性', 'xlmain11.chm', 0, -2146827284), None)
    # Message:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 RoutingSlip 的 Message 属性', 'xlmain11.chm', 0, -2146827284), None)
    # Recipients:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 RoutingSlip 的 Recipients 属性', 'xlmain11.chm', 0, -2146827284), None)
    # ReturnWhenDone:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 RoutingSlip 的 ReturnWhenDone 属性', 'xlmain11.chm', 0, -2146827284), None)
    # Status:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 RoutingSlip 的 Status 属性', 'xlmain11.chm', 0, -2146827284), None)
    # Subject:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 RoutingSlip 的 Subject 属性', 'xlmain11.chm', 0, -2146827284), None)
    # TrackStatus:  (-2147352567, '发生意外。', (0, 'Microsoft Excel', '不能取得类 RoutingSlip 的 TrackStatus 属性', 'xlmain11.chm', 0, -2146827284), None)



class SlicerCaches:
  '''Represents the collection of slicer caches associated with the specified workbook.

#REMARKS:

Use the Item property of the SlicerCaches collection to return a SlicerCache object associated with the specified Workbook object. A SlicerCache object can be retrieved by using either the value of the Index property or the Name property of the specified object.

The following code example retrieves the SlicerCache object that represents the slicer cache associated with the Country slicer.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following code example retrieves the SlicerCache object that represents the slicer cache associated with the Country slicer.

ActiveWorkbook.SlicerCaches("Slicer_Country")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a SlicerCaches object.

Application

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Application
    '''

    self.Count: int
    '''Returns the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that returns a SlicerCaches object.

Long

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Long
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a SlicerCaches object.

Long

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Long

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent Workbook object for the collection. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a SlicerCaches object.

Workbook

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#RETRUN-VALUE: Workbook
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Source, SourceField, Name) -> SlicerCache:
    '''Adds a new SlicerCache object to the collection.

#PARAMETERS:

Name Required/Optional Data type Description

Source Required Variant The data source that the new SlicerCache object will be based on. The argument passed to the Source parameter can be a WorkbookConnection object, a PivotTable object, or a string.If a PivotTable object is passed, the associated PivotCache object is used as the data source. If a string is passed, it is interpreted as the name of a WorkbookConnection object, and if no such WorkbookConnection object exists, a run-time error is generated.

SourceField Required Variant The name of the field in the data source to filter by. For non-OLAP data sources, use the PivotField object from the PivotCache object that the slicer is based on, or the unique name of that object (the value of the PivotField.Name property).For OLAP data sources, use the MDX unique name of the hierarchy that the SlicerCache is based on. You can also specify a level of the OLAP hierarchy, and Excel will use the corresponding hierarchy.

Name Optional Variant The name that Excel uses to reference the slicer cache (the value of the SlicerCache.Name property). If omitted, Excel will generate a name.By default, Excel concatenates "Slicer_" with the value of the PivotField.Caption property for slicers with non-OLAP data sources, or with the value of the CubeField.Caption property for slicers with OLAP data sources (replacing any spaces with "_").If required to make the name unique in the workbook namespace, Excel adds an integer to the end of the generated name. If you specify a name that already exists in the workbook namespace, the Add method will fail.

SlicerCacheType Optional XlSlicerCacheType Designates the type of slicer or slicer cache.

#RETURN-VALUE: SlicerCache

#EXAMPLE:

The following code example adds a slicer cache based on the Customer Geography OLAP hierarchy.

ActiveWorkbook.SlicerCaches.Add(ActiveCell.PivotTable, _ 
 "[Customer].[Customer Geography]")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Add2(self, Source, SourceField, Name, SlicerCacheType):  pass

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Styles:
  '''A collection of all the Style objects in the specified or active workbook.

#REMARKS:

Each Style object represents a style description for a range. The Style object contains all style attributes (font, number format, alignment, and so on) as properties. There are several built-in styles—including Normal, Currency, and Percent.

Use the Styles property to return the Styles collection. The following example creates a list of style names on worksheet one in the active workbook.

Use the Add method to create a new style and add it to the collection. The following example creates a new style based on the Normal style, modifies the border and font, and then applies the new style to cells A25:A30.

Use Styles (index), where index is the style index number or name, to return a single Style object from the workbook Styles collection. The following example changes the Normal style for the active workbook by setting its Bold property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the Styles property to return the Styles collection. The following example creates a list of style names on worksheet one in the active workbook.

For i = 1 To ActiveWorkbook.Styles.Count 
 Worksheets(1).Cells(i, 1) = ActiveWorkbook.Styles(i).Name 
Next

Use the Add method to create a new style and add it to the collection. The following example creates a new style based on the Normal style, modifies the border and font, and then applies the new style to cells A25:A30.

With ActiveWorkbook.Styles.Add(Name:="Bookman Top Border") 
 .Borders(xlTop).LineStyle = xlDouble 
 .Font.Bold = True 
 .Font.Name = "Bookman" 
End With 
Worksheets(1).Range("A25:A30").Style = "Bookman Top Border"

Use Styles (index), where index is the style index number or name, to return a single Style object from the workbook Styles collection. The following example changes the Normal style for the active workbook by setting its Bold property.

ActiveWorkbook.Styles("Normal").Font.Bold = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a Styles object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a Styles object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a Styles object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a Styles object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name, BasedOn) -> Style:
    '''Creates a new style and adds it to the list of styles that are available for the current workbook.

#PARAMETERS:

Name Required/Optional Data type Description

Name Required String The new style name.

#RETURN-VALUE: A Style object that represents the new style.

#EXAMPLE:

This example defines a new style based on cell A1 on Sheet1.

With ActiveWorkbook.Styles.Add("theNewStyle") 
 .IncludeNumber = False 
 .IncludeFont = True 
 .IncludeAlignment = False 
 .IncludeBorder = False 
 .IncludePatterns = False 
 .IncludeProtection = False 
 .Font.Name = "Arial" 
 .Font.Size = 18 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def Merge(self, Workbook) -> VBA_Variant:
    '''Merges the styles from another workbook into the Styles collection.

#PARAMETERS:

Name Required/Optional Data type Description

Workbook Required Variant A Workbook object that represents the workbook that contains styles to be merged.

#RETURN-VALUE: Variant

#EXAMPLE:

This example merges the styles from the workbook Template.xls into the active workbook.

ActiveWorkbook.Styles.Merge Workbook:=Workbooks("TEMPLATE.XLS")

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class TableStyles:
  '''Represents styles that can be applied to a table.

#REMARKS:

Table styles provide a way to format an entire table or PivotTable. Table styles replace the existing auto format feature for formatting an entire table.

Table styles differ from auto format in the following ways:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a TableStyles object.

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns the number of objects in the collection. Read-only Long.

#SYNTAX:

expression.Count

expression A variable that represents a TableStyles object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a TableStyles object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a TableStyles object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, TableStyleName) -> TableStyle:
    '''Creates a new TableStyle object and adds it to the collection.

#PARAMETERS:

Name Required/Optional Data type Description

TableStyleName Required String The name of the table style.

#RETURN-VALUE: TableStyle
    '''

  def Item(self, Index) -> TableStyle:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The name or index number for the object.

#RETURN-VALUE: TableStyle
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class WebOptions:
  '''Contains workbook-level attributes used by Microsoft Excel when you save a document as a webpage or open a webpage.

#REMARKS:

You can return or set attributes either at the application (global) level or at the workbook level. (Note that attribute values can be different from one workbook to another, depending on the attribute value at the time the workbook was saved.) Workbook-level attribute settings override application-level attribute settings. Application-level attributes are contained in the DefaultWebOptions object.

Use the WebOptions property of the Workbook object to return the WebOptions object.

The following example checks to see whether PNG (Portable Network Graphics) is allowed as an image format, and then sets the strImageFileType variable accordingly.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

Use the WebOptions property of the Workbook object to return the WebOptions object.

The following example checks to see whether PNG (Portable Network Graphics) is allowed as an image format, and then sets the strImageFileType variable accordingly.

Set objAppWebOptions = Workbooks(1).WebOptions 
With objAppWebOptions 
 If .AllowPNG = True Then 
 strImageFileType = "PNG" 
 Else 
 strImageFileType = "JPG" 
 End If 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.AllowPNG: bool
    '''True if Portable Network Graphics (PNG) is allowed as an image format when you save documents as a webpage. False if PNG is not allowed as an output format. The default value is False. Read/write Boolean.

#SYNTAX:

expression.AllowPNG

expression A variable that represents a WebOptions object.

If you save images in the PNG format as opposed to any other file format, you might improve the image quality or reduce the size of those image files, and therefore decrease the download time, assuming that the web browsers that you are targeting support the PNG format.

This example enables PNG as an output format for the first workbook.

Alternatively, PNG can be enabled as the global default for the application for newly created documents.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you save images in the PNG format as opposed to any other file format, you might improve the image quality or reduce the size of those image files, and therefore decrease the download time, assuming that the web browsers that you are targeting support the PNG format.

This example enables PNG as an output format for the first workbook.

Alternatively, PNG can be enabled as the global default for the application for newly created documents.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables PNG as an output format for the first workbook.

Application.Workbooks(1).WebOptions.AllowPNG = True

Alternatively, PNG can be enabled as the global default for the application for newly created documents.

Application.DefaultWebOptions.AllowPNG = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a WebOptions object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a WebOptions object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DownloadComponents: bool
    '''True if the necessary Microsoft Office Web components are downloaded when you view the saved document in a web browser, but only if the components are not already installed. False if the components are not downloaded. The default value is False. Read/write Boolean.

#SYNTAX:

expression.DownloadComponents

expression A variable that represents a WebOptions object.

You can set the LocationOfComponents property to a central URL (on the intranet or web) or path (local or network) to a location from which authorized users can download components when viewing your saved document. The path must be valid and must point to a location that contains the necessary components, and the user must have a valid Microsoft Office license.

Office Web components add interactivity to documents that you save as webpages. If you view a webpage in a browser on a computer that does not have the components installed, the interactive portions of the page will be static.

This example allows the Office Web components to be downloaded with the specified webpage, if they are not already installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can set the LocationOfComponents property to a central URL (on the intranet or web) or path (local or network) to a location from which authorized users can download components when viewing your saved document. The path must be valid and must point to a location that contains the necessary components, and the user must have a valid Microsoft Office license.

Office Web components add interactivity to documents that you save as webpages. If you view a webpage in a browser on a computer that does not have the components installed, the interactive portions of the page will be static.

This example allows the Office Web components to be downloaded with the specified webpage, if they are not already installed.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example allows the Office Web components to be downloaded with the specified webpage, if they are not already installed.

Application.DefaultWebOptions.DownloadComponents = True 
Application.DefaultWebOptions.LocationOfComponents = _ 
 Application.Path & Application.PathSeparator & "foo"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Encoding: MsoEncoding
    '''Returns or sets the document encoding (code page or character set) to be used by the web browser when you view the saved document. The default is the system code page. Read/write MsoEncoding.

#SYNTAX:

expression.Encoding

expression A variable that represents a WebOptions object.

You cannot use any of the constants that have the suffix AutoDetect. These constants are used by the ReloadAs method.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You cannot use any of the constants that have the suffix AutoDetect. These constants are used by the ReloadAs method.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FolderSuffix: str
    '''Returns the folder suffix that Microsoft Excel uses when you save a document as a webpage, use long file names, and choose to save supporting files in a separate folder (that is, if the UseLongFileNames and OrganizeInFolder properties are set to True). Read-only String.

#SYNTAX:

expression.FolderSuffix

expression A variable that represents a WebOptions object.

Newly created documents use the suffix returned by the FolderSuffix property of the DefaultWebOptions object. The value of the FolderSuffix property of the WebOptions object may differ from that of the DefaultWebOptions object if the document was previously edited in a different language version of Microsoft Excel. Use the UseDefaultFolderSuffix method to change the suffix to the language that you are currently using in Microsoft Office.

By default, the name of the supporting folder is the name of the webpage plus an underscore (_), a period (.), or a hyphen (-) and the word "files" (appearing in the language of the version of Excel in which the file was saved as a webpage). For example, suppose that you use the Dutch language version of Excel to save a file called Page1 as a webpage. The default name of the supporting folder is Page1_bestanden.

The following table lists each language version of Office, and gives its corresponding LanguageID property value and folder suffix. For the languages that are not listed in the table, the suffix .files is used.

This example returns the folder suffix used by the first workbook. The suffix is returned in the string variable strFolderSuffix.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Newly created documents use the suffix returned by the FolderSuffix property of the DefaultWebOptions object. The value of the FolderSuffix property of the WebOptions object may differ from that of the DefaultWebOptions object if the document was previously edited in a different language version of Microsoft Excel. Use the UseDefaultFolderSuffix method to change the suffix to the language that you are currently using in Microsoft Office.

By default, the name of the supporting folder is the name of the webpage plus an underscore (_), a period (.), or a hyphen (-) and the word "files" (appearing in the language of the version of Excel in which the file was saved as a webpage). For example, suppose that you use the Dutch language version of Excel to save a file called Page1 as a webpage. The default name of the supporting folder is Page1_bestanden.

The following table lists each language version of Office, and gives its corresponding LanguageID property value and folder suffix. For the languages that are not listed in the table, the suffix .files is used.

This example returns the folder suffix used by the first workbook. The suffix is returned in the string variable strFolderSuffix.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example returns the folder suffix used by the first workbook. The suffix is returned in the string variable strFolderSuffix.

strFolderSuffix = Workbooks(1).WebOptions.FolderSuffix

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.LocationOfComponents: str
    '''Returns or sets the central URL (on the intranet or web) or path (local or network) to the location from which authorized users can download Microsoft Office Web components when viewing your saved document. The default value is the local or network installation path for Microsoft Office. Read/write String.

#SYNTAX:

expression.LocationOfComponents

expression A variable that represents a WebOptions object.

Office Web components are automatically downloaded with the specified webpage if the DownloadComponents property is set to True, the components are not already installed, the path is valid and points to a location that contains the necessary components, and the user has a valid Microsoft Office license.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Office Web components are automatically downloaded with the specified webpage if the DownloadComponents property is set to True, the components are not already installed, the path is valid and points to a location that contains the necessary components, and the user has a valid Microsoft Office license.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.OrganizeInFolder: bool
    '''True if all supporting files, such as background textures and graphics, are organized in a separate folder when you save the specified document as a webpage. False if supporting files are saved in the same folder as the webpage. The default value is True. Read/write Boolean.

#SYNTAX:

expression.OrganizeInFolder

expression A variable that represents a WebOptions object.

The new folder is created in the folder where you have saved the webpage, and is named after the document. If long file names are used, a suffix is added to the folder name. The FolderSuffix property returns the folder suffix for the language support that you have selected or installed, or the default folder suffix.

If you save a document that was previously saved with the OrganizeInFolder property set to a different value, Microsoft Excel automatically moves the supporting files into or out of the folder, as appropriate.

If you don't use long file names (that is, if the UseLongFileNames property is set to False), Microsoft Excel automatically saves any supporting files in a separate folder. The files cannot be saved in the same folder as the webpage.

This example specifies that all supporting files are saved in the same folder when the document is saved as a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

The new folder is created in the folder where you have saved the webpage, and is named after the document. If long file names are used, a suffix is added to the folder name. The FolderSuffix property returns the folder suffix for the language support that you have selected or installed, or the default folder suffix.

If you save a document that was previously saved with the OrganizeInFolder property set to a different value, Microsoft Excel automatically moves the supporting files into or out of the folder, as appropriate.

If you don't use long file names (that is, if the UseLongFileNames property is set to False), Microsoft Excel automatically saves any supporting files in a separate folder. The files cannot be saved in the same folder as the webpage.

This example specifies that all supporting files are saved in the same folder when the document is saved as a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example specifies that all supporting files are saved in the same folder when the document is saved as a webpage.

Application.DefaultWebOptions.OrganizeInFolder = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a WebOptions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.PixelsPerInch: int
    '''Returns or sets the density (pixels per inch) of graphics images and table cells on a webpage. The range of settings is usually from 19 to 480, and common settings for popular screen sizes are 72, 96, and 120. The default setting is 96. Read/write Long.

#SYNTAX:

expression.PixelsPerInch

expression A variable that represents a WebOptions object.

This property determines the size of the images and cells on the specified webpage relative to the size of text whenever you view the saved document in a web browser. The physical dimensions of the resulting image or cell are the result of the original dimensions (in inches) multiplied by the number of pixels per inch.

You use the ScreenSize property to set the optimum screen size for the targeted web browsers.

This example sets the pixel density depending on the target screen size of the browser. For 800x600 pixel screens, the density is 72 pixels per inch. For 1024x768 pixel screens, the density is 96 pixels per inch. For all other cases, use a density of 120 pixels per inch.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

This property determines the size of the images and cells on the specified webpage relative to the size of text whenever you view the saved document in a web browser. The physical dimensions of the resulting image or cell are the result of the original dimensions (in inches) multiplied by the number of pixels per inch.

You use the ScreenSize property to set the optimum screen size for the targeted web browsers.

This example sets the pixel density depending on the target screen size of the browser. For 800x600 pixel screens, the density is 72 pixels per inch. For 1024x768 pixel screens, the density is 96 pixels per inch. For all other cases, use a density of 120 pixels per inch.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the pixel density depending on the target screen size of the browser. For 800x600 pixel screens, the density is 72 pixels per inch. For 1024x768 pixel screens, the density is 96 pixels per inch. For all other cases, use a density of 120 pixels per inch.

With ThisWorkbook.WebOptions 
 Select Case .ScreenSize 
 Case msoScreenSize800x600 
 .PixelsPerInch = 72 
 Case msoScreenSize1024x768 
 .PixelsPerInch = 96 
 Case Else 
 .PixelsPerInch = 120 
 End Select 
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RelyOnCSS: bool
    '''True if cascading style sheets (CSS) are used for font formatting when you view a saved document in a web browser. Microsoft Excel creates a cascading style sheet file and saves it either to the specified folder or to the same folder as your webpage, depending on the value of the OrganizeInFolder property. False if HTML <FONT> tags and cascading style sheets are used. The default value is True. Read/write Boolean.

#SYNTAX:

expression.RelyOnCSS

expression A variable that represents a WebOptions object.

You should set this property to True if your web browser supports cascading style sheets because this gives you more precise layout and formatting control on your webpage and makes it look more like your document (as it appears in Microsoft Excel).

This example enables the use of cascading style sheets as the global default for the application.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You should set this property to True if your web browser supports cascading style sheets because this gives you more precise layout and formatting control on your webpage and makes it look more like your document (as it appears in Microsoft Excel).

This example enables the use of cascading style sheets as the global default for the application.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example enables the use of cascading style sheets as the global default for the application.

ThisWorkbook.WebOptions.RelyOnCSS = True

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RelyOnVML: bool
    '''True if image files are not generated from drawing objects when you save a document as a webpage. False if images are generated. The default value is False. Read/write Boolean.

#SYNTAX:

expression.RelyOnVML

expression A variable that represents a WebOptions object.

You can reduce file sizes by not generating images for drawing objects, if your web browser supports Vector Markup Language (VML). For example, Microsoft Internet Explorer 5 supports this feature, and you should set the RelyOnVML property to True if you are targeting this browser. For browsers that don't support VML, the image will not appear when you view a webpage saved with this property enabled.

For example, you should not generate images if your webpage uses image files that you have generated earlier, and if the location where you save the document is different from the final location of the page on the web server.

This example specifies that images are generated when saving the worksheet to a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

You can reduce file sizes by not generating images for drawing objects, if your web browser supports Vector Markup Language (VML). For example, Microsoft Internet Explorer 5 supports this feature, and you should set the RelyOnVML property to True if you are targeting this browser. For browsers that don't support VML, the image will not appear when you view a webpage saved with this property enabled.

For example, you should not generate images if your webpage uses image files that you have generated earlier, and if the location where you save the document is different from the final location of the page on the web server.

This example specifies that images are generated when saving the worksheet to a webpage.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example specifies that images are generated when saving the worksheet to a webpage.

Workbooks(1).WebOptions.RelyOnVML = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ScreenSize: MsoScreenSize
    '''Returns or sets the ideal minimum screen size (width by height, in pixels) that you should use when viewing the saved document in a web browser. Can be one of the MsoScreenSize constants. The default constant is msoScreenSize800x600. Read/write MsoScreenSize.

#SYNTAX:

expression.ScreenSize

expression A variable that represents a WebOptions object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.TargetBrowser: MsoTargetBrowser
    '''Returns or sets an MsoTargetBrowser constant indicating the browser version. Read/write.

#SYNTAX:

expression.TargetBrowser

expression A variable that represents a WebOptions object.

In this example, Microsoft Excel determines if the browser version for web options is Internet Explorer 5 and notifies the user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel determines if the browser version for web options is Internet Explorer 5 and notifies the user.

Sub CheckWebOptions() 
 
    Dim wkbOne As Workbook 
 
    Set wkbOne = Application.Workbooks(1) 
 
    ' Determine if IE5 is the target browser. 
    If wkbOne.WebOptions.TargetBrowser = msoTargetBrowserIE5 Then 
        MsgBox "The target browser is IE5 or later." 
    Else 
        MsgBox "The target browser is not IE5 or later." 
    End If 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseLongFileNames: bool
    '''True if long file names are used when you save the document as a webpage. False if long file names are not used and the DOS file name format (8.3) is used. The default value is True. Read/write Boolean.

#SYNTAX:

expression.UseLongFileNames

expression A variable that represents a WebOptions object.

If you don't use long file names and your document has supporting files, Microsoft Excel automatically organizes those files in a separate folder. Otherwise, use the OrganizeInFolder property to determine whether supporting files are organized in a separate folder.

This example disallows the use of long file names as the global default for the application.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If you don't use long file names and your document has supporting files, Microsoft Excel automatically organizes those files in a separate folder. Otherwise, use the OrganizeInFolder property to determine whether supporting files are organized in a separate folder.

This example disallows the use of long file names as the global default for the application.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example disallows the use of long file names as the global default for the application.

Application.DefaultWebOptions.UseLongFileNames = False

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def UseDefaultFolderSuffix(self) -> None:
    '''Sets the folder suffix for the specified document to the default suffix for the language support that you have selected or installed.

#REMARKS:

Microsoft Excel uses the folder suffix when you save a document as a webpage, use long file names, and choose to save supporting files in a separate folder (that is, if the UseLongFileNames and OrganizeInFolder properties are set to True).

The suffix appears in the folder name after the document name. For example, if the document is called Book1 and the language is English, the folder name is Book1_files. The available folder suffixes are listed in the FolderSuffix property topic.

This example sets the folder suffix for the first workbook to the default suffix.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sets the folder suffix for the first workbook to the default suffix.

Workbooks(1).WebOptions.UseDefaultFolderSuffix

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class XmlMaps:
  '''Represents the collection of XmlMap objects that have been added to a workbook.

#EXAMPLE:

Use the Add method to add an XML map to a workbook.

Sub AddXmlMap() 
 Dim strSchemaLocation As String 
 
 strSchemaLocation = "https://example.microsoft.com/schemas/CustomerData.xsd" 
 ActiveWorkbook.XmlMaps.Add strSchemaLocation, "Root" 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an XmlMaps object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents an XmlMaps object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an XmlMaps object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an XmlMaps object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Schema, RootElementName) -> XmlMap:
    '''Adds an XML map to the specified workbook.

#PARAMETERS:

Name Required/Optional Data type Description

Schema Required String The schema to be added as an XML map. The string can be a path to a schema file, or the schema itself. The path can be specified in the Universal Naming Convention (UNC) or Uniform Resource Locator (URL) format.

RootElementName Optional Variant The name of the root element. This argument can be ignored if the schema contains only one root element.

#RETURN-VALUE: An XmlMap object that represents the new XML map.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class XmlNamespaces:
  '''Represents the collection of XmlNamespace objects in a workbook.

#REMARKS:

Use the Item method to access a particular XmlNamespace object.

Use the Value property to return a String that lists the namespaces that have been added to a workbook.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents an XmlNamespaces object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents an XmlNamespaces object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents an XmlNamespaces object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents an XmlNamespaces object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Value: str
    '''Returns a String value that represents the XML namespaces that have been added to the workbook.

#SYNTAX:

expression.Value

expression A variable that represents an XmlNamespaces object.

If the workbook contains more than one namespace, the namespaces are separated by a blank space in the string returned by the Value property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the workbook contains more than one namespace, the namespaces are separated by a blank space in the string returned by the Value property.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def InstallManifest(self, Path, InstallForAllUsers) -> None:
    '''Installs the specified XML expansion pack on the user's computer, making an XML smart document solution available to one or more users.

#PARAMETERS:

Name Required/Optional Data type Description

Path Required String The path and file name of the XML expansion pack.

InstallForAllUsers Optional Variant True installs the XML expansion pack and makes it available to all users on a machine. False makes the XML expansion pack available for the current user only. The default is False.

#REMARKS:

For security purposes, you cannot install an unsigned manifest. For more information about manifests, see the Smart Document Software Development Kit (SDK)).

The following example installs the SimpleSample smart document solution on the user's computer and makes it available only to the current user.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example installs the SimpleSample smart document solution on the user's computer and makes it available only to the current user.

Application.XMLNamespaces.InstallManifest _ 
 "https://smartdocuments/simplesample/manifest.xml"

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class AllowEditRanges:
  '''A collection of all the AllowEditRange objects that represent the cells that can be edited on a protected worksheet.

#REMARKS:

Use the AllowEditRanges property of the Protection object to return an AllowEditRanges collection.

After an AllowEditRanges collection has been returned, you can use the Add method to add a range that can be edited on a protected worksheet.

In this example, Microsoft Excel allows edits to range A1:A4 on the active worksheet, and then notifies the user of the title and address of the specified range.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

In this example, Microsoft Excel allows edits to range A1:A4 on the active worksheet, and then notifies the user of the title and address of the specified range.

Sub UseAllowEditRanges() 
 
 Dim wksOne As Worksheet 
 Dim wksPassword As String 
 
 Set wksOne = Application.ActiveSheet 
 
 ' Unprotect worksheet. 
 wksOne.Unprotect 
 
 wksPassword = InputBox ("Enter password for the worksheet") 
 
 ' Establish a range that can allow edits 
 ' on the protected worksheet. 
 wksOne.Protection.AllowEditRanges.Add _ 
 Title:="Classified", _ 
 Range:=Range("A1:A4"), _ 
 Password:=wksPassword 
 
 ' Notify the user 
 ' the title and address of the range. 
 With wksOne.Protection.AllowEditRanges.Item(1) 
 MsgBox "Title of range: " & .Title 
 MsgBox "Address of range: " & .Range.Address 
 End With 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents an AllowEditRanges object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Title, Range, Password) -> AllowEditRange:
    '''Adds a range that can be edited on a protected worksheet. Returns an AllowEditRange object.

#PARAMETERS:

Name Required/Optional Data type Description

Title Required String The title of the range.

Range Required Range Range object. The range allowed to be edited.

Password Optional Variant The password for the range.

#RETURN-VALUE: An AllowEditRange object that represents the range.

#EXAMPLE:

This example allows edits to range A1:A4 on the active worksheet, notifies the user, changes the password for this specified range, and then notifies the user of this change.

Sub UseChangePassword() 
 
 Dim wksOne As Worksheet 
 
 Set wksOne = Application.ActiveSheet 
 
 ' Protect the worksheet. 
 wksOne.Protect 
 
 ' Establish a range that can allow edits 
 ' on the protected worksheet. 
 wksOne.Protection.AllowEditRanges.Add _ 
 Title:="Classified", _ 
 Range:=Range("A1:A4"), _ 
 Password:="secret" 
 
 MsgBox "Cells A1 to A4 can be edited on the protected worksheet." 
 
 ' Change the password. 
 wksOne.Protection.AllowEditRanges(1).ChangePassword _ 
 Password:="moresecret" 
 
 MsgBox "The password for these cells has been changed." 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class SortFields:
  '''The SortFields collection is a collection of SortField objects. It allows developers to store a sort state on workbooks, lists, and autofilters.

#REMARKS:

The object contains properties to add, count, sort, and remove SortField objects.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

ActiveWorksheet.SortFields.Add Key:=Range("A1"), Order:=xlDescending 
ActiveWorksheet.SortFields.Add Key:=Range("B1"), Order:=xlDescending 
ActiveWorksheet.SortFields.Sort Header:=xlGuess

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a SortFields object.

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns the number of objects in the collection. Read-only Long.

#SYNTAX:

expression.Count

expression A variable that represents a SortFields object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a SortFields object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Sort
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a SortFields object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Key, SortOn, Order, CustomOrder, DataOption) -> SortField:
    '''Creates a new sort field and returns a SortFields object.

#PARAMETERS:

Name Required/Optional Data type Description

Key Required Range Specifies a key value for the sort.

SortOn Optional Variant The field to sort on.

Order Optional Variant Specifies the sort order.

CustomOrder Optional Variant Specifies if a custom sort order should be used.

DataOption Optional Variant Specifies the data option.

#RETURN-VALUE: SortField

#REMARKS:

This API does not include support for data types, such as Geography or Stocks. To define a sort order based off a SubField of one of these types, see the Add2 method.

This example sorts a table, Table1 on Sheet1, by Column1 in ascending order.

The Clear method is called before to ensure that the previous sort is cleared so that a new one can be applied.

The Sort object is called to apply the added sort to Table1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sorts a table, Table1 on Sheet1, by Column1 in ascending order.

The Clear method is called before to ensure that the previous sort is cleared so that a new one can be applied.

The Sort object is called to apply the added sort to Table1.

ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort.SortFields.Add _
 Key:=Range("Table1[[#All],[Column1]]"), _
 SortOn:=xlSortOnValues, _
 Order:=xlAscending, _
 DataOption:=xlSortNormal
With ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort
 .Header = xlYes
 .MatchCase = False
 .Orientation = xlTopToBottom
 .SortMethod = xlPinYin
 .Apply
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Add2(self, Key, SortOn, Order, CustomOrder, DataOption, SubField) -> SortField:
    '''Creates a new sort field and returns a SortFields object that can optionally sort data types with the SubField defined.

#PARAMETERS:

Name Required/Optional Data type Description

Key Required Range Specifies a key value for the sort.

SortOn Optional Variant The field to sort on.

Order Optional Variant Specifies the sort order.

CustomOrder Optional Variant Specifies if a custom sort order should be used.

DataOption Optional Variant Specifies the data option.

SubField Optional Variant Specifies the field to sort on for a data type (such as Population for Geography or Volume for Stocks).

#RETURN-VALUE: SortField

#REMARKS:

This API includes support for sorting off a SubField from data types, such as Geography or Stocks. You can also use the Add method if sorting by a data type is not needed.

Unlike in formulas, SubFields don't require brackets to include spaces.

This example sorts a table, Table1 on Sheet1, by Column1 in ascending order based off the SubField Population on Geography data types.

The Clear method is called before to ensure that the previous sort is cleared so that a new one can be applied.

The Sort object is called to apply the added sort to Table1.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example sorts a table, Table1 on Sheet1, by Column1 in ascending order based off the SubField Population on Geography data types.

The Clear method is called before to ensure that the previous sort is cleared so that a new one can be applied.

The Sort object is called to apply the added sort to Table1.

ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort.SortFields.Add2 _
 Key:=Range("Table1[[#All],[Column1]]"), _
 SortOn:=xlSortOnValues, _
 Order:=xlAscending, _
 DataOption:=xlSortNormal, _
 SubField:="Population"
With ActiveWorkbook.Worksheets("Sheet1").ListObjects("Table1").Sort
 .Header = xlYes
 .MatchCase = False
 .Orientation = xlTopToBottom
 .SortMethod = xlPinYin
 .Apply
End With

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Clear(self) -> None:
    '''Clears all the SortFields objects.'''

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class HeaderFooter:
  def __init__(self):
    self.Picture: Graphic
    self.Text: str
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class TableStyleElements:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.Parent: TableStyle
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class WorkbookConnection:
  '''A connection is a set of information needed to obtain data from an external data source other than a Microsoft Excel workbook.

#REMARKS:

Connections can be stored within an Excel workbook. When the workbook is opened, Excel creates an in-memory copy of the connection that is referred to as the connection object. A connection object contains information such as the name of the server and the name of the object to be opened on that server.

Optionally, the connection object may also include authentication credentials and/or a command that is to be passed to the server and executed (example: a SELECT statement to be executed by SQL Server).

A connection may also be stored in a separate connection file. Most connections in an Excel workbook include a pointer to an external connection file. Connection files have extensions that clearly label them as connection files (*.ODC, *.IQY, etc.) and may be located on the user's local machine or in other well-known or trusted locations such as WSS (Data Connection Library), or other corporate servers.

Connection files enable multiple users within the same organization to re-use connections. Network administrators are able to change the way the entire organization connects to a back-end data source by changing a single connection file. A connection file is not always required when connecting to an external data source.

Connection names are strings that uniquely identify connections within the workbook in which they are used. There are other properties of a connection that are not unique. Whenever a formula in Excel takes an argument that is a connection, it will be sufficient to refer to the name of that connection, either directly (as a string) or indirectly (by referring to a cell that contains the connection name as a string).

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a WorkbookConnection object.

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

Use this property with an OLE Automation object to return the application of that object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a WorkbookConnection object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Description: str
    '''Returns or sets a brief description for a WorkbookConnection object. Read/write String.

#SYNTAX:

expression.Description

expression A variable that represents a WorkbookConnection object.

In the Connection Properties dialog box, the user may edit the name of the connection and/or the description. Changing the name and description in this dialog box changes those fields only within the Excel connection object.

The maximum size of a description is 255 characters. If the user specifies a description within a connection file that is longer than 255 characters, the description is truncated to fit the 255-character limit.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

In the Connection Properties dialog box, the user may edit the name of the connection and/or the description. Changing the name and description in this dialog box changes those fields only within the Excel connection object.

The maximum size of a description is 255 characters. If the user specifies a description within a connection file that is longer than 255 characters, the description is truncated to fit the 255-character limit.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.InModel: bool
    '''Specifies whether the WorkbookConnection has been added to the model. Read-only Boolean.

#SYNTAX:

expression.InModel

expression A variable that represents a WorkbookConnection object.

Must be False for legacy connections.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: BOOL

#REMARKS:

Must be False for legacy connections.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.ModelConnection: ModelConnection
    '''Returns an object that contains information for the new model connection type introduced in Excel 2013 to interact with the integrated Data Model. Read-only.

#SYNTAX:

expression.ModelConnection

expression A variable that represents a WorkbookConnection object.

MODELCONNECTION

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: MODELCONNECTION
    '''

    self.Name: str
    '''Returns or sets the name of the WorkbookConnection object. Read/write String.

#SYNTAX:

expression.Name

expression A variable that represents a WorkbookConnection object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: _Workbook
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a WorkbookConnection object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Ranges: Ranges
    '''Returns the range of objects for the specified WorkbookConnection object. Read-only Ranges.

#SYNTAX:

expression.Ranges

expression A variable that represents a WorkbookConnection object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.RefreshWithRefreshAll: bool
    '''Determines if the connection should be refreshed when Refresh All is executed. Read/write Boolean.

#SYNTAX:

expression.RefreshWithRefreshAll

expression A variable that represents a WorkbookConnection object.

If True is returned, the connection is refreshed. If False is returned, the connection is not refreshed. The default value is True.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: BOOL

#REMARKS:

If True is returned, the connection is refreshed. If False is returned, the connection is not refreshed. The default value is True.

BOOL

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Type: XlConnectionType
    '''Returns the workbook connection type. Read-only XlConnectionType.

#SYNTAX:

expression.Type

expression A variable that represents a WorkbookConnection object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self._Default: str
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Delete(self) -> None:
    '''Deletes a workbook connection.

#REMARKS:

Use this method to delete an external data connection. This method does not apply to links to other workbooks.

Deleting a connection will not delete or remove any objects that were using that connection. Deleting a connection will not cause any of the connection files to be deleted from the file system. If you edit any of those objects to use another connection, everything will start working again.

Objects that use a deleted connection behave as if the connection could not be established.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Refresh(self) -> None:
    '''Refreshes a workbook connection.

#REMARKS:

If the DisplayAlerts property is False, dialog boxes are not displayed, and the Refresh method fails with the Insufficient Connection Information exception.

A refresh failure for one connection will not have any impact on refresh operations for the other connections.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __call__(self):  pass

  def __getattr__(self, attr):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass


  #getattr Exception:
    # DataFeedConnection:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ModelTables:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # ODBCConnection:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # OLEDBConnection:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # TextConnection:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)
    # WorksheetDataConnection:  (-2147352567, '发生意外。', (0, None, None, None, 0, -2146827284), None)



class ModelFormatBoolean:
  '''Represents the format to be used for a model measure in the data model.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelFormatBoolean object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelFormatBoolean object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelFormatBoolean object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelFormatCurrency:
  '''Represents the format to be used for a model measure in the data model.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelFormatCurrency object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelFormatCurrency object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DecimalPlaces: int
    '''Specifies the number of decimal places after the dot. Read/write Long.

#SYNTAX:

expression.DecimalPlaces

expression A variable that represents a ModelFormatCurrency object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelFormatCurrency object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Symbol: str
    '''Specifies the symbol to use to represent the currency. Read/write String.

#SYNTAX:

expression.Symbol

expression A variable that represents a ModelFormatCurrency object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelFormatDate:
  '''Represents the format to be used for a model measure in the data model.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelFormatDate object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelFormatDate object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.FormatString: str
    '''Specifies the date format, for example, "dd/mm/yy". Read/write String.

#SYNTAX:

expression.FormatString

expression A variable that represents a ModelFormatDate object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelFormatDate object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelFormatDecimalNumber:
  '''Represents the format to be used for a model measure in the data model.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelFormatDecimalNumber object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelFormatDecimalNumber object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DecimalPlaces: int
    '''Specifies the number of decimal places after the dot. Read/write Long.

#SYNTAX:

expression.DecimalPlaces

expression A variable that represents a ModelFormatDecimalNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelFormatDecimalNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseThousandSeparator: bool
    '''Specifies whether to display commas between thousands. Read/write Boolean.

#SYNTAX:

expression.UseThousandSeparator

expression A variable that represents a ModelFormatDecimalNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelFormatGeneral:
  '''Represents the format to be used for a model measure in the data model.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelFormatGeneral object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelFormatGeneral object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelFormatGeneral object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelFormatPercentageNumber:
  '''Represents the format to be used for a model measure in the data model.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelFormatPercentageNumber object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelFormatPercentageNumber object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DecimalPlaces: int
    '''Specifies the number of decimal places after the dot. Read/write Long.

#SYNTAX:

expression.DecimalPlaces

expression A variable that represents a ModelFormatPercentageNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelFormatPercentageNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseThousandSeparator: bool
    '''Specifies whether to display commas between thousands. Read/write Boolean.

#SYNTAX:

expression.UseThousandSeparator

expression A variable that represents a ModelFormatPercentageNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelFormatScientificNumber:
  '''Represents the format to be used for a model measure in the data model.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelFormatScientificNumber object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelFormatScientificNumber object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.DecimalPlaces: int
    '''Specifies the number of decimal places after the dot. Read/write Long.

#SYNTAX:

expression.DecimalPlaces

expression A variable that represents a ModelFormatScientificNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelFormatScientificNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelFormatWholeNumber:
  '''Represents the format to be used for a model measure in the data model.'''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelFormatWholeNumber object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelFormatWholeNumber object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelFormatWholeNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.UseThousandSeparator: bool
    '''Specifies whether to display commas between thousands. Read/write Boolean.

#SYNTAX:

expression.UseThousandSeparator

expression A variable that represents a ModelFormatWholeNumber object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelMeasures:
  '''Represents a collection of ModelMeasure objects.

#REMARKS:

Each measure is represented by a ModelMeasure object. Use the ModelMeasures property of the Model object to return the ModelMeasures collection.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a ModelMeasures object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: integer
    '''Returns an integer that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a ModelMeasures object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelMeasures object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelMeasures object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, MeasureName, AssociatedTable, Formula, FormatInformation, Description) -> ModelMeasure:
    '''Adds a model measure to the model.

#PARAMETERS:

Name Required/Optional Data type Description

MeasureName Required String The name of the model measure.

AssociatedTable Required MODELTABLE The model table associated with the model measure. This is the table that contains the model measure, as seen in the Field List task pane.

Formula Required String The Data Analysis Expressions (DAX) formula, inserted as a string.

FormatInformation Required Variant The formatting of the model measure. See Remarks.

Description Optional Variant The description associated with the model measure.

#RETURN-VALUE: ModelMeasure

#REMARKS:

The formatting of the model measure can be of type:

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index) -> ModelMeasure:
    '''Returns a single object from a collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The name or index number of the object.

#RETURN-VALUE: ModelMeasure
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelRelationships:
  '''This collection contains all relationships between data tables in the data model of Excel 2013.'''

  def __init__(self):
    self.Application: Application
    '''Returns an Application object that represents the Microsoft Excel application. Read-only.

#SYNTAX:

expression.Application

expression A variable that represents a ModelRelationships object.

APPLICATION

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: APPLICATION

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: INT32
    '''Returns a Long value that represents the number of ModelRelationship objects in a ModelRelationships object. Read-only.

#SYNTAX:

expression.Count

expression A variable that represents a ModelRelationships object.

INT32

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: INT32
    '''

    self.Creator: XLCREATOR
    '''Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelRelationships object.

Because the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL.

XLCREATOR

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: XLCREATOR

#REMARKS:

Because the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL.

XLCREATOR

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns an Object that represents the parent object of the specified ModelRelationships object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelRelationships object.

OBJECT

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: OBJECT
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, ForeignKeyColumn, PrimaryKeyColumn) -> MODELRELATIONSHIP:
    '''Adds a new relationship to the model.

#PARAMETERS:

Name Required/Optional Data type Description

ForeignKeyColumn Required MODELTABLECOLUMN A ModelTableColumn object representing the foreign key column in the table on the many side of the one-to-many relationship.

PrimaryKeyColumn Required MODELTABLECOLUMN A ModelTableColumn object representing the primary key column in the table on the one side of the one-to-many relationship.

#RETURN-VALUE: MODELRELATIONSHIP
    '''

  def DetectRelationships(self, PivotTable) -> None:
    '''Detects model relationships in the specified PivotTable object.

#PARAMETERS:

Name Required/Optional Data type Description

PivotTable Required PIVOTTABLE The PivotTable in which to detect model relationships.

#RETURN-VALUE: Void
    '''

  def Item(self, Index) -> ModelRelationship:
    '''Returns a single object from the ModelRelationships object.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The index number for the object.

#RETURN-VALUE: A ModelRelationship object contained in the collection.
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelTables:
  '''A collection of model tables inside the data model.'''

  def __init__(self):
    self.Application: Application
    '''Returns an Application object that represents the Microsoft Excel application. Read-only.

#SYNTAX:

expression.Application

expression A variable that represents a ModelTables object.

APPLICATION

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: APPLICATION

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: INT32
    '''Returns a Long value that represents the number of ModelTable objects in a ModelTables collection. Read-only.

#SYNTAX:

expression.Count

expression A variable that represents a ModelTables object.

INT32

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: INT32
    '''

    self.Creator: XLCREATOR
    '''Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a ModelTables object.

Because the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL.

XLCREATOR

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: XLCREATOR

#REMARKS:

Because the object was created in Microsoft Excel, this property returns the hexadecimal value, 5843454C, which represents the string XCEL.

XLCREATOR

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: Model
    '''Returns an Object that represents the parent object of the specified ModelTables object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a ModelTables object.

OBJECT

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#PROPERTY-VALUE: OBJECT
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index) -> MODELTABLE:
    '''Returns a single object from the ModelTables collection.

#PARAMETERS:

Name Required/Optional Data type Description

Index Required Variant The index number or name of the object.

#RETURN-VALUE: MODELTABLE
    '''

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class ModelConnection:
  def __init__(self):
    self.ADOConnection: CDispatch
    self.Application: Application
    self.CalculatedMembers: CalculatedMembers
    self.CommandText: str
    self.CommandType: int
    self.Creator: int
    self.Parent: WorkbookConnection
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def __getattr__(self, attr):  pass

  def __iter__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class Ranges:
  def __init__(self):
    self.Application: Application
    self.Count: int
    self.Creator: int
    self.Parent: WorkbookConnection
    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Item(self, Index):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




class CalculatedMembers:
  '''A collection of all the CalculatedMember objects on the specified PivotTable.

#REMARKS:

Each CalculatedMember object represents a calculated member or calculated measure.

Use the CalculatedMembers property of the PivotTable object to return a CalculatedMembers collection.

There are three supported types of calculated members: Named Sets, Calculated Members, and Calculated Measures. Object model support has been available for all three types since Excel 2010. User interface support was made available for Named Sets in Excel 2010. In Excel 2013, the OLAP Calculated Members and Calculated Measures feature was created to build a user interface for the calculated members and measures object model.

Named Sets is used exactly the same as in Excel 2010. Named Sets should continue to use the Add method, and the type XlCalculatedMemberType enumeration.

Calculated Members has the following changes for Excel 2013:

Calculated Measures has the following changes for Excel 2013:

The following example adds a set to a PivotTable, assuming that a PivotTable from the FoodMart SQL database exists on the active worksheet.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a set to a PivotTable, assuming that a PivotTable from the FoodMart SQL database exists on the active worksheet.

Sub UseCalculatedMember() 
 Dim pvtTable As PivotTable 
 Set pvtTable = ActiveSheet.PivotTables(1)
 pvtTable.CalculatedMembers.Add Name:="[Beef]", _ 
 Formula:="'{[Product].[All Products].Children}'", _ 
 Type:=xlCalculatedSet 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
  '''

  def __init__(self):
    self.Application: Application
    '''When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application.

#SYNTAX:

expression.Application

expression A variable that represents a CalculatedMembers object.

This example displays a message about the application that created myObject.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

This example displays a message about the application that created myObject.

Set myObject = ActiveWorkbook 
If myObject.Application.Value = "Microsoft Excel" Then 
 MsgBox "This is an Excel Application object." 
Else 
 MsgBox "This is not an Excel Application object." 
End If

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Count: int
    '''Returns a Long value that represents the number of objects in the collection.

#SYNTAX:

expression.Count

expression A variable that represents a CalculatedMembers object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Creator: int
    '''Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long.

#SYNTAX:

expression.Creator

expression A variable that represents a CalculatedMembers object.

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#REMARKS:

If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C. The Creator property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.Parent: ModelConnection
    '''Returns the parent object for the specified object. Read-only.

#SYNTAX:

expression.Parent

expression A variable that represents a CalculatedMembers object.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

    self.__dict__: dict
    self.__module__: str
    self._prop_map_get_: dict
    self._prop_map_put_: dict

  def Add(self, Name, Formula, SolveOrder, Type, Dynamic, DisplayFolder, HierarchizeDistinct) -> CalculatedMember:
    '''Adds a calculated field or calculated item to a PivotTable. Returns a CalculatedMember object.

#PARAMETERS:

Name Required/Optional Data type Description

Name Required String The name of the calculated member.

Formula Required String The formula of the calculated member.

SolveOrder Optional Variant The solve order for the calculated member.

Type Optional Variant The type of calculated member.

Dynamic Optional Boolean Specifies if the calculated member is recalculated with every update.

DisplayFolder Optional String The name of the display folder for the calculated member.

HierarchizeDistinct Optional Boolean Specifies whether to order and remove duplicates when displaying the hierarchy of the calculated member in a PivotTable report based on an OLAP cube.

#RETURN-VALUE: A CalculatedMember object that represents the new calculated field or calculated item.

#REMARKS:

The Formula argument must contain a valid MDX (Multidimensional Expression) syntax statement. The Name argument has to be acceptable to the Online Analytical Processing (OLAP) provider, and the Type argument has to be defined.

If you set the Type argument of this method to xlCalculatedSet, you must call the AddSet method of the CubeFields object to make the new field set visible in the PivotTable.

The following example adds a set to a PivotTable.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

The following example adds a set to a PivotTable.

Sub UseAddSet() 
 
 Dim pvtOne As PivotTable 
 Dim strAdd As String 
 Dim strFormula As String 
 Dim cbfOne As CubeField 
 
 Set pvtOne = ActiveSheet.PivotTables(1) 
 
 strAdd = "[MySet]" 
 strFormula = "'{[Product].[All Products].[Food].children}'" 
 
 ' Establish connection with data source if necessary. 
 If Not pvtOne.PivotCache.IsConnected Then pvtOne.PivotCache.MakeConnection 
 
 ' Add a calculated member titled "[MySet]" 
 pvtOne.CalculatedMembers.Add Name:=strAdd, _ 
 Formula:=strFormula, Type:=xlCalculatedSet 
 
 ' Add a set to the CubeField object. 
 Set cbfOne = pvtOne.CubeFields.AddSet(Name:="[MySet]", _ 
 Caption:="My Set") 
 
End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def AddCalculatedMember(self, Name, Formula, SolveOrder, Type, DisplayFolder, MeasureGroup, ParentHierarchy, ParentMember, NumberFormat) -> CALCULATEDMEMBER:
    '''Adds a calculated field or calculated item to a PivotTable.

#PARAMETERS:

Name Required/Optional Data type Description

Name Required String The name of the calculated member.

Formula Required Variant The formula of the calculated member.

SolveOrder Optional Variant The solve order for the calculated member.

Type Optional Variant The type of calculated member.

DisplayFolder Optional Variant A folder that exists to display calculated measures.

MeasureGroup Optional Variant The group to which the calculated member belongs.

ParentHierarchy Optional Variant The parent path of the ParentMember.

ParentMember Optional Variant The parent of the calculated member.

NumberFormat Optional Variant The format of numbers used for calculated members.

#RETURN-VALUE: CALCULATEDMEMBER

#REMARKS:

The Formula argument must have a valid MDX (multidimensional expression) syntax statement. The Name argument has to be acceptable to the Online Analytical Processing (OLAP) provider.

Display folders are only valid for calculated measures. They are not valid for calculated members.

The String can have semicolons ; in it. Semicolons designate multiple display folders. For example, if you use the String myfolder1;myfolder2, the calculated measure will show in two display folders, one named myfolder1 and the other named myfolder2.

The String can have backslashes \. This designates a hierarchical path for the display folder. For example, if you use the String welcome\to\seattle, there will be a display folder called welcome that contains a display folder called to which contains a display folder called seattle. Display folders are virtual folders; they don't really exist in the same sense that we think of system folders. They only exist for purposes of displaying the calculated measures.

The number formats can only be set by macros. There is no user interface for setting them. This is the only property that cannot be set via the user interface. The type is always xlNumberFormatTypeDefault when a calculated member is created via the user interface. The number formats are only valid for calculated members. They are not valid for calculated measures.

The parent hierarchy can be any valid MDX hierarchy. Parent hierarchies are only valid for calculated members. They are not valid for calculated measures. If a parent member is chosen that is in a different parent hierarchy, the parent hierarchy will be automatically changed to match the parent hierarchy of the parent member. For example, assume the following macro for a calculated member.

In this case, you have specified that the parent member is from the [Customer].[Customer Geography] hierarchy, yet you have given the parent hierarchy as [Account].[Accounts]. When the member is created, it will use the parent hierarchy of the parent member, which is [Customer].[Customer Geography], and when you look in the Manage Calculations dialog in the UI, it will show [Customer].[Customer Geography] as the parent hierarchy rather than the one specified in the macro, i.e. [Account].[Accounts].

The following code sample adds a calculated measure to a PivotTable.

The following code sample adds a calculated member to a PivotTable.

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.

#EXAMPLE:

OLEDBConnection.CalculatedMembers.AddCalculatedMember Name:="[UK+US]", _
     Formula:= _
    "[Customer].[Customer Geography].[Country].&[United Kingdom] + [Customer].[Customer Geography].[Country].&[United States] " _
     , Type:=xlCalculatedMember, SolveOrder:=0, ParentHierarchy:= _
     "[Account].[Accounts]", ParentMember:= _
    "[Customer].[Customer Geography].[Australia]", NumberFormat:= _
     xlNumberFormatTypePercent

The following code sample adds a calculated measure to a PivotTable.

Sub AddCalculatedMeasure()

Dim pvt As PivotTable
Dim strName As **String**
Dim strFormula As **String**
Dim strDisplayFolder As **String**
Dim strMeasureGroup As **String**

Set pvt = Sheet1.PivotTables("PivotTable1")
strName = "[Measures].[Internet Sales Amount 25 %]"
strFormula = "[Measures].[Internet Sales Amount]*1.25"
strDisplayFolder = "My Folder\Percent Calculations" 
strMeasureGroup = "Internet Sales"

pvt.CalculatedMembers. AddCalculatedMember Name:=strName, Formula:=strFormula, Type:=xlCalculatedMeasure, DisplayFolder:=strDisplayFolder, MeasureGroup:=strMeasureGroup, NumberFormat:=xlNumberFormatTypePercent

End Sub

The following code sample adds a calculated member to a PivotTable.

Sub AddCalculatedMember()

Dim pvt As PivotTable
Dim strName As **String**
Dim strFormula As **String**
Dim strParentHierarchy As **String**
Dim strParentMember As **String**

Set pvt = Sheet1.PivotTables("PivotTable1")
strName = "[Customer].[Customer Geography].[All Customers].[North America]"
strFormula = "[Customer].[Customer Geography].[Country].&[United States] + [Customer].[Customer Geography].[Country].&[Canada]"
strParentHierarchy = "[Customer].[Customer Geography]"
strParentMember = "[Customer].[Customer Geography].[All Customers]"

pvt.CalculatedMembers. AddCalculatedMember Name:=strName, Formula:=strFormula, Type:=xlCalculatedMember, ParentHierarchy:=strParentHierarchy, ParentMember:=strParentMember, SolveOrder:=0, NumberFormat:=xlNumberFormatTypeDefault

End Sub

Have questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback.
    '''

  def Item(self, Index):  pass

  def _Add(self, Name, Formula, SolveOrder, Type):  pass

  def _ApplyTypes_(self, dispid, wFlags, retType, argTypes, user, resultCLSID, args):  pass

  def _Default(self, Index):  pass

  def __call__(self, Index):  pass

  def __getattr__(self, attr):  pass

  def __getitem__(self, key):  pass

  def __int__(self, args):  pass

  def __iter__(self):  pass

  def __len__(self):  pass

  def __nonzero__(self):  pass

  def _get_good_object_(self, obj, obUserName, resultCLSID):  pass

  def _get_good_single_object_(self, obj, obUserName, resultCLSID):  pass




