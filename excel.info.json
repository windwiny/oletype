{
  "summary": {
    "classes": 384,
    "methods": 1069,
    "properties": 2577
  },
  "classes": {
    "Application": {
      "class": "Represents the entire Microsoft Excel application."
    },
    "Range": {
      "class": "Represents a cell, a row, a column, a selection of cells containing one or more contiguous blocks of cells, or a 3D range."
    },
    "Chart": {
      "class": "Represents a chart in a workbook."
    },
    "ProtectedViewWindow": {
      "class": "Represents a Protected View window."
    },
    "Window": {
      "class": "Represents a window."
    },
    "Workbook": {
      "class": "Represents a Microsoft Excel workbook."
    },
    "AddIns": {
      "class": "A collection of AddIn objects that represents all the add-ins available to Microsoft Excel, regardless of whether they're installed."
    },
    "AddIns2": {
      "class": "A collection of AddIn objects that represent all the add-ins that are currently available or open in Microsoft Excel, regardless of whether they are installed."
    },
    "IAssistance": {
      "class": "Provides a means for developers to create a customized help experience for users within Microsoft Office."
    },
    "AutoCorrect": {
      "class": "Contains Microsoft Excel AutoCorrect attributes (capitalization of names of days, correction of two initial capital letters, automatic correction list, and so on)."
    },
    "MsoAutomationSecurity": {
      "class": "Specifies the security mode an application uses when programmatically opening files."
    },
    "AutoRecover": {
      "class": "Represents the automatic recovery features of a workbook."
    },
    "XlCalculation": {
      "class": "Specifies the calculation mode."
    },
    "XlCalculationInterruptKey": {
      "class": "Specifies which key interrupts recalculation."
    },
    "XlCalculationState": {
      "class": "Specifies the calculation state of the application."
    },
    "Sheets": {
      "class": "A collection of all the sheets in the specified or active workbook."
    },
    "COMAddIns": {
      "class": "A collection of COMAddIn objects that provide information about a COM add-in registered in the Windows registry."
    },
    "CommandBars": {
      "class": "A collection of CommandBar objects that represent the command bars in the container application."
    },
    "XlCommandUnderlines": {
      "class": "Specifies the state of the command underlines in Microsoft Excel for the Macintosh."
    },
    "XlMousePointer": {
      "class": "Specifies the appearance of the mouse pointer in Excel."
    },
    "XlCutCopyMode": {
      "class": "Specifies whether status is Copy mode or Cut mode."
    },
    "FileFormat": {
      "class": "Returns the file format and/or type of the workbook. Read-only XlFileFormat."
    },
    "XlReadingOrder": {
      "class": "Specifies the reading order for the specified object."
    },
    "DefaultWebOptions": {
      "class": "Contains global application-level attributes used by Microsoft Excel when you save a document as a webpage or open a webpage. You can return or set attributes either at the application (global) level or at the workbook level."
    },
    "Dialogs": {
      "class": "A collection of all the Dialog objects in Microsoft Excel."
    },
    "XlCommentDisplayMode": {
      "class": "Specifies the way that cells display comments and comment indicators."
    },
    "XlEnableCancelKey": {
      "class": "Specifies how Microsoft Office Excel 2007 handles CTRL+BREAK (or ESC or COMMAND+PERIOD) user interruptions to the running procedure."
    },
    "ErrorCheckingOptions": {
      "class": "Represents the error-checking options for an application."
    },
    "MsoFeatureInstall": {
      "class": "Specifies how the application handles calls to methods and properties that require features not yet installed."
    },
    "FileDialog": {
      "class": "Provides file dialog box functionality similar to the functionality of the standard Open and Save dialog boxes found in Microsoft Office applications."
    },
    "FileExportConverters": {
      "class": "A collection of FileExportConverter objects that represent all the file converters available for saving files."
    },
    "VBE": {
      "class": "Glossary of terms for Visual Basic Editor (VBE)."
    },
    "LanguageSettings": {
      "class": "Returns information about the language settings in a Microsoft Office application."
    },
    "XlMailSystem": {
      "class": "Specifies the mail system that is installed on the host computer."
    },
    "XlMeasurementUnits": {
      "class": "Specifies the measurement units."
    },
    "XlDirection": {
      "class": "Specifies the direction in which to move."
    },
    "MultiThreadedCalculation": {
      "class": "Returns or sets the concurrent calculation mode."
    },
    "Names": {
      "class": "A collection of all the Name objects in the application or workbook."
    },
    "NewFile": {
      "class": "Represents items listed on the New Item task pane available in several Microsoft Office applications."
    },
    "ODBCErrors": {
      "class": "A collection of ODBCError objects."
    },
    "OLEDBErrors": {
      "class": "A collection of OLEDBError objects."
    },
    "ProtectedViewWindows": {
      "class": "A collection of the ProtectedViewWindow objects that represent all the Protected View windows that are currently open in the application."
    },
    "QuickAnalysis": {
      "class": "Enables single-click access to data analysis features such as formulas, conditional formatting, sparklines, tables, charts, and PivotTables."
    },
    "RecentFiles": {
      "class": "Represents the list of recently used files."
    },
    "XlReferenceStyle": {
      "class": "Specifies the reference style."
    },
    "Replace": {
      "class": "Returns a Boolean indicating characters in cells within the specified range. Using this method doesn't change either the selection or the active cell."
    },
    "RTD": {
      "class": "Represents a real-time data object."
    },
    "TypeName": {
      "class": "Returns a String that provides information about a variable."
    },
    "SmartArtColors": {
      "class": "A collection of SmartArtColor objects."
    },
    "SmartArtLayouts": {
      "class": "Represents a collection of SmartArt layout diagrams."
    },
    "SmartArtQuickStyles": {
      "class": "Represents a collection of SmartArtQuickStyle objects."
    },
    "Speech": {
      "class": "Contains methods and properties that pertain to speech."
    },
    "SpellingOptions": {
      "class": "Represents the various spell checking options for a worksheet."
    },
    "Constants": {
      "class": "This enumeration groups together constants used with various Excel methods."
    },
    "UsedObjects": {
      "class": "Represents objects that have been allocated in a workbook."
    },
    "Watches": {
      "class": "A collection of all the Watch objects in a specified application."
    },
    "Windows": {
      "class": "A collection of all the Window objects in Microsoft Excel."
    },
    "XlWindowState": {
      "class": "Specifies the state of the window."
    },
    "Workbooks": {
      "class": "A collection of all the Workbook objects that are currently open in the Microsoft Excel application."
    },
    "WorksheetFunction": {
      "class": "Used as a container for Microsoft Excel worksheet functions that can be called from Visual Basic."
    },
    "Areas": {
      "class": "A collection of the areas, or contiguous blocks of cells, within a selection."
    },
    "Borders": {
      "class": "A collection of four Border objects that represent the four borders of a Range  object or Style object."
    },
    "Characters": {
      "class": "Represents characters in an object that contains text."
    },
    "Comment": {
      "class": "Represents a cell comment."
    },
    "CommentThreaded": {
      "class": "Represents a cell's threaded comment. This object can represent both a top-level comment or its replies."
    },
    "DisplayFormat": {
      "class": "Represents the display settings for an associated Range object. Read-only."
    },
    "Font": {
      "class": "Contains the font attributes (font name, font size, color, and so on) for an object."
    },
    "FormatConditions": {
      "class": "Represents the collection of conditional formats for a single range."
    },
    "Hyperlinks": {
      "class": "Represents the collection of hyperlinks for a worksheet or range."
    },
    "Interior": {
      "class": "Represents the interior of an object."
    },
    "ListObject": {
      "class": "Represents a list object in the ListObjects collection."
    },
    "PivotTable": {
      "class": "Represents a PivotTable report on a worksheet."
    },
    "XlPageBreak": {
      "class": "Specifies page break location on the worksheet."
    },
    "Phonetic": {
      "class": "Contains information about a specific phonetic text string in a cell."
    },
    "Phonetics": {
      "class": "A collection of all the Phonetic objects in the specified range."
    },
    "PivotCell": {
      "class": "Represents a cell in a PivotTable report."
    },
    "PivotField": {
      "class": "Represents a field in a PivotTable report."
    },
    "PivotItem": {
      "class": "Represents an item in a PivotTable field."
    },
    "QueryTable": {
      "class": "Represents a worksheet table built from data returned from an external data source, such as a SQL server or a Microsoft Access database."
    },
    "SparklineGroups": {
      "class": "Represents a collection of sparkline groups."
    },
    "Style": {
      "class": "Represents a style description for a range."
    },
    "Validation": {
      "class": "Represents data validation for a worksheet range."
    },
    "Worksheet": {
      "class": "Represents a worksheet."
    },
    "XPath": {
      "class": "Represents an XPath that has been mapped to a Range or ListColumn object."
    },
    "Walls": {
      "class": "Represents the walls of a 3D chart. This object isn't a collection. There's no object that represents a single wall; you must return all the walls as a unit."
    },
    "XlBarShape": {
      "class": "Specifies the shape used with the 3D bar or column chart."
    },
    "XlCategoryLabelLevel": {
      "class": "Specifies the category labels for the category label levels."
    },
    "ChartArea": {
      "class": "Represents the chart area of a chart."
    },
    "ChartTitle": {
      "class": "Represents the chart title."
    },
    "XlChartType": {
      "class": "Specifies the chart type."
    },
    "DataTable": {
      "class": "Represents a chart data table."
    },
    "XlDisplayBlanksAs": {
      "class": "Specifies how blank cells are plotted on a chart."
    },
    "Floor": {
      "class": "Represents the floor of a 3D chart."
    },
    "Legend": {
      "class": "Represents the legend in a chart. Each chart can have only one legend."
    },
    "PageSetup": {
      "class": "Represents the page setup description."
    },
    "PivotLayout": {
      "class": "Represents the placement of fields in a PivotChart report."
    },
    "PlotArea": {
      "class": "Represents the plot area of a chart."
    },
    "XlRowCol": {
      "class": "Specifies whether the values corresponding to a particular data series are in rows or columns."
    },
    "XlSeriesNameLevel": {
      "class": "Specifies the series labels for the series label levels."
    },
    "Shapes": {
      "class": "A collection of all the Shape objects on the specified sheet."
    },
    "Tab": {
      "class": "Represents the tab of a chart or a worksheet."
    },
    "XlSheetVisibility": {
      "class": "Specifies whether the object is visible."
    },
    "Pane": {
      "class": "Represents a pane of a window."
    },
    "XlColorIndex": {
      "class": "Specifies the color of a selected feature, such as a border, font, or fill."
    },
    "Panes": {
      "class": "A collection of all the Pane objects shown in the specified window."
    },
    "SheetViews": {
      "class": "A collection of all the sheet views in the specified or active workbook window."
    },
    "XlWindowType": {
      "class": "Specifies how the chart is displayed."
    },
    "XlWindowView": {
      "class": "Specifies the view showing in the window."
    },
    "DocumentProperties": {
      "class": "A collection of DocumentProperty objects. Each DocumentProperty object represents a built-in or custom property of a container document."
    },
    "XlSaveConflictResolution": {
      "class": "Specifies the way that conflicts are to be resolved whenever a shared workbook is updated."
    },
    "Connections": {
      "class": "A collection of WorkbookConnection objects for the specified workbook."
    },
    "MetaProperties": {
      "class": "Represents a collection of properties describing the metadata stored in a document."
    },
    "CustomViews": {
      "class": "A collection of custom workbook views."
    },
    "CustomXMLParts": {
      "class": "Represents a collection of CustomXMLPart objects."
    },
    "TableStyles": {
      "class": "Represents styles that can be applied to a table."
    },
    "DocumentInspectors": {
      "class": "Represents a collection of DocumentInspector objects."
    },
    "DocumentLibraryVersions": {
      "class": "The DocumentLibraryVersions property of the Document object in Microsoft Word, the Workbook object in Excel, and the Presentation object in PowerPoint returns a DocumentLibraryVersions object. The DocumentLibraryVersions object represents a collection of DocumentLibraryVersion objects."
    },
    "IconSets": {
      "class": "Represents a collection of icon sets used in an icon set conditional formatting rule."
    },
    "Model": {
    },
    "Permission": {
      "class": "The Permission property of the Document object in Microsoft Word, a Workbook object in Microsoft Excel, and a Presentation object in Microsoft PowerPoint returns a Permission object."
    },
    "PublishObjects": {
      "class": "A collection of all PublishObject objects in the workbook."
    },
    "Queries": {
      "class": "The collection of WorkbookQuery objects introduced in Office 2016."
    },
    "ServerPolicy": {
      "class": "Represents a policy specified for a document type stored on a server running Microsoft Office SharePoint Server."
    },
    "SlicerCaches": {
      "class": "Represents the collection of slicer caches associated with the specified workbook."
    },
    "SmartDocument": {
      "class": "The SmartDocument property of the Document object in Microsoft Word and the Workbook object in Microsoft Excel returns a SmartDocument object."
    },
    "Styles": {
      "class": "A collection of all the Style objects in the specified or active workbook."
    },
    "XlUpdateLinks": {
      "class": "Specifies a workbook's setting for updating embedded OLE links."
    },
    "WebOptions": {
      "class": "Contains workbook-level attributes used by Microsoft Excel when you save a document as a webpage or open a webpage."
    },
    "Worksheets": {
      "class": "A collection of all the Worksheet objects in the specified or active workbook. Each Worksheet object represents a worksheet."
    },
    "XmlMaps": {
      "class": "Represents the collection of XmlMap objects that have been added to a workbook."
    },
    "XmlNamespaces": {
      "class": "Represents the collection of XmlNamespace objects in a workbook."
    },
    "XlXmlImportResult": {
      "class": "Specifies the results of the refresh or import operation."
    },
    "HPageBreaks": {
      "class": "The collection of horizontal page breaks within the print area."
    },
    "VPageBreaks": {
      "class": "A collection of vertical page breaks within the print area."
    },
    "MsoEncoding": {
      "class": "Specifies the document encoding (code page or character set) for the web browser to use when a user views a saved document."
    },
    "WebPageFonts": {
      "class": "A collection of WebPageFont objects that describe the proportional font, proportional font size, fixed-width font, and fixed-width font size used when documents are saved as webpages. You can specify a different set of webpage font properties for each available character set."
    },
    "MsoScreenSize": {
      "class": "Specifies the ideal screen resolution to be used to view a document in a web browser."
    },
    "MsoTargetBrowser": {
      "class": "Specifies target browser for documents viewed in a web browser."
    },
    "FileExportConverter": {
      "class": "Represents a file converter that is used to save files."
    },
    "XlThreadMode": {
      "class": "Specifies the control over the multi-threaded calculation mode."
    },
    "Name": {
      "class": "Represents a defined name for a range of cells. Names can be either built-in names—such as Database, Print_Area, and Auto_Open—or custom names."
    },
    "ODBCError": {
      "class": "Represents an ODBC error generated by the most recent ODBC query."
    },
    "OLEDBError": {
      "class": "Represents an OLE DB error returned by the most recent OLE DB query."
    },
    "RecentFile": {
      "class": "Represents a file in the list of recently used files."
    },
    "XlSpeakDirection": {
      "class": "Specifies the order in which the cells are spoken."
    },
    "XlArabicModes": {
      "class": "Specifies spelling rules for the Arabic spelling checker."
    },
    "XlHebrewModes": {
      "class": "Specifies the mode for the Hebrew spelling checker."
    },
    "Watch": {
      "class": "Represents a range that is tracked when the worksheet is recalculated. The Watch object allows users to verify the accuracy of their models and debug problems that they encounter."
    },
    "RGB": {
      "class": "Returns a Long whole number representing an RGB color value."
    },
    "Border": {
      "class": "Represents the border of an object."
    },
    "XlLineStyle": {
      "class": "Specifies the line style for the border."
    },
    "XlBorderWeight": {
      "class": "Specifies the weight of the border around a range."
    },
    "Shape": {
      "class": "Represents an object in the drawing layer, such as an AutoShape, freeform, OLE object, or picture."
    },
    "Author": {
      "class": "Represents the author of the CommentThreaded object."
    },
    "CommentsThreaded": {
      "class": "A collection of top-level CommentThreaded objects in a Worksheet, or a collection of replies in a single threaded comment."
    },
    "XlBackground": {
      "class": "Specifies the background type for text in charts."
    },
    "XlThemeFont": {
      "class": "Specifies the theme font to use."
    },
    "FormatCondition": {
      "class": "Represents a conditional format."
    },
    "Hyperlink": {
      "class": "Represents a hyperlink."
    },
    "XlPattern": {
      "class": "Specifies the interior pattern of a chart or interior object."
    },
    "XlThemeColor": {
      "class": "Specifies the theme color to be used."
    },
    "ListColumns": {
      "class": "A collection of all the ListColumn objects in the specified ListObject object."
    },
    "ListRows": {
      "class": "A collection of all the ListRow objects in the specified ListObject object."
    },
    "XlListObjectSourceType": {
      "class": "Specifies the current source of the list."
    },
    "TableObject": {
      "class": "Represents a worksheet table built from data returned from a PowerPivot model."
    },
    "XmlMap": {
      "class": "Represents an XML map that has been added to a workbook."
    },
    "CalculatedMembers": {
      "class": "A collection of all the CalculatedMember objects on the specified PivotTable."
    },
    "PivotTableChangeList": {
      "class": "Represents the list of changes a user has made to value cells in a PivotTable report based on an OLAP data source."
    },
    "CubeFields": {
      "class": "A collection of all CubeField objects in a PivotTable report that is based on an OLAP cube. Each CubeField object represents a hierarchy or measure field from the cube."
    },
    "XlLayoutRowType": {
      "class": "Specifies the type of layout row."
    },
    "XlOrder": {
      "class": "Specifies the order in which cells are processed."
    },
    "PivotAxis": {
      "class": "The PivotAxis object is used for asymmetric drilling in a PivotTable."
    },
    "PivotFormulas": {
      "class": "Represents the collection of formulas for a PivotTable report. Each formula is represented by a PivotFormula object."
    },
    "XlPTSelectionMode": {
      "class": "Specifies what can be selected in a PivotTable during a structured selection. These constants can be combined to select multiple types."
    },
    "Slicers": {
      "class": "A collection of Slicer objects."
    },
    "XlPivotTableVersionList": {
      "class": "Specifies the version of a PivotTable or a PivotCache. Creating PivotTables with a specific version ensures that tables created in Excel behave in the same manner as they did in the corresponding version of Excel."
    },
    "XlPhoneticCharacterType": {
      "class": "Specifies the type of phonetic text in a cell."
    },
    "PivotItemList": {
      "class": "A collection of all the PivotItem objects in the specified PivotTable."
    },
    "XlConsolidationFunction": {
      "class": "Specifies the subtotal function."
    },
    "XlPivotCellType": {
      "class": "Specifies the PivotTable entity to which the cell corresponds."
    },
    "PivotLine": {
      "class": "A PivotLine object is a line of rows or columns in an Excel PivotTable."
    },
    "XlSortOrder": {
      "class": "Specifies the sort order for the specified field or range."
    },
    "XlPivotFieldCalculation": {
      "class": "Specifies the type of calculation performed by a data PivotField when a custom calculation is used."
    },
    "CubeField": {
      "class": "Represents a hierarchy or measure field from an OLAP cube. In a PivotTable report, the CubeField object is a member of the CubeFields collection."
    },
    "XlPivotFieldDataType": {
      "class": "Specifies the type of data in the PivotTable field."
    },
    "XlLayoutFormType": {
      "class": "Specifies the way the specified PivotTable items appear—in table format or in outline format."
    },
    "XlSubtotalLocationType": {
      "class": "Specifies where the subtotal will be displayed on the worksheet."
    },
    "XlPivotFieldOrientation": {
      "class": "Specifies the location of the field in a PivotTable report."
    },
    "XlCmdType": {
      "class": "Specifies the value of the CommandText property."
    },
    "Parameters": {
      "class": "A collection of Parameter objects for the specified query table."
    },
    "XlQueryType": {
      "class": "Specifies the type of query used by Microsoft Excel to populate the query table or PivotTable cache."
    },
    "XlCellInsertionMode": {
      "class": "Specifies the way that rows on the specified worksheet are added or deleted to accommodate the number of rows in a recordset returned by a query."
    },
    "XlRobustConnect": {
      "class": "Specifies how the PivotTable cache or a query table connects to its data source."
    },
    "XlTextParsingType": {
      "class": "Specifies the column format for the data in the text file that you are importing into a query table."
    },
    "XlPlatform": {
      "class": "Specifies the platform on which a text file originated."
    },
    "XlTextQualifier": {
      "class": "Specifies the delimiter to use to specify text."
    },
    "XlTextVisualLayoutType": {
      "class": "Specifies whether the visual layout of the text being imported is left-to-right or right-to-left."
    },
    "XlWebFormatting": {
      "class": "Specifies how much formatting from a webpage, if any, is applied when a webpage is imported into a query table."
    },
    "XlWebSelectionType": {
      "class": "Specifies whether an entire webpage, all tables on the webpage, or only a specific table is imported into a query table."
    },
    "WorkbookConnection": {
      "class": "A connection is a set of information needed to obtain data from an external data source other than a Microsoft Excel workbook."
    },
    "SparklineGroup": {
      "class": "Represents a group of sparklines."
    },
    "XlHAlign": {
      "class": "Specifies the horizontal alignment for the object."
    },
    "XlOrientation": {
      "class": "Specifies the text orientation."
    },
    "XlVAlign": {
      "class": "Specifies the vertical alignment for the object."
    },
    "XlDVAlertStyle": {
      "class": "Specifies the icon used in message boxes displayed during validation."
    },
    "XlIMEMode": {
      "class": "Specifies the description of the Japanese input rules."
    },
    "XlFormatConditionOperator": {
      "class": "Specifies the operator to use to compare a formula against the value in a cell or, for xlBetween and xlNotBetween, to compare two formulas."
    },
    "XlDVType": {
      "class": "Specifies the type of validation test to be performed in conjunction with values."
    },
    "AutoFilter": {
      "class": "Represents autofiltering for the specified worksheet."
    },
    "Comments": {
      "class": "A collection of cell comments."
    },
    "CustomProperties": {
      "class": "A collection of CustomProperty objects that represents additional information. The information can be used as metadata for XML."
    },
    "XlEnableSelection": {
      "class": "Specifies what can be selected on the sheet."
    },
    "Outline": {
      "class": "Represents an outline on a worksheet."
    },
    "Protection": {
      "class": "Represents the various types of protection options available for a worksheet."
    },
    "QueryTables": {
      "class": "A collection of QueryTable objects."
    },
    "Sort": {
      "class": "Represents a sort of a range of data."
    },
    "XlSheetType": {
      "class": "Specifies the worksheet type."
    },
    "ChartFormat": {
      "class": "Provides access to the Office Art formatting for chart elements."
    },
    "XlChartElementPosition": {
      "class": "Specifies the position of the chart element."
    },
    "XlLegendPosition": {
      "class": "Specifies the position of the legend on a chart."
    },
    "Graphic": {
      "class": "Contains properties that apply to header and footer picture objects."
    },
    "XlPageOrientation": {
      "class": "Specifies the page orientation when the worksheet is printed."
    },
    "Pages": {
      "class": "A collection of pages in a document. Use the Pages collection and the related objects and properties for programmatically defining page layout in a workbook."
    },
    "XlPaperSize": {
      "class": "Specifies the size of the paper."
    },
    "XlPrintLocation": {
      "class": "Specifies the way that comments are printed with the sheet."
    },
    "XlPrintErrors": {
      "class": "Specifies the type of print error displayed."
    },
    "ShapeRange": {
      "class": "Represents a shape range, which is a set of shapes on a document."
    },
    "CustomView": {
      "class": "Represents a custom workbook view."
    },
    "IconSet": {
      "class": "Represents a single set of icons that are used in an icon set conditional formatting rule."
    },
    "ModelFormatBoolean": {
      "class": "Represents the format to be used for a model measure in the data model."
    },
    "ModelFormatCurrency": {
      "class": "Represents the format to be used for a model measure in the data model."
    },
    "ModelFormatDate": {
      "class": "Represents the format to be used for a model measure in the data model."
    },
    "ModelFormatDecimalNumber": {
      "class": "Represents the format to be used for a model measure in the data model."
    },
    "ModelFormatGeneral": {
      "class": "Represents the format to be used for a model measure in the data model."
    },
    "ModelFormatPercentageNumber": {
      "class": "Represents the format to be used for a model measure in the data model."
    },
    "ModelFormatScientificNumber": {
      "class": "Represents the format to be used for a model measure in the data model."
    },
    "ModelFormatWholeNumber": {
      "class": "Represents the format to be used for a model measure in the data model."
    },
    "ModelMeasures": {
      "class": "Represents a collection of ModelMeasure objects."
    },
    "ModelRelationships": {
      "class": "This collection contains all relationships between data tables in the data model of Excel 2013."
    },
    "ModelTables": {
      "class": "A collection of model tables inside the data model."
    },
    "WorkbookQuery": {
      "class": "An object that represents a query that was created by Power Query. Introduced in Office 2016."
    },
    "SlicerCache": {
      "class": "Represents the current filter state for a slicer, and information about which PivotCache or WorkbookConnection object the slicer is connected to."
    },
    "HPageBreak": {
      "class": "Represents a horizontal page break."
    },
    "VPageBreak": {
      "class": "Represents a vertical page break."
    },
    "XlXLMMacroType": {
      "class": "Specifies, in a Microsoft Excel version 4 macro worksheet, what type of macro a name refers to or whether the name refers to a macro."
    },
    "Adjustments": {
      "class": "Contains a collection of adjustment values for the specified AutoShape, WordArt object, or connector."
    },
    "MsoBackgroundStyleIndex": {
      "class": "Indicates the background style for an object."
    },
    "MsoBlackWhiteMode": {
      "class": "Specifies how a shape appears when viewed in black-and-white mode."
    },
    "CalloutFormat": {
      "class": "Contains properties and methods that apply to line callouts."
    },
    "MsoTriState": {
      "class": "Specifies a tri-state value."
    },
    "ConnectorFormat": {
      "class": "Contains properties and methods that apply to connectors."
    },
    "ControlFormat": {
      "class": "Contains Microsoft Excel control properties."
    },
    "FillFormat": {
      "class": "Represents fill formatting for a shape."
    },
    "XlFormControl": {
      "class": "Specifies the type of the form control."
    },
    "GlowFormat": {
      "class": "Represents a glow effect around an Office graphic."
    },
    "MsoGraphicStyleIndex": {
      "class": "Preset graphic styles."
    },
    "GroupShapes": {
      "class": "Represents the individual shapes within a grouped shape."
    },
    "LineFormat": {
      "class": "Represents line and arrowhead formatting."
    },
    "LinkFormat": {
      "class": "Contains linked OLE object properties."
    },
    "Model3DFormat": {
      "class": "Represents the properties of a 3D model shape."
    },
    "ShapeNodes": {
      "class": "A collection of all the ShapeNode objects in the specified freeform."
    },
    "OLEFormat": {
      "class": "Contains OLE object properties."
    },
    "PictureFormat": {
      "class": "Contains properties and methods that apply to pictures and OLE objects."
    },
    "XlPlacement": {
      "class": "Specifies the way that an object is attached to its underlying cells."
    },
    "ReflectionFormat": {
      "class": "Represents the reflection effect in Office graphics."
    },
    "ShadowFormat": {
      "class": "Represents shadow formatting for a shape."
    },
    "MsoShapeStyleIndex": {
      "class": "Indicates the line and shape style."
    },
    "SoftEdgeFormat": {
      "class": "Represents the soft edge effect in Office graphics."
    },
    "TextEffectFormat": {
      "class": "Contains properties and methods that apply to WordArt objects."
    },
    "TextFrame": {
      "class": "Represents the text frame in a Shape object. Contains the text in the text frame as well as the properties and methods that control the alignment and anchoring of the text frame."
    },
    "TextFrame2": {
      "class": "Represents the text frame in a Shape, ShapeRange, or ChartFormat object."
    },
    "ThreeDFormat": {
      "class": "Represents a shape's three-dimensional formatting."
    },
    "MsoShapeType": {
      "class": "Specifies the type of a shape or range of shapes."
    },
    "XlPivotConditionScope": {
      "class": "This enumeration specifies the conditional formatting applied for filtering values from the PivotTable object."
    },
    "XlContainsOperator": {
      "class": "Specifies the operator used in a function."
    },
    "XlFormatConditionType": {
      "class": "Specifies whether the conditional format is based on a cell value or an expression."
    },
    "MsoHyperlinkType": {
      "class": "Specifies the type of hyperlink."
    },
    "ListColumn": {
      "class": "Represents a column in a table."
    },
    "ListRow": {
      "class": "Represents a row in a table. The ListRow object is a member of the ListRows collection."
    },
    "XmlDataBinding": {
      "class": "Represents the connection to the source data for an XmlMap object."
    },
    "XmlNamespace": {
      "class": "Represents a namespace that has been added to a workbook."
    },
    "XmlSchemas": {
      "class": "Represents the collection of XmlSchema objects contained by an XmlMap object."
    },
    "XlXmlExportResult": {
      "class": "Specifies the results of the save or export operation."
    },
    "ValueChange": {
      "class": "Represents a value that has been changed in a PivotTable report that is based on an OLAP data source."
    },
    "PivotLines": {
      "class": "The PivotLines object is a collection of lines in a PivotTable, containing all lines on rows or columns of the pivot. Each line is a set of PivotCell objects."
    },
    "PivotFormula": {
      "class": "Represents a formula used to calculate results in a PivotTable report."
    },
    "Slicer": {
      "class": "Represents a slicer in a workbook."
    },
    "XlPivotLineType": {
      "class": "Specifies the type of the PivotLine."
    },
    "XlCubeFieldType": {
      "class": "Specifies whether the OLAP field is a hierarchy, set, or measure field."
    },
    "PivotFields": {
      "class": "A collection of all the PivotField objects in a PivotTable report."
    },
    "TreeviewControl": {
      "class": "Represents the hierarchical member-selection control of a cube field."
    },
    "Parameter": {
      "class": "Represents a single parameter used in a parameter query."
    },
    "DataFeedConnection": {
      "class": "Contains the data and functionality needed to connect to data feeds. The same object is used for all Data Feed types."
    },
    "TextConnection": {
      "class": "Contains Service Contract settings that enable Microsoft Excel to connect to a Data Feed data source."
    },
    "XlConnectionType": {
      "class": "Specifies the type of database connection."
    },
    "SparkAxes": {
      "class": "Represents the settings for the horizontal and vertical axes of a group of sparklines."
    },
    "Sparkline": {
      "class": "Represents a single sparkline."
    },
    "SparkPoints": {
      "class": "Represents the settings of the markers for points of data on a sparkline."
    },
    "FormatColor": {
      "class": "Represents the fill color specified for a threshold of a color scale conditional format or the color of the bar in a data bar conditional format."
    },
    "Filters": {
      "class": "A collection of Filter objects that represents all the filters in an autofiltered range."
    },
    "CustomProperty": {
      "class": "Represents identifier information, which can be used as metadata for XML."
    },
    "XlSummaryColumn": {
      "class": "Specifies the location of the summary columns in the outline."
    },
    "XlSummaryRow": {
      "class": "Specifies the location of the summary rows in the outline."
    },
    "AllowEditRanges": {
      "class": "A collection of all the AllowEditRange objects that represent the cells that can be edited on a protected worksheet."
    },
    "XlYesNoGuess": {
      "class": "Specifies whether or not the first row contains headers. Cannot be used when sorting PivotTable reports."
    },
    "XlSortOrientation": {
      "class": "Specifies the sort orientation."
    },
    "SortFields": {
      "class": "The SortFields collection is a collection of SortField objects. It allows developers to store a sort state on workbooks, lists, and autofilters."
    },
    "XlSortMethod": {
      "class": "Specifies the type of sort."
    },
    "MsoAutoShapeType": {
      "class": "Specifies the shape type for an AutoShape object."
    },
    "MsoPictureColorType": {
      "class": "Specifies the color transformation applied to a picture."
    },
    "Page": {
      "class": "Represents a page in a workbook. Use the Page object and the related methods and properties for programmatically defining page layout in a workbook."
    },
    "XlIconSet": {
      "class": "Specifies the type of icon set."
    },
    "Icon": {
      "class": "Represents a single icon in an icon set used in a conditional formatting rule."
    },
    "ModelMeasure": {
      "class": "Represents a single ModelMeasure object in the ModelMeasures collection."
    },
    "ModelRelationship": {
      "class": "Represents a relationship, currently in the data model, between two tables."
    },
    "ModelTable": {
      "class": "Represents a table in the data model."
    },
    "SlicerPivotTables": {
      "class": "Represents information about the collection of PivotTables associated with the specified SlicerCache object."
    },
    "SlicerCacheLevel": {
      "class": "Represents a level of a hierarchy in an OLAP data source being filtered by a slicer."
    },
    "XlSlicerCacheType": {
      "class": "Designates the type of slicer or slicer cache."
    },
    "SlicerItems": {
      "class": "Represents the collection of SlicerItem objects contained in a SlicerCache or SlicerCacheLevel object."
    },
    "XlSlicerSort": {
      "class": "Specifies whether items displayed in the slicer are sorted, and if they are sorted, whether they are sorted in ascending or descending order by item captions."
    },
    "XlPageBreakExtent": {
      "class": "Specifies whether a page break is full screen or applies only within the print area."
    },
    "MsoCalloutAngleType": {
      "class": "Specifies the size of the angle between the callout line and the side of the callout text box."
    },
    "MsoCalloutType": {
      "class": "Specifies the type of callout line."
    },
    "MsoCalloutDropType": {
      "class": "Specifies the starting position of the callout line relative to the text bounding box. Used with the PresetDrop method of the CalloutFormat object."
    },
    "MsoConnectorType": {
      "class": "Specifies a type of connector."
    },
    "ColorFormat": {
      "class": "Represents the color of a one-color object, the foreground or background color of an object with a gradient or patterned fill, or the pointer color."
    },
    "MsoGradientColorType": {
      "class": "Specifies the type of gradient used in a shape's fill."
    },
    "MsoGradientStyle": {
      "class": "Specifies the style for a gradient fill."
    },
    "MsoPatternType": {
      "class": "Specifies the fill pattern used in a shape."
    },
    "PictureEffects": {
      "class": "Represents a collection of PictureEffect objects."
    },
    "MsoPresetGradientType": {
      "class": "Specifies which predefined gradient to use to fill a shape."
    },
    "MsoPresetTexture": {
      "class": "Specifies texture to be used to fill a shape."
    },
    "MsoTextureType": {
      "class": "Specifies the texture type for the selected fill."
    },
    "MsoFillType": {
      "class": "Specifies a shape's fill type."
    },
    "MsoArrowheadLength": {
      "class": "Specifies the length of the arrowhead at the end of a line."
    },
    "MsoArrowheadStyle": {
      "class": "Specifies the style of the arrowhead at the end of a line."
    },
    "MsoArrowheadWidth": {
      "class": "Specifies the width of the arrowhead at the end of a line."
    },
    "MsoLineDashStyle": {
      "class": "Specifies the dash style for a line."
    },
    "MsoLineStyle": {
      "class": "Specifies the style for a line."
    },
    "ShapeNode": {
      "class": "Represents the geometry and the geometry-editing properties of the nodes in a user-defined freeform."
    },
    "Crop": {
      "class": "An object used to remove a portion of an image."
    },
    "MsoShadowStyle": {
      "class": "Specifies the type of shadowing effect."
    },
    "MsoShadowType": {
      "class": "Specifies the type of shadow displayed with a shape.The msoShadowType constants are numbered according to their order (left to right, top to bottom) within the Shadow Style set shown in the Drawing toolbar."
    },
    "MsoTextEffectAlignment": {
      "class": "Specifies alignment for WordArt text."
    },
    "MsoPresetTextEffectShape": {
      "class": "Specifies shape of WordArt text. You can see a preview of each text effect shape by selecting WordArt Shape on the WordArt toolbar."
    },
    "MsoPresetTextEffect": {
      "class": "Specifies what text effect to use on a WordArt object. Refer to the WordArt Gallery dialog box in any Microsoft Office product that supports WordArt to see a preview of each effect. The values of the MsoPresetTextEffect constants correspond to the formats listed in the WordArt Gallery dialog box (numbered from left to right and from top to bottom)."
    },
    "MsoAutoSize": {
      "class": "Determines the type of automatic sizing allowed."
    },
    "TextColumn2": {
      "class": "Represents a single text column. The TextColumn2 object is a member of the TextColumns2 collection."
    },
    "MsoHorizontalAnchor": {
      "class": "Specifies the horizontal alignment of text in a text frame. Used with the HorizontalAnchor property of the TextFrame object."
    },
    "MsoTextOrientation": {
      "class": "Specifies orientation for text."
    },
    "MsoPathFormat": {
      "class": "Specifies the format of a file or folder path."
    },
    "Ruler2": {
      "class": "Represents the ruler for the text in the specified shape or for all text in the specified text style. Contains tab stops and the indentation settings for text outline levels."
    },
    "TextRange2": {
      "class": "Represents the text frame in a Shape or ShapeRange object."
    },
    "MsoVerticalAnchor": {
      "class": "Specifies the vertical alignment of text in a text frame. Used with the VerticalAnchor property of the TextFrame object."
    },
    "MsoWarpFormat": {
      "class": "Indicates various image warping formats."
    },
    "MsoBevelType": {
      "class": "Indicates the bevel type of a ThreeDFormat object."
    },
    "MsoExtrusionColorType": {
      "class": "Specifies whether the extrusion color is based on the extruded shape's fill (the front face of the extrusion) and automatically changes when the shape's fill changes, or whether the extrusion color is independent of the shape's fill. Used with the ExtrusionColorType property of the ThreeDFormat object."
    },
    "MsoPresetCamera": {
      "class": "Indicates the effects camera type used by the specified object."
    },
    "MsoPresetExtrusionDirection": {
      "class": "Specifies the direction that the extrusion's sweep path takes away from the extruded shape (the front face of the extrusion). Used with the PresetExtrusionDirection property of the ThreeDFormat object."
    },
    "MsoLightRigType": {
      "class": "Indicates the effects lighting for an object."
    },
    "MsoPresetLightingDirection": {
      "class": "Specifies the location of lighting on an extruded (three-dimensional) shape relative to the shape."
    },
    "MsoPresetLightingSoftness": {
      "class": "Specifies the intensity of light used on a shape."
    },
    "MsoPresetMaterial": {
      "class": "Specifies the extrusion surface material. Used with the PresetMaterial property of the ThreeDFormat object."
    },
    "MsoPresetThreeDFormat": {
      "class": "Specifies an extrusion (three-dimensional) format. The MsoPresetThreeDFormat constants are numbered according to the order (left to right, top to bottom) in which they are shown on the 3D Style button on the Formatting toolbar."
    },
    "XlTotalsCalculation": {
      "class": "Specifies the type of calculation in the Totals row of a list column."
    },
    "SlicerItem": {
      "class": "Represents an item in a slicer."
    },
    "TimelineViewState": {
      "class": "Represents the timeline-specific members of a slicer view."
    },
    "XlParameterDataType": {
      "class": "Specifies the data type of a query parameter."
    },
    "XlParameterType": {
      "class": "Specifies how to determine the value of the parameter for the specified query table."
    },
    "XlCredentialsMethod": {
      "class": "Specifies the type of credentials method used."
    },
    "SparkHorizontalAxis": {
      "class": "Represents the settings for the horizontal axes of a group of sparklines."
    },
    "SparkVerticalAxis": {
      "class": "Represents the settings for the vertical axes of a group of sparklines."
    },
    "SparkColor": {
      "class": "Represents the color of the horizontal axis and the markers for points in a sparkline."
    },
    "SortField": {
      "class": "The SortField object contains all the sort information for the Worksheet, ListObject, and AutoFilter objects."
    },
    "ModelTableColumn": {
      "class": "Represents a single column inside a ModelTable object."
    },
    "ModelTableColumns": {
      "class": "Represents a ModelTableColumn collection of single columns inside a ModelTable object."
    },
    "MsoThemeColorIndex": {
      "class": "Indicates the Office theme color."
    },
    "MsoColorType": {
      "class": "Specifies the color type."
    },
    "MsoEditingType": {
      "class": "Specifies the editing type of a node."
    },
    "MsoSegmentType": {
      "class": "Specifies the type for a segment. Used with the Insert and AddNodes methods of the FreeformBuilder object."
    },
    "XlTimelineLevel": {
      "class": "One of the built-in hierarchy levels that Timeline supports."
    },
    "XlSortDataOption": {
      "class": "Specifies how to sort text."
    },
    "XlSortOn": {
      "class": "Specifies the parameter on which the data should be sorted."
    }
  },
  "methods": {
    "Application.ActivateMicrosoftApp": {
      "method": "Activates a Microsoft application. If the application is already running, this method activates the running application. If the application isn't running, this method starts a new instance of the application.",
      "return": null
    },
    "Application.AddCustomList": {
      "method": "Adds a custom list for custom autofill and/or custom sort.",
      "return": null
    },
    "Application.Calculate": {
      "method": "Calculates all open workbooks, a specific worksheet in a workbook, or a specified range of cells on a worksheet, as shown in the following table.",
      "return": null
    },
    "Application.CalculateFull": {
      "method": "Forces a full calculation of the data in all open workbooks.",
      "return": null
    },
    "Application.CalculateFullRebuild": {
      "method": "For all open workbooks, forces a full calculation of the data and rebuilds the dependencies.",
      "return": null
    },
    "Application.CalculateUntilAsyncQueriesDone": {
      "method": "Runs all pending queries to OLEDB and OLAP data sources.",
      "return": null
    },
    "Application.CentimetersToPoints": {
      "method": "Converts a measurement from centimeters to points (one point equals 0.035 centimeters).",
      "return": "float"
    },
    "Application.CheckAbort": {
      "method": "Stops recalculation in a Microsoft Excel application.",
      "return": null
    },
    "Application.CheckSpelling": {
      "method": "Checks the spelling of a single word.",
      "return": "bool"
    },
    "Application.ConvertFormula": {
      "method": "Converts cell references in a formula between the A1 and R1C1 reference styles, between relative and absolute references, or both. Variant.",
      "return": "VBA_Variant"
    },
    "Application.DDEExecute": {
      "method": "Runs a command or performs some other action or actions in another application by way of the specified DDE channel.",
      "return": null
    },
    "Application.DDEInitiate": {
      "method": "Opens a DDE channel to an application.",
      "return": "int"
    },
    "Application.DDEPoke": {
      "method": "Sends data to an application.",
      "return": null
    },
    "Application.DDERequest": {
      "method": "Requests information from the specified application. This method always returns an array.",
      "return": "VBA_Variant"
    },
    "Application.DDETerminate": {
      "method": "Closes a channel to another application.",
      "return": null
    },
    "Application.DeleteCustomList": {
      "method": "Deletes a custom list.",
      "return": null
    },
    "Application.DisplayXMLSourcePane": {
      "method": "Opens the XML Source task pane and displays the XML map specified by the XmlMap argument.",
      "return": null
    },
    "Application.DoubleClick": {
      "method": "Equivalent to double-clicking the active cell.",
      "return": null
    },
    "Application.Evaluate": {
      "method": "Converts a Microsoft Excel name to an object or a value.",
      "return": "VBA_Variant"
    },
    "Application.ExecuteExcel4Macro": {
      "method": "Runs a Microsoft Excel 4.0 macro function and then returns the result of the function. The return type depends on the function.",
      "return": "VBA_Variant"
    },
    "Application.FindFile": {
      "method": "Displays the Open dialog box.",
      "return": "bool"
    },
    "Application.GetCustomListContents": {
      "method": "Returns a custom list (an array of strings).",
      "return": "VBA_Variant"
    },
    "Application.GetCustomListNum": {
      "method": "Returns the custom list number for an array of strings. Use this method to match both built-in lists and custom-defined lists.",
      "return": "int"
    },
    "Application.GetOpenFilename": {
      "method": "Displays the standard Open dialog box and gets a file name from the user without actually opening any files.",
      "return": "VBA_Variant"
    },
    "Application.GetPhonetic": {
      "method": "Returns the Japanese phonetic text of the specified text string. This method is available to you only if you have selected or installed Japanese language support for Microsoft Office.",
      "return": "str"
    },
    "Application.GetSaveAsFilename": {
      "method": "Displays the standard Save As dialog box and gets a file name from the user without actually saving any files.",
      "return": "VBA_Variant"
    },
    "Application.Goto": {
      "method": "Selects any range or Visual Basic procedure in any workbook, and activates that workbook if it's not already active.",
      "return": null
    },
    "Application.Help": {
      "method": "Displays a Help topic.",
      "return": null
    },
    "Application.InchesToPoints": {
      "method": "Converts a measurement from inches to points.",
      "return": "float"
    },
    "Application.InputBox": {
      "method": "Displays a dialog box for user input. Returns the information entered in the dialog box.",
      "return": "VBA_Variant"
    },
    "Application.Intersect": {
      "method": "Returns a Range object that represents the rectangular intersection of two or more ranges. If one or more ranges from a different worksheet are specified, an error is returned.",
      "return": "Range"
    },
    "Application.MacroOptions": {
      "method": "Corresponds to options in the Macro Options dialog box. You can also use this method to display a user-defined function (UDF) in a built-in or new category within the Insert Function dialog box.",
      "return": null
    },
    "Application.MailLogoff": {
      "method": "Closes a MAPI mail session established by Microsoft Excel.",
      "return": null
    },
    "Application.MailLogon": {
      "method": "Logs on to MAPI Mail or Microsoft Exchange and establishes a mail session. If Microsoft Mail isn't already running, you must use this method to establish a mail session before mail or document routing functions can be used.",
      "return": null
    },
    "Application.NextLetter": {
      "method": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
      "return": "Workbook"
    },
    "Application.OnKey": {
      "method": "Runs a specified procedure when a particular key or key combination is pressed.",
      "return": null
    },
    "Application.OnRepeat": {
      "method": "Sets the Repeat item and the name of the procedure that will run if you choose the Repeat command after running the procedure that sets this property.",
      "return": null
    },
    "Application.OnTime": {
      "method": "Schedules a procedure to be run at a specified time in the future (either at a specific time of day or after a specific amount of time has passed).",
      "return": null
    },
    "Application.OnUndo": {
      "method": "Sets the text of the Undo command and the name of the procedure that's run if you choose the Undo command after running the procedure that sets this property.",
      "return": null
    },
    "Application.Quit": {
      "method": "Quits Microsoft Excel.",
      "return": null
    },
    "Application.RecordMacro": {
      "method": "Records code if the macro recorder is on.",
      "return": null
    },
    "Application.RegisterXLL": {
      "method": "Loads an XLL code resource and automatically registers the functions and commands contained in the resource.",
      "return": "bool"
    },
    "Application.Repeat": {
      "method": "Repeats the last user-interface action.",
      "return": null
    },
    "Application.Run": {
      "method": "Runs a macro or calls a function. This can be used to run a macro written in Visual Basic or the Microsoft Excel macro language, or to run a function in a DLL or XLL.",
      "return": "VBA_Variant"
    },
    "Application.SendKeys": {
      "method": "Sends keystrokes to the active application.",
      "return": null
    },
    "Application.SharePointVersion": {
      "method": "Returns the version number of SharePoint Foundation instances running at the site for the specified URL.",
      "return": "int"
    },
    "Application.Undo": {
      "method": "Cancels the last user-interface action.",
      "return": null
    },
    "Application.Union": {
      "method": "Returns the union of two or more ranges.",
      "return": "Range"
    },
    "Application.Volatile": {
      "method": "Marks a user-defined function as volatile. A volatile function must be recalculated whenever calculation occurs in any cells on the worksheet. A nonvolatile function is recalculated only when the input variables change. This method has no effect if it's not inside a user-defined function used to calculate a worksheet cell.",
      "return": null
    },
    "Application.Wait": {
      "method": "Pauses a running macro until a specified time. Returns True if the specified time has arrived.",
      "return": "bool"
    },
    "Range.Activate": {
      "method": "Activates a single cell, which must be inside the current selection. To select a range of cells, use the Select method.",
      "return": "VBA_Variant"
    },
    "Range.AddComment": {
      "method": "Adds a comment to the range.",
      "return": "Comment"
    },
    "Range.AddCommentThreaded": {
      "method": "Adds a new modern threaded comment to the range if no comment already exists.",
      "return": "CommentThreaded"
    },
    "Range.AdvancedFilter": {
      "method": "Filters or copies data from a list based on a criteria range. If the initial selection is a single cell, that cell's current region is used.",
      "return": "VBA_Variant"
    },
    "Range.AllocateChanges": {
      "method": "Performs a writeback operation for all edited cells in a range based on an OLAP data source.",
      "return": null
    },
    "Range.ApplyNames": {
      "method": "Applies names to the cells in the specified range.",
      "return": "VBA_Variant"
    },
    "Range.ApplyOutlineStyles": {
      "method": "Applies outlining styles to the specified range.",
      "return": "VBA_Variant"
    },
    "Range.AutoComplete": {
      "method": "Returns an AutoComplete match from the list. If there's no AutoComplete match or if more than one entry in the list matches the string to complete, this method returns an empty string.",
      "return": "str"
    },
    "Range.AutoFill": {
      "method": "Performs an autofill on the cells in the specified range.",
      "return": "VBA_Variant"
    },
    "Range.AutoFilter": {
      "method": "Filters a list by using the AutoFilter.",
      "return": "VBA_Variant"
    },
    "Range.AutoFit": {
      "method": "Changes the width of the columns in the range or the height of the rows in the range to achieve the best fit.",
      "return": "VBA_Variant"
    },
    "Range.AutoOutline": {
      "method": "Automatically creates an outline for the specified range. If the range is a single cell, Microsoft Excel creates an outline for the entire sheet. The new outline replaces any existing outline.",
      "return": "VBA_Variant"
    },
    "Range.BorderAround": {
      "method": "Adds a border to a range and sets the Color, LineStyle, and Weight properties of the Border object for the new border. Variant.",
      "return": "VBA_Variant"
    },
    "Range.Calculate": {
      "method": "Calculates all open workbooks, a specific worksheet in a workbook, or a specified range of cells on a worksheet, as shown in the table in the Remarks section.",
      "return": "VBA_Variant"
    },
    "Range.CalculateRowMajorOrder": {
      "method": "Calculates a specified range of cells.",
      "return": "VBA_Variant"
    },
    "Range.CheckSpelling": {
      "method": "Checks the spelling of an object.",
      "return": "VBA_Variant"
    },
    "Range.Clear": {
      "method": "Clears the entire object.",
      "return": "VBA_Variant"
    },
    "Range.ClearComments": {
      "method": "Clears all cell comments from the specified range.",
      "return": null
    },
    "Range.ClearContents": {
      "method": "Clears formulas and values from the range.",
      "return": "VBA_Variant"
    },
    "Range.ClearFormats": {
      "method": "Clears the formatting of the object.",
      "return": "VBA_Variant"
    },
    "Range.ClearHyperlinks": {
      "method": "Removes all hyperlinks from the specified range.",
      "return": "None"
    },
    "Range.ClearNotes": {
      "method": "Clears notes and sound notes from all the cells in the specified range.",
      "return": "VBA_Variant"
    },
    "Range.ClearOutline": {
      "method": "Clears the outline for the specified range.",
      "return": "VBA_Variant"
    },
    "Range.ColumnDifferences": {
      "method": "Returns a Range object that represents all the cells whose contents are different from the comparison cell in each column.",
      "return": "Range"
    },
    "Range.Consolidate": {
      "method": "Consolidates data from multiple ranges on multiple worksheets into a single range on a single worksheet. Variant.",
      "return": "VBA_Variant"
    },
    "Range.ConvertToLinkedDataType": {
      "method": "Attempts to convert all the cells in the range to a Linked data type such as Stocks or Geography.",
      "return": null
    },
    "Range.Copy": {
      "method": "Copies the range to the specified range or to the Clipboard.",
      "return": "VBA_Variant"
    },
    "Range.CopyFromRecordset": {
      "method": "Copies the contents of an ADO or DAO Recordset object onto a worksheet, beginning at the upper-left corner of the specified range. If the Recordset object contains fields with OLE objects in them, this method fails.",
      "return": "int"
    },
    "Range.CopyPicture": {
      "method": "Copies the selected object to the Clipboard as a picture. Variant.",
      "return": "VBA_Variant"
    },
    "Range.CreateNames": {
      "method": "Creates names in the specified range, based on text labels in the sheet.",
      "return": "VBA_Variant"
    },
    "Range.Cut": {
      "method": "Cuts the object to the Clipboard or pastes it into a specified destination.",
      "return": "VBA_Variant"
    },
    "Range.DataTypeToText": {
      "method": "If any of the cells in the range are a Linked data type, such as Stocks or Geography, this call will convert their values to text.",
      "return": null
    },
    "Range.DataSeries": {
      "method": "Creates a data series in the specified range. Variant.",
      "return": "VBA_Variant"
    },
    "Range.Delete": {
      "method": "Deletes the object.",
      "return": "VBA_Variant"
    },
    "Range.DialogBox": {
      "method": "Displays a dialog box defined by a dialog box definition table on a Microsoft Excel 4.0 macro sheet. Returns the number of the chosen control, or returns False if the user chooses the Cancel button.",
      "return": "VBA_Variant"
    },
    "Range.Dirty": {
      "method": "Designates a range to be recalculated when the next recalculation occurs.",
      "return": null
    },
    "Range.DiscardChanges": {
      "method": "Discards all changes in the edited cells of the range.",
      "return": null
    },
    "Range.EditionOptions": {
      "method": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
      "return": "VBA_Variant"
    },
    "Range.ExportAsFixedFormat": {
      "method": "Exports to a file of the specified format.",
      "return": null
    },
    "Range.FillDown": {
      "method": "Fills down from the top cell or cells in the specified range to the bottom of the range. The contents and formatting of the cell or cells in the top row of a range are copied into the rest of the rows in the range.",
      "return": "VBA_Variant"
    },
    "Range.FillLeft": {
      "method": "Fills left from the rightmost cell or cells in the specified range. The contents and formatting of the cell or cells in the rightmost column of a range are copied into the rest of the columns in the range.",
      "return": "VBA_Variant"
    },
    "Range.FillRight": {
      "method": "Fills right from the leftmost cell or cells in the specified range. The contents and formatting of the cell or cells in the leftmost column of a range are copied into the rest of the columns in the range.",
      "return": "VBA_Variant"
    },
    "Range.FillUp": {
      "method": "Fills up from the bottom cell or cells in the specified range to the top of the range. The contents and formatting of the cell or cells in the bottom row of a range are copied into the rest of the rows in the range.",
      "return": "VBA_Variant"
    },
    "Range.Find": {
      "method": "Finds specific information in a range.",
      "return": "Range"
    },
    "Range.FindNext": {
      "method": "Continues a search that was begun with the Find method. Finds the next cell that matches those same conditions and returns a Range object that represents that cell. This does not affect the selection or the active cell.",
      "return": "Range"
    },
    "Range.FindPrevious": {
      "method": "Continues a search that was begun with the Find method. Finds the previous cell that matches those same conditions and returns a Range object that represents that cell. Doesn't affect the selection or the active cell.",
      "return": "Range"
    },
    "Range.FlashFill": {
      "method": "True indicates that the Excel Flash Fill feature has been enabled and is active.",
      "return": "None"
    },
    "Range.FunctionWizard": {
      "method": "Starts the Function Wizard for the upper-left cell of the range.",
      "return": "VBA_Variant"
    },
    "Range.Group": {
      "method": "When the Range object represents a single cell in a PivotTable field's data range, the Group method performs numeric or date-based grouping in that field.",
      "return": "VBA_Variant"
    },
    "Range.Insert": {
      "method": "Inserts a cell or a range of cells into the worksheet or macro sheet and shifts other cells away to make space.",
      "return": "VBA_Variant"
    },
    "Range.InsertIndent": {
      "method": "Adds an indent to the specified range.",
      "return": null
    },
    "Range.Justify": {
      "method": "Rearranges the text in a range so that it fills the range evenly.",
      "return": "VBA_Variant"
    },
    "Range.ListNames": {
      "method": "Pastes a list of all nonhidden names onto the worksheet, beginning with the first cell in the range.",
      "return": "VBA_Variant"
    },
    "Range.Merge": {
      "method": "Creates a merged cell from the specified Range object.",
      "return": null
    },
    "Range.NavigateArrow": {
      "method": "Navigates a tracer arrow for the specified range to the precedent, dependent, or error-causing cell or cells. Selects the precedent, dependent, or error cells and returns a Range object that represents the new selection. This method causes an error if it's applied to a cell without visible tracer arrows.",
      "return": "VBA_Variant"
    },
    "Range.NoteText": {
      "method": "Returns or sets the cell note associated with the cell in the upper-left corner of the range. Read/write String. Cell notes have been replaced by range comments. For more information, see the Comment object.",
      "return": "str"
    },
    "Range.Parse": {
      "method": "Parses a range of data and breaks it into multiple cells. Distributes the contents of the range to fill several adjacent columns; the range can be no more than one column wide.",
      "return": "VBA_Variant"
    },
    "Range.PasteSpecial": {
      "method": "Pastes a Range object that has been copied into the specified range.",
      "return": "VBA_Variant"
    },
    "Range.PrintOut": {
      "method": "Prints the object.",
      "return": "VBA_Variant"
    },
    "Range.PrintPreview": {
      "method": "Shows a preview of the object as it would look when printed.",
      "return": "VBA_Variant"
    },
    "Range.RemoveDuplicates": {
      "method": "Removes duplicate values from a range of values.",
      "return": null
    },
    "Range.RemoveSubtotal": {
      "method": "Removes subtotals from a list.",
      "return": "VBA_Variant"
    },
    "Range.RowDifferences": {
      "method": "Returns a Range object that represents all the cells whose contents are different from those of the comparison cell in each row.",
      "return": "Range"
    },
    "Range.Run": {
      "method": "Runs the Microsoft Excel macro at this location. The range must be on a macro sheet.",
      "return": "VBA_Variant"
    },
    "Range.Select": {
      "method": "Selects the object.",
      "return": "VBA_Variant"
    },
    "Range.SetCellDataTypeFromCell": {
      "method": "Creates another instance of a Linked data type, such as Stocks or Geography, that exists in another cell. The new instance will be linked to the data source in the same way as the original, so it will refresh from the service if you call the Workbook.RefreshAll method.",
      "return": null
    },
    "Range.SetPhonetic": {
      "method": "Creates Phonetic objects for all the cells in the specified range.",
      "return": null
    },
    "Range.Show": {
      "method": "Scrolls through the contents of the active window to move the range into view. The range must consist of a single cell in the active document.",
      "return": "VBA_Variant"
    },
    "Range.ShowCard": {
      "method": "For a cell containing a Linked data type, such as Stocks or Geography, this method causes a card to appear that shows details about the cell (that is, the same card that the user can view by choosing the cell icon).",
      "return": null
    },
    "Range.ShowDependents": {
      "method": "Draws tracer arrows to the direct dependents of the range.",
      "return": "VBA_Variant"
    },
    "Range.ShowErrors": {
      "method": "Draws tracer arrows through the precedents tree to the cell that's the source of the error, and returns the range that contains that cell.",
      "return": "VBA_Variant"
    },
    "Range.ShowPrecedents": {
      "method": "Draws tracer arrows to the direct precedents of the range.",
      "return": "VBA_Variant"
    },
    "Range.Sort": {
      "method": "Sorts a range of values.",
      "return": "VBA_Variant"
    },
    "Range.SortSpecial": {
      "method": "Uses East Asian sorting methods to sort the range, a PivotTable report, or uses the method for the active region if the range contains only one cell. For example, Japanese sorts in the order of the Kana syllabary.",
      "return": "VBA_Variant"
    },
    "Range.Speak": {
      "method": "Causes the cells of the range to be spoken in row order or column order.",
      "return": null
    },
    "Range.SpecialCells": {
      "method": "Returns a Range object that represents all the cells that match the specified type and value.",
      "return": "Range"
    },
    "Range.SubscribeTo": {
      "method": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
      "return": "VBA_Variant"
    },
    "Range.Subtotal": {
      "method": "Creates subtotals for the range (or the current region, if the range is a single cell).",
      "return": "VBA_Variant"
    },
    "Range.Table": {
      "method": "Creates a data table based on input values and formulas that you define on a worksheet.",
      "return": "VBA_Variant"
    },
    "Range.TextToColumns": {
      "method": "Parses a column of cells that contain text into several columns.",
      "return": "VBA_Variant"
    },
    "Range.Ungroup": {
      "method": "Promotes a range in an outline (that is, decreases its outline level). The specified range must be a row or column, or a range of rows or columns. If the range is in a PivotTable report, this method ungroups the items contained in the range.",
      "return": "VBA_Variant"
    },
    "Range.UnMerge": {
      "method": "Separates a merged area into individual cells.",
      "return": null
    },
    "Chart.Activate": {
      "method": "Makes the current chart the active chart.",
      "return": null
    },
    "Chart.ApplyChartTemplate": {
      "method": "Applies a standard or custom chart type to a chart.",
      "return": null
    },
    "Chart.ApplyDataLabels": {
      "method": "Applies data labels to all the series in a chart.",
      "return": null
    },
    "Chart.ApplyLayout": {
      "method": "Applies the layouts shown in the ribbon.",
      "return": null
    },
    "Chart.Axes": {
      "method": "Returns an object that represents either a single axis or a collection of the axes on the chart.",
      "return": "VBA_Object"
    },
    "Chart.ChartGroups": {
      "method": "Returns an object that represents either a single chart group (a ChartGroup object) or a collection of all the chart groups in the chart (a ChartGroups object). The returned collection includes every type of group.",
      "return": "VBA_Object"
    },
    "Chart.ChartObjects": {
      "method": "Returns an object that represents either a single embedded chart (a ChartObject object) or a collection of all the embedded charts (a ChartObjects object) on the sheet.",
      "return": "VBA_Object"
    },
    "Chart.ChartWizard": {
      "method": "Modifies the properties of the given chart. Use this method to quickly format a chart without setting all the individual properties. This method is noninteractive, and it changes only the specified properties.",
      "return": null
    },
    "Chart.CheckSpelling": {
      "method": "Checks the spelling of an object.",
      "return": null
    },
    "Chart.ClearToMatchColorStyle": {
      "method": "Clears all colors on the specified chart that don't follow the color style applied to the chart.",
      "return": "None"
    },
    "Chart.ClearToMatchStyle": {
      "method": "Clears the chart elements formatting to automatic.",
      "return": null
    },
    "Chart.Copy": {
      "method": "Copies the sheet to another location in the workbook.",
      "return": null
    },
    "Chart.CopyPicture": {
      "method": "Copies the selected object to the Clipboard as a picture.",
      "return": null
    },
    "Chart.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Chart.Evaluate": {
      "method": "Converts a Microsoft Excel name to an object or a value.",
      "return": "VBA_Variant"
    },
    "Chart.Export": {
      "method": "Exports the chart in a graphic format.",
      "return": "bool"
    },
    "Chart.ExportAsFixedFormat": {
      "method": "Exports to a file of the specified format.",
      "return": null
    },
    "Chart.FullSeriesCollection": {
      "method": "Enables retrieving the filtered out series specified by the Index argument.",
      "return": "VBA_OBJECT"
    },
    "Chart.GetChartElement": {
      "method": "Returns information about the chart element at specified x and  y coordinates. This method is unusual in that you specify values for only the first two arguments. Microsoft Excel fills in the other arguments, and your code should examine those values when the method returns.",
      "return": null
    },
    "Chart.Location": {
      "method": "Moves the chart to a new location.",
      "return": "The new Chart at the new location. Note that the Location method deletes the old chart and creates a new one in the new location. As a result, the old chart is invalidated and subsequent operations on it is not well defined."
    },
    "Chart.Move": {
      "method": "Moves the chart to another location in the workbook.",
      "return": null
    },
    "Chart.OLEObjects": {
      "method": "Returns an object that represents either a single OLE object (an OLEObject) or a collection of all OLE objects (an OLEObjects collection) on the chart or sheet. Read-only.",
      "return": "VBA_Object"
    },
    "Chart.Paste": {
      "method": "Pastes chart data from the Clipboard into the specified chart.",
      "return": null
    },
    "Chart.PrintOut": {
      "method": "Prints the object.",
      "return": "VBA_Variant"
    },
    "Chart.PrintPreview": {
      "method": "Shows a preview of the object as it would look when printed.",
      "return": null
    },
    "Chart.Protect": {
      "method": "Protects a chart so that it cannot be modified.",
      "return": null
    },
    "Chart.Refresh": {
      "method": "Causes the specified chart to be redrawn immediately.",
      "return": null
    },
    "Chart.SaveAs": {
      "method": "Saves changes to the chart or worksheet in a different file.",
      "return": null
    },
    "Chart.SaveChartTemplate": {
      "method": "Saves a custom chart template to the list of available chart templates.",
      "return": null
    },
    "Chart.Select": {
      "method": "Selects the object.",
      "return": null
    },
    "Chart.SeriesCollection": {
      "method": "Returns an object that represents either a single series (a Series object) or a collection of all the series (a SeriesCollection collection) in the chart or chart group.",
      "return": "VBA_Object"
    },
    "Chart.SetBackgroundPicture": {
      "method": "Sets the background graphic for a chart.",
      "return": null
    },
    "Chart.SetDefaultChart": {
      "method": "Specifies the name of the chart template that Microsoft Excel uses when creating new charts.",
      "return": null
    },
    "Chart.SetElement": {
      "method": "Sets chart elements on a chart. Read/write MsoChartElementType.",
      "return": "None"
    },
    "Chart.SetSourceData": {
      "method": "Sets the source data range for the chart.",
      "return": null
    },
    "Chart.Unprotect": {
      "method": "Removes protection from a sheet or workbook. This method has no effect if the sheet or workbook isn't protected.",
      "return": null
    },
    "ProtectedViewWindow.Activate": {
      "method": "Brings the Protected View window to the front of the z-order.",
      "return": "None"
    },
    "ProtectedViewWindow.Close": {
      "method": "Closes the specified Protected View window.",
      "return": "bool"
    },
    "ProtectedViewWindow.Edit": {
      "method": "Opens the workbook that is open for editing in the specified Protected View window.",
      "return": "Workbook"
    },
    "Window.Activate": {
      "method": "Brings the window to the front of the z-order.",
      "return": "VBA_Variant"
    },
    "Window.ActivateNext": {
      "method": "Activates the specified window and then sends it to the back of the window z-order.",
      "return": "VBA_Variant"
    },
    "Window.ActivatePrevious": {
      "method": "Activates the specified window and then activates the window at the back of the window z-order.",
      "return": "VBA_Variant"
    },
    "Window.Close": {
      "method": "Closes the object.",
      "return": "bool"
    },
    "Window.LargeScroll": {
      "method": "Scrolls the contents of the window by pages.",
      "return": "VBA_Variant"
    },
    "Window.NewWindow": {
      "method": "Creates a new window or a copy of the specified window.",
      "return": "Window"
    },
    "Window.PointsToScreenPixelsX": {
      "method": "Converts a horizontal measurement from points (document coordinates) to screen pixels (screen coordinates). Returns the converted measurement as a Long value.",
      "return": "int"
    },
    "Window.PointsToScreenPixelsY": {
      "method": "Converts a vertical measurement from points (document coordinates) to screen pixels (screen coordinates). Returns the converted measurement as a Long value.",
      "return": "int"
    },
    "Window.PrintOut": {
      "method": "Prints the object.",
      "return": "VBA_Variant"
    },
    "Window.PrintPreview": {
      "method": "Shows a preview of the object as it would look when printed.",
      "return": "VBA_Variant"
    },
    "Window.RangeFromPoint": {
      "method": "Returns the Shape or Range object that is positioned at the specified pair of screen coordinates. If there isn't a shape located at the specified coordinates, this method returns Nothing.",
      "return": "VBA_Object"
    },
    "Window.ScrollIntoView": {
      "method": "Scrolls the document window so that the contents of a specified rectangular area are displayed in either the upper-left or lower-right corner of the document window or pane (depending on the value of the Start argument).",
      "return": null
    },
    "Window.ScrollWorkbookTabs": {
      "method": "Scrolls through the workbook tabs at the bottom of the window. Doesn't affect the active sheet in the workbook.",
      "return": "VBA_Variant"
    },
    "Window.SmallScroll": {
      "method": "Scrolls the contents of the window by rows or columns.",
      "return": "VBA_Variant"
    },
    "Workbook.AcceptAllChanges": {
      "method": "Accepts all changes in the specified shared workbook.",
      "return": null
    },
    "Workbook.Activate": {
      "method": "Activates the first window associated with the workbook.",
      "return": null
    },
    "Workbook.AddToFavorites": {
      "method": "Adds a shortcut to the workbook or hyperlink to the Favorites folder.",
      "return": null
    },
    "Workbook.ApplyTheme": {
      "method": "Applies the specified theme to the current workbook.",
      "return": null
    },
    "Workbook.BreakLink": {
      "method": "Converts formulas linked to other Microsoft Excel sources or OLE sources to values.",
      "return": null
    },
    "Workbook.CanCheckIn": {
      "method": "True if Microsoft Excel can check in a specified workbook to a server. Read/write Boolean.",
      "return": "bool"
    },
    "Workbook.ChangeFileAccess": {
      "method": "Changes the access permissions for the workbook. This may require an updated version to be loaded from the disk.",
      "return": null
    },
    "Workbook.ChangeLink": {
      "method": "Changes a link from one document to another.",
      "return": null
    },
    "Workbook.CheckIn": {
      "method": "Returns a workbook from a local computer to a server, and sets the local workbook to read-only so that it cannot be edited locally. Calling this method will also close the workbook.",
      "return": null
    },
    "Workbook.CheckInWithVersion": {
      "method": "Saves a workbook to a server from a local computer, and sets the local workbook to read-only so that it cannot be edited locally.",
      "return": "None"
    },
    "Workbook.Close": {
      "method": "Closes the object.",
      "return": null
    },
    "Workbook.ConvertComments": {
      "method": "Converts all legacy comments and notes to modern comments.",
      "return": null
    },
    "Workbook.CreateForecastSheet": {
      "method": "If you have historical time-based data, you can use CreateForecastSheet to create a forecast. When you create a forecast, a new worksheet is created that contains a table of the historical and predicted values and a chart showing this. A forecast can help you predict things like future sales, inventory requirements, or consumer trends.",
      "return": "None"
    },
    "Workbook.DeleteNumberFormat": {
      "method": "Deletes a custom number format from the workbook.",
      "return": null
    },
    "Workbook.EnableConnections": {
      "method": "The EnableConnections method allows developers to programmatically enable data connections within the workbook for the user.",
      "return": null
    },
    "Workbook.EndReview": {
      "method": "Terminates a review of a file that has been sent for review by using the SendForReview method.",
      "return": null
    },
    "Workbook.ExclusiveAccess": {
      "method": "Assigns the current user exclusive access to the workbook that's open as a shared list.",
      "return": "bool"
    },
    "Workbook.ExportAsFixedFormat": {
      "method": "The ExportAsFixedFormat method is used to publish a workbook to either the PDF or XPS format.",
      "return": null
    },
    "Workbook.FollowHyperlink": {
      "method": "Displays a cached document if it has already been downloaded. Otherwise, this method resolves the hyperlink, downloads the target document, and displays the document in the appropriate application.",
      "return": null
    },
    "Workbook.ForwardMailer": {
      "method": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
      "return": null
    },
    "Workbook.GetWorkflowTasks": {
      "method": "Returns the collection of WorkflowTask objects for the specified workbook.",
      "return": "WorkFlowTasks"
    },
    "Workbook.GetWorkflowTemplates": {
      "method": "Returns the collection of WorkflowTemplate objects for the specified workbook.",
      "return": "WorkflowTemplates"
    },
    "Workbook.HighlightChangesOptions": {
      "method": "Controls how changes are shown in a shared workbook.",
      "return": null
    },
    "Workbook.LinkInfo": {
      "method": "Returns the link date and update status.",
      "return": "VBA_Variant"
    },
    "Workbook.LinkSources": {
      "method": "Returns an array of links in the workbook. The names in the array are the names of the linked documents, editions, or DDE or OLE servers. Returns Empty if there are no links.",
      "return": "VBA_Variant"
    },
    "Workbook.LockServerFile": {
      "method": "Locks the workbook on the server to prevent modification.",
      "return": null
    },
    "Workbook.MergeWorkbook": {
      "method": "Merges changes from one workbook into an open workbook.",
      "return": null
    },
    "Workbook.NewWindow": {
      "method": "Creates a new window or a copy of the specified window.",
      "return": "Window"
    },
    "Workbook.OpenLinks": {
      "method": "Opens the supporting documents for a link or links.",
      "return": null
    },
    "Workbook.PivotCaches": {
      "method": "Returns a PivotCaches collection that represents all the PivotTable caches in the specified workbook. Read-only.",
      "return": "PivotCaches"
    },
    "Workbook.Post": {
      "method": "Posts the specified workbook to a public folder. This method works only with a Microsoft Exchange client connected to a Microsoft Exchange server.",
      "return": null
    },
    "Workbook.PrintOut": {
      "method": "Prints the object.",
      "return": "VBA_Variant"
    },
    "Workbook.PrintPreview": {
      "method": "Shows a preview of the object as it would look when printed.",
      "return": null
    },
    "Workbook.Protect": {
      "method": "Protects a workbook so that it cannot be modified.",
      "return": null
    },
    "Workbook.ProtectSharing": {
      "method": "Saves the workbook and protects it for sharing.",
      "return": null
    },
    "Workbook.PublishToDocs": {
      "method": "Saves the workbook and publishes it to a document.",
      "return": null
    },
    "Workbook.PurgeChangeHistoryNow": {
      "method": "Removes entries from the change log for the specified workbook.",
      "return": null
    },
    "Workbook.RefreshAll": {
      "method": "Refreshes all external data ranges and PivotTable reports in the specified workbook.",
      "return": null
    },
    "Workbook.RejectAllChanges": {
      "method": "Rejects all changes in the specified shared workbook.",
      "return": null
    },
    "Workbook.ReloadAs": {
      "method": "Reloads a workbook based on an HTML document, using the specified document encoding.",
      "return": null
    },
    "Workbook.RemoveDocumentInformation": {
      "method": "Removes all information of the specified type from the workbook.",
      "return": null
    },
    "Workbook.RemoveUser": {
      "method": "Disconnects the specified user from the shared workbook.",
      "return": null
    },
    "Workbook.Reply": {
      "method": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
      "return": null
    },
    "Workbook.ReplyAll": {
      "method": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
      "return": null
    },
    "Workbook.ReplyWithChanges": {
      "method": "Sends an email message to the author of a workbook that has been sent out for review, notifying them that a reviewer has completed review of the workbook.",
      "return": null
    },
    "Workbook.ResetColors": {
      "method": "Resets the color palette to the default colors.",
      "return": null
    },
    "Workbook.RunAutoMacros": {
      "method": "Runs the Auto_Open, Auto_Close, Auto_Activate, or Auto_Deactivate macro attached to the workbook. This method is included for backward compatibility. For new Visual Basic code, you should use the Open, Activate, and Deactivate events and the Close method instead of these macros.",
      "return": null
    },
    "Workbook.Save": {
      "method": "Saves changes to the specified workbook.",
      "return": null
    },
    "Workbook.SaveAs": {
      "method": "Saves changes to the workbook in a different file.",
      "return": null
    },
    "Workbook.SaveAsXMLData": {
      "method": "Exports the data that has been mapped to the specified XML schema map to an XML data file.",
      "return": null
    },
    "Workbook.SaveCopyAs": {
      "method": "Saves a copy of the workbook to a file but doesn't modify the open workbook in memory.",
      "return": null
    },
    "Workbook.SendFaxOverInternet": {
      "method": "Sends a worksheet as a fax to the specified recipients.",
      "return": null
    },
    "Workbook.SendForReview": {
      "method": "Sends a workbook in an email message for review to the specified recipients.",
      "return": null
    },
    "Workbook.SendMail": {
      "method": "Sends the workbook by using the installed mail system.",
      "return": null
    },
    "Workbook.SendMailer": {
      "method": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
      "return": null
    },
    "Workbook.SetLinkOnData": {
      "method": "Sets the name of a procedure that runs whenever a DDE link is updated.",
      "return": null
    },
    "Workbook.SetPasswordEncryptionOptions": {
      "method": "Sets the options for encrypting workbooks by using passwords.",
      "return": null
    },
    "Workbook.ToggleFormsDesign": {
      "method": "Used to toggle Excel into Design mode when using forms controls.",
      "return": null
    },
    "Workbook.Unprotect": {
      "method": "Removes protection from a sheet or workbook. This method has no effect if the sheet or workbook isn't protected.",
      "return": null
    },
    "Workbook.UnprotectSharing": {
      "method": "Turns off protection for sharing and saves the workbook.",
      "return": null
    },
    "Workbook.UpdateFromFile": {
      "method": "Updates a read-only workbook from the saved disk version of the workbook if the disk version is more recent than the copy of the workbook that is loaded in memory. If the disk copy hasn't changed since the workbook was loaded, the in-memory copy of the workbook isn't reloaded.",
      "return": null
    },
    "Workbook.UpdateLink": {
      "method": "Updates a Microsoft Excel, DDE, or OLE link (or links).",
      "return": null
    },
    "Workbook.WebPagePreview": {
      "method": "Displays a preview of the specified workbook as it would look if saved as a webpage.",
      "return": null
    },
    "Workbook.XmlImport": {
      "method": "Imports an XML data file into the current workbook.",
      "return": "XlXmlImportResult"
    },
    "Workbook.XmlImportXml": {
      "method": "Imports an XML data stream that has been previously loaded into memory. Excel uses the first qualifying map found, or if the destination range is specified, Excel automatically lists the data.",
      "return": "XlXmlImportResult"
    },
    "AddIns.Add": {
      "method": "Adds a new add-in file to the list of add-ins. Returns an AddIn object.",
      "return": "AddIn"
    },
    "AddIns2.Add": {
      "method": "Adds a new add-in to the list of add-ins.",
      "return": "AddIn"
    },
    "AutoCorrect.AddReplacement": {
      "method": "Adds an entry to the array of AutoCorrect replacements.",
      "return": "VBA_Variant"
    },
    "AutoCorrect.DeleteReplacement": {
      "method": "Deletes an entry from the array of AutoCorrect replacements.",
      "return": "VBA_Variant"
    },
    "Sheets.Add": {
      "method": "Creates a new worksheet, chart, or macro sheet. The new worksheet becomes the active sheet.",
      "return": "An Object value that represents the new worksheet, chart, or macro sheet."
    },
    "Sheets.Add2": {
      "method": "This method is only implemented for the Charts collection object and will produce a run-time error if used on the Sheets and Worksheets objects.",
      "return": "VBA_OBJECT"
    },
    "Sheets.Copy": {
      "method": "Copies the sheet to another location in the workbook.",
      "return": null
    },
    "Sheets.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Sheets.FillAcrossSheets": {
      "method": "Copies a range to the same area on all other worksheets in a collection.",
      "return": null
    },
    "Sheets.Move": {
      "method": "Moves the sheet to another location in the workbook.",
      "return": null
    },
    "Sheets.PrintOut": {
      "method": "Prints the object.",
      "return": "VBA_Variant"
    },
    "Sheets.PrintPreview": {
      "method": "Shows a preview of the object as it would look when printed.",
      "return": null
    },
    "Sheets.Select": {
      "method": "Selects the object.",
      "return": null
    },
    "Names.Add": {
      "method": "Defines a new name for a range of cells.",
      "return": "Name"
    },
    "Names.Item": {
      "method": "Returns a single Name object from a Names collection.",
      "return": "Name"
    },
    "ODBCErrors.Item": {
      "method": "Returns a single object from a collection.",
      "return": "ODBCError"
    },
    "OLEDBErrors.Item": {
      "method": "Returns a single object from a collection.",
      "return": "OLEDBError"
    },
    "ProtectedViewWindows.Open": {
      "method": "Opens the specified workbook in a new Protected View window.",
      "return": "ProtectedViewWindow"
    },
    "QuickAnalysis.Hide": {
      "method": "Hides specific members of the Analysis Lens user interface.",
      "return": "None"
    },
    "QuickAnalysis.Show": {
      "method": "Displays specific members of the Analysis Lens user interface.",
      "return": "None"
    },
    "RecentFiles.Add": {
      "method": "Adds a file to the list of recently used files.",
      "return": "RecentFile"
    },
    "RTD.RefreshData": {
      "method": "Requests an update of real-time data from the real-time data server.",
      "return": null
    },
    "RTD.RestartServers": {
      "method": "Reconnects to a real-time data server (RTD).",
      "return": null
    },
    "Speech.Speak": {
      "method": "Microsoft Excel plays back the text string that is passed as an argument.",
      "return": null
    },
    "Watches.Add": {
      "method": "Adds a range that is tracked when the worksheet is recalculated.",
      "return": "Watch"
    },
    "Watches.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Windows.Arrange": {
      "method": "Arranges the windows on the screen.",
      "return": "VBA_Variant"
    },
    "Windows.BreakSideBySide": {
      "method": "Ends side-by-side mode if two windows are in side-by-side mode. Returns a Boolean value that represents whether the method was successful.",
      "return": "bool"
    },
    "Windows.CompareSideBySideWith": {
      "method": "Opens two windows in side-by-side mode. Returns a Boolean value.",
      "return": "bool"
    },
    "Windows.ResetPositionsSideBySide": {
      "method": "Resets the position of two worksheet windows that are being compared side by side.",
      "return": null
    },
    "Workbooks.Add": {
      "method": "Creates a new workbook. The new workbook becomes the active workbook.",
      "return": "Workbook"
    },
    "Workbooks.CanCheckOut": {
      "method": "True if Microsoft Excel can check out a specified workbook from a server. Read/write Boolean.",
      "return": "bool"
    },
    "Workbooks.CheckOut": {
      "method": "Returns a String representing a specified workbook from a server to a local computer for editing.",
      "return": null
    },
    "Workbooks.Close": {
      "method": "Closes the object.",
      "return": null
    },
    "Workbooks.Open": {
      "method": "Opens a workbook.",
      "return": "Workbook"
    },
    "Workbooks.OpenDatabase": {
      "method": "Returns a Workbook object representing a database.",
      "return": "Workbook"
    },
    "Workbooks.OpenText": {
      "method": "Loads and parses a text file as a new workbook with a single sheet that contains the parsed text-file data.",
      "return": null
    },
    "Workbooks.OpenXML": {
      "method": "Opens an XML data file. Returns a Workbook object.",
      "return": "Workbook"
    },
    "WorksheetFunction.AccrInt": {
      "method": "Returns the accrued interest for a security that pays periodic interest.",
      "return": "float"
    },
    "WorksheetFunction.AccrIntM": {
      "method": "Returns the accrued interest for a security that pays interest at maturity.",
      "return": "float"
    },
    "WorksheetFunction.Acos": {
      "method": "Returns the arccosine, or inverse cosine, of a number. The arccosine is the angle whose cosine is Arg1. The returned angle is given in radians in the range 0 (zero) to pi.",
      "return": "float"
    },
    "WorksheetFunction.Acosh": {
      "method": "Returns the inverse hyperbolic cosine of a number. Number must be greater than or equal to 1. The inverse hyperbolic cosine is the value whose hyperbolic cosine is Arg1, so Acosh(Cosh(number)) equals Arg1.",
      "return": "float"
    },
    "WorksheetFunction.Acot": {
      "method": "Returns the arccotangent of a number, in radians in the range 0 (zero) to pi.",
      "return": "float"
    },
    "WorksheetFunction.Acoth": {
      "method": "Returns the inverse hyperbolic cotangent of a number.",
      "return": "float"
    },
    "WorksheetFunction.Aggregate": {
      "method": "Returns an aggregate in a list or database.",
      "return": "float"
    },
    "WorksheetFunction.AmorDegrc": {
      "method": "Returns the depreciation for each accounting period. This function is provided for the French accounting system.",
      "return": "float"
    },
    "WorksheetFunction.AmorLinc": {
      "method": "Returns the depreciation for each accounting period. This function is provided for the French accounting system.",
      "return": "float"
    },
    "WorksheetFunction.And": {
      "method": "Returns True if all its arguments are True; returns False if one or more arguments is False.",
      "return": "bool"
    },
    "WorksheetFunction.Arabic": {
      "method": "Converts a Roman numeral to an Arabic numeral.",
      "return": "float"
    },
    "WorksheetFunction.Asc": {
      "method": "For double-byte character set (DBCS) languages, changes full-width (double-byte) characters to half-width (single-byte) characters.",
      "return": "str"
    },
    "WorksheetFunction.Asin": {
      "method": "Returns the arcsine, or inverse sine, of a number. The arcsine is the angle whose sine is Arg1. The returned angle is given in radians in the range -pi/2 to pi/2.",
      "return": "float"
    },
    "WorksheetFunction.Asinh": {
      "method": "Returns the inverse hyperbolic sine of a number. The inverse hyperbolic sine is the value whose hyperbolic sine is Arg1, so Asinh(Sinh(number)) equals Arg1.",
      "return": "float"
    },
    "WorksheetFunction.Atan2": {
      "method": "Returns the arctangent, or inverse tangent, of the specified x- and y-coordinates. The arctangent is the angle from the x-axis to a line containing the origin (0, 0) and a point with coordinates (x_num, y_num). The angle is given in radians between -pi and pi, excluding -pi.",
      "return": "float"
    },
    "WorksheetFunction.Atanh": {
      "method": "Returns the inverse hyperbolic tangent of a number. Number must be between -1 and 1 (excluding -1 and 1).",
      "return": "float"
    },
    "WorksheetFunction.AveDev": {
      "method": "Returns the average of the absolute deviations of data points from their mean. AveDev is a measure of the variability in a data set.",
      "return": "float"
    },
    "WorksheetFunction.Average": {
      "method": "Returns the average (arithmetic mean) of the arguments.",
      "return": "float"
    },
    "WorksheetFunction.AverageIf": {
      "method": "Returns the average (arithmetic mean) of all the cells in a range that meet a given criteria.",
      "return": "float"
    },
    "WorksheetFunction.AverageIfs": {
      "method": "Returns the average (arithmetic mean) of all cells that meet multiple criteria.",
      "return": "float"
    },
    "WorksheetFunction.BahtText": {
      "method": "Converts a number to Thai text and adds a suffix of Baht.",
      "return": "str"
    },
    "WorksheetFunction.Base": {
      "method": "Converts a number into a text representation with the given radix (base).",
      "return": "str"
    },
    "WorksheetFunction.BesselI": {
      "method": "Returns the modified Bessel function, which is equivalent to the Bessel function evaluated for purely imaginary arguments.",
      "return": "float"
    },
    "WorksheetFunction.BesselJ": {
      "method": "Returns the Bessel function.",
      "return": "float"
    },
    "WorksheetFunction.BesselK": {
      "method": "Returns the modified Bessel function, which is equivalent to the Bessel functions evaluated for purely imaginary arguments.",
      "return": "float"
    },
    "WorksheetFunction.BesselY": {
      "method": "Returns the Bessel function, which is also called the Weber function or the Neumann function.",
      "return": "float"
    },
    "WorksheetFunction.Beta_Dist": {
      "method": "Returns the beta cumulative distribution function.",
      "return": "float"
    },
    "WorksheetFunction.Beta_Inv": {
      "method": "Returns the inverse of the cumulative distribution function for a specified beta distribution. That is, if probability = Beta_Dist(x,...), then Beta_Inv(probability,...) = x.",
      "return": "float"
    },
    "WorksheetFunction.BetaDist": {
      "method": "Returns the beta cumulative distribution function.",
      "return": "float"
    },
    "WorksheetFunction.BetaInv": {
      "method": "Returns the inverse of the cumulative distribution function for a specified beta distribution. That is, if probability = BetaDist(x,...), then BetaInv(probability,...) = x.",
      "return": "float"
    },
    "WorksheetFunction.Bin2Dec": {
      "method": "Converts a binary number to decimal.",
      "return": "str"
    },
    "WorksheetFunction.Bin2Hex": {
      "method": "Converts a binary number to hexadecimal.",
      "return": "str"
    },
    "WorksheetFunction.Bin2Oct": {
      "method": "Converts a binary number to octal.",
      "return": "str"
    },
    "WorksheetFunction.Binom_Dist": {
      "method": "Returns the individual term binomial distribution probability.",
      "return": "float"
    },
    "WorksheetFunction.Binom_Dist_Range": {
      "method": "Returns the probability of a trial result using a binomial distribution.",
      "return": "float"
    },
    "WorksheetFunction.Binom_Inv": {
      "method": "Returns the inverse of the individual term binomial distribution probability.",
      "return": "float"
    },
    "WorksheetFunction.BinomDist": {
      "method": "Returns the individual term binomial distribution probability.",
      "return": "float"
    },
    "WorksheetFunction.Bitand": {
      "method": "Returns a bitwise And of two numbers.",
      "return": "float"
    },
    "WorksheetFunction.Bitlshift": {
      "method": "Returns a value number shifted left by shift_amount bits.",
      "return": "float"
    },
    "WorksheetFunction.Bitor": {
      "method": "Returns a bitwise Or of two numbers.",
      "return": "float"
    },
    "WorksheetFunction.Bitrshift": {
      "method": "Returns a value number shifted right by shift_amount bits.",
      "return": "float"
    },
    "WorksheetFunction.Bitxor": {
      "method": "Returns a bitwise Exclusive Or of two numbers.",
      "return": "float"
    },
    "WorksheetFunction.Ceiling": {
      "method": "Returns number rounded up, away from zero, to the nearest multiple of significance.",
      "return": "float"
    },
    "WorksheetFunction.Ceiling_Math": {
      "method": "Rounds a number up to the nearest integer or to the nearest multiple of significance.",
      "return": "float"
    },
    "WorksheetFunction.Ceiling_Precise": {
      "method": "Returns the specified number rounded to the nearest multiple of significance.",
      "return": "float"
    },
    "WorksheetFunction.ChiDist": {
      "method": "Returns the one-tailed probability of the chi-squared distribution.",
      "return": "float"
    },
    "WorksheetFunction.ChiInv": {
      "method": "Returns the inverse of the one-tailed probability of the chi-squared distribution.",
      "return": "float"
    },
    "WorksheetFunction.ChiSq_Dist": {
      "method": "Returns the chi-squared distribution.",
      "return": "float"
    },
    "WorksheetFunction.ChiSq_Dist_RT": {
      "method": "Returns the right-tailed probability of the chi-squared distribution.",
      "return": "float"
    },
    "WorksheetFunction.ChiSq_Inv": {
      "method": "Returns the inverse of the left-tailed probability of the chi-squared distribution.",
      "return": "float"
    },
    "WorksheetFunction.ChiSq_Inv_RT": {
      "method": "Returns the inverse of the right-tailed probability of the chi-squared distribution.",
      "return": "float"
    },
    "WorksheetFunction.ChiSq_Test": {
      "method": "Returns the test for independence.",
      "return": "float"
    },
    "WorksheetFunction.ChiTest": {
      "method": "Returns the test for independence.",
      "return": "float"
    },
    "WorksheetFunction.Choose": {
      "method": "Uses Arg1 as the index to return a value from the list of value arguments.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Clean": {
      "method": "Removes all nonprintable characters from text.",
      "return": "str"
    },
    "WorksheetFunction.Combin": {
      "method": "Returns the number of combinations for a given number of items. Use Combin to determine the total possible number of groups for a given number of items.",
      "return": "float"
    },
    "WorksheetFunction.Combina": {
      "method": "Returns the number of combinations with repetitions for a given number of items.",
      "return": "float"
    },
    "WorksheetFunction.Complex": {
      "method": "Converts real and imaginary coefficients into a complex number of the form x + yi or x + yj.",
      "return": "str"
    },
    "WorksheetFunction.Confidence": {
      "method": "Returns a value that you can use to construct a confidence interval for a population mean.",
      "return": "float"
    },
    "WorksheetFunction.Confidence_Norm": {
      "method": "Returns a value that you can use to construct a confidence interval for a population mean.",
      "return": "float"
    },
    "WorksheetFunction.Confidence_T": {
      "method": "Returns the confidence interval for a population mean, using a Student's t distribution.",
      "return": "float"
    },
    "WorksheetFunction.Convert": {
      "method": "Converts a number from one measurement system to another. For example, Convert can translate a table of distances in miles to a table of distances in kilometers.",
      "return": "float"
    },
    "WorksheetFunction.Correl": {
      "method": "Returns the correlation coefficient of the Arg1 and Arg2 cell ranges.",
      "return": "float"
    },
    "WorksheetFunction.Cosh": {
      "method": "Returns the hyperbolic cosine of a number.",
      "return": "float"
    },
    "WorksheetFunction.Cot": {
      "method": "Returns the cotangent of an angle.",
      "return": "float"
    },
    "WorksheetFunction.Coth": {
      "method": "Returns the hyperbolic cotangent of a number.",
      "return": "float"
    },
    "WorksheetFunction.Count": {
      "method": "Counts the number of cells that contain numbers and counts numbers within the list of arguments.",
      "return": "float"
    },
    "WorksheetFunction.CountA": {
      "method": "Counts the number of cells that are not empty and the values within the list of arguments.",
      "return": "float"
    },
    "WorksheetFunction.CountBlank": {
      "method": "Counts empty cells in a specified range of cells.",
      "return": "float"
    },
    "WorksheetFunction.CountIf": {
      "method": "Counts the number of cells within a range that meet the given criteria.",
      "return": "float"
    },
    "WorksheetFunction.CountIfs": {
      "method": "Counts the number of cells within a range that meet multiple criteria.",
      "return": "float"
    },
    "WorksheetFunction.CoupDayBs": {
      "method": "Returns the number of days from the beginning of the coupon period to the settlement date.",
      "return": "float"
    },
    "WorksheetFunction.CoupDays": {
      "method": "Returns the number of days in the coupon period that contain the settlement date.",
      "return": "float"
    },
    "WorksheetFunction.CoupDaysNc": {
      "method": "Returns the number of days from the settlement date to the next coupon date.",
      "return": "float"
    },
    "WorksheetFunction.CoupNcd": {
      "method": "Returns a number that represents the next coupon date after the settlement date.",
      "return": "float"
    },
    "WorksheetFunction.CoupNum": {
      "method": "Returns the number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.",
      "return": "float"
    },
    "WorksheetFunction.CoupPcd": {
      "method": "not found comment on 'excel.worksheetfunction.couppcd.html' ",
      "return": "float"
    },
    "WorksheetFunction.Covar": {
      "method": "Returns covariance, the average of the products of deviations for each data point pair.",
      "return": "float"
    },
    "WorksheetFunction.Covariance_P": {
      "method": "Returns population covariance, the average of the products of deviations for each data point pair.",
      "return": "float"
    },
    "WorksheetFunction.Covariance_S": {
      "method": "Returns the sample covariance, the average of the products of deviations for each data point pair in two data sets.",
      "return": "float"
    },
    "WorksheetFunction.CritBinom": {
      "method": "Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.",
      "return": "float"
    },
    "WorksheetFunction.Csc": {
      "method": "Returns the cosecant of an angle.",
      "return": "float"
    },
    "WorksheetFunction.Csch": {
      "method": "Returns the hyperbolic cosecant of an angle.",
      "return": "float"
    },
    "WorksheetFunction.CumIPmt": {
      "method": "Returns the cumulative interest paid on a loan between start_period and end_period.",
      "return": "float"
    },
    "WorksheetFunction.CumPrinc": {
      "method": "Returns the cumulative principal paid on a loan between start_period and end_period.",
      "return": "float"
    },
    "WorksheetFunction.DAverage": {
      "method": "Averages the values in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.Days": {
      "method": "Returns the number of days between two dates.",
      "return": "float"
    },
    "WorksheetFunction.Days360": {
      "method": "Returns the number of days between two dates based on a 360-day year (twelve 30-day months), which is used in some accounting calculations.",
      "return": "float"
    },
    "WorksheetFunction.Db": {
      "method": "Returns the depreciation of an asset for a specified period using the fixed-declining balance method.",
      "return": "float"
    },
    "WorksheetFunction.Dbcs": {
      "method": "Converts half-width (single-byte) letters within a character string to full-width (double-byte) characters. The name of the function (and the characters that it converts) depends upon the language settings. Read/write String.",
      "return": "str"
    },
    "WorksheetFunction.DCount": {
      "method": "Counts the cells that contain numbers in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.DCountA": {
      "method": "Counts the nonblank cells in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.Ddb": {
      "method": "Returns the depreciation of an asset for a specified period by using the double-declining balance method or some other method that you specify.",
      "return": "float"
    },
    "WorksheetFunction.Dec2Bin": {
      "method": "Converts a decimal number to binary.",
      "return": "str"
    },
    "WorksheetFunction.Dec2Hex": {
      "method": "Converts a decimal number to hexadecimal.",
      "return": "str"
    },
    "WorksheetFunction.Dec2Oct": {
      "method": "Converts a decimal number to octal.",
      "return": "str"
    },
    "WorksheetFunction.Decimal": {
      "method": "Converts a text representation of a number in a given base into a decimal number.",
      "return": "float"
    },
    "WorksheetFunction.Degrees": {
      "method": "Converts radians into degrees.",
      "return": "float"
    },
    "WorksheetFunction.Delta": {
      "method": "Tests whether two values are equal. Returns 1 if number1 = number2; otherwise, returns 0.",
      "return": "float"
    },
    "WorksheetFunction.DevSq": {
      "method": "Returns the sum of squares of deviations of data points from their sample mean.",
      "return": "float"
    },
    "WorksheetFunction.DGet": {
      "method": "Extracts a single value from a column of a list or database that matches conditions that you specify.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Disc": {
      "method": "Returns the discount rate for a security.",
      "return": "float"
    },
    "WorksheetFunction.DMax": {
      "method": "Returns the largest number in a column of a list or database that matches conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.DMin": {
      "method": "Returns the smallest number in a column of a list or database that matches conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.Dollar": {
      "method": "The function described in this Help topic converts a number to text format and applies a currency symbol. The name of the function (and the symbol that it applies) depends upon your language settings.",
      "return": "str"
    },
    "WorksheetFunction.DollarDe": {
      "method": "Converts a dollar price expressed as a fraction into a dollar price expressed as a decimal number. Use DollarDe to convert fractional dollar numbers, such as securities prices, to decimal numbers.",
      "return": "float"
    },
    "WorksheetFunction.DollarFr": {
      "method": "Converts a dollar price expressed as a decimal number into a dollar price expressed as a fraction. Use DollarFr to convert decimal numbers to fractional dollar numbers, such as securities prices.",
      "return": "float"
    },
    "WorksheetFunction.DProduct": {
      "method": "Multiplies the values in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.DStDev": {
      "method": "Estimates the standard deviation of a population based on a sample by using the numbers in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.DStDevP": {
      "method": "Calculates the standard deviation of a population based on the entire population by using the numbers in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.DSum": {
      "method": "Adds the numbers in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.Duration": {
      "method": "Returns the Macauley duration for an assumed par value of $100. Duration is defined as the weighted average of the present value of the cash flows and is used as a measure of a bond price's response to changes in yield.",
      "return": "float"
    },
    "WorksheetFunction.DVar": {
      "method": "Estimates the variance of a population based on a sample by using the numbers in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.DVarP": {
      "method": "Calculates the variance of a population based on the entire population by using the numbers in a column of a list or database that match conditions that you specify.",
      "return": "float"
    },
    "WorksheetFunction.EDate": {
      "method": "Returns the serial number that represents the date that is the indicated number of months before or after a specified date (the start_date). Use EDate to calculate maturity dates or due dates that fall on the same day of the month as the date of issue.",
      "return": "float"
    },
    "WorksheetFunction.Effect": {
      "method": "Returns the effective annual interest rate, given the nominal annual interest rate and the number of compounding periods per year.",
      "return": "float"
    },
    "WorksheetFunction.EncodeUrl": {
      "method": "URL encodes the argument.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.EoMonth": {
      "method": "Returns the serial number for the last day of the month that is the indicated number of months before or after start_date. Use EoMonth to calculate maturity dates or due dates that fall on the last day of the month.",
      "return": "float"
    },
    "WorksheetFunction.Erf": {
      "method": "Returns the error function integrated between lower_limit and upper_limit.",
      "return": "float"
    },
    "WorksheetFunction.Erf_Precise": {
      "method": "Returns the error function integrated between zero and lower_limit.",
      "return": "float"
    },
    "WorksheetFunction.ErfC": {
      "method": "Returns the complementary Erf function integrated between the specified parameter and infinity.",
      "return": "float"
    },
    "WorksheetFunction.ErfC_Precise": {
      "method": "Returns the complementary error function integrated between the specified value and infinity.",
      "return": "float"
    },
    "WorksheetFunction.Even": {
      "method": "Returns number rounded up to the nearest even integer. Use this function for processing items that come in twos. For example, a packing crate accepts rows of one or two items. The crate is full when the number of items, rounded up to the nearest two, matches the crate's capacity.",
      "return": "float"
    },
    "WorksheetFunction.Expon_Dist": {
      "method": "Returns the exponential distribution. Use Expon_Dist to model the time between events, such as how long an automated bank teller takes to deliver cash. For example, you can use Expon_Dist to determine the probability that the process takes at most 1 minute.",
      "return": "float"
    },
    "WorksheetFunction.ExponDist": {
      "method": "Returns the exponential distribution. Use ExponDist to model the time between events, such as how long an automated bank teller takes to deliver cash. For example, you can use ExponDist to determine the probability that the process takes at most 1 minute.",
      "return": "float"
    },
    "WorksheetFunction.F_Dist": {
      "method": "Returns the F probability distribution.",
      "return": "float"
    },
    "WorksheetFunction.F_Dist_RT": {
      "method": "Returns the right-tailed F probability distribution. Use this function to determine whether two data sets have different degrees of diversity. For example, you can examine the test scores of men and women entering high school and determine if the variability in the females is different from that found in the males.",
      "return": "float"
    },
    "WorksheetFunction.F_Inv": {
      "method": "Returns the inverse of the F probability distribution.",
      "return": "float"
    },
    "WorksheetFunction.F_Inv_RT": {
      "method": "Returns the inverse of the right-tailed F probability distribution. If p = F_DIST_RT(x,...), then F_INV_RT(p,...) = x.",
      "return": "float"
    },
    "WorksheetFunction.F_Test": {
      "method": "Returns the result of an F-test. An F-test returns the two-tailed probability that the variances in array1 and array2 are not significantly different. Use this function to determine whether two samples have different variances. For example, given test scores from public and private schools, you can test whether these schools have different levels of test score diversity.",
      "return": "float"
    },
    "WorksheetFunction.Fact": {
      "method": "Returns the factorial of a number. The factorial of a number is equal to 1*2*3*...* number.",
      "return": "float"
    },
    "WorksheetFunction.FactDouble": {
      "method": "Returns the double factorial of a number.",
      "return": "float"
    },
    "WorksheetFunction.FDist": {
      "method": "Returns the F probability distribution. Use this function to determine whether two data sets have different degrees of diversity. For example, you can examine the test scores of men and women entering high school and determine if the variability in the females is different from that found in the males.",
      "return": "float"
    },
    "WorksheetFunction.FilterXML": {
      "method": "Gets specific data from the returned XML, typically from a WebService function call.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Find": {
      "method": "Finds specific information on a worksheet.",
      "return": "float"
    },
    "WorksheetFunction.FindB": {
      "method": "Find and FindB locate one text string within a second text string, and return the number of the starting position of the first text string from the first character of the second text string.",
      "return": "float"
    },
    "WorksheetFunction.FInv": {
      "method": "Returns the inverse of the F probability distribution. If p = FDIST(x,...), then FINV(p,...) = x.",
      "return": "float"
    },
    "WorksheetFunction.Fisher": {
      "method": "Returns the Fisher transformation at x. This transformation produces a function that is normally distributed rather than skewed. Use this function to perform hypothesis testing on the correlation coefficient.",
      "return": "float"
    },
    "WorksheetFunction.FisherInv": {
      "method": "Returns the inverse of the Fisher transformation. Use this transformation when analyzing correlations between ranges or arrays of data. If y = FISHER(x), then FISHERINV(y) = x.",
      "return": "float"
    },
    "WorksheetFunction.Fixed": {
      "method": "Rounds a number to the specified number of decimals, formats the number in decimal format using a period and commas, and returns the result as text.",
      "return": "str"
    },
    "WorksheetFunction.Floor": {
      "method": "Rounds number down, toward zero, to the nearest multiple of significance.",
      "return": "float"
    },
    "WorksheetFunction.Floor_Math": {
      "method": "Rounds a number down, to the nearest integer or to the nearest multiple of significance.",
      "return": "float"
    },
    "WorksheetFunction.Floor_Precise": {
      "method": "Rounds the specified number to the nearest multiple of significance.",
      "return": "float"
    },
    "WorksheetFunction.Forecast": {
      "method": "Calculates, or predicts, a future value by using existing values. The predicted value is a y-value for a given x-value. The known values are existing x-values and y-values, and the new value is predicted by using linear regression. Use this function to predict future sales, inventory requirements, or consumer trends.",
      "return": "float"
    },
    "WorksheetFunction.Forecast_ETS": {
      "method": "Calculates or predicts a future value based on existing (historical) values by using the AAA version of the Exponential Smoothing (ETS) algorithm.",
      "return": "float"
    },
    "WorksheetFunction.Forecast_ETS_ConfInt": {
      "method": "Returns a confidence interval for the forecast value at the specified target date.",
      "return": "float"
    },
    "WorksheetFunction.Forecast_ETS_Seasonality": {
      "method": "Returns the length of the repetitive pattern that Excel detects for the specified time series.",
      "return": "float"
    },
    "WorksheetFunction.Forecast_ETS_STAT": {
      "method": "Returns a statistical value as a result of time series forecasting.",
      "return": "float"
    },
    "WorksheetFunction.Forecast_Linear": {
      "method": "Calculates, or predicts, a future value by using existing values. The predicted value is a y-value for a given x-value. The known values are existing x-values and y-values, and the new value is predicted by using linear regression. Use this function to predict future sales, inventory requirements, or consumer trends.",
      "return": "float"
    },
    "WorksheetFunction.Frequency": {
      "method": "Calculates how often values occur within a range of values, and then returns a vertical array of numbers. For example, use Frequency to count the number of test scores that fall within ranges of scores. Because Frequency returns an array, it must be entered as an array formula.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.FTest": {
      "method": "Returns the result of an F-test. An F-test returns the two-tailed probability that the variances in array1 and array2 are not significantly different. Use this function to determine whether two samples have different variances. For example, given test scores from public and private schools, you can test whether these schools have different levels of test score diversity.",
      "return": "float"
    },
    "WorksheetFunction.Fv": {
      "method": "Returns the future value of an investment based on periodic, constant payments and a constant interest rate.",
      "return": "float"
    },
    "WorksheetFunction.FVSchedule": {
      "method": "Returns the future value of an initial principal after applying a series of compound interest rates. Use FVSchedule to calculate the future value of an investment with a variable or adjustable rate.",
      "return": "float"
    },
    "WorksheetFunction.Gamma": {
      "method": "Returns the gamma function value.",
      "return": "float"
    },
    "WorksheetFunction.Gamma_Dist": {
      "method": "Returns the gamma distribution. Use this function to study variables that may have a skewed distribution. The gamma distribution is commonly used in queuing analysis.",
      "return": "float"
    },
    "WorksheetFunction.Gamma_Inv": {
      "method": "Returns the inverse of the gamma cumulative distribution. If p = GAMMA_DIST(x,...), then GAMMA_INV(p,...) = x.",
      "return": "float"
    },
    "WorksheetFunction.GammaDist": {
      "method": "Returns the gamma distribution. Use this function to study variables that may have a skewed distribution. The gamma distribution is commonly used in queuing analysis.",
      "return": "float"
    },
    "WorksheetFunction.GammaInv": {
      "method": "Returns the inverse of the gamma cumulative distribution. If p = GAMMADIST(x,...), then GAMMAINV(p,...) = x.",
      "return": "float"
    },
    "WorksheetFunction.GammaLn": {
      "method": "Returns the natural logarithm of the gamma function, Γ(x).",
      "return": "float"
    },
    "WorksheetFunction.GammaLn_Precise": {
      "method": "Returns the natural logarithm of the gamma function, Γ(x).",
      "return": "float"
    },
    "WorksheetFunction.Gauss": {
      "method": "Returns 0.5 less than the standard normal cumulative distribution.",
      "return": "float"
    },
    "WorksheetFunction.Gcd": {
      "method": "Returns the greatest common divisor of two or more integers. The greatest common divisor is the largest integer that divides both number1 and number2 without a remainder.",
      "return": "float"
    },
    "WorksheetFunction.GeoMean": {
      "method": "Returns the geometric mean of an array or range of positive data. For example, you can use GeoMean to calculate average growth rate given compound interest with variable rates.",
      "return": "float"
    },
    "WorksheetFunction.GeStep": {
      "method": "Returns 1 if number ≥ step; otherwise, returns 0 (zero). Use this function to filter a set of values. For example, by summing several GeStep functions, you calculate the count of values that exceed a threshold.",
      "return": "float"
    },
    "WorksheetFunction.Growth": {
      "method": "Calculates predicted exponential growth by using existing data. Growth returns the y-values for a series of new x-values that you specify by using existing x-values and y-values. You can also use the Growth worksheet function to fit an exponential curve to existing x-values and y-values.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.HarMean": {
      "method": "Returns the harmonic mean of a data set. The harmonic mean is the reciprocal of the arithmetic mean of reciprocals.",
      "return": "float"
    },
    "WorksheetFunction.Hex2Bin": {
      "method": "Converts a hexadecimal number to binary.",
      "return": "str"
    },
    "WorksheetFunction.Hex2Dec": {
      "method": "Converts a hexadecimal number to decimal.",
      "return": "str"
    },
    "WorksheetFunction.Hex2Oct": {
      "method": "Converts a hexadecimal number to octal.",
      "return": "str"
    },
    "WorksheetFunction.HLookup": {
      "method": "Searches for a value in the top row of a table or an array of values, and then returns a value in the same column from a row that you specify in the table or array. Use HLookup when your comparison values are located in a row across the top of a table of data, and you want to look down a specified number of rows. Use VLookup when your comparison values are located in a column to the left of the data that you want to find.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.HypGeom_Dist": {
      "method": "Returns the hypergeometric distribution. HypGeom_Dist returns the probability of a given number of sample successes, given the sample size, population successes, and population size. Use HypGeom_Dist for problems with a finite population, where each observation is either a success or a failure, and where each subset of a given size is chosen with equal likelihood.",
      "return": "float"
    },
    "WorksheetFunction.HypGeomDist": {
      "method": "Returns the hypergeometric distribution. HypGeomDist returns the probability of a given number of sample successes, given the sample size, population successes, and population size. Use HypGeomDist for problems with a finite population, where each observation is either a success or a failure, and where each subset of a given size is chosen with equal likelihood.",
      "return": "float"
    },
    "WorksheetFunction.IfError": {
      "method": "Returns a value that you specify if a formula evaluates to an error; otherwise, returns the result of the formula. Use the IfError function to trap and handle errors in a formula.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.IfNa": {
      "method": "Returns the value that you specify if the expression resolves to #N/A; otherwise, returns the result of the expression.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.ImAbs": {
      "method": "Returns the absolute value (modulus) of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.Imaginary": {
      "method": "Returns the imaginary coefficient of a complex number in x + yi or x + yj text format.",
      "return": "float"
    },
    "WorksheetFunction.ImArgument": {
      "method": "Returns the argument  (theta), an angle expressed in radians, such that:",
      "return": "str"
    },
    "WorksheetFunction.ImConjugate": {
      "method": "Returns the complex conjugate of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImCos": {
      "method": "Returns the cosine of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImCosh": {
      "method": "Returns the hyperbolic cosine of a complex number.",
      "return": "str"
    },
    "WorksheetFunction.ImCot": {
      "method": "Returns the cotangent of a complex number.",
      "return": "str"
    },
    "WorksheetFunction.ImCsc": {
      "method": "Returns the cosecant of a complex number.",
      "return": "str"
    },
    "WorksheetFunction.ImCsch": {
      "method": "Returns the hyperbolic cosecant of a complex number.",
      "return": "str"
    },
    "WorksheetFunction.ImDiv": {
      "method": "Returns the quotient of two complex numbers in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImExp": {
      "method": "Returns the exponential of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImLn": {
      "method": "Returns the natural logarithm of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImLog10": {
      "method": "Returns the common logarithm (base 10) of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImLog2": {
      "method": "Returns the base-2 logarithm of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImPower": {
      "method": "Returns a complex number in x + yi or x + yj text format raised to a power.",
      "return": "str"
    },
    "WorksheetFunction.ImProduct": {
      "method": "Returns the product of 2 to 29 complex numbers in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImReal": {
      "method": "Returns the real coefficient of a complex number in x + yi or x + yj text format.",
      "return": "float"
    },
    "WorksheetFunction.ImSec": {
      "method": "Returns the secant of a complex number.",
      "return": "str"
    },
    "WorksheetFunction.ImSech": {
      "method": "Returns the hyperbolic secant of a complex number.",
      "return": "str"
    },
    "WorksheetFunction.ImSin": {
      "method": "Returns the sine of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImSinh": {
      "method": "Returns the hyperbolic sine of a complex number.",
      "return": "str"
    },
    "WorksheetFunction.ImSqrt": {
      "method": "Returns the square root of a complex number in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImSub": {
      "method": "Returns the difference of two complex numbers in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImSum": {
      "method": "Returns the sum of two or more complex numbers in x + yi or x + yj text format.",
      "return": "str"
    },
    "WorksheetFunction.ImTan": {
      "method": "Returns the tangent of a complex number.",
      "return": "str"
    },
    "WorksheetFunction.Index": {
      "method": "Returns a value or the reference to a value from within a table or range. There are two forms of the Index function: the array form and the reference form.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Intercept": {
      "method": "Calculates the point at which a line will intersect the y-axis by using existing x-values and y-values. The intercept point is based on a best-fit regression line plotted through the known x-values and known y-values.",
      "return": "float"
    },
    "WorksheetFunction.IntRate": {
      "method": "Returns the interest rate for a fully invested security.",
      "return": "float"
    },
    "WorksheetFunction.Ipmt": {
      "method": "Returns the interest payment for a given period for an investment based on periodic, constant payments and a constant interest rate.",
      "return": "float"
    },
    "WorksheetFunction.Irr": {
      "method": "Returns the internal rate of return for a series of cash flows represented by the numbers in values. These cash flows don't have to be even, as they would be for an annuity. However, the cash flows must occur at regular intervals, such as monthly or annually. The internal rate of return is the interest rate received for an investment consisting of payments (negative values) and income (positive values) that occur at regular periods.",
      "return": "float"
    },
    "WorksheetFunction.IsErr": {
      "method": "Checks the type of value and returns True or False depending on whether the value refers to any error value except #N/A.",
      "return": "bool"
    },
    "WorksheetFunction.IsError": {
      "method": "Checks the type of value and returns True or False depending on whether the value refers to any error value (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!).",
      "return": "bool"
    },
    "WorksheetFunction.IsEven": {
      "method": "Checks the type of value and returns True or False depending on whether the value is even.",
      "return": "bool"
    },
    "WorksheetFunction.IsFormula": {
      "method": "Checks whether a reference is to a cell containing a formula, and returns True or False.",
      "return": "bool"
    },
    "WorksheetFunction.IsLogical": {
      "method": "Checks the type of value and returns True or False depending on whether the value refers to a logical value.",
      "return": "bool"
    },
    "WorksheetFunction.IsNA": {
      "method": "Checks the type of value and returns True or False depending on whether the value refers to the #N/A (value not available) error value.",
      "return": "bool"
    },
    "WorksheetFunction.IsNonText": {
      "method": "Checks the type of value and returns True or False depending on whether the value refers to any item that is not text. (Note that this function returns True if value refers to a blank cell.)",
      "return": "bool"
    },
    "WorksheetFunction.IsNumber": {
      "method": "Checks the type of value and returns True or False depending on whether the value refers to a number.",
      "return": "bool"
    },
    "WorksheetFunction.ISO_Ceiling": {
      "method": "Returns a number that is rounded up to the nearest integer or to the nearest multiple of significance.",
      "return": "float"
    },
    "WorksheetFunction.IsOdd": {
      "method": "Checks the type of value and returns True or False depending on whether the value is odd.",
      "return": "bool"
    },
    "WorksheetFunction.IsoWeekNum": {
      "method": "Returns the ISO week number of the year for a given date.",
      "return": "float"
    },
    "WorksheetFunction.Ispmt": {
      "method": "Calculates the interest paid during a specific period of an investment. This function is provided for compatibility with Lotus 1-2-3.",
      "return": "float"
    },
    "WorksheetFunction.IsText": {
      "method": "Checks the type of value and returns True or False depending on whether the value refers to text.",
      "return": "bool"
    },
    "WorksheetFunction.Kurt": {
      "method": "Returns the kurtosis of a data set. Kurtosis characterizes the relative peakedness or flatness of a distribution compared with the normal distribution. Positive kurtosis indicates a relatively peaked distribution. Negative kurtosis indicates a relatively flat distribution.",
      "return": "float"
    },
    "WorksheetFunction.Large": {
      "method": "Returns the k-th largest value in a data set. Use this function to select a value based on its relative standing. For example, you can use Large to return the highest, runner-up, or third-place score.",
      "return": "float"
    },
    "WorksheetFunction.Lcm": {
      "method": "Returns the least common multiple of integers. The least common multiple is the smallest positive integer that is a multiple of all integer arguments number1, number2, and so on. Use Lcm to add fractions with different denominators.",
      "return": "float"
    },
    "WorksheetFunction.LinEst": {
      "method": "Calculates the statistics for a line by using the least squares method to calculate a straight line that best fits your data, and returns an array that describes the line. Because this function returns an array of values, it must be entered as an array formula.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Ln": {
      "method": "Returns the natural logarithm of a number. Natural logarithms are based on the constant e (2.71828182845904).",
      "return": "float"
    },
    "WorksheetFunction.Log": {
      "method": "Returns the logarithm of a number to the base that you specify.",
      "return": "float"
    },
    "WorksheetFunction.Log10": {
      "method": "Returns the base-10 logarithm of a number.",
      "return": "float"
    },
    "WorksheetFunction.LogEst": {
      "method": "In regression analysis, calculates an exponential curve that fits your data, and returns an array of values that describes the curve. Because this function returns an array of values, it must be entered as an array formula.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.LogInv": {
      "method": "Use the lognormal distribution to analyze logarithmically transformed data.",
      "return": "float"
    },
    "WorksheetFunction.LogNorm_Dist": {
      "method": "Returns the lognormal distribution of x, where ln(x) is normally distributed with parameters mean and standard_dev. Use this function to analyze data that has been logarithmically transformed.",
      "return": "float"
    },
    "WorksheetFunction.LogNorm_Inv": {
      "method": "Returns the inverse of the lognormal cumulative distribution function. Use the lognormal distribution to analyze logarithmically transformed data.",
      "return": "float"
    },
    "WorksheetFunction.LogNormDist": {
      "method": "Returns the cumulative lognormal distribution of x, where ln(x) is normally distributed with parameters mean and standard_dev. Use this function to analyze data that has been logarithmically transformed.",
      "return": "float"
    },
    "WorksheetFunction.Lookup": {
      "method": "Returns a value either from a one-row or one-column range or from an array. The Lookup function has two syntax forms: the vector form and the array form.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Match": {
      "method": "Returns the relative position of an item in an array that matches a specified value in a specified order. Use Match instead of one of the Lookup functions when you need the position of an item in a range instead of the item itself.",
      "return": "float"
    },
    "WorksheetFunction.Max": {
      "method": "Returns the largest value in a set of values.",
      "return": "float"
    },
    "WorksheetFunction.MDeterm": {
      "method": "Returns the matrix determinant of an array.",
      "return": "float"
    },
    "WorksheetFunction.MDuration": {
      "method": "Returns the modified Macauley duration for a security with an assumed par value of $100.",
      "return": "float"
    },
    "WorksheetFunction.Median": {
      "method": "Returns the median of the given numbers. The median is the number in the middle of a set of numbers.",
      "return": "float"
    },
    "WorksheetFunction.Min": {
      "method": "Returns the smallest number in a set of values.",
      "return": "float"
    },
    "WorksheetFunction.MInverse": {
      "method": "Returns the inverse matrix for the matrix stored in an array.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.MIrr": {
      "method": "Returns the modified internal rate of return for a series of periodic cash flows. MIrr considers both the cost of the investment and the interest received on reinvestment of cash.",
      "return": "float"
    },
    "WorksheetFunction.MMult": {
      "method": "Returns the matrix product of two arrays. The result is an array with the same number of rows as array1 and the same number of columns as array2.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Mode": {
      "method": "Returns the most frequently occurring, or repetitive, value in an array or range of data.",
      "return": "float"
    },
    "WorksheetFunction.Mode_Mult": {
      "method": "Returns a vertical array of the most frequently occurring, or repetitive, values in an array or range of data.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Mode_Sngl": {
      "method": "Returns the most frequently occurring, or repetitive, value in an array or range of data.",
      "return": "float"
    },
    "WorksheetFunction.MRound": {
      "method": "Returns a number rounded to the desired multiple.",
      "return": "float"
    },
    "WorksheetFunction.MultiNomial": {
      "method": "Returns the ratio of the factorial of a sum of values to the product of factorials.",
      "return": "float"
    },
    "WorksheetFunction.Munit": {
      "method": "Returns the unit matrix for the specified dimension.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.NegBinom_Dist": {
      "method": "Returns the negative binomial distribution. NegBinom_Dist returns the probability that there will be number_f failures before the number_s-th success, when the constant probability of a success is probability_s. This function is similar to the binomial distribution, except that the number of successes is fixed, and the number of trials is variable. Like the binomial, trials are assumed to be independent.",
      "return": "float"
    },
    "WorksheetFunction.NegBinomDist": {
      "method": "Returns the negative binomial distribution. NegBinomDist returns the probability that there will be number_f failures before the number_s-th success, when the constant probability of a success is probability_s. This function is similar to the binomial distribution, except that the number of successes is fixed, and the number of trials is variable. Like the binomial, trials are assumed to be independent.",
      "return": "float"
    },
    "WorksheetFunction.NetworkDays": {
      "method": "Returns the number of whole working days between start_date and end_date. Working days exclude weekends and any dates identified in holidays. Use NetworkDays to calculate employee benefits that accrue based on the number of days worked during a specific term.",
      "return": "float"
    },
    "WorksheetFunction.NetworkDays_Intl": {
      "method": "Returns the number of whole workdays between two dates using parameters to indicate which and how many days are weekend days. Weekend days and any days that are specified as holidays are not considered as workdays.",
      "return": "float"
    },
    "WorksheetFunction.Nominal": {
      "method": "Returns the nominal annual interest rate, given the effective rate and the number of compounding periods per year.",
      "return": "float"
    },
    "WorksheetFunction.Norm_Dist": {
      "method": "Returns the normal distribution for the specified mean and standard deviation. This function has a wide range of applications in statistics, including hypothesis testing.",
      "return": "float"
    },
    "WorksheetFunction.Norm_Inv": {
      "method": "Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.",
      "return": "float"
    },
    "WorksheetFunction.Norm_S_Dist": {
      "method": "Returns the standard normal cumulative distribution function. The distribution has a mean of 0 (zero) and a standard deviation of one. Use this function in place of a table of standard normal curve areas.",
      "return": "float"
    },
    "WorksheetFunction.Norm_S_Inv": {
      "method": "Returns the inverse of the standard normal cumulative distribution. The distribution has a mean of 0 (zero) and a standard deviation of one.",
      "return": "float"
    },
    "WorksheetFunction.NormDist": {
      "method": "Returns the normal distribution for the specified mean and standard deviation. This function has a very wide range of applications in statistics, including hypothesis testing.",
      "return": "float"
    },
    "WorksheetFunction.NormInv": {
      "method": "Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.",
      "return": "float"
    },
    "WorksheetFunction.NormSDist": {
      "method": "Returns the standard normal cumulative distribution function. The distribution has a mean of 0 (zero) and a standard deviation of one. Use this function in place of a table of standard normal curve areas.",
      "return": "float"
    },
    "WorksheetFunction.NormSInv": {
      "method": "Returns the inverse of the standard normal cumulative distribution. The distribution has a mean of zero and a standard deviation of one.",
      "return": "float"
    },
    "WorksheetFunction.NPer": {
      "method": "Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.",
      "return": "float"
    },
    "WorksheetFunction.Npv": {
      "method": "Calculates the net present value of an investment by using a discount rate and a series of future payments (negative values) and income (positive values).",
      "return": "float"
    },
    "WorksheetFunction.NumberValue": {
      "method": "Converts text to number in a locale-independent manner.",
      "return": "float"
    },
    "WorksheetFunction.Oct2Bin": {
      "method": "Converts an octal number to binary.",
      "return": "str"
    },
    "WorksheetFunction.Oct2Dec": {
      "method": "Converts an octal number to decimal.",
      "return": "str"
    },
    "WorksheetFunction.Oct2Hex": {
      "method": "Converts an octal number to hexadecimal.",
      "return": "str"
    },
    "WorksheetFunction.Odd": {
      "method": "Returns number rounded up to the nearest odd integer.",
      "return": "float"
    },
    "WorksheetFunction.OddFPrice": {
      "method": "Returns the price per $100 face value of a security having an odd (short or long) first period.",
      "return": "float"
    },
    "WorksheetFunction.OddFYield": {
      "method": "Returns the yield of a security that has an odd (short or long) first period.",
      "return": "float"
    },
    "WorksheetFunction.OddLPrice": {
      "method": "Returns the price per $100 face value of a security having an odd (short or long) last coupon period.",
      "return": "float"
    },
    "WorksheetFunction.OddLYield": {
      "method": "Returns the yield of a security that has an odd (short or long) last period.",
      "return": "float"
    },
    "WorksheetFunction.Or": {
      "method": "Returns True if any argument is True; returns False if all arguments are False.",
      "return": "bool"
    },
    "WorksheetFunction.PDuration": {
      "method": "Returns the number of periods required by an investment to reach a specified value.",
      "return": "float"
    },
    "WorksheetFunction.Pearson": {
      "method": "Returns the Pearson product moment correlation coefficient, r, a dimensionless index that ranges from -1.0 to 1.0 inclusive and reflects the extent of a linear relationship between two data sets.",
      "return": "float"
    },
    "WorksheetFunction.Percentile": {
      "method": "Returns the k-th percentile of values in a range. Use this function to establish a threshold of acceptance. For example, you can decide to examine candidates who score above the 90th percentile.",
      "return": "float"
    },
    "WorksheetFunction.Percentile_Exc": {
      "method": "Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.",
      "return": "float"
    },
    "WorksheetFunction.Percentile_Inc": {
      "method": "Returns the k-th percentile of values in a range. Use this function to establish a threshold of acceptance. For example, you can examine candidates who score above the 90th percentile.",
      "return": "float"
    },
    "WorksheetFunction.PercentRank": {
      "method": "Returns the rank of a value in a data set as a percentage of the data set. This function can be used to evaluate the relative standing of a value within a data set. For example, you can use PercentRank to evaluate the standing of an aptitude test score among all scores for the test.",
      "return": "float"
    },
    "WorksheetFunction.PercentRank_Exc": {
      "method": "Returns the rank of a value in a data set as a percentage (0..1, exclusive) of the data set.",
      "return": "float"
    },
    "WorksheetFunction.PercentRank_Inc": {
      "method": "Returns the rank of a value in a data set as a percentage (0..1, inclusive) of the data set. This function can be used to evaluate the relative standing of a value within a data set. For example, you can use PercentRank_Inc to evaluate the standing of an aptitude test score among all scores for the test.",
      "return": "float"
    },
    "WorksheetFunction.Permut": {
      "method": "Returns the number of permutations for a given number of objects that can be selected from number objects. A permutation is any set or subset of objects or events where internal order is significant. Permutations are different from combinations, for which the internal order is not significant. Use this function for lottery-style probability calculations.",
      "return": "float"
    },
    "WorksheetFunction.Permutationa": {
      "method": "Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.",
      "return": "float"
    },
    "WorksheetFunction.Phi": {
      "method": "Returns the value of the density function for a standard normal distribution.",
      "return": "float"
    },
    "WorksheetFunction.Phonetic": {
      "method": "Extracts the phonetic (furigana) characters from a text string.",
      "return": "float"
    },
    "WorksheetFunction.Pi": {
      "method": "Returns the number 3.14159265358979, the mathematical constant pi, accurate to 15 digits.",
      "return": "float"
    },
    "WorksheetFunction.Pmt": {
      "method": "Calculates the payment for a loan based on constant payments and a constant interest rate.",
      "return": "float"
    },
    "WorksheetFunction.Poisson": {
      "method": "Returns the Poisson distribution. A common application of the Poisson distribution is predicting the number of events over a specific time, such as the number of cars arriving at a toll plaza in 1 minute.",
      "return": "float"
    },
    "WorksheetFunction.Poisson_Dist": {
      "method": "Returns the Poisson distribution. A common application of the Poisson distribution is predicting the number of events over a specific time, such as the number of cars arriving at a toll plaza in one minute.",
      "return": "float"
    },
    "WorksheetFunction.Power": {
      "method": "Returns the result of a number raised to a power.",
      "return": "float"
    },
    "WorksheetFunction.Ppmt": {
      "method": "Returns the payment on the principal for a given period for an investment based on periodic, constant payments and a constant interest rate.",
      "return": "float"
    },
    "WorksheetFunction.Price": {
      "method": "Returns the price per $100 face value of a security that pays periodic interest.",
      "return": "float"
    },
    "WorksheetFunction.PriceDisc": {
      "method": "Returns the price per $100 face value of a discounted security.",
      "return": "float"
    },
    "WorksheetFunction.PriceMat": {
      "method": "Returns the price per $100 face value of a security that pays interest at maturity.",
      "return": "float"
    },
    "WorksheetFunction.Prob": {
      "method": "Returns the probability that values in a range are between two limits. If upper_limit is not supplied, returns the probability that values in x_range are equal to lower_limit.",
      "return": "float"
    },
    "WorksheetFunction.Product": {
      "method": "Multiplies all the numbers given as arguments and returns the product.",
      "return": "float"
    },
    "WorksheetFunction.Proper": {
      "method": "Capitalizes the first letter in a text string and any other letters in text that follow any character other than a letter. Converts all other letters to lowercase letters.",
      "return": "str"
    },
    "WorksheetFunction.Pv": {
      "method": "Returns the present value of an investment. The present value is the total amount that a series of future payments is worth now. For example, when you borrow money, the loan amount is the present value to the lender.",
      "return": "float"
    },
    "WorksheetFunction.Quartile": {
      "method": "Returns the quartile of a data set. Quartiles often are used in sales and survey data to divide populations into groups. For example, you can use Quartile to find the top 25 percent of incomes in a population.",
      "return": "float"
    },
    "WorksheetFunction.Quartile_Exc": {
      "method": "Returns the quartile of the data set, based on percentile values from 0..1, exclusive.",
      "return": "float"
    },
    "WorksheetFunction.Quartile_Inc": {
      "method": "Returns the quartile of a data set based on percentile values from 0..1, inclusive. Quartiles often are used in sales and survey data to divide populations into groups. For example, you can use Quartile_Inc to find the top 25 percent of incomes in a population.",
      "return": "float"
    },
    "WorksheetFunction.Quotient": {
      "method": "Returns the integer portion of a division. Use this function when you want to discard the remainder of a division.",
      "return": "float"
    },
    "WorksheetFunction.Radians": {
      "method": "Converts degrees to radians.",
      "return": "float"
    },
    "WorksheetFunction.RandBetween": {
      "method": "Returns a random integer number between the numbers that you specify. A new random integer number is returned every time the worksheet is calculated.",
      "return": "float"
    },
    "WorksheetFunction.Rank": {
      "method": "Returns the rank of a number in a list of numbers. The rank of a number is its size relative to other values in a list. If you were to sort the list, the rank of the number would be its position.",
      "return": "float"
    },
    "WorksheetFunction.Rank_Avg": {
      "method": "Returns the rank of a number in a list of numbers; that is, its size relative to other values in the list. If more than one value has the same rank, the average rank is returned.",
      "return": "float"
    },
    "WorksheetFunction.Rank_Eq": {
      "method": "Returns the rank of a number in a list of numbers. The rank of a number is its size relative to other values in a list. If you were to sort the list, the rank of the number would be its position.",
      "return": "float"
    },
    "WorksheetFunction.Rate": {
      "method": "Returns the interest rate per period of an annuity. Rate is calculated by iteration and can have zero or more solutions. If the successive results of Rate don't converge to within 0.0000001 after 20 iterations, Rate returns the #NUM! error value.",
      "return": "float"
    },
    "WorksheetFunction.Received": {
      "method": "Returns the amount received at maturity for a fully invested security.",
      "return": "float"
    },
    "WorksheetFunction.Replace": {
      "method": "Replaces part of a text string, based on the number of characters that you specify, with a different text string.",
      "return": "str"
    },
    "WorksheetFunction.ReplaceB": {
      "method": "Replaces part of a text string, based on the number of bytes that you specify, with a different text string.",
      "return": "str"
    },
    "WorksheetFunction.Rept": {
      "method": "Repeats text a given number of times. Use Rept to fill a cell with a number of instances of a text string.",
      "return": "str"
    },
    "WorksheetFunction.Roman": {
      "method": "Converts an arabic numeral to roman, as text.",
      "return": "str"
    },
    "WorksheetFunction.Round": {
      "method": "Rounds a number to a specified number of digits.",
      "return": "float"
    },
    "WorksheetFunction.RoundDown": {
      "method": "Rounds a number down, toward 0 (zero).",
      "return": "float"
    },
    "WorksheetFunction.RoundUp": {
      "method": "Rounds a number up, away from 0 (zero).",
      "return": "float"
    },
    "WorksheetFunction.Rri": {
      "method": "Returns an equivalent interest rate for the growth of an investment.",
      "return": "float"
    },
    "WorksheetFunction.RSq": {
      "method": "Returns the square of the Pearson product moment correlation coefficient through data points in known_y's and known_x's. For more information, see Pearson. The r-squared value can be interpreted as the proportion of the variance in y attributable to the variance in x.",
      "return": "float"
    },
    "WorksheetFunction.RTD": {
      "method": "This method connects to a source to receive real-time data (RTD).",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Search": {
      "method": "Search and SearchB locate one text string within a second text string, and return the number of the starting position of the first text string from the first character of the second text string.",
      "return": "float"
    },
    "WorksheetFunction.SearchB": {
      "method": "Search and SearchB locate one text string within a second text string, and return the number of the starting position of the first text string from the first character of the second text string.",
      "return": "float"
    },
    "WorksheetFunction.Sec": {
      "method": "Returns the secant of an angle.",
      "return": "float"
    },
    "WorksheetFunction.Sech": {
      "method": "Returns the hyperbolic secant of an angle.",
      "return": "float"
    },
    "WorksheetFunction.SeriesSum": {
      "method": "Returns the sum of a power series based on the following formula:",
      "return": "float"
    },
    "WorksheetFunction.Sinh": {
      "method": "Returns the hyperbolic sine of a number.",
      "return": "float"
    },
    "WorksheetFunction.Skew": {
      "method": "Returns the skewness of a distribution. Skewness characterizes the degree of asymmetry of a distribution around its mean.",
      "return": "float"
    },
    "WorksheetFunction.Skew_p": {
      "method": "Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean.",
      "return": "float"
    },
    "WorksheetFunction.Sln": {
      "method": "Returns the straight-line depreciation of an asset for one period.",
      "return": "float"
    },
    "WorksheetFunction.Slope": {
      "method": "Returns the slope of the linear regression line through data points in known_y's and known_x's. The slope is the vertical distance divided by the horizontal distance between any two points on the line, which is the rate of change along the regression line.",
      "return": "float"
    },
    "WorksheetFunction.Small": {
      "method": "Returns the k-th smallest value in a data set. Use this function to return values with a particular relative standing in a data set.",
      "return": "float"
    },
    "WorksheetFunction.SqrtPi": {
      "method": "Returns the square root of (number * pi).",
      "return": "float"
    },
    "WorksheetFunction.Standardize": {
      "method": "Returns a normalized value from a distribution characterized by mean and standard_dev.",
      "return": "float"
    },
    "WorksheetFunction.StDev": {
      "method": "Estimates standard deviation based on a sample. The standard deviation is a measure of how widely values are dispersed from the average value (the mean).",
      "return": "float"
    },
    "WorksheetFunction.StDev_P": {
      "method": "Calculates standard deviation based on the entire population given as arguments. The standard deviation is a measure of how widely values are dispersed from the average value (the mean).",
      "return": "float"
    },
    "WorksheetFunction.StDev_S": {
      "method": "Estimates standard deviation based on a sample. The standard deviation is a measure of how widely values are dispersed from the average value (the mean).",
      "return": "float"
    },
    "WorksheetFunction.StDevP": {
      "method": "Calculates standard deviation based on the entire population given as arguments. The standard deviation is a measure of how widely values are dispersed from the average value (the mean).",
      "return": "float"
    },
    "WorksheetFunction.StEyx": {
      "method": "Returns the standard error of the predicted y-value for each x in the regression. The standard error is a measure of the amount of error in the prediction of y for an individual x.",
      "return": "float"
    },
    "WorksheetFunction.Substitute": {
      "method": "Substitutes new_text for old_text in a text string. Use Substitute when you want to replace specific text in a text string; use Replace when you want to replace any text that occurs in a specific location in a text string.",
      "return": "str"
    },
    "WorksheetFunction.Subtotal": {
      "method": "Creates subtotals.",
      "return": "float"
    },
    "WorksheetFunction.Sum": {
      "method": "Adds all the numbers in a range of cells.",
      "return": "float"
    },
    "WorksheetFunction.SumIf": {
      "method": "Adds the cells specified by a given criteria.",
      "return": "float"
    },
    "WorksheetFunction.SumIfs": {
      "method": "Adds the cells in a range that meet multiple criteria.",
      "return": "float"
    },
    "WorksheetFunction.SumProduct": {
      "method": "Multiplies corresponding components in the given arrays, and returns the sum of those products.",
      "return": "float"
    },
    "WorksheetFunction.SumSq": {
      "method": "Returns the sum of the squares of the arguments.",
      "return": "float"
    },
    "WorksheetFunction.SumX2MY2": {
      "method": "Returns the sum of the difference of squares of corresponding values in two arrays.",
      "return": "float"
    },
    "WorksheetFunction.SumX2PY2": {
      "method": "Returns the sum of the sum of squares of corresponding values in two arrays. The sum of the sum of squares is a common term in many statistical calculations.",
      "return": "float"
    },
    "WorksheetFunction.SumXMY2": {
      "method": "Returns the sum of squares of differences of corresponding values in two arrays.",
      "return": "float"
    },
    "WorksheetFunction.Syd": {
      "method": "Returns the sum-of-years' digits depreciation of an asset for a specified period.",
      "return": "float"
    },
    "WorksheetFunction.T_Dist": {
      "method": "Returns a Student t-distribution where a numeric value (x) is a calculated value of t for which the Percentage Points are computed.",
      "return": "float"
    },
    "WorksheetFunction.T_Dist_2T": {
      "method": "Returns the two-tailed Student t-distribution.",
      "return": "float"
    },
    "WorksheetFunction.T_Dist_RT": {
      "method": "Returns the right-tailed Student t-distribution where a numeric value (x) is a calculated value of t for which the Percentage Points are to be computed. The t-distribution is used in the hypothesis testing of small sample data sets. Use this function in place of a table of critical values for the t-distribution.",
      "return": "float"
    },
    "WorksheetFunction.T_Inv": {
      "method": "Returns the left-tailed inverse of the Student t-distribution.",
      "return": "float"
    },
    "WorksheetFunction.T_Inv_2T": {
      "method": "Returns the t-value of the Student t-distribution as a function of the probability and the degrees of freedom.",
      "return": "float"
    },
    "WorksheetFunction.T_Test": {
      "method": "Returns the probability associated with a Student t-Test. Use T_Test to determine whether two samples are likely to have come from the same two underlying populations that have the same mean.",
      "return": "float"
    },
    "WorksheetFunction.Tanh": {
      "method": "Returns the hyperbolic tangent of a number.",
      "return": "float"
    },
    "WorksheetFunction.TBillEq": {
      "method": "Returns the bond-equivalent yield for a Treasury bill.",
      "return": "float"
    },
    "WorksheetFunction.TBillPrice": {
      "method": "Returns the price per $100 face value for a Treasury bill.",
      "return": "float"
    },
    "WorksheetFunction.TBillYield": {
      "method": "Returns the yield for a Treasury bill.",
      "return": "float"
    },
    "WorksheetFunction.TDist": {
      "method": "Returns the Percentage Points (probability) for the Student t-distribution where a numeric value (x) is a calculated value of t for which the Percentage Points are to be computed. The t-distribution is used in the hypothesis testing of small sample data sets. Use this function in place of a table of critical values for the t-distribution.",
      "return": "float"
    },
    "WorksheetFunction.Text": {
      "method": "Converts a value to text in a specific number format.",
      "return": "str"
    },
    "WorksheetFunction.TInv": {
      "method": "Returns the t-value of the Student's t-distribution as a function of the probability and the degrees of freedom.",
      "return": "float"
    },
    "WorksheetFunction.Transpose": {
      "method": "Returns a vertical range of cells as a horizontal range, or vice versa. Transpose must be entered as an array formula in a range that has the same number of rows and columns, respectively, as an array has columns and rows. Use Transpose to shift the vertical and horizontal orientation of an array on a worksheet.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Trend": {
      "method": "Returns values along a linear trend. Fits a straight line (using the method of least squares) to the arrays known_y's and known_x's. Returns the y-values along that line for the array of new_x's that you specify.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Trim": {
      "method": "Removes all spaces from text except for single spaces between words. Use Trim on text that you have received from another application that may have irregular spacing.",
      "return": "str"
    },
    "WorksheetFunction.TrimMean": {
      "method": "Returns the mean of the interior of a data set. TrimMean calculates the mean taken by excluding a percentage of data points from the top and bottom tails of a data set. Use this function when you wish to exclude outlying data from your analysis.",
      "return": "float"
    },
    "WorksheetFunction.TTest": {
      "method": "Returns the probability associated with a Student's t-Test. Use TTest to determine whether two samples are likely to have come from the same two underlying populations that have the same mean.",
      "return": "float"
    },
    "WorksheetFunction.Unichar": {
      "method": "Returns the Unicode character referenced by the given numeric value.",
      "return": "str"
    },
    "WorksheetFunction.Unicode": {
      "method": "Returns the number (code point) corresponding to the first character of the text.",
      "return": "float"
    },
    "WorksheetFunction.USDollar": {
      "method": "Converts a number to text format and applies a currency symbol. The name of the method (and the symbol that it applies) depends upon the language settings.",
      "return": "str"
    },
    "WorksheetFunction.Var": {
      "method": "Estimates variance based on a sample.",
      "return": "float"
    },
    "WorksheetFunction.Var_P": {
      "method": "Calculates variance based on the entire population.",
      "return": "float"
    },
    "WorksheetFunction.Var_S": {
      "method": "Estimates variance based on a sample.",
      "return": "float"
    },
    "WorksheetFunction.VarP": {
      "method": "Calculates variance based on the entire population.",
      "return": "float"
    },
    "WorksheetFunction.Vdb": {
      "method": "Returns the depreciation of an asset for any period that you specify, including partial periods, by using the double-declining balance method or some other method that you specify. Vdb stands for variable declining balance.",
      "return": "float"
    },
    "WorksheetFunction.VLookup": {
      "method": "Searches for a value in the first column of a table array and returns a value in the same row from another column in the table array.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.WebService": {
      "method": "Underlying function that calls the web service asynchronously, using an HTTP GET request, and returns the response.",
      "return": "VBA_Variant"
    },
    "WorksheetFunction.Weekday": {
      "method": "Returns the day of the week corresponding to a date. The day is given as an integer, ranging from 1 (Sunday) to 7 (Saturday), by default.",
      "return": "float"
    },
    "WorksheetFunction.WeekNum": {
      "method": "Returns a number that indicates where the week falls numerically within a year.",
      "return": "float"
    },
    "WorksheetFunction.Weibull": {
      "method": "Returns the Weibull distribution. Use this distribution in reliability analysis, such as calculating a device's mean time to failure.",
      "return": "float"
    },
    "WorksheetFunction.Weibull_Dist": {
      "method": "Returns the Weibull distribution. Use this distribution in reliability analysis, such as calculating the mean time to failure for a device.",
      "return": "float"
    },
    "WorksheetFunction.WorkDay": {
      "method": "Returns a number that represents a date that is the indicated number of working days before or after a date (the starting date). Working days exclude weekends and any dates identified as holidays. Use WorkDay to exclude weekends or holidays when you calculate invoice due dates, expected delivery times, or the number of days of work performed.",
      "return": "float"
    },
    "WorksheetFunction.WorkDay_Intl": {
      "method": "Returns the serial number of the date before or after a specified number of workdays with custom weekend parameters. Weekend parameters indicate which and how many days are weekend days. Weekend days and any days that are specified as holidays are not considered as workdays.",
      "return": "float"
    },
    "WorksheetFunction.Xirr": {
      "method": "Returns the internal rate of return for a schedule of cash flows that is not necessarily periodic. To calculate the internal rate of return for a series of periodic cash flows, use the Irr function.",
      "return": "float"
    },
    "WorksheetFunction.Xnpv": {
      "method": "Returns the net present value for a schedule of cash flows that is not necessarily periodic. Read/write Double.",
      "return": "float"
    },
    "WorksheetFunction.Xor": {
      "method": "Returns a logical exclusive OR of all arguments.",
      "return": "bool"
    },
    "WorksheetFunction.YearFrac": {
      "method": "Calculates the fraction of the year represented by the number of whole days between two dates (the start_date and the end_date). Use the YearFrac worksheet function to identify the proportion of a whole year's benefits or obligations to assign to a specific term.",
      "return": "float"
    },
    "WorksheetFunction.YieldDisc": {
      "method": "Returns the annual yield for a discounted security.",
      "return": "float"
    },
    "WorksheetFunction.YieldMat": {
      "method": "Returns the annual yield of a security that pays interest at maturity.",
      "return": "float"
    },
    "WorksheetFunction.Z_Test": {
      "method": "Returns the one-tailed probability-value of a z-test. For a given hypothesized population mean, Z_Test returns the probability that the sample mean would be greater than the average of observations in the data set (array); that is, the observed sample mean.",
      "return": "float"
    },
    "WorksheetFunction.ZTest": {
      "method": "Returns the one-tailed probability-value of a z-test. For a given hypothesized population mean, ZTest returns the probability that the sample mean would be greater than the average of observations in the data set (array); that is, the observed sample mean.",
      "return": "float"
    },
    "Characters.Delete": {
      "method": "Deletes the object.",
      "return": "VBA_Variant"
    },
    "Characters.Insert": {
      "method": "Inserts a string preceding the selected characters.",
      "return": "VBA_Variant"
    },
    "Comment.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Comment.Next": {
      "method": "Returns a Comment object that represents the next comment.",
      "return": "Comment"
    },
    "Comment.Previous": {
      "method": "Returns a Comment object that represents the previous comment.",
      "return": "Comment"
    },
    "Comment.Text": {
      "method": "Sets comment text.",
      "return": "str"
    },
    "CommentThreaded.AddReply": {
      "method": "If the comment is a top-level comment, it will add a reply to its replies collection.",
      "return": "CommentThreaded"
    },
    "CommentThreaded.Delete": {
      "method": "Deletes the specified threaded comment and all replies associated with that comment (if any exist).",
      "return": null
    },
    "CommentThreaded.Next": {
      "method": "Returns a CommentThreaded object that represents the next threaded comment.",
      "return": "CommentThreaded"
    },
    "CommentThreaded.Previous": {
      "method": "Returns a CommentThreaded object that represents the previous threaded comment.",
      "return": "CommentThreaded"
    },
    "CommentThreaded.Text": {
      "method": "Sets threaded comment text.",
      "return": "str"
    },
    "FormatConditions.Add": {
      "method": "Adds a new conditional format.",
      "return": "FormatCondition"
    },
    "FormatConditions.AddAboveAverage": {
      "method": "Returns a new AboveAverage object representing a conditional formatting rule for the specified range.",
      "return": "AboveAverage"
    },
    "FormatConditions.AddColorScale": {
      "method": "Returns a new ColorScale object representing a conditional formatting rule that uses gradations in cell colors to indicate relative differences in the values of cells included in a selected range.",
      "return": "ColorScale"
    },
    "FormatConditions.AddDatabar": {
      "method": "Returns a Databar object representing a data bar conditional formatting rule for the specified range.",
      "return": "Databar"
    },
    "FormatConditions.AddIconSetCondition": {
      "method": "Returns a new IconSetCondition object that represents an icon set conditional formatting rule for the specified range.",
      "return": "IconSetCondition"
    },
    "FormatConditions.AddTop10": {
      "method": "Returns a Top10 object representing a conditional formatting rule for the specified range.",
      "return": "Top10"
    },
    "FormatConditions.AddUniqueValues": {
      "method": "Returns a new UniqueValues object representing a conditional formatting rule for the specified range.",
      "return": "UniqueValues"
    },
    "FormatConditions.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "FormatConditions.Item": {
      "method": "Returns a single object from a collection.",
      "return": "An Object value that represents an object contained by the collection."
    },
    "Hyperlinks.Add": {
      "method": "Adds a hyperlink to the specified range or shape.",
      "return": "Hyperlink"
    },
    "Hyperlinks.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "ListObject.Delete": {
      "method": "Deletes the ListObject object and clears the cell data from the worksheet.",
      "return": null
    },
    "ListObject.ExportToVisio": {
      "method": "Exports a ListObject object to Visio.",
      "return": null
    },
    "ListObject.Publish": {
      "method": "Publishes the ListObject object to a server that is running Microsoft SharePoint Foundation.",
      "return": "str"
    },
    "ListObject.Refresh": {
      "method": "Retrieves the current data and schema for the list from the server that is running Microsoft SharePoint Foundation. This method can be used only with lists that are linked to a SharePoint site. If the SharePoint site is not available, calling this method returns an error.",
      "return": null
    },
    "ListObject.Resize": {
      "method": "The Resize method allows a ListObject object to be resized over a new range. No cells are inserted or moved.",
      "return": null
    },
    "ListObject.Unlink": {
      "method": "Removes the link to a Microsoft SharePoint Foundation site from a list. Returns Nothing.",
      "return": null
    },
    "ListObject.Unlist": {
      "method": "Removes the list functionality from a ListObject object. After you use this method, the range of cells that made up the list will be a regular range of data.",
      "return": null
    },
    "PivotTable.AddDataField": {
      "method": "Adds a data field to a PivotTable report. Returns a PivotField object that represents the new data field.",
      "return": "PivotField"
    },
    "PivotTable.AddFields": {
      "method": "Adds row, column, and page fields to a PivotTable report or PivotChart report.",
      "return": "VBA_Variant"
    },
    "PivotTable.AllocateChanges": {
      "method": "Performs a writeback operation for all edited cells in a PivotTable report based on an OLAP data source.",
      "return": "None"
    },
    "PivotTable.CalculatedFields": {
      "method": "Returns a CalculatedFields collection that represents all the calculated fields in the specified PivotTable report. Read-only.",
      "return": "CalculatedFields"
    },
    "PivotTable.ChangeConnection": {
      "method": "Changes the connection of the specified PivotTable object.",
      "return": null
    },
    "PivotTable.ChangePivotCache": {
      "method": "Changes the PivotCache object of the specified PivotTable.",
      "return": null
    },
    "PivotTable.ClearAllFilters": {
      "method": "The ClearAllFilters method deletes all filters currently applied to the PivotTable. This includes deleting all filters in the PivotFilters collection, removing any manual filtering applied, and setting all PivotFields in the Report Filter area to the default item.",
      "return": null
    },
    "PivotTable.ClearTable": {
      "method": "The ClearTable method is used for clearing a PivotTable. Clearing PivotTables includes removing all the fields and deleting all filtering and sorting applied to the PivotTables. This method resets the PivotTable to the state it had right after it was created, before any fields were added to it.",
      "return": null
    },
    "PivotTable.CommitChanges": {
      "method": "Performs a commit operation on the data source of a PivotTable report based on an OLAP data source.",
      "return": "None"
    },
    "PivotTable.ConvertToFormulas": {
      "method": "The ConvertToFormulas method is used for converting a PivotTable to cube formulas. Read/write Boolean.",
      "return": null
    },
    "PivotTable.CreateCubeFile": {
      "method": "Creates a cube file from a PivotTable report connected to an Online Analytical Processing (OLAP) data source.",
      "return": "str"
    },
    "PivotTable.DiscardChanges": {
      "method": "Discards all changes in the edited cells of a PivotTable report based on an OLAP data source.",
      "return": "None"
    },
    "PivotTable.DrillDown": {
      "method": "Enables you to drill down into the data within an OLAP-based or PowerPivot-based cube hierarchy.",
      "return": "None"
    },
    "PivotTable.DrillTo": {
      "method": "Enables you to drill to a location within an OLAP-based or PowerPivot-based cube hierarchy.",
      "return": "None"
    },
    "PivotTable.DrillUp": {
      "method": "Enables you to drill up into the data within an OLAP-based or PowerPivot-based cube hierarchy.",
      "return": "None"
    },
    "PivotTable.GetData": {
      "method": "Returns the value for the data filed in a PivotTable.",
      "return": "float"
    },
    "PivotTable.GetPivotData": {
      "method": "Returns a Range object with information about a data item in a PivotTable report.",
      "return": "Range"
    },
    "PivotTable.ListFormulas": {
      "method": "Creates a list of calculated PivotTable items and fields on a separate worksheet.",
      "return": null
    },
    "PivotTable.PivotCache": {
      "method": "Returns a PivotCache object that represents the cache for the specified PivotTable report. Read-only.",
      "return": "PivotCache"
    },
    "PivotTable.PivotFields": {
      "method": "Returns an object that represents either a single PivotTable field (a PivotField object) or a collection of both the visible and hidden fields (a PivotFields object) in the PivotTable report. Read-only.",
      "return": "VBA_Object"
    },
    "PivotTable.PivotSelect": {
      "method": "Selects part of a PivotTable report.",
      "return": null
    },
    "PivotTable.PivotTableWizard": {
      "method": "Creates and returns a PivotTable object. This method doesn't display the PivotTable Wizard. This method isn't available for OLE DB data sources. Use the Add method to add a PivotTable cache, and then create a PivotTable report based on the cache.",
      "return": null
    },
    "PivotTable.PivotValueCell": {
      "method": "Retrieve the PivotValueCell object for a given PivotTable provided certain row and column indices.",
      "return": "PIVOTVALUECELL"
    },
    "PivotTable.RefreshDataSourceValues": {
      "method": "Retrieves the current values from the data source for all edited cells in a PivotTable report that is in writeback mode.",
      "return": "None"
    },
    "PivotTable.RefreshTable": {
      "method": "Refreshes the PivotTable report from the source data. Returns True if it's successful.",
      "return": "bool"
    },
    "PivotTable.RepeatAllLabels": {
      "method": "Specifies whether to repeat item labels for all PivotFields in the specified PivotTable.",
      "return": "None"
    },
    "PivotTable.RowAxisLayout": {
      "method": "This method is used for simultaneously setting layout options for all existing PivotFields.",
      "return": null
    },
    "PivotTable.ShowPages": {
      "method": "Creates a new PivotTable report for each item in the page field. Each new report is created on a new worksheet.",
      "return": "VBA_Variant"
    },
    "PivotTable.SubtotalLocation": {
      "method": "This method changes the subtotal location for all existing PivotFields. Changing the subtotal location has an immediate visual effect only for fields in outline form, but it will be set for fields in tabular form as well.",
      "return": null
    },
    "PivotTable.Update": {
      "method": "Updates the PivotTable report.",
      "return": null
    },
    "Phonetics.Add": {
      "method": "Adds phonetic text to the specified cell.",
      "return": null
    },
    "Phonetics.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "PivotCell.AllocateChange": {
      "method": "Performs a writeback operation on the specified cell in a PivotTable report based on an OLAP data source.",
      "return": "None"
    },
    "PivotCell.DiscardChange": {
      "method": "Discards changes to the specified cell in a PivotTable report.",
      "return": "None"
    },
    "PivotField.AddPageItem": {
      "method": "Adds an additional item to a multiple item page field.",
      "return": null
    },
    "PivotField.AutoGroup": {
      "method": "Automatically groups the pivot fields in a PivotTable.",
      "return": null
    },
    "PivotField.AutoShow": {
      "method": "Displays the number of top or bottom items for a row, page, or column field in the specified PivotTable report.",
      "return": null
    },
    "PivotField.AutoSort": {
      "method": "Establishes automatic field-sorting rules for PivotTable reports.",
      "return": null
    },
    "PivotField.CalculatedItems": {
      "method": "Returns a CalculatedItems collection that represents all the calculated items in the specified PivotTable report. Read-only.",
      "return": "CalculatedItems"
    },
    "PivotField.ClearAllFilters": {
      "method": "Calling this method deletes all filters currently applied to the PivotField. This includes deleting all filters from the PivotFilters collection of the PivotField and removing any manual filtering applied to the PivotField as well. If the PivotField is in the Report Filter area, the item selected will be set to the default item.",
      "return": null
    },
    "PivotField.ClearLabelFilters": {
      "method": "This method deletes all label filters or all date filters in the PivotFilters collection of the PivotField.",
      "return": null
    },
    "PivotField.ClearManualFilter": {
      "method": "Provides an easy way to set the Visible property to True for all items of a PivotField in PivotTables, and to empty the HiddenItemsList and VisibleItemsList collections in OLAP PivotTables.",
      "return": null
    },
    "PivotField.ClearValueFilters": {
      "method": "Calling this method deletes all value filters in the PivotFilters collection of the PivotField.",
      "return": null
    },
    "PivotField.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "PivotField.DrillTo": {
      "method": "The DrillTo method supports drilling to a specified PivotField from another PivotField.",
      "return": null
    },
    "PivotField.PivotItems": {
      "method": "Returns an object that represents either a single PivotTable item (a PivotItem object) or a collection of all the visible and hidden items (a PivotItems object) in the specified field. Read-only.",
      "return": "VBA_Variant"
    },
    "PivotItem.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "PivotItem.DrillTo": {
      "method": "The DrillTo method supports drilling to a specified PivotField from a PivotItem.",
      "return": null
    },
    "QueryTable.CancelRefresh": {
      "method": "Cancels all background queries for the specified query table. Use the Refreshing property to determine whether a background query is currently in progress.",
      "return": null
    },
    "QueryTable.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "QueryTable.Refresh": {
      "method": "Updates an external data range in a QueryTable object.",
      "return": "bool"
    },
    "QueryTable.ResetTimer": {
      "method": "Resets the refresh timer for the specified query table or PivotTable report to the last interval that you set by using the RefreshPeriod property.",
      "return": null
    },
    "QueryTable.SaveAsODC": {
      "method": "Saves the QueryTable cache source as a Microsoft Office Data Connection file.",
      "return": null
    },
    "SparklineGroups.Add": {
      "method": "Creates a new sparkline group and returns a SparklineGroup object.",
      "return": "SparklineGroup"
    },
    "SparklineGroups.Clear": {
      "method": "Clears the selected sparklines.",
      "return": "None"
    },
    "SparklineGroups.ClearGroups": {
      "method": "Clears the selected sparkline groups.",
      "return": "None"
    },
    "SparklineGroups.Group": {
      "method": "Groups the selected sparklines.",
      "return": "None"
    },
    "SparklineGroups.Ungroup": {
      "method": "Ungroups the sparklines in the selected sparkline group.",
      "return": "None"
    },
    "Style.Delete": {
      "method": "Deletes the object.",
      "return": "VBA_Variant"
    },
    "Validation.Add": {
      "method": "Adds data validation to the specified range.",
      "return": null
    },
    "Validation.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Validation.Modify": {
      "method": "Modifies data validation for a range.",
      "return": null
    },
    "Worksheet.Activate": {
      "method": "Makes the current sheet the active sheet.",
      "return": null
    },
    "Worksheet.Calculate": {
      "method": "Calculates all open workbooks, a specific worksheet in a workbook, or a specified range of cells on a worksheet, as shown in the following table.",
      "return": null
    },
    "Worksheet.ChartObjects": {
      "method": "Returns an object that represents either a single embedded chart (a ChartObject object) or a collection of all the embedded charts (a ChartObjects object) on the sheet.",
      "return": "VBA_Object"
    },
    "Worksheet.CheckSpelling": {
      "method": "Checks the spelling of an object.",
      "return": null
    },
    "Worksheet.CircleInvalid": {
      "method": "Circles invalid entries on the worksheet.",
      "return": null
    },
    "Worksheet.ClearArrows": {
      "method": "Clears the tracer arrows from the worksheet. Tracer arrows are added by using the auditing feature.",
      "return": null
    },
    "Worksheet.ClearCircles": {
      "method": "Clears circles from invalid entries on the worksheet.",
      "return": null
    },
    "Worksheet.Copy": {
      "method": "Copies the sheet to another location in the current workbook or a new workbook.",
      "return": null
    },
    "Worksheet.Delete": {
      "method": "Deletes the object.",
      "return": "bool"
    },
    "Worksheet.Evaluate": {
      "method": "Converts a Microsoft Excel name to an object or a value.",
      "return": "VBA_Variant"
    },
    "Worksheet.ExportAsFixedFormat": {
      "method": "Exports to a file of the specified format.",
      "return": null
    },
    "Worksheet.Move": {
      "method": "Moves the sheet to another location in the workbook.",
      "return": null
    },
    "Worksheet.OLEObjects": {
      "method": "Returns an object that represents either a single OLE object (an OLEObject) or a collection of all OLE objects (an OLEObjects collection) on the chart or sheet. Read-only.",
      "return": "VBA_Object"
    },
    "Worksheet.Paste": {
      "method": "Pastes the contents of the Clipboard onto the sheet.",
      "return": null
    },
    "Worksheet.PasteSpecial": {
      "method": "Pastes the contents of the Clipboard onto the sheet, using a specified format. Use this method to paste data from other applications or to paste data in a specific format.",
      "return": null
    },
    "Worksheet.PivotTables": {
      "method": "Returns an object that represents either a single PivotTable report (a PivotTable object) or a collection of all the PivotTable reports (a PivotTables object) on a worksheet. Read-only.",
      "return": "VBA_Object"
    },
    "Worksheet.PivotTableWizard": {
      "method": "Creates a new PivotTable report. This method doesn't display the PivotTable Wizard. This method isn't available for OLE DB data sources. Use the Add method to add a PivotTable cache, and then create a PivotTable report based on the cache.",
      "return": "PivotTable"
    },
    "Worksheet.PrintOut": {
      "method": "Prints the object.",
      "return": "VBA_Variant"
    },
    "Worksheet.PrintPreview": {
      "method": "Shows a preview of the object as it would look when printed.",
      "return": null
    },
    "Worksheet.Protect": {
      "method": "Protects a worksheet so that it cannot be modified.",
      "return": null
    },
    "Worksheet.ResetAllPageBreaks": {
      "method": "Resets all page breaks on the specified worksheet.",
      "return": null
    },
    "Worksheet.SaveAs": {
      "method": "Saves changes to the chart or worksheet in a different file.",
      "return": null
    },
    "Worksheet.Scenarios": {
      "method": "Returns an object that represents either a single scenario (a Scenario object) or a collection of scenarios (a Scenarios object) on the worksheet.",
      "return": "VBA_Object"
    },
    "Worksheet.Select": {
      "method": "Selects the object.",
      "return": null
    },
    "Worksheet.SetBackgroundPicture": {
      "method": "Sets the background graphic for a worksheet.",
      "return": null
    },
    "Worksheet.ShowAllData": {
      "method": "Makes all rows of the currently filtered list visible. If AutoFilter is in use, this method changes the arrows to \"All.\"",
      "return": null
    },
    "Worksheet.ShowDataForm": {
      "method": "Displays the data form associated with the worksheet.",
      "return": null
    },
    "Worksheet.Unprotect": {
      "method": "Removes protection from a sheet or workbook. This method has no effect if the sheet or workbook isn't protected.",
      "return": null
    },
    "Worksheet.XmlDataQuery": {
      "method": "Returns a Range object that represents the cells mapped to a particular XPath. Returns Nothing if the specified XPath has not been mapped to the worksheet, or if the mapped range is empty.",
      "return": "Range"
    },
    "Worksheet.XmlMapQuery": {
      "method": "Returns a Range object that represents the cells mapped to a particular XPath. Returns Nothing if the specified XPath has not been mapped to the worksheet.",
      "return": "Range"
    },
    "XPath.Clear": {
      "method": "Clears all XPath schema information for the mapped range.",
      "return": null
    },
    "XPath.SetValue": {
      "method": "Maps the specified XPath object to a ListColumn object or Range collection. If the XPath object has previously been mapped to the ListColumn object or Range collection, the SetValue method sets the properties of the XPath object.",
      "return": null
    },
    "Walls.ClearFormats": {
      "method": "Clears the formatting of the object.",
      "return": "VBA_Variant"
    },
    "Walls.Paste": {
      "method": "Pastes a picture from the Clipboard on the walls of the specified chart.",
      "return": null
    },
    "Walls.Select": {
      "method": "Selects the object.",
      "return": "VBA_Variant"
    },
    "ChartArea.Clear": {
      "method": "Clears the entire object.",
      "return": "VBA_Variant"
    },
    "ChartArea.ClearContents": {
      "method": "Clears the data from a chart but leaves the formatting.",
      "return": "VBA_Variant"
    },
    "ChartArea.ClearFormats": {
      "method": "Clears the formatting of the object.",
      "return": "VBA_Variant"
    },
    "ChartArea.Copy": {
      "method": "Copies the object to the Clipboard.",
      "return": "VBA_Variant"
    },
    "ChartArea.Select": {
      "method": "Selects the object.",
      "return": "VBA_Variant"
    },
    "ChartTitle.Delete": {
      "method": "Deletes the object.",
      "return": "VBA_Variant"
    },
    "ChartTitle.Select": {
      "method": "Selects the object.",
      "return": "VBA_Variant"
    },
    "DataTable.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "DataTable.Select": {
      "method": "Selects the object.",
      "return": null
    },
    "Floor.ClearFormats": {
      "method": "Clears the formatting of the object.",
      "return": "VBA_Variant"
    },
    "Floor.Paste": {
      "method": "Pastes a picture from the Clipboard on the floor of the specified chart.",
      "return": null
    },
    "Floor.Select": {
      "method": "Selects the object.",
      "return": "VBA_Variant"
    },
    "Legend.Clear": {
      "method": "Clears the entire object.",
      "return": "VBA_Variant"
    },
    "Legend.Delete": {
      "method": "Deletes the object.",
      "return": "VBA_Variant"
    },
    "Legend.LegendEntries": {
      "method": "Returns an object that represents either a single legend entry (a LegendEntry object) or a collection of legend entries (a LegendEntries object) for the legend.",
      "return": "VBA_Object"
    },
    "Legend.Select": {
      "method": "Selects the object.",
      "return": "VBA_Variant"
    },
    "PlotArea.ClearFormats": {
      "method": "Clears the formatting of the object.",
      "return": "VBA_Variant"
    },
    "PlotArea.Select": {
      "method": "Selects the object.",
      "return": "VBA_Variant"
    },
    "Shapes.AddCallout": {
      "method": "Creates a borderless line callout. Returns a Shape object that represents the new callout.",
      "return": "Shape"
    },
    "Shapes.AddChart2": {
      "method": "Adds a chart to the document. Returns a Shape object that represents a chart and adds it to the specified collection.",
      "return": "Shape"
    },
    "Shapes.AddConnector": {
      "method": "Creates a connector. Returns a Shape object that represents the new connector. When a connector is added, it's not connected to anything. Use the BeginConnect and EndConnect methods to attach the beginning and end of a connector to other shapes in the document.",
      "return": "Shape"
    },
    "Shapes.AddCurve": {
      "method": "Returns a Shape object that represents a Bézier curve on a worksheet.",
      "return": "Shape"
    },
    "Shapes.AddFormControl": {
      "method": "Creates a Microsoft Excel control. Returns a Shape object that represents the new control.",
      "return": "Shape"
    },
    "Shapes.AddLabel": {
      "method": "Creates a label. Returns a Shape object that represents the new label.",
      "return": "Shape"
    },
    "Shapes.AddLine": {
      "method": "As it applies to the Shapes object, returns a Shape object that represents the new line on a worksheet.",
      "return": "Shape"
    },
    "Shapes.AddOLEObject": {
      "method": "Creates an OLE object. Returns a Shape object that represents the new OLE object.",
      "return": "Shape"
    },
    "Shapes.AddPicture": {
      "method": "Creates a picture from an existing file. Returns a Shape object that represents the new picture.",
      "return": "Shape"
    },
    "Shapes.AddPicture2": {
      "method": "Creates a picture from an existing file. Returns a Shape object that represents the new picture.",
      "return": "Shape"
    },
    "Shapes.AddPolyline": {
      "method": "Creates an open polyline or a closed polygon drawing. Returns a Shape object that represents the new polyline or polygon.",
      "return": "Shape"
    },
    "Shapes.AddShape": {
      "method": "Returns a Shape object that represents the new AutoShape on a worksheet.",
      "return": "Shape"
    },
    "Shapes.AddSmartArt": {
      "method": "Creates a new SmartArt graphic with the specified layout.",
      "return": "Shape"
    },
    "Shapes.AddTextbox": {
      "method": "Creates a text box. Returns a Shape object that represents the new text box.",
      "return": "Shape"
    },
    "Shapes.AddTextEffect": {
      "method": "Creates a WordArt object. Returns a Shape object that represents the new WordArt object.",
      "return": "Shape"
    },
    "Shapes.Add3DModel": {
      "method": "Creates a 3D model from an existing file. Returns a Shape object that represents the new 3D model.",
      "return": "Shape"
    },
    "Shapes.BuildFreeform": {
      "method": "Builds a freeform object. Returns a FreeformBuilder object that represents the freeform as it is being built.",
      "return": "FreeformBuilder"
    },
    "Shapes.Item": {
      "method": "Returns a single object from a collection.",
      "return": "Shape"
    },
    "Shapes.SelectAll": {
      "method": "Selects all the shapes in the specified Shapes collection.",
      "return": null
    },
    "Pane.Activate": {
      "method": "Activates the pane.",
      "return": "bool"
    },
    "Pane.LargeScroll": {
      "method": "Scrolls the contents of the window by pages.",
      "return": "VBA_Variant"
    },
    "Pane.PointsToScreenPixelsX": {
      "method": "Returns or sets a pixel point on the screen.",
      "return": "int"
    },
    "Pane.PointsToScreenPixelsY": {
      "method": "Returns or sets the location of the pixel on the screen.",
      "return": "int"
    },
    "Pane.ScrollIntoView": {
      "method": "Scrolls the document window so that the contents of a specified rectangular area are displayed in either the upper-left or lower-right corner of the document window or pane (depending on the value of the Start argument).",
      "return": null
    },
    "Pane.SmallScroll": {
      "method": "Scrolls the contents of the window by rows or columns.",
      "return": "VBA_Variant"
    },
    "Connections.Add": {
      "method": "Adds a new connection to the workbook.",
      "return": "WorkbookConnection"
    },
    "Connections.AddFromFile": {
      "method": "Adds a connection from the specified file.",
      "return": "WorkbookConnection"
    },
    "Connections.Item": {
      "method": "This method creates a connection item.",
      "return": "WorkbookConnection"
    },
    "CustomViews.Add": {
      "method": "Creates a new custom view.",
      "return": "CustomView"
    },
    "CustomViews.Item": {
      "method": "Returns a single object from a collection.",
      "return": "CustomView"
    },
    "TableStyles.Add": {
      "method": "Creates a new TableStyle object and adds it to the collection.",
      "return": "TableStyle"
    },
    "TableStyles.Item": {
      "method": "Returns a single object from a collection.",
      "return": "TableStyle"
    },
    "Model.AddConnection": {
      "method": "Adds a new WorkbookConnection to the model with the same properties as the one supplied as an argument.",
      "return": "WORKBOOKCONNECTION"
    },
    "Model.CreateModelWorkbookConnection": {
      "method": "Returns a WorkbookConnection object of type ModelConnection.",
      "return": "WORKBOOKCONNECTION"
    },
    "Model.Initialize": {
      "method": "Initializes the Workbook's data model. This is called by default the first time the model is used.",
      "return": "None"
    },
    "Model.Refresh": {
      "method": "Refreshes all data sources associated with the model, fully reprocesses the model, and updates all Excel data features associated with the model.",
      "return": "None"
    },
    "PublishObjects.Add": {
      "method": "Creates an object that represents an item in a document saved to a webpage. Such objects facilitate subsequent updates to the webpage while automated changes are being made to the document in Microsoft Excel. Returns a PublishObject object.",
      "return": "PublishObject"
    },
    "PublishObjects.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "PublishObjects.Publish": {
      "method": "Saves a copy of the item or items in the spreadsheet that have been added to the PublishObjects collection to a webpage.",
      "return": null
    },
    "Queries.Add": {
      "method": "Adds a new WorkbookQuery object to the Queries collection.",
      "return": "WorkbookQuery"
    },
    "Queries.Item": {
      "method": "Returns a single object from a collection.",
      "return": "WorkbookQuery"
    },
    "SlicerCaches.Add": {
      "method": "Adds a new SlicerCache object to the collection.",
      "return": "SlicerCache"
    },
    "Styles.Add": {
      "method": "Creates a new style and adds it to the list of styles that are available for the current workbook.",
      "return": "Style"
    },
    "Styles.Merge": {
      "method": "Merges the styles from another workbook into the Styles collection.",
      "return": "VBA_Variant"
    },
    "WebOptions.UseDefaultFolderSuffix": {
      "method": "Sets the folder suffix for the specified document to the default suffix for the language support that you have selected or installed.",
      "return": null
    },
    "Worksheets.Add": {
      "method": "Creates a new worksheet, chart, or macro sheet. The new worksheet becomes the active sheet.",
      "return": "An Object value that represents the new worksheet, chart, or macro sheet."
    },
    "Worksheets.Add2": {
      "method": "This method is only implemented for the Charts collection object and will produce a run-time error if used on the Sheets and Worksheets objects.",
      "return": "VBA_OBJECT"
    },
    "Worksheets.Copy": {
      "method": "Copies the sheet to another location in the workbook.",
      "return": null
    },
    "Worksheets.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Worksheets.FillAcrossSheets": {
      "method": "Copies a range to the same area on all other worksheets in a collection.",
      "return": null
    },
    "Worksheets.Move": {
      "method": "Moves the sheet to another location in the workbook.",
      "return": null
    },
    "Worksheets.PrintOut": {
      "method": "Prints the object.",
      "return": "VBA_Variant"
    },
    "Worksheets.PrintPreview": {
      "method": "Shows a preview of the object as it would look when printed.",
      "return": null
    },
    "Worksheets.Select": {
      "method": "Selects the object.",
      "return": null
    },
    "XmlMaps.Add": {
      "method": "Adds an XML map to the specified workbook.",
      "return": "XmlMap"
    },
    "XmlNamespaces.InstallManifest": {
      "method": "Installs the specified XML expansion pack on the user's computer, making an XML smart document solution available to one or more users.",
      "return": null
    },
    "HPageBreaks.Add": {
      "method": "Adds a horizontal page break.",
      "return": "HPageBreak"
    },
    "VPageBreaks.Add": {
      "method": "Adds a vertical page break.",
      "return": "VPageBreak"
    },
    "Name.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "RecentFile.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "RecentFile.Open": {
      "method": "Opens a recent workbook.",
      "return": "Workbook"
    },
    "Watch.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Shape.Apply": {
      "method": "Applies to the specified shape formatting that's been copied by using the PickUp method.",
      "return": null
    },
    "Shape.Copy": {
      "method": "Copies the object to the Clipboard.",
      "return": null
    },
    "Shape.CopyPicture": {
      "method": "Copies the selected object to the Clipboard as a picture.",
      "return": null
    },
    "Shape.Cut": {
      "method": "Cuts the object to the Clipboard.",
      "return": "None"
    },
    "Shape.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Shape.Duplicate": {
      "method": "Duplicates the object and returns a reference to the new copy.",
      "return": "Shape"
    },
    "Shape.Flip": {
      "method": "Flips the specified shape around its horizontal or vertical axis.",
      "return": null
    },
    "Shape.IncrementLeft": {
      "method": "Moves the specified shape horizontally by the specified number of points.",
      "return": null
    },
    "Shape.IncrementRotation": {
      "method": "Changes the rotation of the specified shape around the z-axis by the specified number of degrees. Use the Rotation property to set the absolute rotation of the shape.",
      "return": null
    },
    "Shape.IncrementTop": {
      "method": "Moves the specified shape vertically by the specified number of points.",
      "return": null
    },
    "Shape.PickUp": {
      "method": "Copies the formatting of the specified shape. Use the Apply method to apply the copied formatting to another shape.",
      "return": null
    },
    "Shape.RerouteConnections": {
      "method": "This method reroutes all connectors attached to the specified shape; if the specified shape is a connector, it's rerouted.",
      "return": null
    },
    "Shape.ScaleHeight": {
      "method": "Scales the height of the shape by a specified factor. For pictures and OLE objects, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures and OLE objects are always scaled relative to their current height.",
      "return": null
    },
    "Shape.ScaleWidth": {
      "method": "Scales the width of the shape by a specified factor. For pictures and OLE objects, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures and OLE objects are always scaled relative to their current width.",
      "return": null
    },
    "Shape.Select": {
      "method": "Selects the object.",
      "return": null
    },
    "Shape.SetShapesDefaultProperties": {
      "method": "Makes the formatting of the specified shape the default formatting for the shape.",
      "return": null
    },
    "Shape.Ungroup": {
      "method": "Ungroups any grouped shapes in the specified shape or range of shapes. Disassembles pictures and OLE objects within the specified shape or range of shapes.",
      "return": "ShapeRange"
    },
    "Shape.ZOrder": {
      "method": "Moves the specified shape in front of or behind other shapes in the collection (that is, changes the shape's position in the z-order).",
      "return": null
    },
    "CommentsThreaded.Item": {
      "method": "Returns a single object from a collection.",
      "return": "CommentThreaded"
    },
    "FormatCondition.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "FormatCondition.Modify": {
      "method": "Modifies an existing conditional format.",
      "return": null
    },
    "FormatCondition.ModifyAppliesToRange": {
      "method": "Sets the cell range to which this formatting rule applies.",
      "return": null
    },
    "FormatCondition.SetFirstPriority": {
      "method": "Sets the priority value for this conditional formatting rule to 1 so that it will be evaluated before all other rules on the worksheet.",
      "return": null
    },
    "FormatCondition.SetLastPriority": {
      "method": "Sets the evaluation order for this conditional formatting rule so that it is evaluated after all other rules on the worksheet.",
      "return": null
    },
    "Hyperlink.AddToFavorites": {
      "method": "Adds a shortcut to the workbook or hyperlink to the Favorites folder.",
      "return": null
    },
    "Hyperlink.CreateNewDocument": {
      "method": "Creates a new document linked to the specified hyperlink.",
      "return": null
    },
    "Hyperlink.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Hyperlink.Follow": {
      "method": "Displays a cached document, if it's already been downloaded. Otherwise, this method resolves the hyperlink, downloads the target document, and displays the document in the appropriate application.",
      "return": null
    },
    "ListColumns.Add": {
      "method": "Adds a new column to the list object.",
      "return": "ListColumn"
    },
    "ListRows.Add": {
      "method": "Adds a new row to the table represented by the specified ListObject.",
      "return": "ListRow"
    },
    "TableObject.Delete": {
      "method": "Deletes the TableObject object.",
      "return": "None"
    },
    "TableObject.Refresh": {
      "method": "This method updates the TableObject object.",
      "return": "BOOL"
    },
    "XmlMap.Delete": {
      "method": "Removes the specified XML map from the workbook.",
      "return": null
    },
    "XmlMap.Export": {
      "method": "Exports the contents of cells mapped to the specified XmlMap object to an XML data file.",
      "return": "XlXmlExportResult"
    },
    "XmlMap.ExportXml": {
      "method": "Exports the contents of cells mapped to the specified XmlMap object to a String variable.",
      "return": "XlXmlExportResult"
    },
    "XmlMap.Import": {
      "method": "Imports data from the specified XML data file into cells that have been mapped to the specified XmlMap object.",
      "return": "XlXmlImportResult"
    },
    "XmlMap.ImportXml": {
      "method": "Imports XML data from a String variable into cells that have been mapped to the specified XmlMap object.",
      "return": "XlXmlImportResult"
    },
    "CalculatedMembers.Add": {
      "method": "Adds a calculated field or calculated item to a PivotTable. Returns a CalculatedMember object.",
      "return": "CalculatedMember"
    },
    "CalculatedMembers.AddCalculatedMember": {
      "method": "Adds a calculated field or calculated item to a PivotTable.",
      "return": "CALCULATEDMEMBER"
    },
    "PivotTableChangeList.Add": {
      "method": "Adds a ValueChange object to the specified PivotTableChangeList collection.",
      "return": "ValueChange"
    },
    "CubeFields.AddSet": {
      "method": "Adds a new CubeField object to the CubeFields collection. The CubeField object corresponds to a set defined on the Online Analytical Processing (OLAP) provider for the cube.",
      "return": "CubeField"
    },
    "CubeFields.GetMeasure": {
      "method": "Given an attribute hierarchy, returns an implicit measure for the given function that corresponds to this attribute. If an implicit measure does not exist, a new implicit measure is created and added to the CubeFields collection.",
      "return": "CUBEFIELD"
    },
    "PivotFormulas.Add": {
      "method": "Creates a new PivotTable formula.",
      "return": "PivotFormula"
    },
    "PivotFormulas.Item": {
      "method": "Returns a single object from a collection.",
      "return": "PivotFormula"
    },
    "Slicers.Add": {
      "method": "Creates a new slicer and returns a Slicer object.",
      "return": "Slicer"
    },
    "PivotItemList.Item": {
      "method": "Returns a single object from a collection.",
      "return": "PivotItem"
    },
    "CubeField.AddMemberPropertyField": {
      "method": "Adds a member property field to the display for the cube field.",
      "return": null
    },
    "CubeField.AutoGroup": {
      "method": "Automatically groups the cube fields in an OLAP cube, optionally in the specified orientation and/or at the specified position.",
      "return": null
    },
    "CubeField.ClearManualFilter": {
      "method": "The ClearManualFilter method provides an easy way to set the Visible property to True for all items of a PivotField in PivotTables, and to empty the HiddenItemsList/VisibleItemsList collections in OLAP PivotTables.",
      "return": null
    },
    "CubeField.CreatePivotFields": {
      "method": "The CreatePivotFields method enables users to apply a filter to PivotFields not yet added to the PivotTable by creating the corresponding PivotField object.",
      "return": null
    },
    "CubeField.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Parameters.Add": {
      "method": "Creates a new query parameter.",
      "return": "Parameter"
    },
    "Parameters.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Parameters.Item": {
      "method": "Returns a single object from a collection.",
      "return": "Parameter"
    },
    "WorkbookConnection.Delete": {
      "method": "Deletes a workbook connection.",
      "return": null
    },
    "WorkbookConnection.Refresh": {
      "method": "Refreshes a workbook connection.",
      "return": null
    },
    "SparklineGroup.Delete": {
      "method": "Deletes the sparkline group.",
      "return": "None"
    },
    "SparklineGroup.Modify": {
      "method": "Sets the location and the source data for the sparkline group.",
      "return": "None"
    },
    "SparklineGroup.ModifyDateRange": {
      "method": "Sets the date range for the sparkline group.",
      "return": "None"
    },
    "SparklineGroup.ModifyLocation": {
      "method": "Sets the associated Range object to modify the location of the sparkline group.",
      "return": "None"
    },
    "SparklineGroup.ModifySourceData": {
      "method": "Sets the range that represents the source data for the sparkline group.",
      "return": "None"
    },
    "AutoFilter.ApplyFilter": {
      "method": "Applies the specified AutoFilter object.",
      "return": null
    },
    "AutoFilter.ShowAllData": {
      "method": "Displays all the data returned by the AutoFilter object.",
      "return": null
    },
    "Comments.Item": {
      "method": "Returns a single object from a collection.",
      "return": "Comment"
    },
    "CustomProperties.Add": {
      "method": "Adds custom property information.",
      "return": "CustomProperty"
    },
    "Outline.ShowLevels": {
      "method": "Displays the specified number of row and/or column levels of an outline.",
      "return": "VBA_Variant"
    },
    "QueryTables.Add": {
      "method": "Creates a new query table.",
      "return": "QueryTable"
    },
    "QueryTables.Item": {
      "method": "Returns a single object from a collection.",
      "return": "QueryTable"
    },
    "Sort.Apply": {
      "method": "Sorts the range based on the currently applied sort states.",
      "return": null
    },
    "Sort.SetRange": {
      "method": "Sets the range over which the sort occurs.",
      "return": null
    },
    "ShapeRange.Align": {
      "method": "Aligns the shapes in the specified range of shapes.",
      "return": null
    },
    "ShapeRange.Apply": {
      "method": "Applies to the specified shape formatting that's been copied by using the PickUp method.",
      "return": null
    },
    "ShapeRange.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "ShapeRange.Distribute": {
      "method": "Horizontally or vertically distributes the shapes in the specified range of shapes.",
      "return": null
    },
    "ShapeRange.Duplicate": {
      "method": "Duplicates the object and returns a reference to the new copy.",
      "return": null
    },
    "ShapeRange.Flip": {
      "method": "Flips the specified shape around its horizontal or vertical axis.",
      "return": null
    },
    "ShapeRange.Group": {
      "method": "Groups the shapes in the specified range.",
      "return": "Shape"
    },
    "ShapeRange.IncrementLeft": {
      "method": "Moves the specified shape horizontally by the specified number of points.",
      "return": null
    },
    "ShapeRange.IncrementRotation": {
      "method": "Changes the rotation of the specified shape around the z-axis by the specified number of degrees. Use the Rotation property to set the absolute rotation of the shape.",
      "return": null
    },
    "ShapeRange.IncrementTop": {
      "method": "Moves the specified shape vertically by the specified number of points.",
      "return": null
    },
    "ShapeRange.Item": {
      "method": "Returns a single object from a collection.",
      "return": "Shape"
    },
    "ShapeRange.PickUp": {
      "method": "Copies the formatting of the specified shape. Use the Apply method to apply the copied formatting to another shape.",
      "return": null
    },
    "ShapeRange.Regroup": {
      "method": "Regroups the group that the specified shape range belonged to previously. Returns the regrouped shapes as a single Shape object.",
      "return": "Shape"
    },
    "ShapeRange.RerouteConnections": {
      "method": "This method reroutes all connectors attached to the specified shape; if the specified shape is a connector, it's rerouted.",
      "return": null
    },
    "ShapeRange.ScaleHeight": {
      "method": "Scales the height of the shape by a specified factor. For pictures and OLE objects, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures and OLE objects are always scaled relative to their current height.",
      "return": null
    },
    "ShapeRange.ScaleWidth": {
      "method": "Scales the width of the shape by a specified factor. For pictures and OLE objects, you can indicate whether you want to scale the shape relative to the original or the current size. Shapes other than pictures and OLE objects are always scaled relative to their current width.",
      "return": null
    },
    "ShapeRange.Select": {
      "method": "Selects the object.",
      "return": null
    },
    "ShapeRange.SetShapesDefaultProperties": {
      "method": "Makes the formatting of the specified shape the default formatting for the shape.",
      "return": null
    },
    "ShapeRange.Ungroup": {
      "method": "Ungroups any grouped shapes in the specified shape or range of shapes. Disassembles pictures and OLE objects within the specified shape or range of shapes.",
      "return": "ShapeRange"
    },
    "ShapeRange.ZOrder": {
      "method": "Moves the specified shape in front of or behind other shapes in the collection (that is, changes the shape's position in the z-order).",
      "return": null
    },
    "CustomView.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "CustomView.Show": {
      "method": "Displays the object.",
      "return": null
    },
    "ModelMeasures.Add": {
      "method": "Adds a model measure to the model.",
      "return": "ModelMeasure"
    },
    "ModelMeasures.Item": {
      "method": "Returns a single object from a collection.",
      "return": "ModelMeasure"
    },
    "ModelRelationships.Add": {
      "method": "Adds a new relationship to the model.",
      "return": "MODELRELATIONSHIP"
    },
    "ModelRelationships.DetectRelationships": {
      "method": "Detects model relationships in the specified PivotTable object.",
      "return": "None"
    },
    "ModelRelationships.Item": {
      "method": "Returns a single object from the ModelRelationships object.",
      "return": "ModelRelationship"
    },
    "ModelTables.Item": {
      "method": "Returns a single object from the ModelTables collection.",
      "return": "MODELTABLE"
    },
    "WorkbookQuery.Delete": {
      "method": "Deletes this query and its underlying connection and removes it from the Queries collection.",
      "return": "None"
    },
    "SlicerCache.ClearAllFilters": {
      "method": "Clears the filter for either slicer or timeline, depending on the slicer cache type.",
      "return": "None"
    },
    "SlicerCache.ClearDateFilter": {
      "method": "Clears the filter for a timeline (date filter).",
      "return": "None"
    },
    "SlicerCache.ClearManualFilter": {
      "method": "Clears the manual filter for the slicer cache.",
      "return": "None"
    },
    "SlicerCache.Delete": {
      "method": "Deletes the specified slicer cache and the slicers associated with it.",
      "return": null
    },
    "HPageBreak.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "HPageBreak.DragOff": {
      "method": "Drags a page break out of the print area.",
      "return": null
    },
    "VPageBreak.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "VPageBreak.DragOff": {
      "method": "Drags a page break out of the print area.",
      "return": null
    },
    "CalloutFormat.AutomaticLength": {
      "method": "Specifies that the first segment of the callout line (the segment attached to the text callout box) be scaled automatically when the callout is moved.",
      "return": null
    },
    "CalloutFormat.CustomDrop": {
      "method": "Sets the vertical distance (in points) from the edge of the text bounding box to the place where the callout line attaches to the text box.",
      "return": null
    },
    "CalloutFormat.CustomLength": {
      "method": "Specifies that the first segment of the callout line (the segment attached to the text callout box) retain a fixed length whenever the callout is moved.",
      "return": null
    },
    "CalloutFormat.PresetDrop": {
      "method": "Specifies whether the callout line attaches to the top, bottom, or center of the callout text box, or whether it attaches at a point that's a specified distance from the top or bottom of the text box.",
      "return": null
    },
    "ConnectorFormat.BeginConnect": {
      "method": "Attaches the beginning of the specified connector to a specified shape. If there's already a connection between the beginning of the connector and another shape, that connection is broken.",
      "return": null
    },
    "ConnectorFormat.BeginDisconnect": {
      "method": "Detaches the beginning of the specified connector from the shape it's attached to. This method doesn't alter the size or position of the connector; the beginning of the connector remains positioned at a connection site but is no longer connected.",
      "return": null
    },
    "ConnectorFormat.EndConnect": {
      "method": "Attaches the end of the specified connector to a specified shape. If there's already a connection between the end of the connector and another shape, that connection is broken.",
      "return": null
    },
    "ConnectorFormat.EndDisconnect": {
      "method": "Detaches the end of the specified connector from the shape it's attached to. This method doesn't alter the size or position of the connector; the end of the connector remains positioned at a connection site but is no longer connected.",
      "return": null
    },
    "ControlFormat.AddItem": {
      "method": "Adds an item to a list box or a combo box.",
      "return": null
    },
    "ControlFormat.List": {
      "method": "Returns or sets the text entries in the specified list box or combo box, as an array of strings, or returns or sets a single text entry. An error occurs if there are no entries in the list.",
      "return": "VBA_Variant"
    },
    "ControlFormat.RemoveAllItems": {
      "method": "Removes all entries from a Microsoft Excel list box or combo box.",
      "return": null
    },
    "ControlFormat.RemoveItem": {
      "method": "Removes one or more items from a list box or combo box.",
      "return": null
    },
    "FillFormat.OneColorGradient": {
      "method": "Sets the specified fill to a one-color gradient.",
      "return": null
    },
    "FillFormat.Patterned": {
      "method": "Sets the specified fill to a pattern.",
      "return": null
    },
    "FillFormat.PresetGradient": {
      "method": "Sets the specified fill to a preset gradient.",
      "return": null
    },
    "FillFormat.PresetTextured": {
      "method": "Sets the specified fill format to a preset texture.",
      "return": null
    },
    "FillFormat.Solid": {
      "method": "Sets the specified fill to a uniform color. Use this method to convert a gradient, textured, patterned, or background fill back to a solid fill.",
      "return": null
    },
    "FillFormat.TwoColorGradient": {
      "method": "Sets the specified fill to a two-color gradient.",
      "return": null
    },
    "FillFormat.UserPicture": {
      "method": "Fills the specified shape with an image.",
      "return": null
    },
    "FillFormat.UserTextured": {
      "method": "Fills the specified shape with small tiles of an image. If you want to fill the shape with one large image, use the UserPicture method.",
      "return": null
    },
    "GroupShapes.Item": {
      "method": "Returns a single object from a collection.",
      "return": "Shape"
    },
    "LinkFormat.Update": {
      "method": "Updates the link.",
      "return": null
    },
    "Model3DFormat.IncrementRotationX": {
      "method": "Changes the rotation of the specified shape around the x-axis by the specified number of degrees.",
      "return": null
    },
    "Model3DFormat.IncrementRotationY": {
      "method": "Changes the rotation of the specified shape around the y-axis by the specified number of degrees.",
      "return": null
    },
    "Model3DFormat.IncrementRotationZ": {
      "method": "Changes the rotation of the specified shape around the z-axis by the specified number of degrees.",
      "return": null
    },
    "Model3DFormat.ResetModel": {
      "method": "Changes the rotation of the specified shape around the x-axis by the specified number of degrees.",
      "return": null
    },
    "ShapeNodes.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "ShapeNodes.Insert": {
      "method": "Inserts a node into a freeform shape.",
      "return": null
    },
    "ShapeNodes.Item": {
      "method": "Returns a single object from a collection.",
      "return": "ShapeNode"
    },
    "ShapeNodes.SetEditingType": {
      "method": "Sets the editing type of the node specified by Index. If the node is a control point for a curved segment, this method sets the editing type of the node adjacent to it that joins two segments. Note that, depending on the editing type, this method may affect the position of adjacent nodes.",
      "return": null
    },
    "ShapeNodes.SetPosition": {
      "method": "Sets the location of the node specified by Index. Note that, depending on the editing type of the node, this method may affect the position of adjacent nodes.",
      "return": null
    },
    "ShapeNodes.SetSegmentType": {
      "method": "Sets the segment type of the segment that follows the node specified by Index. If the node is a control point for a curved segment, this method sets the segment type for that curve. Note that this may affect the total number of nodes by inserting or deleting adjacent nodes.",
      "return": null
    },
    "OLEFormat.Activate": {
      "method": "Activates the current OLE object.",
      "return": null
    },
    "OLEFormat.Verb": {
      "method": "Sends a verb to the server of the specified OLE object.",
      "return": null
    },
    "PictureFormat.IncrementBrightness": {
      "method": "Changes the brightness of the picture by the specified amount. Use the Brightness property to set the absolute brightness of the picture.",
      "return": null
    },
    "PictureFormat.IncrementContrast": {
      "method": "Changes the contrast of the picture by the specified amount. Use the Contrast property to set the absolute contrast for the picture.",
      "return": null
    },
    "ShadowFormat.IncrementOffsetX": {
      "method": "Changes the horizontal offset of the shadow by the specified number of points. Use the OffsetX property to set the absolute horizontal shadow offset.",
      "return": null
    },
    "ShadowFormat.IncrementOffsetY": {
      "method": "Changes the vertical offset of the shadow by the specified number of points. Use the OffsetY property to set the absolute vertical shadow offset.",
      "return": null
    },
    "TextEffectFormat.ToggleVerticalText": {
      "method": "Switches the text flow in the specified WordArt from horizontal to vertical, or vice versa.",
      "return": null
    },
    "TextFrame.Characters": {
      "method": "Returns a Characters object that represents a range of characters within a shape's text frame. Use the Characters object to add and format characters within the text frame.",
      "return": "Characters"
    },
    "TextFrame2.DeleteText": {
      "method": "Deletes the text from a text frame and all the associated text properties.",
      "return": null
    },
    "ThreeDFormat.IncrementRotationHorizontal": {
      "method": "Changes the rotation of the specified shape horizontally by the specified number of degrees.",
      "return": null
    },
    "ThreeDFormat.IncrementRotationVertical": {
      "method": "Changes the rotation of the specified shape vertically by the specified number of degrees.",
      "return": null
    },
    "ThreeDFormat.IncrementRotationX": {
      "method": "Changes the rotation of the specified shape around the x-axis by the specified number of degrees. Use the RotationX property to set the absolute rotation of the shape around the x-axis.",
      "return": null
    },
    "ThreeDFormat.IncrementRotationY": {
      "method": "Changes the rotation of the specified shape around the y-axis by the specified number of degrees. Use the RotationY property to set the absolute rotation of the shape around the y-axis.",
      "return": null
    },
    "ThreeDFormat.IncrementRotationZ": {
      "method": "Changes the rotation of the specified shape around the z-axis by the specified number of degrees. Use the RotationZ property to set the absolute rotation of the shape around the z-axis.",
      "return": null
    },
    "ThreeDFormat.ResetRotation": {
      "method": "Resets the extrusion rotation around the x-axis and the y-axis to 0 (zero) so that the front of the extrusion faces forward. This method doesn't reset the rotation around the z-axis.",
      "return": null
    },
    "ThreeDFormat.SetExtrusionDirection": {
      "method": "Sets the direction that the extrusion's sweep path takes away from the extruded shape.",
      "return": null
    },
    "ThreeDFormat.SetPresetCamera": {
      "method": "Sets the camera for the specified ThreeDFormat object.",
      "return": null
    },
    "ThreeDFormat.SetThreeDFormat": {
      "method": "Sets the preset extrusion format. Each preset extrusion format contains a set of preset values for the various properties of the extrusion.",
      "return": null
    },
    "ListColumn.Delete": {
      "method": "Deletes the column of data in the list.",
      "return": null
    },
    "ListRow.Delete": {
      "method": "Deletes the cells of the list row and shifts upward any remaining cells below the deleted row. You can delete rows in the list even when the list is linked to a SharePoint site. The list on the SharePoint site will not be updated, however, until you synchronize your changes.",
      "return": null
    },
    "XmlDataBinding.ClearSettings": {
      "method": "Removes the specified data binding.",
      "return": null
    },
    "XmlDataBinding.LoadSettings": {
      "method": "Initializes the specified data binding with settings from an XML data file or a Data Retrieval Service Connection (.uxdc) file.",
      "return": null
    },
    "XmlDataBinding.Refresh": {
      "method": "Retrieves XML data by using the current connection settings of the specified XmlDataBinding object.",
      "return": "XlXmlImportResult"
    },
    "ValueChange.Delete": {
      "method": "Deletes the specified ValueChange object from the PivotTableChangeList collection.",
      "return": null
    },
    "PivotFormula.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "Slicer.Copy": {
      "method": "Copies the specified slicer to the clipboard.",
      "return": null
    },
    "Slicer.Cut": {
      "method": "Cuts the specified slicer and copies it to the clipboard.",
      "return": null
    },
    "Slicer.Delete": {
      "method": "Deletes the slicer and removes it from the associated Slicers collection.",
      "return": "None"
    },
    "PivotFields.Item": {
      "method": "Returns a single object from a collection.",
      "return": "An Object value that represents an object contained by the collection."
    },
    "Parameter.SetParam": {
      "method": "Defines a parameter for the specified query table.",
      "return": null
    },
    "DataFeedConnection.CancelRefresh": {
      "method": "Cancels a refresh operation on a data feed connection.",
      "return": "None"
    },
    "DataFeedConnection.Refresh": {
      "method": "Refreshes the data feed connection.",
      "return": "None"
    },
    "DataFeedConnection.SaveAsODC": {
      "method": "Saves the data feed connection as a Microsoft Office Data Connection file.",
      "return": "None"
    },
    "Sparkline.ModifyLocation": {
      "method": "Modifies the location of a single sparkline.",
      "return": "None"
    },
    "Sparkline.ModifySourceData": {
      "method": "Modifies the source data for a single sparkline.",
      "return": "None"
    },
    "CustomProperty.Delete": {
      "method": "Deletes the object.",
      "return": null
    },
    "AllowEditRanges.Add": {
      "method": "Adds a range that can be edited on a protected worksheet. Returns an AllowEditRange object.",
      "return": "AllowEditRange"
    },
    "SortFields.Add": {
      "method": "Creates a new sort field and returns a SortFields object.",
      "return": "SortField"
    },
    "SortFields.Add2": {
      "method": "Creates a new sort field and returns a SortFields object that can optionally sort data types with the SubField defined.",
      "return": "SortField"
    },
    "SortFields.Clear": {
      "method": "Clears all the SortFields objects.",
      "return": null
    },
    "ModelMeasure.Delete": {
      "method": "Deletes the model measure from the data model.",
      "return": "None"
    },
    "ModelRelationship.Delete": {
      "method": "Deletes the relationship.",
      "return": "None"
    },
    "ModelTable.Refresh": {
      "method": "Refreshes the model table source connections.",
      "return": "None"
    },
    "SlicerPivotTables.AddPivotTable": {
      "method": "Adds a reference to a PivotTable to the SlicerPivotTables collection.",
      "return": "None"
    },
    "SlicerPivotTables.RemovePivotTable": {
      "method": "Removes a reference to a PivotTable from the SlicerPivotTables collection.",
      "return": "None"
    },
    "SortField.Delete": {
      "method": "Removes the specified SortField object from the SortFields collection.",
      "return": null
    },
    "SortField.ModifyKey": {
      "method": "Modify the key value by which values are sorted in the field.",
      "return": null
    },
    "SortField.SetIcon": {
      "method": "Sets an icon for a SortField object.",
      "return": null
    },
    "ModelTableColumns.Item": {
      "method": "Returns a ModelTableColumn object from the ModelTableColumns collection.",
      "return": "MODELTABLECOLUMN"
    }
  },
  "properties": {
    "Application.ActiveCell": {
      "type": "Range",
      "info": "Returns a Range object that represents the active cell in the active window (the window on top) or in the specified window. If the window isn't displaying a worksheet, this property fails. Read-only."
    },
    "Application.ActiveChart": {
      "type": "Chart",
      "info": "Returns a Chart object that represents the active chart (either an embedded chart or a chart sheet). An embedded chart is considered active when it's either selected or activated. When no chart is active, this property returns Nothing."
    },
    "Application.ActiveEncryptionSession": {
      "type": "int",
      "info": "Returns a Long that represents the encryption session associated with the active document. Read-only."
    },
    "Application.ActivePrinter": {
      "type": "str",
      "info": "Returns or sets the name of the active printer. Read/write String."
    },
    "Application.ActiveProtectedViewWindow": {
      "type": "ProtectedViewWindow",
      "info": "Returns a ProtectedViewWindow object that represents the active Protected View window (the window on top). Returns Nothing if there are no Protected View windows open. Read-only."
    },
    "Application.ActiveSheet": {
      "type": "None",
      "info": "Returns an object that represents the active sheet (the sheet on top) in the active workbook or in the specified window or workbook. Returns Nothing if no sheet is active."
    },
    "Application.ActiveWindow": {
      "type": "Window",
      "info": "Returns a Window object that represents the active Excel window (the window on top). Returns Nothing if there are no windows open. Read-only."
    },
    "Application.ActiveWorkbook": {
      "type": "Workbook",
      "info": "Returns a Workbook object that represents the workbook in the active window (the window on top). Returns Nothing if there are no windows open or if either the Info window or the Clipboard window is the active window. Read-only."
    },
    "Application.AddIns": {
      "type": "AddIns",
      "info": "Returns an AddIns collection that represents all the add-ins listed in the Add-Ins dialog box (Add-Ins command on the Developer tab). Read-only."
    },
    "Application.AddIns2": {
      "type": "AddIns2",
      "info": "Returns an AddIns2 collection that represents all the add-ins that are currently available or open in Microsoft Excel, regardless of whether they are installed. Read-only."
    },
    "Application.AlertBeforeOverwriting": {
      "type": "bool",
      "info": "True if Microsoft Excel displays a message before overwriting nonblank cells during a drag-and-drop editing operation. Read/write Boolean."
    },
    "Application.AltStartupPath": {
      "type": "str",
      "info": "Returns or sets the name of the alternate startup folder. Read/write String."
    },
    "Application.AlwaysUseClearType": {
      "type": "bool",
      "info": "Returns or sets a Boolean that represents whether to use ClearType to display fonts in the menu, ribbon, and dialog box text. Read/write Boolean."
    },
    "Application.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Application.ArbitraryXMLSupportAvailable": {
      "type": "bool",
      "info": "Returns a Boolean value that indicates whether the XML features in Microsoft Excel are available. Read-only."
    },
    "Application.AskToUpdateLinks": {
      "type": "bool",
      "info": "True if Microsoft Excel asks the user to update links when opening files with links. False if links are automatically updated with no dialog box. Read/write Boolean."
    },
    "Application.Assistance": {
      "type": "IAssistance",
      "info": "Returns an IAssistance object for Microsoft Excel that represents the Microsoft Office Help Viewer. Read-only."
    },
    "Application.AutoCorrect": {
      "type": "AutoCorrect",
      "info": "Returns an AutoCorrect object that represents the Microsoft Excel AutoCorrect attributes. Read-only."
    },
    "Application.AutoFormatAsYouTypeReplaceHyperlinks": {
      "type": "bool",
      "info": "True (default) if Microsoft Excel automatically formats hyperlinks as you type. False if Excel does not automatically format hyperlinks as you type. Read/write Boolean."
    },
    "Application.AutomationSecurity": {
      "type": "MsoAutomationSecurity",
      "info": "Returns or sets an MsoAutomationSecurity constant that represents the security mode that Microsoft Excel uses when programmatically opening files. Read/write."
    },
    "Application.AutoPercentEntry": {
      "type": "bool",
      "info": "True if entries in cells formatted as percentages aren't automatically multiplied by 100 as soon as they are entered. Read/write Boolean."
    },
    "Application.AutoRecover": {
      "type": "AutoRecover",
      "info": "Returns an AutoRecover object, which backs up all file formats on a timed interval."
    },
    "Application.Build": {
      "type": "int",
      "info": "Returns the Microsoft Excel build number. Read-only Long."
    },
    "Application.CalculateBeforeSave": {
      "type": "Calculation",
      "info": "True if workbooks are calculated before they're saved to disk (if the Calculation property is set to xlManual). This property is preserved even if you change the Calculation property. Read/write Boolean."
    },
    "Application.Calculation": {
      "type": "XlCalculation",
      "info": "Returns or sets an XlCalculation value that represents the calculation mode."
    },
    "Application.CalculationInterruptKey": {
      "type": "XlCalculationInterruptKey",
      "info": "Sets or returns an XlCalculationInterruptKey constant that specifies the key that can interrupt Microsoft Excel when performing calculations. Read/write."
    },
    "Application.CalculationState": {
      "type": "XlCalculationState",
      "info": "Returns an XlCalculationState constant that indicates the calculation state of the application, for any calculations that are being performed in Microsoft Excel. Read-only."
    },
    "Application.CalculationVersion": {
      "type": "int",
      "info": "Returns a number whose rightmost four digits are the minor calculation engine version number, and whose other digits (on the left) are the major version of Microsoft Excel. Read-only Long."
    },
    "Application.Caller": {
      "type": "Returns information about how Visual Basic was called (for more information, see the Remarks section).",
      "info": "Returns information about how Visual Basic was called (for more information, see the Remarks section)."
    },
    "Application.CanPlaySounds": {
      "type": "Note\nThis property should not be used. Sound notes have been removed from Microsoft Excel.",
      "info": "Note\nThis property should not be used. Sound notes have been removed from Microsoft Excel."
    },
    "Application.CanRecordSounds": {
      "type": "Note\nThis property should not be used. Sound notes have been removed from Microsoft Excel.",
      "info": "Note\nThis property should not be used. Sound notes have been removed from Microsoft Excel."
    },
    "Application.Caption": {
      "type": "str",
      "info": "Returns or sets a String value that represents the name that appears in the title bar of the main Microsoft Excel window."
    },
    "Application.CellDragAndDrop": {
      "type": "bool",
      "info": "True if dragging and dropping cells is enabled. Read/write Boolean."
    },
    "Application.Cells": {
      "type": "Range",
      "info": "Returns a Range object that represents all the cells on the active worksheet. If the active document is not a worksheet, this property fails."
    },
    "Application.ChartDataPointTrack": {
      "type": "bool",
      "info": "True causes all charts in newly created documents to use the cell reference tracking behavior. Boolean."
    },
    "Application.Charts": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the chart sheets in the active workbook."
    },
    "Application.ClipboardFormats": {
      "type": "VBA_Variant",
      "info": "Returns the formats that are currently on the Clipboard, as an array of numeric values. To determine whether a particular format is on the Clipboard, compare each element in the array with the appropriate constant listed in the Remarks section. Read-only Variant."
    },
    "Application.ClusterConnector": {
      "type": "Returns or sets the name of the High Performance Computing (HPC) Cluster Connector that is used to run user-defined functions in XLL add-ins. Read/write.",
      "info": "Returns or sets the name of the High Performance Computing (HPC) Cluster Connector that is used to run user-defined functions in XLL add-ins. Read/write."
    },
    "Application.Columns": {
      "type": "Range",
      "info": "Returns a Range object that represents all the columns on the active worksheet. If the active document isn't a worksheet, the Columns property fails."
    },
    "Application.COMAddIns": {
      "type": "COMAddIns",
      "info": "Returns the COMAddIns collection for Microsoft Excel, which represents the currently installed COM add-ins. Read-only."
    },
    "Application.CommandBars": {
      "type": "CommandBars",
      "info": "Returns a CommandBars object that represents the Microsoft Excel command bars. Read-only."
    },
    "Application.CommandUnderlines": {
      "type": "XlCommandUnderlines",
      "info": "Returns or sets the state of the command underlines in Microsoft Excel for the Macintosh. Can be one of the constants of XlCommandUnderlines. Read/write Long."
    },
    "Application.ConstrainNumeric": {
      "type": "bool",
      "info": "True if handwriting recognition is limited to numbers and punctuation only. Read/write Boolean."
    },
    "Application.ControlCharacters": {
      "type": "bool",
      "info": "True if Microsoft Excel displays control characters for right-to-left languages. Read/write Boolean."
    },
    "Application.CopyObjectsWithCells": {
      "type": "bool",
      "info": "True if objects are cut, copied, extracted, and sorted with cells. Read/write Boolean."
    },
    "Application.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Application.Cursor": {
      "type": "XlMousePointer",
      "info": "Returns or sets the appearance of the mouse pointer in Microsoft Excel. Read/write XlMousePointer."
    },
    "Application.CursorMovement": {
      "type": "xlVisualCursor",
      "info": "Returns or sets a value that indicates whether a visual cursor or a logical cursor is used. Can be one of the following constants: xlVisualCursor or xlLogicalCursor. Read/write Long."
    },
    "Application.CustomListCount": {
      "type": "int",
      "info": "Returns the number of defined custom lists (including built-in lists). Read-only Long."
    },
    "Application.CutCopyMode": {
      "type": "XLCutCopyMode",
      "info": "Returns or sets the status of Cut or Copy mode. Can be True, False, or an XLCutCopyMode constant, as shown in the following tables. Read/write Long."
    },
    "Application.DataEntryMode": {
      "type": "int",
      "info": "Returns or sets Data Entry mode, as shown in the following table. When in Data Entry mode, you can enter data only in the unlocked cells in the currently selected range. Read/write Long."
    },
    "Application.DDEAppReturnCode": {
      "type": "int",
      "info": "Returns the application-specific DDE return code that was contained in the last DDE acknowledge message received by Microsoft Excel. Read-only Long."
    },
    "Application.DecimalSeparator": {
      "type": "str",
      "info": "Sets or returns the character used for the decimal separator as a String. Read/write."
    },
    "Application.DefaultFilePath": {
      "type": "str",
      "info": "Returns or sets the default path that Microsoft Excel uses when it opens files. Read/write String."
    },
    "Application.DefaultSaveFormat": {
      "type": "FileFormat",
      "info": "Returns or sets the default format for saving files. For a list of valid constants, see the FileFormat property. Read/write Long."
    },
    "Application.DefaultSheetDirection": {
      "type": "XlReadingOrder",
      "info": "Returns or sets the default direction in which Microsoft Excel displays new windows and worksheets. Can be one of the following XlReadingOrder constants: xlRTL (right to left) or xlLTR (left to right). Read/write Long."
    },
    "Application.DefaultWebOptions": {
      "type": "DefaultWebOptions",
      "info": "Returns the DefaultWebOptions object that contains global application-level attributes used by Microsoft Excel whenever you save a document as a webpage or open a webpage. Read-only."
    },
    "Application.DeferAsyncQueries": {
      "type": "bool",
      "info": "Gets or sets whether asynchronous queries to OLAP data sources are executed when a worksheet is calculated by VBA code. Read/write Boolean."
    },
    "Application.Dialogs": {
      "type": "Dialogs",
      "info": "Returns a Dialogs collection that represents all built-in dialog boxes. Read-only."
    },
    "Application.DisplayAlerts": {
      "type": "bool",
      "info": "True if Microsoft Excel displays certain alerts and messages while a macro is running. Read/write Boolean."
    },
    "Application.DisplayClipboardWindow": {
      "type": "bool",
      "info": "Returns True if the Microsoft Office Clipboard can be displayed. Read/write Boolean."
    },
    "Application.DisplayCommentIndicator": {
      "type": "XlCommentDisplayMode",
      "info": "Returns or sets the way cells display comments and indicators. Can be one of the XlCommentDisplayMode constants."
    },
    "Application.DisplayDocumentActionTaskPane": {
      "type": "bool",
      "info": "Set to True to display the Document Actions task pane; set to False to hide the Document Actions task pane. Read/write Boolean."
    },
    "Application.DisplayDocumentInformationPanel": {
      "type": "bool",
      "info": "Returns or sets a Boolean that represents whether the document properties panel is displayed. Read/write Boolean."
    },
    "Application.DisplayExcel4Menus": {
      "type": "bool",
      "info": "True if Microsoft Excel displays version 4.0 menu bars. Read/write Boolean."
    },
    "Application.DisplayFormulaAutoComplete": {
      "type": "bool",
      "info": "Gets or sets whether to show a list of relevant functions and defined names when building cell formulas. Read/write Boolean."
    },
    "Application.DisplayFormulaBar": {
      "type": "bool",
      "info": "True if the formula bar is displayed. Read/write Boolean."
    },
    "Application.DisplayFullScreen": {
      "type": "bool",
      "info": "True if Microsoft Excel is in full-screen mode. Read/write Boolean."
    },
    "Application.DisplayFunctionToolTips": {
      "type": "bool",
      "info": "True if function ToolTips can be displayed. Read/write Boolean."
    },
    "Application.DisplayInsertOptions": {
      "type": "bool",
      "info": "True if the Insert Options button should be displayed. Read/write Boolean."
    },
    "Application.DisplayNoteIndicator": {
      "type": "bool",
      "info": "True if cells containing notes display cell tips and contain note indicators (small dots in their upper-right corners). Read/write Boolean."
    },
    "Application.DisplayPasteOptions": {
      "type": "bool",
      "info": "True if the Paste Options button can be displayed. Read/write Boolean."
    },
    "Application.DisplayRecentFiles": {
      "type": "bool",
      "info": "True if the list of recently used files is displayed in the UI. Read/write Boolean."
    },
    "Application.DisplayScrollBars": {
      "type": "bool",
      "info": "True if scroll bars are visible for all workbooks. Read/write Boolean."
    },
    "Application.DisplayStatusBar": {
      "type": "bool",
      "info": "True if the status bar is displayed. Read/write Boolean."
    },
    "Application.EditDirectlyInCell": {
      "type": "bool",
      "info": "True if Microsoft Excel allows editing in cells. Read/write Boolean."
    },
    "Application.EnableAnimations": {
      "type": "Note\nThis object, member, or enumeration is deprecated and is not intended to be used in your code.",
      "info": "Note\nThis object, member, or enumeration is deprecated and is not intended to be used in your code."
    },
    "Application.EnableAutoComplete": {
      "type": "bool",
      "info": "True if the AutoComplete feature is enabled. Read/write Boolean."
    },
    "Application.EnableCancelKey": {
      "type": "XlEnableCancelKey",
      "info": "Controls how Microsoft Excel handles Ctrl+Break (or Esc or Command+Period) user interruptions to the running procedure. Read/write XlEnableCancelKey."
    },
    "Application.EnableCheckFileExtensions": {
      "type": "bool",
      "info": "True to enable the Tell me if Microsoft Excel isn't the default program for viewing and editing spreadsheets dialog box. Read/write Boolean."
    },
    "Application.EnableEvents": {
      "type": "bool",
      "info": "True if events are enabled for the specified object. Read/write Boolean."
    },
    "Application.EnableLargeOperationAlert": {
      "type": "bool",
      "info": "Sets or returns a Boolean that represents whether to display an alert message when a user attempts to perform an operation that affects a larger number of cells than is specified in the Office Center UI. Read/write Boolean."
    },
    "Application.EnableLivePreview": {
      "type": "bool",
      "info": "Sets or returns a Boolean that represents whether to show or hide gallery previews that appear when using galleries that support previewing. Setting this property to True shows a preview of your workbook before applying the command. Read/write Boolean."
    },
    "Application.EnableMacroAnimations": {
      "type": "bool",
      "info": "Controls whether macro animations are enabled. True if user interface animations or chart animations are enabled. Is set to False (no animation) by default. If it is set to True during the running of a macro, it will enable animation, and then will reset to False after the macro runs. Read/write Boolean."
    },
    "Application.EnableSound": {
      "type": "bool",
      "info": "True if sound is enabled for Microsoft Office. Read/write Boolean."
    },
    "Application.ErrorCheckingOptions": {
      "type": "ErrorCheckingOptions",
      "info": "Returns an ErrorCheckingOptions object, which represents the error checking options for an application."
    },
    "Application.Excel4IntlMacroSheets": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the Microsoft Excel 4.0 international macro sheets in the specified workbook. Read-only."
    },
    "Application.Excel4MacroSheets": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the Microsoft Excel 4.0 macro sheets in the specified workbook. Read-only."
    },
    "Application.ExtendList": {
      "type": "bool",
      "info": "True if Microsoft Excel automatically extends formatting and formulas to new data that is added to a list. Read/write Boolean."
    },
    "Application.FeatureInstall": {
      "type": "MsoFeatureInstall",
      "info": "Returns or sets a value (constant) that specifies how Microsoft Excel handles calls to methods and properties that require features that aren't yet installed. Can be one of the MsoFeatureInstall constants listed in the following table. Read/write MsoFeatureInstall."
    },
    "Application.FileConverters": {
      "type": "null",
      "info": "Returns information about installed file converters. Returns null if there are no converters installed. Read-only Variant."
    },
    "Application.FileDialog": {
      "type": "FileDialog",
      "info": "Returns a FileDialog object representing an instance of the file dialog."
    },
    "Application.FileExportConverters": {
      "type": "FileExportConverters",
      "info": "Returns a FileExportConverters collection that represents all the file converters for saving files available to Microsoft Excel. Read-only."
    },
    "Application.FileValidation": {
      "type": "Returns or sets how Excel will validate files before opening them. Read/write.",
      "info": "Returns or sets how Excel will validate files before opening them. Read/write."
    },
    "Application.FileValidationPivot": {
      "type": "Returns or sets how Excel will validate the contents of the data caches for PivotTable reports. Read/write.",
      "info": "Returns or sets how Excel will validate the contents of the data caches for PivotTable reports. Read/write."
    },
    "Application.FindFormat": {
      "type": "Sets or returns the search criteria for the type of cell formats to find.",
      "info": "Sets or returns the search criteria for the type of cell formats to find."
    },
    "Application.FixedDecimal": {
      "type": "FixedDecimalPlaces",
      "info": "All data entered after this property is set to True will be formatted with the number of fixed decimal places set by the FixedDecimalPlaces property. Read/write Boolean."
    },
    "Application.FixedDecimalPlaces": {
      "type": "FixedDecimal",
      "info": "Returns or sets the number of fixed decimal places used when the FixedDecimal property is set to True. Read/write Long."
    },
    "Application.FlashFill": {
      "type": "bool",
      "info": "True indicates that the Excel Flash Fill feature has been enabled and active. Read/write Boolean."
    },
    "Application.FlashFillMode": {
      "type": "bool",
      "info": "True if the Flash Fill feature is enabled. Read/write Boolean."
    },
    "Application.FormulaBarHeight": {
      "type": "int",
      "info": "Allows the user to specify the height of the formula bar in lines. Read/write Long."
    },
    "Application.GenerateGetPivotData": {
      "type": "bool",
      "info": "Returns True when Microsoft Excel can get PivotTable report data. Read/write Boolean."
    },
    "Application.GenerateTableRefs": {
      "type": "GenerateTableRefs",
      "info": "The GenerateTableRefs property determines whether the traditional notation method or the new structured referencing notation method is used for referencing tables in formulas. Read/write."
    },
    "Application.Height": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the height, in points, of the main application window."
    },
    "Application.HighQualityModeForGraphics": {
      "type": "Returns or sets whether Excel uses high quality mode to print graphics. Read/write.",
      "info": "Returns or sets whether Excel uses high quality mode to print graphics. Read/write."
    },
    "Application.Hinstance": {
      "type": "Application",
      "info": "Returns a handle to the instance of Excel represented by the Application object. Read-only Long."
    },
    "Application.HinstancePtr": {
      "type": "Application",
      "info": "Returns a handle to the instance of Excel represented by the specified Application object. Read-only Variant."
    },
    "Application.hWnd": {
      "type": "int",
      "info": "Returns a Long indicating the top-level window handle of the Microsoft Excel window. Read-only."
    },
    "Application.IgnoreRemoteRequests": {
      "type": "bool",
      "info": "True if remote DDE requests are ignored. Read/write Boolean."
    },
    "Application.Interactive": {
      "type": "bool",
      "info": "True if Microsoft Excel is in interactive mode; this property is usually True. If you set this property to False, Excel blocks all input from the keyboard and mouse (except input to dialog boxes that are displayed by your code). Read/write Boolean."
    },
    "Application.International": {
      "type": "VBA_Variant",
      "info": "Returns information about the current country/region and international settings. Read-only Variant."
    },
    "Application.IsSandboxed": {
      "type": "bool",
      "info": "Returns True if the specified workbook is open in a Protected View window. Read-only."
    },
    "Application.Iteration": {
      "type": "bool",
      "info": "True if Microsoft Excel uses iteration to resolve circular references. Read/write Boolean."
    },
    "Application.LanguageSettings": {
      "type": "LanguageSettings",
      "info": "Returns the LanguageSettings object, which contains information about the language settings in Microsoft Excel. Read-only."
    },
    "Application.LargeOperationCellThousandCount": {
      "type": "int",
      "info": "Returns or sets the maximum number of cells needed in an operation beyond which an alert is triggered. Read/write Long."
    },
    "Application.Left": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the left edge of the screen to the left edge of the main Microsoft Excel window."
    },
    "Application.LibraryPath": {
      "type": "str",
      "info": "Returns the path to the Library folder, but without the final separator. Read-only String."
    },
    "Application.MailSession": {
      "type": "null",
      "info": "Returns the MAPI mail session number as a hexadecimal string (if there's an active session), or returns null if there's no session. Read-only Variant."
    },
    "Application.MailSystem": {
      "type": "XlMailSystem",
      "info": "Returns the mail system that's installed on the host machine. Read-only XlMailSystem."
    },
    "Application.MapPaperSize": {
      "type": "bool",
      "info": "True if documents formatted for the standard paper size of another country/region (for example, A4) are automatically adjusted so that they're printed correctly on the standard paper size (for example, Letter) of your country/region. Read/write Boolean."
    },
    "Application.MathCoprocessorAvailable": {
      "type": "bool",
      "info": "True if a math coprocessor is available. Read-only Boolean."
    },
    "Application.MaxChange": {
      "type": "float",
      "info": "Returns or sets the maximum amount of change between each iteration as Microsoft Excel resolves circular references. Read/write Double."
    },
    "Application.MaxIterations": {
      "type": "int",
      "info": "Returns or sets the maximum number of iterations that Microsoft Excel can use to resolve a circular reference. Read/write Long."
    },
    "Application.MeasurementUnit": {
      "type": "XlMeasurementUnits",
      "info": "Specifies the measurement unit used in the application. Read/write XlMeasurementUnits."
    },
    "Application.MergeInstances": {
      "type": "bool",
      "info": "True to merge multiple instances of the application into a single instance. Read/write Boolean."
    },
    "Application.MouseAvailable": {
      "type": "bool",
      "info": "True if a mouse is available. Read-only Boolean."
    },
    "Application.MoveAfterReturn": {
      "type": "bool",
      "info": "True if the active cell is moved as soon as the Enter (Return) key is pressed. Read/write Boolean."
    },
    "Application.MoveAfterReturnDirection": {
      "type": "XlDirection",
      "info": "Returns or sets the direction in which the active cell is moved when the user presses Enter. Read/write XlDirection."
    },
    "Application.MultiThreadedCalculation": {
      "type": "MultiThreadedCalculation",
      "info": "Returns a MultiThreadedCalculation object that controls the multi-threaded recalculation settings. Read-only."
    },
    "Application.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "Application.Names": {
      "type": "Names",
      "info": "Returns a Names collection that represents all the names in the active workbook. Read-only Names object."
    },
    "Application.NetworkTemplatesPath": {
      "type": "str",
      "info": "Returns the network path where templates are stored. If the network path doesn't exist, this property returns an empty string. Read-only String."
    },
    "Application.NewWorkbook": {
      "type": "NewFile",
      "info": "Returns a NewFile object."
    },
    "Application.ODBCErrors": {
      "type": "ODBCErrors",
      "info": "Returns an ODBCErrors collection that contains all the ODBC errors generated by the most recent query table or PivotTable report operation. Read-only."
    },
    "Application.ODBCTimeout": {
      "type": "int",
      "info": "Returns or sets the ODBC query time limit, in seconds. The default value is 45 seconds. Read/write Long."
    },
    "Application.OLEDBErrors": {
      "type": "OLEDBErrors",
      "info": "Returns the OLEDBErrors collection, which represents the error information returned by the most recent OLE DB query. Read-only."
    },
    "Application.OnWindow": {
      "type": "str",
      "info": "Returns or sets the name of the procedure that's run whenever you activate a window. Read/write String."
    },
    "Application.OperatingSystem": {
      "type": "str",
      "info": "Returns the name and version number of the current operating system. Read-only String."
    },
    "Application.OrganizationName": {
      "type": "str",
      "info": "Returns the registered organization name. Read-only String."
    },
    "Application.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Application.Path": {
      "type": "str",
      "info": "Returns a String value that represents the complete path to the application, excluding the final separator and name of the application."
    },
    "Application.PathSeparator": {
      "type": "str",
      "info": "Returns the path separator character (\\). Read-only String."
    },
    "Application.PivotTableSelection": {
      "type": "bool",
      "info": "True if PivotTable reports use structured selection. Read/write Boolean."
    },
    "Application.PreviousSelections": {
      "type": "Range",
      "info": "Returns an array of the last four ranges or names selected. Each element in the array is a Range object. Read-only Variant."
    },
    "Application.PrintCommunication": {
      "type": "bool",
      "info": "Specifies whether communication with the printer is turned on. Read/write Boolean."
    },
    "Application.ProductCode": {
      "type": "str",
      "info": "Returns the globally unique identifier (GUID) for Microsoft Excel. Read-only String."
    },
    "Application.PromptForSummaryInfo": {
      "type": "bool",
      "info": "True if Microsoft Excel asks for summary information when files are first saved. Read/write Boolean."
    },
    "Application.ProtectedViewWindows": {
      "type": "ProtectedViewWindows",
      "info": "Returns a ProtectedViewWindows collection that represents all the Protected View windows that are open in the application. Read-only."
    },
    "Application.QuickAnalysis": {
      "type": "QuickAnalysis",
      "info": "Returns a QuickAnalysis object that represents the Quick Analysis options of the application."
    },
    "Application.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents a cell or a range of cells."
    },
    "Application.Ready": {
      "type": "bool",
      "info": "Returns True when the Microsoft Excel application is ready; False when the Excel application is not ready. Read-only Boolean."
    },
    "Application.RecentFiles": {
      "type": "RecentFiles",
      "info": "Returns a RecentFiles collection that represents the list of recently used files."
    },
    "Application.RecordRelative": {
      "type": "bool",
      "info": "True if macros are recorded by using relative references; False if recording is absolute. Read-only Boolean."
    },
    "Application.ReferenceStyle": {
      "type": "XlReferenceStyle",
      "info": "Returns or sets how Microsoft Excel displays cell references and row and column headings in either A1 or R1C1 reference style. Read/write XlReferenceStyle."
    },
    "Application.RegisteredFunctions": {
      "type": "VBA_Variant",
      "info": "Returns information about functions in either dynamic-link libraries (DLLs) or code resources that were registered with the REGISTER or REGISTER.ID macro functions. Read-only Variant."
    },
    "Application.ReplaceFormat": {
      "type": "Replace",
      "info": "Sets the replacement criteria to use in replacing cell formats. The replacement criteria is then used in a subsequent call to the Replace method of the Range object."
    },
    "Application.RollZoom": {
      "type": "bool",
      "info": "True if the IntelliMouse zooms instead of scrolling. Read/write Boolean."
    },
    "Application.Rows": {
      "type": "Range",
      "info": "Returns a Range object that represents all the rows on the active worksheet. If the active document isn't a worksheet, the Rows property fails. Read-only Range object."
    },
    "Application.RTD": {
      "type": "RTD",
      "info": "Returns an RTD object."
    },
    "Application.ScreenUpdating": {
      "type": "bool",
      "info": "True if screen updating is turned on. Read/write Boolean."
    },
    "Application.Selection": {
      "type": "TypeName",
      "info": "Returns the currently selected object on the active worksheet for an Application object. Returns Nothing if no objects are selected. Use the Select method to set the selection, and use the TypeName function to discover the kind of object that is selected."
    },
    "Application.SensitivityLabelPolicy": {
      "type": "Application",
      "info": "Returns the sensitivity label policy for the Application object."
    },
    "Application.Sheets": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the sheets in the active workbook. Read-only Sheets object."
    },
    "Application.SheetsInNewWorkbook": {
      "type": "int",
      "info": "Returns or sets the number of sheets that Microsoft Excel automatically inserts into new workbooks. Read/write Long."
    },
    "Application.ShowChartTipNames": {
      "type": "bool",
      "info": "True if charts show chart tip names. The default value is True. Read/write Boolean."
    },
    "Application.ShowChartTipValues": {
      "type": "bool",
      "info": "True if charts show chart tip values. The default value is True. Read/write Boolean."
    },
    "Application.ShowDevTools": {
      "type": "bool",
      "info": "Returns or sets a Boolean that represents whether the Developer tab is displayed in the ribbon. Read/write Boolean."
    },
    "Application.ShowMenuFloaties": {
      "type": "bool",
      "info": "Returns or sets a Boolean that represents whether to display Mini toolbars when the user right-clicks in the workbook window. False if Mini toolbars are displayed. Read/write Boolean."
    },
    "Application.ShowQuickAnalysis": {
      "type": "bool",
      "info": "Controls whether the Quick Analysis contextual user interface is displayed on selection. True means that the Quick Analysis button will show."
    },
    "Application.ShowSelectionFloaties": {
      "type": "bool",
      "info": "Returns or sets a Boolean that represents whether Mini toolbars displays when a user selects text. False if Mini toolbars are displayed. Read/write Boolean."
    },
    "Application.ShowStartupDialog": {
      "type": "bool",
      "info": "Returns True (default is False) when the New Workbook task pane appears for a Microsoft Excel application. Read/write Boolean."
    },
    "Application.ShowToolTips": {
      "type": "bool",
      "info": "True if ToolTips are turned on. Read/write Boolean."
    },
    "Application.SmartArtColors": {
      "type": "SmartArtColors",
      "info": "Returns the set of SmartArtColors styles that are currently loaded in the application. Read-only."
    },
    "Application.SmartArtLayouts": {
      "type": "SmartArtLayouts",
      "info": "Returns the set of SmartArtLayouts that are currently loaded in the application. Read-only."
    },
    "Application.SmartArtQuickStyles": {
      "type": "SmartArtQuickStyles",
      "info": "Returns the set of SmartArtQuickStyles that are currently loaded in the application. Read-only."
    },
    "Application.Speech": {
      "type": "Speech",
      "info": "Returns a Speech object."
    },
    "Application.SpellingOptions": {
      "type": "SpellingOptions",
      "info": "Returns a SpellingOptions object that represents the spelling options of the application."
    },
    "Application.StandardFont": {
      "type": "str",
      "info": "Returns or sets the name of the standard font. Read/write String."
    },
    "Application.StandardFontSize": {
      "type": "int",
      "info": "Returns or sets the standard font size, in points. Read/write Long."
    },
    "Application.StartupPath": {
      "type": "str",
      "info": "Returns the complete path of the startup folder, excluding the final separator. Read-only String."
    },
    "Application.StatusBar": {
      "type": "str",
      "info": "Returns or sets the text in the status bar. Read/write String."
    },
    "Application.TemplatesPath": {
      "type": "str",
      "info": "Returns the local path where templates are stored. Read-only String."
    },
    "Application.ThisCell": {
      "type": "Range",
      "info": "Returns the cell in which the user-defined function is being called from as a Range object."
    },
    "Application.ThisWorkbook": {
      "type": "Workbook",
      "info": "Returns a Workbook object that represents the workbook where the current macro code is running. Read-only."
    },
    "Application.ThousandsSeparator": {
      "type": "str",
      "info": "Sets or returns the character used for the thousands separator as a String. Read/write."
    },
    "Application.Top": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the top edge of the screen to the top edge of the main Microsoft Excel window."
    },
    "Application.TransitionMenuKey": {
      "type": "str",
      "info": "Returns or sets the Microsoft Excel menu or help key, which is usually /. Read/write String."
    },
    "Application.TransitionMenuKeyAction": {
      "type": "Excel constants enumeration",
      "info": "Returns or sets the action taken when the Microsoft Excel menu key is pressed. Can be either xlExcelMenus or xlLotusHelp (see the Excel constants enumeration). Read/write Long."
    },
    "Application.TransitionNavigKeys": {
      "type": "bool",
      "info": "True if transition navigation keys are active. Read/write Boolean."
    },
    "Application.UsableHeight": {
      "type": "float",
      "info": "Returns the maximum height of the space that a window can occupy in the application window area, in points. Read-only Double."
    },
    "Application.UsableWidth": {
      "type": "float",
      "info": "Returns the maximum width of the space that a window can occupy in the application window area, in points. Read-only Double."
    },
    "Application.UseClusterConnector": {
      "type": "Returns or sets whether Excel allows user-defined functions in XLL add-ins to be run on a compute cluster. Read/write.",
      "info": "Returns or sets whether Excel allows user-defined functions in XLL add-ins to be run on a compute cluster. Read/write."
    },
    "Application.UsedObjects": {
      "type": "UsedObjects",
      "info": "Returns a UsedObjects object representing objects allocated in a workbook. Read-only."
    },
    "Application.UserControl": {
      "type": "bool",
      "info": "True if the application is visible or if it was created or started by the user. False if you created or started the application programmatically by using the CreateObject or GetObject functions, and the application is hidden. Read/write Boolean."
    },
    "Application.UserLibraryPath": {
      "type": "str",
      "info": "Returns the path to the location on the user's computer where the COM add-ins are installed. Read-only String."
    },
    "Application.UserName": {
      "type": "str",
      "info": "Returns or sets the name of the current user. Read/write String."
    },
    "Application.UseSystemSeparators": {
      "type": "bool",
      "info": "True (default) if the system separators of Microsoft Excel are enabled. Read/write Boolean."
    },
    "Application.Value": {
      "type": "str",
      "info": "Returns a String value that represents the name of the application."
    },
    "Application.VBE": {
      "type": "VBE",
      "info": "Returns a VBE object that represents the Visual Basic Editor. Read-only."
    },
    "Application.Version": {
      "type": "str",
      "info": "Returns a String value that represents the Microsoft Excel version number."
    },
    "Application.Visible": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines whether the object is visible. Read/write."
    },
    "Application.WarnOnFunctionNameConflict": {
      "type": "WarnOnFunctionNameConflict",
      "info": "The WarnOnFunctionNameConflict property, when set to True, raises an alert if a developer tries to create a new function by using an existing function name. Read/write Boolean."
    },
    "Application.Watches": {
      "type": "Watches",
      "info": "Returns a Watches object representing a range that is tracked when the worksheet is recalculated."
    },
    "Application.Width": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the left edge of the application window to its right edge."
    },
    "Application.Windows": {
      "type": "Windows",
      "info": "Returns a Windows collection that represents all the windows in all the workbooks. Read-only Windows object."
    },
    "Application.WindowsForPens": {
      "type": "bool",
      "info": "True if the computer is running under Microsoft Windows for Pen Computing. Read-only Boolean."
    },
    "Application.WindowState": {
      "type": "XlWindowState",
      "info": "Returns or sets the state of the window. Read/write XlWindowState."
    },
    "Application.Workbooks": {
      "type": "Workbooks",
      "info": "Returns a Workbooks collection that represents all the open workbooks. Read-only."
    },
    "Application.WorksheetFunction": {
      "type": "WorksheetFunction",
      "info": "Returns the WorksheetFunction object. Read-only."
    },
    "Application.Worksheets": {
      "type": "Sheets",
      "info": "For an Application object, returns a Sheets collection that represents all the worksheets in the active workbook."
    },
    "Range.AddIndent": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that indicates if text is automatically indented when the text alignment in a cell is set to equal distribution (either horizontally or vertically)."
    },
    "Range.Address": {
      "type": "str",
      "info": "Returns a String value that represents the range reference in the language of the macro."
    },
    "Range.AddressLocal": {
      "type": "str",
      "info": "Returns the range reference for the specified range in the language of the user. Read-only String."
    },
    "Range.AllowEdit": {
      "type": "bool",
      "info": "Returns a Boolean value that indicates if the range can be edited on a protected worksheet."
    },
    "Range.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Range.Areas": {
      "type": "Areas",
      "info": "Returns an Areas collection that represents all the ranges in a multiple-area selection. Read-only."
    },
    "Range.Borders": {
      "type": "Borders",
      "info": "Returns a Borders collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format)."
    },
    "Range.Cells": {
      "type": "Range",
      "info": "Returns a Range object that represents the cells in the specified range."
    },
    "Range.Characters": {
      "type": "Characters",
      "info": "Returns a Characters object that represents a range of characters within the object text. Use the Characters object to format characters within a text string."
    },
    "Range.Column": {
      "type": "int",
      "info": "Returns the number of the first column in the first area in the specified range. Read-only Long."
    },
    "Range.Columns": {
      "type": "Range",
      "info": "Returns a Range object that represents the columns in the specified range."
    },
    "Range.ColumnWidth": {
      "type": "float",
      "info": "Returns or sets the width of all columns in the specified range. Read/write Double."
    },
    "Range.Comment": {
      "type": "Comment",
      "info": "Returns a Comment object that represents the comment associated with the cell in the upper-left corner of the range."
    },
    "Range.CommentThreaded": {
      "type": "CommentThreaded",
      "info": "Returns a CommentThreaded object that represents the threaded comment associated with the cell in the upper-left corner of the range."
    },
    "Range.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Range.CountLarge": {
      "type": "VBA_Variant",
      "info": "Returns a value that represents the number of objects in the collection. Read-only Variant."
    },
    "Range.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Range.CurrentArray": {
      "type": "Range",
      "info": "If the specified cell is part of an array, returns a Range object that represents the entire array. Read-only."
    },
    "Range.CurrentRegion": {
      "type": "Range",
      "info": "Returns a Range object that represents the current region. The current region is a range bounded by any combination of blank rows and blank columns. Read-only."
    },
    "Range.Dependents": {
      "type": "Range",
      "info": "Returns a Range object that represents the range containing all the dependents of a cell. This can be a multiple selection (a union of Range objects) if there's more than one dependent. Read-only Range object."
    },
    "Range.DirectDependents": {
      "type": "Range",
      "info": "Returns a Range object that represents the range containing all the direct dependents of a cell. This can be a multiple selection (a union of Range objects) if there's more than one dependent. Read-only Range object."
    },
    "Range.DirectPrecedents": {
      "type": "Range",
      "info": "Returns a Range object that represents the range containing all the direct precedents of a cell. This can be a multiple selection (a union of Range objects) if there's more than one precedent. Read-only Range object."
    },
    "Range.DisplayFormat": {
      "type": "DisplayFormat",
      "info": "Returns a DisplayFormat object that represents the display settings for the specified range. Read-only."
    },
    "Range.End": {
      "type": "Range",
      "info": "Returns a Range object that represents the cell at the end of the region that contains the source range. Equivalent to pressing END+UP ARROW, END+DOWN ARROW, END+LEFT ARROW, or END+RIGHT ARROW. Read-only Range object."
    },
    "Range.EntireColumn": {
      "type": "Range",
      "info": "Returns a Range object that represents the entire column (or columns) that contains the specified range. Read-only."
    },
    "Range.EntireRow": {
      "type": "Range",
      "info": "Returns a Range object that represents the entire row (or rows) that contains the specified range. Read-only."
    },
    "Range.Errors": {
      "type": "Allows the user to access error checking options.",
      "info": "Allows the user to access error checking options."
    },
    "Range.Font": {
      "type": "Font",
      "info": "Returns a Font object that represents the font of the specified object."
    },
    "Range.FormatConditions": {
      "type": "FormatConditions",
      "info": "Returns a FormatConditions collection that represents all the conditional formats for the specified range. Read-only."
    },
    "Range.Formula": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the object's implicitly intersecting formula in A1-style notation."
    },
    "Range.FormulaArray": {
      "type": "null",
      "info": "Returns or sets the array formula of a range. Returns (or can be set to) a single formula or a Visual Basic array. If the specified range doesn't contain an array formula, this property returns null. Read/write Variant."
    },
    "Range.FormulaHidden": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that indicates if the formula will be hidden when the worksheet is protected."
    },
    "Range.FormulaLocal": {
      "type": "VBA_Variant",
      "info": "Returns or sets the formula for the object, using A1-style references in the language of the user. Read/write Variant."
    },
    "Range.FormulaR1C1": {
      "type": "VBA_Variant",
      "info": "Returns or sets the formula for the object, using R1C1-style notation in the language of the macro. Read/write Variant."
    },
    "Range.FormulaR1C1Local": {
      "type": "VBA_Variant",
      "info": "Returns or sets the formula for the object, using R1C1-style notation in the language of the user. Read/write Variant."
    },
    "Range.HasArray": {
      "type": "bool",
      "info": "True if the specified cell is part of an array formula. Read-only Variant."
    },
    "Range.HasFormula": {
      "type": "bool",
      "info": "True if all cells in the range contain formulas; False if none of the cells in the range contains a formula; null otherwise. Read-only Variant."
    },
    "Range.HasRichDataType": {
      "type": "bool",
      "info": "True if all cells in the range contain a Rich data type. False if none of the cells in the range contains a Rich data type; otherwise, null. Read-only Variant."
    },
    "Range.Height": {
      "type": "points",
      "info": "Returns a Double value that represents the height, in points, of the range. Read-only."
    },
    "Range.Hidden": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that indicates if the rows or columns are hidden."
    },
    "Range.HorizontalAlignment": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the horizontal alignment for the specified object. Read/write."
    },
    "Range.Hyperlinks": {
      "type": "Hyperlinks",
      "info": "Returns a Hyperlinks collection that represents the hyperlinks for the range."
    },
    "Range.ID": {
      "type": "str",
      "info": "Returns or sets a String value that represents the identifying label for the specified cell when the page is saved as a webpage."
    },
    "Range.IndentLevel": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the indent level for the cell or range. Can be an integer from 0 to 15."
    },
    "Range.Interior": {
      "type": "Interior",
      "info": "Returns an Interior object that represents the interior of the specified object."
    },
    "Range.Item": {
      "type": "Range",
      "info": "Returns a Range object that represents a range at an offset to the specified range."
    },
    "Range.Left": {
      "type": "points",
      "info": "Returns a Variant value that represents the distance, in points, from the left edge of column A to the left edge of the range."
    },
    "Range.LinkedDataTypeState": {
      "type": "Stocks or Geography",
      "info": "Returns information about the state of any Linked data types, such as Stocks or Geography, in the range. Possible values are from the XlLinkedDataTypeState enumeration. Read-only."
    },
    "Range.ListHeaderRows": {
      "type": "int",
      "info": "Returns the number of header rows for the specified range. Read-only Long."
    },
    "Range.ListObject": {
      "type": "ListObject",
      "info": "Returns a ListObject object for the Range object. Read-only ListObject object."
    },
    "Range.LocationInTable": {
      "type": "PivotTable",
      "info": "Returns a constant that describes the part of the PivotTable report that contains the upper-left corner of the specified range. Can be one of the following XlLocationInTable constants. Read-only Long."
    },
    "Range.Locked": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that indicates if the object is locked."
    },
    "Range.MDX": {
      "type": "Range",
      "info": "Returns the MDX name for the specified Range object. Read-only String."
    },
    "Range.MergeArea": {
      "type": "Range",
      "info": "Returns a Range object that represents the merged range containing the specified cell. If the specified cell isn't in a merged range, this property returns the specified cell. Read-only Variant."
    },
    "Range.MergeCells": {
      "type": "bool",
      "info": "True if the range contains merged cells. Read/write Variant."
    },
    "Range.Name": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the name of the object."
    },
    "Range.Next": {
      "type": "Range",
      "info": "Returns a Range object that represents the next cell."
    },
    "Range.NumberFormat": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the format code for the object."
    },
    "Range.NumberFormatLocal": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the format code for the object as a string in the language of the user."
    },
    "Range.Offset": {
      "type": "Range",
      "info": "Returns a Range object that represents a range that's offset from the specified range."
    },
    "Range.Orientation": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the text orientation."
    },
    "Range.OutlineLevel": {
      "type": "VBA_Variant",
      "info": "Returns or sets the current outline level of the specified row or column. Read/write Variant."
    },
    "Range.PageBreak": {
      "type": "XlPageBreak",
      "info": "Returns or sets the location of a page break. Can be one of the following XlPageBreak constants: xlPageBreakAutomatic, xlPageBreakManual, or xlPageBreakNone. Read/write Long."
    },
    "Range.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Range.Phonetic": {
      "type": "Phonetic",
      "info": "Returns the Phonetic object, which contains information about a specific phonetic text string in a cell."
    },
    "Range.Phonetics": {
      "type": "Phonetics",
      "info": "Returns the Phonetics collection of the range. Read-only."
    },
    "Range.PivotCell": {
      "type": "PivotCell",
      "info": "Returns a PivotCell object that represents a cell in a PivotTable report."
    },
    "Range.PivotField": {
      "type": "PivotField",
      "info": "Returns a PivotField object that represents the PivotTable field containing the upper-left corner of the specified range."
    },
    "Range.PivotItem": {
      "type": "PivotItem",
      "info": "Returns a PivotItem object that represents the PivotTable item containing the upper-left corner of the specified range."
    },
    "Range.PivotTable": {
      "type": "PivotTable",
      "info": "Returns a PivotTable object that represents the PivotTable report containing the upper-left corner of the specified range."
    },
    "Range.Precedents": {
      "type": "Range",
      "info": "Returns a Range object that represents all the precedents of a cell. This can be a multiple selection (a union of Range objects) if there's more than one precedent. Read-only."
    },
    "Range.PrefixCharacter": {
      "type": "VBA_Variant",
      "info": "Returns the prefix character for the cell. Read-only Variant."
    },
    "Range.Previous": {
      "type": "Range",
      "info": "Returns a Range object that represents the previous cell."
    },
    "Range.QueryTable": {
      "type": "QueryTable",
      "info": "Returns a QueryTable object that represents the query table that intersects the specified Range object."
    },
    "Range.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents a cell or a range of cells."
    },
    "Range.ReadingOrder": {
      "type": "XlReadingOrder",
      "info": "Returns or sets the reading order for the specified object. Can be one of the following XlReadingOrder constants: xlRTL (right-to-left), xlLTR (left-to-right), or xlContext. Read/write Long."
    },
    "Range.Resize": {
      "type": "Range",
      "info": "Resizes the specified range. Returns a Range object that represents the resized range."
    },
    "Range.Row": {
      "type": "int",
      "info": "Returns the number of the first row of the first area in the range. Read-only Long."
    },
    "Range.RowHeight": {
      "type": "points",
      "info": "Returns or sets the height of the first row in the range specified, measured in points. Read/write Double."
    },
    "Range.Rows": {
      "type": "Range",
      "info": "Returns a Range object that represents the rows in the specified range."
    },
    "Range.ServerActions": {
      "type": "Range",
      "info": "Specifies the actions that can be performed on the SharePoint server for a Range object."
    },
    "Range.ShowDetail": {
      "type": "bool",
      "info": "True if the outline is expanded for the specified range (so that the detail of the column or row is visible). The specified range must be a single summary column or row in an outline. Read/write Variant."
    },
    "Range.ShrinkToFit": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that indicates if text automatically shrinks to fit in the available column width."
    },
    "Range.SoundNote": {
      "type": "Note\nThis property should not be used. Sound notes have been removed from Microsoft Excel.",
      "info": "Note\nThis property should not be used. Sound notes have been removed from Microsoft Excel."
    },
    "Range.SparklineGroups": {
      "type": "SparklineGroups",
      "info": "Returns a SparklineGroups object that represents an existing group of sparklines from the specified range. Read-only."
    },
    "Range.Style": {
      "type": "Style",
      "info": "Returns or sets a Variant value containing a Style object that represents the style of the specified range."
    },
    "Range.Summary": {
      "type": "bool",
      "info": "True if the range is an outlining summary row or column. The range should be a row or a column. Read-only Variant."
    },
    "Range.Text": {
      "type": "str",
      "info": "Returns the formatted text for the specified object. Read-only String."
    },
    "Range.Top": {
      "type": "points",
      "info": "Returns a Variant value that represents the distance, in points, from the top edge of row 1 to the top edge of the range."
    },
    "Range.UseStandardHeight": {
      "type": "bool",
      "info": "True if the row height of the Range object equals the standard height of the sheet. Returns Null if the range contains more than one row and the rows aren't all the same height. Read/write Variant."
    },
    "Range.UseStandardWidth": {
      "type": "bool",
      "info": "True if the column width of the Range object equals the standard width of the sheet. Returns null if the range contains more than one column and the columns aren't all the same width. Read/write Variant."
    },
    "Range.Validation": {
      "type": "Validation",
      "info": "Returns the Validation object that represents data validation for the specified range. Read-only."
    },
    "Range.Value": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the value of the specified range."
    },
    "Range.Value2": {
      "type": "VBA_Variant",
      "info": "Returns or sets the cell value. Read/write Variant."
    },
    "Range.VerticalAlignment": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the vertical alignment of the specified object. Read/write."
    },
    "Range.Width": {
      "type": "points",
      "info": "Returns a Double value that represents the width of a range in points. Read-only."
    },
    "Range.Worksheet": {
      "type": "Worksheet",
      "info": "Returns a Worksheet object that represents the worksheet containing the specified range. Read-only."
    },
    "Range.WrapText": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that indicates if Microsoft Excel wraps the text in the object."
    },
    "Range.XPath": {
      "type": "XPath",
      "info": "Returns an XPath object that represents the XPath of the element mapped to the specified Range object. The context of the range determines whether the action succeeds or returns an empty object. Read-only."
    },
    "Chart.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Chart.AutoScaling": {
      "type": "RightAngleAxes",
      "info": "True if Microsoft Excel scales a 3D chart so that it's closer in size to the equivalent 2D chart. The RightAngleAxes property must be True. Read/write Boolean."
    },
    "Chart.BackWall": {
      "type": "Walls",
      "info": "Returns a Walls object that allows the user to individually format the back wall of a 3D chart. Read-only."
    },
    "Chart.BarShape": {
      "type": "XlBarShape",
      "info": "Returns or sets the shape used with the 3D bar or column chart. Read/write XlBarShape."
    },
    "Chart.CategoryLabelLevel": {
      "type": "XlCategoryLabelLevel",
      "info": "Returns an XlCategoryLabelLevel constant referring to the level of where the category labels are being sourced from. Read/write Integer."
    },
    "Chart.ChartArea": {
      "type": "ChartArea",
      "info": "Returns a ChartArea object that represents the complete chart area for the chart. Read-only."
    },
    "Chart.ChartColor": {
      "type": "int",
      "info": "Returns or sets an Integer that represents the color scheme for the chart. Read/write."
    },
    "Chart.ChartStyle": {
      "type": "VBA_Variant",
      "info": "Returns or sets the chart style for the chart. Read/write Variant."
    },
    "Chart.ChartTitle": {
      "type": "ChartTitle",
      "info": "Returns a ChartTitle object that represents the title of the specified chart. Read-only."
    },
    "Chart.ChartType": {
      "type": "XlChartType",
      "info": "Returns or sets the chart type. Read/write XlChartType."
    },
    "Chart.CodeName": {
      "type": "str",
      "info": "Returns the code name for the object. Read-only String."
    },
    "Chart.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Chart.DataTable": {
      "type": "DataTable",
      "info": "Returns a DataTable object that represents the chart data table. Read-only."
    },
    "Chart.DepthPercent": {
      "type": "int",
      "info": "Returns or sets the depth of a 3D chart as a percentage of the chart width (between 20 and 2000 percent). Read/write Long."
    },
    "Chart.DisplayBlanksAs": {
      "type": "XlDisplayBlanksAs",
      "info": "Returns or sets the way that blank cells are plotted on a chart. Can be one of the XlDisplayBlanksAs constants. Read/write Long."
    },
    "Chart.Elevation": {
      "type": "int",
      "info": "Returns or sets the elevation of the 3D chart view, in degrees. Read/write Long."
    },
    "Chart.Floor": {
      "type": "Floor",
      "info": "Returns a Floor object that represents the floor of the 3D chart. Read-only."
    },
    "Chart.GapDepth": {
      "type": "int",
      "info": "Returns or sets the distance between the data series in a 3D chart as a percentage of the marker width. The value of this property must be between 0 and 500. Read/write Long."
    },
    "Chart.HasAxis": {
      "type": "VBA_Variant",
      "info": "Returns or sets which axes exist on the chart. Read/write Variant."
    },
    "Chart.HasDataTable": {
      "type": "bool",
      "info": "True if the chart has a data table. Read/write Boolean."
    },
    "Chart.HasLegend": {
      "type": "bool",
      "info": "True if the chart has a legend. Read/write Boolean."
    },
    "Chart.HasTitle": {
      "type": "bool",
      "info": "True if the axis or chart has a visible title. Read/write Boolean."
    },
    "Chart.HeightPercent": {
      "type": "int",
      "info": "Returns or sets the height of a 3D chart as a percentage of the chart width (between 5 and 500 percent). Read/write Long."
    },
    "Chart.Hyperlinks": {
      "type": "Hyperlinks",
      "info": "Returns a Hyperlinks collection that represents the hyperlinks for the chart."
    },
    "Chart.Index": {
      "type": "int",
      "info": "Returns a Long value that represents the index number of the object within the collection of similar objects."
    },
    "Chart.Legend": {
      "type": "Legend",
      "info": "Returns a Legend object that represents the legend for the chart. Read-only."
    },
    "Chart.MailEnvelope": {
      "type": "Represents an email header for a document.",
      "info": "Represents an email header for a document."
    },
    "Chart.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "Chart.Next": {
      "type": "Worksheet",
      "info": "Returns a Worksheet object that represents the next sheet."
    },
    "Chart.PageSetup": {
      "type": "PageSetup",
      "info": "Returns a PageSetup object that contains all the page setup settings for the specified object. Read-only."
    },
    "Chart.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Chart.Perspective": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the perspective for the 3D chart view."
    },
    "Chart.PivotLayout": {
      "type": "PivotLayout",
      "info": "Returns a PivotLayout object that represents the placement of fields in a PivotTable report and the placement of axes in a PivotChart report. Read-only."
    },
    "Chart.PlotArea": {
      "type": "PlotArea",
      "info": "Returns a PlotArea object that represents the plot area of a chart. Read-only."
    },
    "Chart.PlotBy": {
      "type": "XlRowCol",
      "info": "Returns or sets the way columns or rows are used as data series on the chart. Can be one of the following XlRowCol constants: xlColumns or xlRows. Read/write Long."
    },
    "Chart.PlotVisibleOnly": {
      "type": "bool",
      "info": "True if only visible cells are plotted. False if both visible and hidden cells are plotted. Read/write Boolean."
    },
    "Chart.Previous": {
      "type": "Worksheet",
      "info": "Returns a Worksheet object that represents the previous sheet."
    },
    "Chart.PrintedCommentPages": {
      "type": "Returns the number of comment pages that will be printed for the current chart. Read-only.",
      "info": "Returns the number of comment pages that will be printed for the current chart. Read-only."
    },
    "Chart.ProtectContents": {
      "type": "Protect",
      "info": "True if the contents of the sheet are protected. For a chart, this protects the entire chart. To turn on content protection, use the Protect method with the Contents argument set to True. Read-only Boolean."
    },
    "Chart.ProtectData": {
      "type": "bool",
      "info": "True if series formulas cannot be modified by the user. Read/write Boolean."
    },
    "Chart.ProtectDrawingObjects": {
      "type": "Protect",
      "info": "True if shapes are protected. To turn on shape protection, use the Protect method with the DrawingObjects argument set to True. Read-only Boolean."
    },
    "Chart.ProtectFormatting": {
      "type": "bool",
      "info": "True if chart formatting cannot be modified by the user. Read/write Boolean."
    },
    "Chart.ProtectionMode": {
      "type": "Protect",
      "info": "True if user-interface-only protection is turned on. To turn on user interface protection, use the Protect method with the UserInterfaceOnly argument set to True. Read-only Boolean."
    },
    "Chart.ProtectSelection": {
      "type": "bool",
      "info": "True if chart elements cannot be selected. Read/write Boolean."
    },
    "Chart.RightAngleAxes": {
      "type": "bool",
      "info": "True if the chart axes are at right angles, independent of chart rotation or elevation. Applies only to 3D line, column, and bar charts. Read/write Boolean."
    },
    "Chart.Rotation": {
      "type": "VBA_Variant",
      "info": "Returns or sets the rotation of the 3D chart view (the rotation of the plot area around the z-axis, in degrees). The value of this property must be from 0 to 360, except for 3D bar charts, where the value must be from 0 to 44. The default value is 20. Applies only to 3D charts. Read/write Variant."
    },
    "Chart.SeriesNameLevel": {
      "type": "XlSeriesNameLevel",
      "info": "Returns an XlSeriesNameLevel constant referring to the level of where the series names are being sourced from. Read/write Integer."
    },
    "Chart.Shapes": {
      "type": "Shapes",
      "info": "Returns a Shapes collection that represents all the shapes on the chart sheet. Read-only."
    },
    "Chart.ShowAllFieldButtons": {
      "type": "Returns or sets whether to display all field buttons on a PivotChart. Read/write.",
      "info": "Returns or sets whether to display all field buttons on a PivotChart. Read/write."
    },
    "Chart.ShowAxisFieldButtons": {
      "type": "Returns or sets whether to display axis field buttons on a PivotChart. Read/write.",
      "info": "Returns or sets whether to display axis field buttons on a PivotChart. Read/write."
    },
    "Chart.ShowDataLabelsOverMaximum": {
      "type": "bool",
      "info": "Returns or sets whether to show the data labels when the value is greater than the maximum value on the value axis. Read/write Boolean."
    },
    "Chart.ShowExpandCollapseEntireFieldButtons": {
      "type": "bool",
      "info": "True to display the Expand Entire Field and Collapse Entire Field buttons on the specified PivotChart. Read/write Boolean."
    },
    "Chart.ShowLegendFieldButtons": {
      "type": "Returns or sets whether to display legend field buttons on a PivotChart. Read/write.",
      "info": "Returns or sets whether to display legend field buttons on a PivotChart. Read/write."
    },
    "Chart.ShowReportFilterFieldButtons": {
      "type": "Returns or sets whether to display the report filter field buttons on a PivotChart. Read/write.",
      "info": "Returns or sets whether to display the report filter field buttons on a PivotChart. Read/write."
    },
    "Chart.ShowValueFieldButtons": {
      "type": "Returns or sets whether to display the value field buttons on a PivotChart. Read/write.",
      "info": "Returns or sets whether to display the value field buttons on a PivotChart. Read/write."
    },
    "Chart.SideWall": {
      "type": "Walls",
      "info": "Returns a Walls object that allows the user to individually format the side wall of a 3D chart. Read-only."
    },
    "Chart.Tab": {
      "type": "Tab",
      "info": "Returns a Tab object for a chart."
    },
    "Chart.Visible": {
      "type": "XlSheetVisibility",
      "info": "Returns or sets an XlSheetVisibility value that determines whether the object is visible."
    },
    "Chart.Walls": {
      "type": "Walls",
      "info": "Returns a Walls object that represents the walls of the 3D chart. Read-only."
    },
    "ProtectedViewWindow.Caption": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the name that appears in the title bar of the Protected View window. Read/write."
    },
    "ProtectedViewWindow.EnableResize": {
      "type": "bool",
      "info": "True if the Protected View window can be resized. Read/write."
    },
    "ProtectedViewWindow.Height": {
      "type": "points",
      "info": "Returns or sets a value that represents the height, in points, of the Protected View window. Read/write."
    },
    "ProtectedViewWindow.Left": {
      "type": "points",
      "info": "Returns or sets a value that represents the distance, in points, from the left edge of the client area to the left edge of the Protected View window. Read/write."
    },
    "ProtectedViewWindow.SourceName": {
      "type": "Returns the name of the source file that is open in the specified Protected View window. Read-only.",
      "info": "Returns the name of the source file that is open in the specified Protected View window. Read-only."
    },
    "ProtectedViewWindow.SourcePath": {
      "type": "Returns the path of the source file that is open in the specified Protected View window. Read-only.",
      "info": "Returns the path of the source file that is open in the specified Protected View window. Read-only."
    },
    "ProtectedViewWindow.Top": {
      "type": "points",
      "info": "Returns or sets a value that represents the distance, in points, from the top edge of the specified Protected View window to the top edge of the usable area. Read/write."
    },
    "ProtectedViewWindow.Visible": {
      "type": "Returns or sets a value that determines whether the specified Protected View window is visible. Read/write.",
      "info": "Returns or sets a value that determines whether the specified Protected View window is visible. Read/write."
    },
    "ProtectedViewWindow.Width": {
      "type": "points",
      "info": "Returns or sets a value that specifies the width, in points, of the specified Protected View window. Read/write."
    },
    "ProtectedViewWindow.WindowState": {
      "type": "Returns or sets the state of the specified Protected View window. Read/write.",
      "info": "Returns or sets the state of the specified Protected View window. Read/write."
    },
    "ProtectedViewWindow.Workbook": {
      "type": "Returns an object that represents the workbook that is open in the specified Protected View window. Read-only.",
      "info": "Returns an object that represents the workbook that is open in the specified Protected View window. Read-only."
    },
    "Window.ActiveCell": {
      "type": "Range",
      "info": "Returns a Range object that represents the active cell in the active window (the window on top) or in the specified window. If the window isn't displaying a worksheet, this property fails. Read-only."
    },
    "Window.ActiveChart": {
      "type": "Chart",
      "info": "Returns a Chart object that represents the active chart (either an embedded chart or a chart sheet). An embedded chart is considered active when it's either selected or activated. When no chart is active, this property returns Nothing."
    },
    "Window.ActivePane": {
      "type": "Pane",
      "info": "Returns a Pane object that represents the active pane in the window. Read-only."
    },
    "Window.ActiveSheet": {
      "type": "None",
      "info": "Returns an object that represents the active sheet (the sheet on top) in the active workbook or in the specified window or workbook. Returns Nothing if no sheet is active."
    },
    "Window.ActiveSheetView": {
      "type": "Returns an object that represents the view of the active sheet in the specified window. Read-only.",
      "info": "Returns an object that represents the view of the active sheet in the specified window. Read-only."
    },
    "Window.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Window.AutoFilterDateGrouping": {
      "type": "bool",
      "info": "True if the auto filter for date grouping is currently displayed in the specified window. Read/write Boolean."
    },
    "Window.Caption": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the name that appears in the title bar of the document window."
    },
    "Window.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Window.DisplayFormulas": {
      "type": "bool",
      "info": "True if the window is displaying formulas; False if the window is displaying values. Read/write Boolean."
    },
    "Window.DisplayGridlines": {
      "type": "bool",
      "info": "True if gridlines are displayed. Read/write Boolean."
    },
    "Window.DisplayHeadings": {
      "type": "bool",
      "info": "True if both row and column headings are displayed; False if no headings are displayed. Read/write Boolean."
    },
    "Window.DisplayHorizontalScrollBar": {
      "type": "bool",
      "info": "True if the horizontal scroll bar is displayed. Read/write Boolean."
    },
    "Window.DisplayOutline": {
      "type": "bool",
      "info": "True if outline symbols are displayed. Read/write Boolean."
    },
    "Window.DisplayRightToLeft": {
      "type": "bool",
      "info": "True if the specified window is displayed from right to left instead of from left to right. False if the object is displayed from left to right. Read-only Boolean."
    },
    "Window.DisplayRuler": {
      "type": "bool",
      "info": "True if a ruler is displayed for the specified window. Read/write Boolean."
    },
    "Window.DisplayVerticalScrollBar": {
      "type": "bool",
      "info": "True if the vertical scroll bar is displayed. Read/write Boolean."
    },
    "Window.DisplayWhitespace": {
      "type": "bool",
      "info": "True if whitespace is displayed. Read/write Boolean."
    },
    "Window.DisplayWorkbookTabs": {
      "type": "bool",
      "info": "True if the workbook tabs are displayed. Read/write Boolean."
    },
    "Window.DisplayZeros": {
      "type": "bool",
      "info": "True if zero values are displayed. Read/write Boolean."
    },
    "Window.EnableResize": {
      "type": "bool",
      "info": "True if the window can be resized. Read/write Boolean."
    },
    "Window.FreezePanes": {
      "type": "bool",
      "info": "True if split panes are frozen. Read/write Boolean."
    },
    "Window.GridlineColor": {
      "type": "int",
      "info": "Returns or sets the gridline color as an RGB value. Read/write Long."
    },
    "Window.GridlineColorIndex": {
      "type": "XlColorIndex",
      "info": "Returns or sets the gridline color as an index into the current color palette or as an XlColorIndex constant."
    },
    "Window.Height": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the height, in points, of the window."
    },
    "Window.hWnd": {
      "type": "int",
      "info": "Returns a Long that indicates the window handle of the specified window. Read-only."
    },
    "Window.Index": {
      "type": "int",
      "info": "Returns a Long value that represents the index number of the object within the collection of similar objects."
    },
    "Window.Left": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the left edge of the client area to the left edge of the window."
    },
    "Window.OnWindow": {
      "type": "str",
      "info": "Returns or sets the name of the procedure that's run whenever you activate a window. Read/write String."
    },
    "Window.Panes": {
      "type": "Panes",
      "info": "Returns a Panes collection that represents all the panes in the specified window. Read-only."
    },
    "Window.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Window.RangeSelection": {
      "type": "Range",
      "info": "Returns a Range object that represents the selected cells on the worksheet in the specified window even if a graphic object is active or selected on the worksheet. Read-only."
    },
    "Window.ScrollColumn": {
      "type": "int",
      "info": "Returns or sets the number of the leftmost column in the pane or window. Read/write Long."
    },
    "Window.ScrollRow": {
      "type": "int",
      "info": "Returns or sets the number of the row that appears at the top of the pane or window. Read/write Long."
    },
    "Window.SelectedSheets": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the selected sheets in the specified window. Read-only."
    },
    "Window.Selection": {
      "type": "Windows",
      "info": "Returns the specified window, for a Windows object."
    },
    "Window.SheetViews": {
      "type": "SheetViews",
      "info": "Returns the SheetViews object for the specified window. Read-only."
    },
    "Window.Split": {
      "type": "bool",
      "info": "True if the window is split. Read/write Boolean."
    },
    "Window.SplitColumn": {
      "type": "int",
      "info": "Returns or sets the column number where the window is split into panes (the number of columns to the left of the split line). Read/write Long."
    },
    "Window.SplitHorizontal": {
      "type": "points",
      "info": "Returns or sets the location of the horizontal window split, in points. Read/write Double."
    },
    "Window.SplitRow": {
      "type": "int",
      "info": "Returns or sets the row number where the window is split into panes (the number of rows above the split). Read/write Long."
    },
    "Window.SplitVertical": {
      "type": "points",
      "info": "Returns or sets the location of the vertical window split, in points. Read/write Double."
    },
    "Window.TabRatio": {
      "type": "float",
      "info": "Returns or sets the ratio of the width of the workbook's tab area to the width of the window's horizontal scroll bar (as a number between 0 (zero) and 1; the default value is 0.6). Read/write Double."
    },
    "Window.Top": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the top edge of the window to the top edge of the usable area (below the menus, any toolbars docked at the top, and the formula bar)."
    },
    "Window.Type": {
      "type": "XlWindowType",
      "info": "Returns or sets an XlWindowType value that represents the window type."
    },
    "Window.UsableHeight": {
      "type": "points",
      "info": "Returns the maximum height of the space that a window can occupy in the application window area, in points. Read-only Double."
    },
    "Window.UsableWidth": {
      "type": "points",
      "info": "Returns the maximum width of the space that a window can occupy in the application window area, in points. Read-only Double."
    },
    "Window.View": {
      "type": "XlWindowView",
      "info": "Returns or sets the view showing in the window. Read/write XlWindowView."
    },
    "Window.Visible": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines whether the object is visible. Read/write."
    },
    "Window.VisibleRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range of cells that are visible in the window or pane. If a column or row is partially visible, it's included in the range. Read-only."
    },
    "Window.Width": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the width, in points, of the window."
    },
    "Window.WindowNumber": {
      "type": "int",
      "info": "Returns the window number. For example, a window named Book1.xls:2 has 2 as its window number. Most windows have the window number 1. Read-only Long."
    },
    "Window.WindowState": {
      "type": "XlWindowState",
      "info": "Returns or sets the state of the window. Read/write XlWindowState."
    },
    "Window.Zoom": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the display size of the window, as a percentage (100 equals normal size, 200 equals double size, and so on)."
    },
    "Workbook.AccuracyVersion": {
      "type": "Specifies whether certain worksheet functions use the latest accuracy algorithms to calculate their results. Read/write.",
      "info": "Specifies whether certain worksheet functions use the latest accuracy algorithms to calculate their results. Read/write."
    },
    "Workbook.ActiveChart": {
      "type": "Chart",
      "info": "Returns a Chart object that represents the active chart (either an embedded chart or a chart sheet). An embedded chart is considered active when it's either selected or activated. When no chart is active, this property returns Nothing."
    },
    "Workbook.ActiveSheet": {
      "type": "Worksheet",
      "info": "Returns a Worksheet object that represents the active sheet (the sheet on top) in the active workbook or specified workbook. Returns Nothing if no sheet is active."
    },
    "Workbook.ActiveSlicer": {
      "type": "None",
      "info": "Returns an object that represents the active slicer in the active workbook or in the specified workbook. Returns Nothing if no slicer is active. Read-only."
    },
    "Workbook.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Workbook.AutoSaveOn": {
      "type": "bool",
      "info": "True if the edits in the workbook are automatically saved. Read/write Boolean."
    },
    "Workbook.AutoUpdateFrequency": {
      "type": "int",
      "info": "Returns or sets the number of minutes between automatic updates to the shared workbook. Read/write Long."
    },
    "Workbook.AutoUpdateSaveChanges": {
      "type": "bool",
      "info": "True if current changes to the shared workbook are posted to other users whenever the workbook is automatically updated. False if changes aren't posted (this workbook is still synchronized with changes made by other users). The default value is True. Read/write Boolean."
    },
    "Workbook.BuiltinDocumentProperties": {
      "type": "DocumentProperties",
      "info": "Returns a DocumentProperties collection that represents all the built-in document properties for the specified workbook. Read-only."
    },
    "Workbook.CalculationVersion": {
      "type": "int",
      "info": "Returns the information about the version of Excel that the workbook was last fully recalculated by. Read-only Long."
    },
    "Workbook.CaseSensitive": {
      "type": "bool",
      "info": "True if the workbook distinguishes between uppercase and lowercase when comparing content. Read-only Boolean."
    },
    "Workbook.ChangeHistoryDuration": {
      "type": "int",
      "info": "Returns or sets the number of days shown in the shared workbook's change history. Read/write Long."
    },
    "Workbook.ChartDataPointTrack": {
      "type": "bool",
      "info": "True causes all charts in the current document to track the actual data point to which it's attached. False reverts back to tracking the index of the data point. Read/write Boolean."
    },
    "Workbook.Charts": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the chart sheets in the specified workbook."
    },
    "Workbook.CheckCompatibility": {
      "type": "bool",
      "info": "Controls whether or not the compatibility checker is run automatically when the workbook is saved. Read/write Boolean."
    },
    "Workbook.CodeName": {
      "type": "str",
      "info": "Returns the code name for the object. Read-only String."
    },
    "Workbook.Colors": {
      "type": "VBA_Variant",
      "info": "Returns or sets colors in the palette for the workbook. The palette has 56 entries, each represented by an RGB value. Read/write Variant."
    },
    "Workbook.CommandBars": {
      "type": "CommandBars",
      "info": "Returns a CommandBars object that represents the Microsoft Excel command bars. Read-only."
    },
    "Workbook.ConflictResolution": {
      "type": "XlSaveConflictResolution",
      "info": "Returns or sets the way conflicts are to be resolved whenever a shared workbook is updated. Read/write XlSaveConflictResolution."
    },
    "Workbook.Connections": {
      "type": "Connections",
      "info": "Returns a Connections object that is a container for connections between the workbook and data sources such as ODBC, OLEDB, etc., that can refresh the data without prompting the user. Read-only."
    },
    "Workbook.ConnectionsDisabled": {
      "type": "Disables the external connections or links in the workbook. Read-only.",
      "info": "Disables the external connections or links in the workbook. Read-only."
    },
    "Workbook.Container": {
      "type": "VBA_Object",
      "info": "Returns the object that represents the container application for the specified OLE object. Read-only Object."
    },
    "Workbook.ContentTypeProperties": {
      "type": "MetaProperties",
      "info": "Returns a MetaProperties collection that describes the metadata stored in the workbook. Read-only."
    },
    "Workbook.CreateBackup": {
      "type": "bool",
      "info": "True if a backup file is created when this file is saved. Read-only Boolean."
    },
    "Workbook.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Workbook.CustomDocumentProperties": {
      "type": "DocumentProperties",
      "info": "Returns or sets a DocumentProperties collection that represents all the custom document properties for the specified workbook."
    },
    "Workbook.CustomViews": {
      "type": "CustomViews",
      "info": "Returns a CustomViews collection that represents all the custom views for the workbook."
    },
    "Workbook.CustomXMLParts": {
      "type": "CustomXMLParts",
      "info": "Returns a CustomXMLParts collection that represents the custom XML in the XML data store. Read-only."
    },
    "Workbook.Date1904": {
      "type": "bool",
      "info": "True if the workbook uses the 1904 date system. Read/write Boolean."
    },
    "Workbook.DefaultPivotTableStyle": {
      "type": "TableStyles",
      "info": "Specifies the table style from the TableStyles collection that is used as the default style for PivotTables. Read/write."
    },
    "Workbook.DefaultSlicerStyle": {
      "type": "TableStyles",
      "info": "Specifies the style from the TableStyles object that is used as the default style for slicers. Read/write."
    },
    "Workbook.DefaultTableStyle": {
      "type": "TableStyles",
      "info": "Specifies the table style from the TableStyles collection that is used as the default table style. Read/write Variant."
    },
    "Workbook.DefaultTimelineStyle": {
      "type": "VBA_Variant",
      "info": "The name of the default slicer style of the workbook. Read/write Variant."
    },
    "Workbook.DisplayDrawingObjects": {
      "type": "int",
      "info": "Returns or sets how shapes are displayed. Read/write Long."
    },
    "Workbook.DisplayInkComments": {
      "type": "bool",
      "info": "A Boolean value that determines whether ink comments are displayed in the workbook. Read/write Boolean."
    },
    "Workbook.DocumentInspectors": {
      "type": "DocumentInspectors",
      "info": "Returns a DocumentInspectors collection that represents the Document Inspector modules for the specified workbook. Read-only."
    },
    "Workbook.DocumentLibraryVersions": {
      "type": "DocumentLibraryVersions",
      "info": "Returns a DocumentLibraryVersions collection that represents the collection of versions of a shared workbook that has versioning enabled and that is stored in a document library on a server."
    },
    "Workbook.DoNotPromptForConvert": {
      "type": "bool",
      "info": "Returns or sets if the user should be prompted to convert the workbook if the workbook contains features that are not supported by versions of Excel earlier than Excel 2007. Read/write Boolean."
    },
    "Workbook.EnableAutoRecover": {
      "type": "bool",
      "info": "Saves changed files of all formats on a timed interval. Read/write Boolean."
    },
    "Workbook.EncryptionProvider": {
      "type": "str",
      "info": "Returns a String specifying the name of the algorithm encryption provider that Microsoft Excel uses when encrypting documents. Read/write."
    },
    "Workbook.EnvelopeVisible": {
      "type": "bool",
      "info": "True if the email composition header and the envelope toolbar are both visible. Read/write Boolean."
    },
    "Workbook.Excel4IntlMacroSheets": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the Microsoft Excel 4.0 international macro sheets in the specified workbook. Read-only."
    },
    "Workbook.Excel4MacroSheets": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the Microsoft Excel 4.0 macro sheets in the specified workbook. Read-only."
    },
    "Workbook.Excel8CompatibilityMode": {
      "type": "bool",
      "info": "Provides developers with a way to check if the workbook is in compatibility mode. Read-only Boolean."
    },
    "Workbook.Final": {
      "type": "bool",
      "info": "Returns or sets a Boolean that indicates whether a workbook is final. Read/write Boolean."
    },
    "Workbook.ForceFullCalculation": {
      "type": "Returns or sets the specified workbook to forced calculation mode. Read/write.",
      "info": "Returns or sets the specified workbook to forced calculation mode. Read/write."
    },
    "Workbook.FullName": {
      "type": "str",
      "info": "Returns the name of the object, including its path on disk, as a string. Read-only String."
    },
    "Workbook.FullNameURLEncoded": {
      "type": "str",
      "info": "Returns a String indicating the name of the object, including its path on disk, as a string. Read-only."
    },
    "Workbook.HasPassword": {
      "type": "bool",
      "info": "True if the workbook has a protection password. Read-only Boolean."
    },
    "Workbook.HasVBProject": {
      "type": "bool",
      "info": "Returns a Boolean that represents whether a workbook has an attached Microsoft Visual Basic for Applications project. Read-only Boolean."
    },
    "Workbook.HighlightChangesOnScreen": {
      "type": "bool",
      "info": "True if changes to the shared workbook are highlighted on-screen. Read/write Boolean."
    },
    "Workbook.IconSets": {
      "type": "IconSets",
      "info": "This property is used to filter data in a workbook based on a cell icon from the IconSets collection. Read-only."
    },
    "Workbook.InactiveListBorderVisible": {
      "type": "bool",
      "info": "A Boolean value that specifies whether list borders are visible when a list is not active. Returns True if the border is visible. Read/write Boolean."
    },
    "Workbook.IsAddin": {
      "type": "bool",
      "info": "True if the workbook is running as an add-in. Read/write Boolean."
    },
    "Workbook.IsInplace": {
      "type": "bool",
      "info": "True if the specified workbook is being edited in place. False if the workbook has been opened in Microsoft Excel for editing. Read-only Boolean."
    },
    "Workbook.KeepChangeHistory": {
      "type": "bool",
      "info": "True if change tracking is enabled for the shared workbook. Read/write Boolean."
    },
    "Workbook.ListChangesOnNewSheet": {
      "type": "bool",
      "info": "True if changes to the shared workbook are shown on a separate worksheet. Read/write Boolean."
    },
    "Workbook.Mailer": {
      "type": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition.",
      "info": "You have requested Help for a Visual Basic keyword used only on the Macintosh. For information about this keyword, consult the language reference Help included with Microsoft Office Macintosh Edition."
    },
    "Workbook.Model": {
      "type": "Model",
      "info": "Returns the top-level Model object that is the one data model for the workbook. Read-only."
    },
    "Workbook.MultiUserEditing": {
      "type": "bool",
      "info": "True if the workbook is open as a shared list. Read-only Boolean."
    },
    "Workbook.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "Workbook.Names": {
      "type": "Names",
      "info": "Returns a Names collection that represents all the names in the specified workbook (including all worksheet-specific names). Read-only Names object."
    },
    "Workbook.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Workbook.Password": {
      "type": "str",
      "info": "Returns or sets the password that must be supplied to open the specified workbook. Read/write String."
    },
    "Workbook.PasswordEncryptionAlgorithm": {
      "type": "str",
      "info": "Returns a String indicating the algorithm that Microsoft Excel uses to encrypt passwords for the specified workbook. Read-only."
    },
    "Workbook.PasswordEncryptionFileProperties": {
      "type": "bool",
      "info": "True if Microsoft Excel encrypts file properties for the specified password-protected workbook. Read-only Boolean."
    },
    "Workbook.PasswordEncryptionKeyLength": {
      "type": "int",
      "info": "Returns a Long indicating the key length of the algorithm that Microsoft Excel uses when encrypting passwords for the specified workbook. Read-only."
    },
    "Workbook.PasswordEncryptionProvider": {
      "type": "str",
      "info": "Returns a String specifying the name of the algorithm encryption provider that Microsoft Excel uses when encrypting passwords for the specified workbook. Read-only."
    },
    "Workbook.Path": {
      "type": "str",
      "info": "Returns a String that represents the complete path to the workbook/file that this workbook object represents."
    },
    "Workbook.Permission": {
      "type": "Permission",
      "info": "Returns a Permission object that represents the permission settings in the specified workbook."
    },
    "Workbook.PersonalViewListSettings": {
      "type": "bool",
      "info": "True if filter and sort settings for lists are included in the user's personal view of the shared workbook. Read/write Boolean."
    },
    "Workbook.PersonalViewPrintSettings": {
      "type": "bool",
      "info": "True if print settings are included in the user's personal view of the shared workbook. Read/write Boolean."
    },
    "Workbook.PivotTables": {
      "type": "Returns an object that represents a collection of all the PivotTable reports on a worksheet. Read-only.",
      "info": "Returns an object that represents a collection of all the PivotTable reports on a worksheet. Read-only."
    },
    "Workbook.PrecisionAsDisplayed": {
      "type": "bool",
      "info": "True if calculations in this workbook are done by using only the precision of the numbers as they're displayed. Read/write Boolean."
    },
    "Workbook.ProtectStructure": {
      "type": "bool",
      "info": "True if the order of the sheets in the workbook is protected. Read-only Boolean."
    },
    "Workbook.ProtectWindows": {
      "type": "bool",
      "info": "True if the windows of the workbook are protected. Read-only Boolean."
    },
    "Workbook.PublishObjects": {
      "type": "PublishObjects",
      "info": "Returns the PublishObjects collection. Read-only."
    },
    "Workbook.Queries": {
      "type": "Queries",
      "info": "Returns a Queries collection that represents all the Get & Transform queries in the specified Workbook. Starting from Excel 2016, Get & Transform features enable you to connect, combine, and shape data from a variety of sources to meet your analysis needs. Read-only."
    },
    "Workbook.ReadOnly": {
      "type": "bool",
      "info": "Returns True if the object has been opened as read-only. Read-only Boolean."
    },
    "Workbook.ReadOnlyRecommended": {
      "type": "bool",
      "info": "True if the workbook was saved as read-only recommended. Read-only Boolean."
    },
    "Workbook.RemovePersonalInformation": {
      "type": "bool",
      "info": "True if personal information can be removed from the specified workbook. The default value is False. Read/write Boolean."
    },
    "Workbook.Research": {
      "type": "Research",
      "info": "Returns a Research object that represents the research service for a workbook. Read-only."
    },
    "Workbook.RevisionNumber": {
      "type": "int",
      "info": "Returns the number of times the workbook has been saved while open as a shared list. If the workbook is open in exclusive mode, this property returns 0 (zero). Read-only Long."
    },
    "Workbook.Saved": {
      "type": "bool",
      "info": "True if no changes have been made to the specified workbook since it was last saved. Read/write Boolean."
    },
    "Workbook.SaveLinkValues": {
      "type": "bool",
      "info": "True if Microsoft Excel saves external link values with the workbook. Read/write Boolean."
    },
    "Workbook.SensitivityLabel": {
      "type": "SensitivityLabel",
      "info": "Returns the Microsoft Office SensitivityLabel object from the Workbook."
    },
    "Workbook.ServerPolicy": {
      "type": "ServerPolicy",
      "info": "Returns a ServerPolicy object that represents a policy specified for a workbook stored on a server running SharePoint Server 2007 or later. Read-only."
    },
    "Workbook.ServerViewableItems": {
      "type": "Allows a developer to interact with the list of published objects in the workbook that are shown on the server. Read-only.",
      "info": "Allows a developer to interact with the list of published objects in the workbook that are shown on the server. Read-only."
    },
    "Workbook.SharedWorkspace": {
      "type": "Note\nThis object or member has been deprecated, but it remains part of the object model for backward compatibility. You should not use it in new applications.",
      "info": "Note\nThis object or member has been deprecated, but it remains part of the object model for backward compatibility. You should not use it in new applications."
    },
    "Workbook.Sheets": {
      "type": "Sheets",
      "info": "Returns a Sheets collection that represents all the sheets in the specified workbook. Read-only Sheets object."
    },
    "Workbook.ShowConflictHistory": {
      "type": "bool",
      "info": "True if the Conflict History worksheet is visible in the workbook that's open as a shared list. Read/write Boolean."
    },
    "Workbook.ShowPivotChartActiveFields": {
      "type": "bool",
      "info": "This property controls the visibility of the PivotChart Filter pane. Read/write Boolean."
    },
    "Workbook.ShowPivotTableFieldList": {
      "type": "bool",
      "info": "True (default) if the PivotTable field list can be shown. Read/write Boolean."
    },
    "Workbook.Signatures": {
      "type": "Returns the digital signatures for a workbook. Read-only.",
      "info": "Returns the digital signatures for a workbook. Read-only."
    },
    "Workbook.SlicerCaches": {
      "type": "SlicerCaches",
      "info": "Returns the SlicerCaches object associated with the workbook. Read-only."
    },
    "Workbook.SmartDocument": {
      "type": "SmartDocument",
      "info": "Returns a SmartDocument object that represents the settings for a smart document solution. Read-only."
    },
    "Workbook.Styles": {
      "type": "Styles",
      "info": "Returns a Styles collection that represents all the styles in the specified workbook. Read-only."
    },
    "Workbook.Sync": {
      "type": "Note\nThis object or member has been deprecated, but it remains part of the object model for backward compatibility. You should not use it in new applications.",
      "info": "Note\nThis object or member has been deprecated, but it remains part of the object model for backward compatibility. You should not use it in new applications."
    },
    "Workbook.TableStyles": {
      "type": "TableStyles",
      "info": "Returns a TableStyles collection object for the current workbook that refers to the styles used in the current workbook. Read-only."
    },
    "Workbook.TemplateRemoveExtData": {
      "type": "bool",
      "info": "True if external data references are removed when the workbook is saved as a template. Read/write Boolean."
    },
    "Workbook.Theme": {
      "type": "Returns the theme applied to the current workbook. Read-only.",
      "info": "Returns the theme applied to the current workbook. Read-only."
    },
    "Workbook.UpdateLinks": {
      "type": "XlUpdateLink",
      "info": "Returns or sets an XlUpdateLink constant indicating a workbook's setting for updating embedded OLE links. Read/write."
    },
    "Workbook.UpdateRemoteReferences": {
      "type": "bool",
      "info": "True if Microsoft Excel updates remote references in the workbook. Read/write Boolean."
    },
    "Workbook.UserStatus": {
      "type": "VBA_Variant",
      "info": "Returns a 1-based, two-dimensional array that provides information about each user who has the workbook open as a shared list. Read-only Variant."
    },
    "Workbook.UseWholeCellCriteria": {
      "type": "bool",
      "info": "True if the workbook uses search patterns that match the entire content of a cell. Read-only Boolean."
    },
    "Workbook.UseWildcards": {
      "type": "bool",
      "info": "True if the workbook enables wildcards for character string comparisons and searching. Read-only Boolean."
    },
    "Workbook.VBASigned": {
      "type": "bool",
      "info": "True if the Visual Basic for Applications project for the specified workbook has been digitally signed. Read-only Boolean."
    },
    "Workbook.VBProject": {
      "type": "VBProject",
      "info": "Returns a VBProject object that represents the Visual Basic project in the specified workbook. Read-only."
    },
    "Workbook.WebOptions": {
      "type": "WebOptions",
      "info": "Returns the WebOptions collection, which contains workbook-level attributes used by Microsoft Excel when you save a document as a webpage or open a webpage. Read-only."
    },
    "Workbook.Windows": {
      "type": "Windows",
      "info": "Returns a Windows collection that represents all the windows in the specified workbook. Read-only Windows object."
    },
    "Workbook.Worksheets": {
      "type": "Worksheets",
      "info": "Returns a Worksheets collection that represents all the worksheets in the specified workbook. Read-only Worksheets object."
    },
    "Workbook.WritePassword": {
      "type": "str",
      "info": "Returns or sets a String for the write password of a workbook. Read/write."
    },
    "Workbook.WriteReserved": {
      "type": "bool",
      "info": "True if the workbook is write-reserved. Read-only Boolean."
    },
    "Workbook.WriteReservedBy": {
      "type": "str",
      "info": "Returns the name of the user who currently has write permission for the workbook. Read-only String."
    },
    "Workbook.XmlMaps": {
      "type": "XmlMaps",
      "info": "Returns an XmlMaps collection that represents the schema maps that have been added to the specified workbook. Read-only."
    },
    "Workbook.XmlNamespaces": {
      "type": "XmlNamespaces",
      "info": "Returns an XmlNamespaces collection that represents the XML namespaces contained in the specified workbook. Read-only."
    },
    "AddIns.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "AddIns.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "AddIns.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "AddIns.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "AddIns.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "AddIns2.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "AddIns2.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "AddIns2.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "AddIns2.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "AddIns2.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "AutoCorrect.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "AutoCorrect.AutoExpandListRange": {
      "type": "bool",
      "info": "A Boolean value indicating whether automatic expansion is enabled for lists. When you type in a cell of an empty row or column next to a list, the list will expand to include that row or column if automatic expansion is enabled. Read/write Boolean."
    },
    "AutoCorrect.AutoFillFormulasInLists": {
      "type": "bool",
      "info": "Affects the creation of calculated columns created by automatic fill-down lists. Read/write Boolean."
    },
    "AutoCorrect.CapitalizeNamesOfDays": {
      "type": "bool",
      "info": "True if the first letter of day names is capitalized automatically. Read/write Boolean."
    },
    "AutoCorrect.CorrectCapsLock": {
      "type": "bool",
      "info": "True if Microsoft Excel automatically corrects accidental use of the CapsLock key. Read/write Boolean."
    },
    "AutoCorrect.CorrectSentenceCap": {
      "type": "bool",
      "info": "True if Microsoft Excel automatically corrects sentence (first word) capitalization. Read/write Boolean."
    },
    "AutoCorrect.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "AutoCorrect.DisplayAutoCorrectOptions": {
      "type": "AutoCorrect Options",
      "info": "Allows the user to display or hide the AutoCorrect Options button. The default value is True. Read/write Boolean."
    },
    "AutoCorrect.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "AutoCorrect.ReplacementList": {
      "type": "Returns the array of AutoCorrect replacements.",
      "info": "Returns the array of AutoCorrect replacements."
    },
    "AutoCorrect.ReplaceText": {
      "type": "bool",
      "info": "True if text in the list of AutoCorrect replacements is replaced automatically. Read/write Boolean."
    },
    "AutoCorrect.TwoInitialCapitals": {
      "type": "bool",
      "info": "True if words that begin with two capital letters are corrected automatically. Read/write Boolean."
    },
    "AutoRecover.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "AutoRecover.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "AutoRecover.Enabled": {
      "type": "bool",
      "info": "True if the object is enabled. Read/write Boolean."
    },
    "AutoRecover.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "AutoRecover.Path": {
      "type": "str",
      "info": "Returns or sets a String value that represents the complete path to where Microsoft Excel will store the AutoRecover temporary files."
    },
    "AutoRecover.Time": {
      "type": "AutoRecover",
      "info": "Sets or returns the time interval for the AutoRecover object. Permissible values are integers from 1 to 120 minutes. The default value is 10 minutes. Read/write Long."
    },
    "Sheets.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Sheets.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Sheets.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Sheets.HPageBreaks": {
      "type": "HPageBreaks",
      "info": "Returns an HPageBreaks collection that represents the horizontal page breaks on the sheet. Read-only."
    },
    "Sheets.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Sheets.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Sheets.Visible": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that determines whether the object is visible."
    },
    "Sheets.VPageBreaks": {
      "type": "VPageBreaks",
      "info": "Returns a VPageBreaks collection that represents the vertical page breaks on the sheet. Read-only."
    },
    "DefaultWebOptions.AllowPNG": {
      "type": "bool",
      "info": "True if PNG (Portable Network Graphics) is allowed as an image format when you save documents as a webpage. False if PNG is not allowed as an output format. The default value is False. Read/write Boolean."
    },
    "DefaultWebOptions.AlwaysSaveInDefaultEncoding": {
      "type": "bool",
      "info": "True if the default encoding is used when you save a webpage or plain text document, independent of the file's original encoding when opened. False if the original encoding of the file is used. The default value is False. Read/write Boolean."
    },
    "DefaultWebOptions.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "DefaultWebOptions.CheckIfOfficeIsHTMLEditor": {
      "type": "bool",
      "info": "True if Microsoft Excel checks to see whether an Office application is the default HTML editor when you start Excel. False if Excel does not perform this check. The default value is True. Read/write Boolean."
    },
    "DefaultWebOptions.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "DefaultWebOptions.DownloadComponents": {
      "type": "bool",
      "info": "True if the necessary Microsoft Office Web components are downloaded when you view the saved document in a web browser, but only if the components are not already installed. False if the components are not downloaded. The default value is False. Read/write Boolean."
    },
    "DefaultWebOptions.Encoding": {
      "type": "MsoEncoding",
      "info": "Returns or sets the document encoding (code page or character set) to be used by the web browser when you view the saved document. The default is the system code page. Read/write MsoEncoding."
    },
    "DefaultWebOptions.FolderSuffix": {
      "type": "UseLongFileNames",
      "info": "Returns the folder suffix that Microsoft Excel uses when you save a document as a webpage, use long file names, and choose to save supporting files in a separate folder (that is, if the UseLongFileNames and OrganizeInFolder properties are set to True). Read-only String."
    },
    "DefaultWebOptions.Fonts": {
      "type": "WebPageFonts",
      "info": "Returns the WebPageFonts collection representing the set of fonts Microsoft Excel uses when you open a webpage in Excel and there is either no font information specified on the webpage, or the current default font can't display the character set on the webpage. Read-only."
    },
    "DefaultWebOptions.LoadPictures": {
      "type": "bool",
      "info": "True if images are loaded when you open a document in Microsoft Excel, usually when the images and document were not created in Microsoft Excel. False if the images are not loaded. The default value is True. Read/write Boolean."
    },
    "DefaultWebOptions.LocationOfComponents": {
      "type": "str",
      "info": "Returns or sets the central URL (on the intranet or web) or path (local or network) to the location from which authorized users can download Microsoft Office Web components when viewing your saved document. The default value is the local or network installation path for Microsoft Office. Read/write String."
    },
    "DefaultWebOptions.OrganizeInFolder": {
      "type": "bool",
      "info": "True if all supporting files, such as background textures and graphics, are organized in a separate folder when you save the specified document as a webpage. False if supporting files are saved in the same folder as the webpage. The default value is True. Read/write Boolean."
    },
    "DefaultWebOptions.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "DefaultWebOptions.PixelsPerInch": {
      "type": "int",
      "info": "Returns or sets the density (pixels per inch) of graphics images and table cells on a webpage. The range of settings is usually from 19 to 480, and common settings for popular screen sizes are 72, 96, and 120. The default setting is 96. Read/write Long."
    },
    "DefaultWebOptions.RelyOnCSS": {
      "type": "OrganizeInFolder",
      "info": "True if cascading style sheets (CSS) are used for font formatting when you view a saved document in a web browser. Microsoft Excel creates a cascading style sheet file and saves it either to the specified folder or to the same folder as your webpage, depending on the value of the OrganizeInFolder property. False if HTML <FONT> tags and cascading style sheets are used. The default value is True. Read/write Boolean."
    },
    "DefaultWebOptions.RelyOnVML": {
      "type": "bool",
      "info": "True if image files are not generated from drawing objects when you save a document as a webpage. False if images are generated. The default value is False. Read/write Boolean."
    },
    "DefaultWebOptions.SaveHiddenData": {
      "type": "bool",
      "info": "True if data outside of the specified range is saved when you save the document as a webpage. This data may be necessary for maintaining formulas. False if data outside of the specified range is not saved with the webpage. The default value is True. Read/write Boolean."
    },
    "DefaultWebOptions.SaveNewWebPagesAsWebArchives": {
      "type": "bool",
      "info": "True if new webpages can be saved as web archives. Read/write Boolean."
    },
    "DefaultWebOptions.ScreenSize": {
      "type": "MsoScreenSize",
      "info": "Returns or sets the ideal minimum screen size (width by height, in pixels) that you should use when viewing the saved document in a web browser. Can be one of the MsoScreenSize constants. The default constant is msoScreenSize800x600. Read/write MsoScreenSize."
    },
    "DefaultWebOptions.TargetBrowser": {
      "type": "MsoTargetBrowser",
      "info": "Returns or sets an MsoTargetBrowser constant indicating the browser version. Read/write."
    },
    "DefaultWebOptions.UpdateLinksOnSave": {
      "type": "bool",
      "info": "True if hyperlinks and paths to all supporting files are automatically updated before you save the document as a webpage, ensuring that the links are up to date at the time the document is saved. False if the links are not updated. The default value is True. Read/write Boolean."
    },
    "DefaultWebOptions.UseLongFileNames": {
      "type": "bool",
      "info": "True if long file names are used when you save the document as a webpage. False if long file names are not used and the DOS file name format (8.3) is used. The default value is True. Read/write Boolean."
    },
    "Dialogs.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Dialogs.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Dialogs.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Dialogs.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Dialogs.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ErrorCheckingOptions.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ErrorCheckingOptions.BackgroundChecking": {
      "type": "bool",
      "info": "Alerts the user for all cells that violate enabled error-checking rules. When this property is set to True (default), the AutoCorrect Options button appears next to all cells that violate enabled errors. False disables background checking for errors. Read/write Boolean."
    },
    "ErrorCheckingOptions.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ErrorCheckingOptions.EmptyCellReferences": {
      "type": "bool",
      "info": "When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, selected cells containing formulas that refer to empty cells. False disables empty cell reference checking. Read/write Boolean."
    },
    "ErrorCheckingOptions.EvaluateToError": {
      "type": "bool",
      "info": "When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, selected cells that contain formulas evaluating to an error. False disables error checking for cells that evaluate to an error value. Read/write Boolean."
    },
    "ErrorCheckingOptions.InconsistentFormula": {
      "type": "bool",
      "info": "When set to True (default), Microsoft Excel identifies cells containing an inconsistent formula in a region. False disables the inconsistent formula check. Read/write Boolean."
    },
    "ErrorCheckingOptions.InconsistentTableFormula": {
      "type": "bool",
      "info": "Returns True if the table formula is inconsistent. Read/write Boolean."
    },
    "ErrorCheckingOptions.IndicatorColorIndex": {
      "type": "XlColorIndex",
      "info": "Returns or sets the color of the indicator for error checking options. Read/write XlColorIndex."
    },
    "ErrorCheckingOptions.ListDataValidation": {
      "type": "bool",
      "info": "A Boolean value that is True if data validation is enabled in a list. Read/write Boolean."
    },
    "ErrorCheckingOptions.NumberAsText": {
      "type": "bool",
      "info": "When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, selected cells that contain numbers written as text. False disables error checking for numbers written as text. Read/write Boolean."
    },
    "ErrorCheckingOptions.OmittedCells": {
      "type": "bool",
      "info": "When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, the selected cells that contain formulas referring to a range that omits adjacent cells that could be included. False disables error checking for omitted cells. Read/write Boolean."
    },
    "ErrorCheckingOptions.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ErrorCheckingOptions.TextDate": {
      "type": "bool",
      "info": "When set to True (default), Microsoft Excel identifies, with an AutoCorrect Options button, cells that contain a text date with a two-digit year. False disables error checking for cells containing a text date with a two-digit year. Read/write Boolean."
    },
    "ErrorCheckingOptions.UnlockedFormulaCells": {
      "type": "bool",
      "info": "When set to True (default), Microsoft Excel identifies selected cells that are unlocked and contain a formula. False disables error checking for unlocked cells that contain formulas. Read/write Boolean."
    },
    "FileExportConverters.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "FileExportConverters.Count": {
      "type": "int",
      "info": "Returns a Long that represents the number of file converters in the collection. Read-only."
    },
    "FileExportConverters.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "FileExportConverters.Item": {
      "type": "FileExportConverter",
      "info": "Returns an individual FileExportConverter object from a collection."
    },
    "FileExportConverters.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified FileExportConverters object. Read-only."
    },
    "MultiThreadedCalculation.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "MultiThreadedCalculation.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "MultiThreadedCalculation.Enabled": {
      "type": "Enabled",
      "info": "The Enabled property allows MultiThreadedCalculation objects to be enabled or disabled at run time. Read/write."
    },
    "MultiThreadedCalculation.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "MultiThreadedCalculation.ThreadCount": {
      "type": "MultiThreadedCalculation",
      "info": "Gets the total count of the process threads that are a part of the specified MultiThreadedCalculation object."
    },
    "MultiThreadedCalculation.ThreadMode": {
      "type": "XlThreadMode",
      "info": "Returns or sets the thread mode for the specified MultiThreadedCalculation object. Read/write XlThreadMode."
    },
    "Names.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Names.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Names.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Names.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ODBCErrors.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ODBCErrors.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "ODBCErrors.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ODBCErrors.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "OLEDBErrors.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "OLEDBErrors.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "OLEDBErrors.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "OLEDBErrors.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ProtectedViewWindows.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ProtectedViewWindows.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "ProtectedViewWindows.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ProtectedViewWindows.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "ProtectedViewWindows.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "QuickAnalysis.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "QuickAnalysis.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "QuickAnalysis.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified QuickAnalysis object. Read-only."
    },
    "RecentFiles.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "RecentFiles.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "RecentFiles.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "RecentFiles.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "RecentFiles.Maximum": {
      "type": "int",
      "info": "Returns or sets the maximum number of files in the list of recently used files. Can be a value from 0 (zero) through 50. Read/write Long."
    },
    "RecentFiles.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "RTD.ThrottleInterval": {
      "type": "int",
      "info": "Returns or sets a Long indicating the time interval between updates. Read/write."
    },
    "Speech.Direction": {
      "type": "XlSpeakDirection",
      "info": "Returns or sets the order in which the cells will be spoken. The value of the Direction property is an XlSpeakDirection constant. Read/write."
    },
    "Speech.SpeakCellOnEnter": {
      "type": "SpeakCellOnEnter",
      "info": "Microsoft Excel supports a mode where the active cell is spoken when the Enter key is pressed or when the active cell is finished being edited. Setting the SpeakCellOnEnter property to True turns this mode on. False turns this mode off. Read/write Boolean."
    },
    "SpellingOptions.ArabicModes": {
      "type": "XlArabicModes",
      "info": "Returns or sets the mode for the Arabic spelling checker. Read/write XlArabicModes."
    },
    "SpellingOptions.ArabicStrictAlefHamza": {
      "type": "Returns or sets whether the spelling checker uses rules regarding Arabic words beginning with an alef hamza. Read/write.",
      "info": "Returns or sets whether the spelling checker uses rules regarding Arabic words beginning with an alef hamza. Read/write."
    },
    "SpellingOptions.ArabicStrictFinalYaa": {
      "type": "Returns or sets whether the spelling checker uses rules regarding Arabic words ending with the letter yaa. Read/write.",
      "info": "Returns or sets whether the spelling checker uses rules regarding Arabic words ending with the letter yaa. Read/write."
    },
    "SpellingOptions.ArabicStrictTaaMarboota": {
      "type": "Returns or sets whether the spelling checker uses rules to flag Arabic words ending with haa instead of taa marboota. Read/write.",
      "info": "Returns or sets whether the spelling checker uses rules to flag Arabic words ending with haa instead of taa marboota. Read/write."
    },
    "SpellingOptions.BrazilReform": {
      "type": "Returns or sets the mode for checking the spelling of Brazilian Portuguese. Read/write.",
      "info": "Returns or sets the mode for checking the spelling of Brazilian Portuguese. Read/write."
    },
    "SpellingOptions.DictLang": {
      "type": "int",
      "info": "Selects the dictionary language used when Microsoft Excel performs spelling checks. Read/write Long."
    },
    "SpellingOptions.GermanPostReform": {
      "type": "bool",
      "info": "True to check the spelling of words by using the German post-reform rules. False cancels this feature. Read/write Boolean."
    },
    "SpellingOptions.HebrewModes": {
      "type": "XlHebrewModes",
      "info": "Returns or sets the mode for the Hebrew spelling checker. Read/write XlHebrewModes."
    },
    "SpellingOptions.IgnoreCaps": {
      "type": "bool",
      "info": "False instructs Microsoft Excel to check for uppercase words; True instructs Excel to ignore words in uppercase when using the spelling checker. Read/write Boolean."
    },
    "SpellingOptions.IgnoreFileNames": {
      "type": "bool",
      "info": "False instructs Microsoft Excel to check for Internet and file addresses; True instructs Excel to ignore Internet and file addresses when using the spell checker. Read/write Boolean."
    },
    "SpellingOptions.IgnoreMixedDigits": {
      "type": "bool",
      "info": "False instructs Microsoft Excel to check for mixed digits; True instructs Excel to ignore mixed digits when checking spelling. Read/write Boolean."
    },
    "SpellingOptions.KoreanCombineAux": {
      "type": "bool",
      "info": "When set to True, Microsoft Excel combines Korean auxiliary verbs and adjectives when spelling is checked. Read/write Boolean."
    },
    "SpellingOptions.KoreanProcessCompound": {
      "type": "bool",
      "info": "When set to True, this enables Microsoft Excel to process Korean compound nouns when using the spelling checker. Read/write Boolean."
    },
    "SpellingOptions.KoreanUseAutoChangeList": {
      "type": "bool",
      "info": "When set to True, this enables Microsoft Excel to use the auto-change list for Korean words when using the spelling checker. Read/write Boolean."
    },
    "SpellingOptions.PortugalReform": {
      "type": "Returns or sets the mode for checking the spelling of European Portuguese. Read/write.",
      "info": "Returns or sets the mode for checking the spelling of European Portuguese. Read/write."
    },
    "SpellingOptions.RussianStrictE": {
      "type": "Returns or sets whether the spelling checker uses rules regarding Russian words containing the character ë. Read/write.",
      "info": "Returns or sets whether the spelling checker uses rules regarding Russian words containing the character ë. Read/write."
    },
    "SpellingOptions.SpanishModes": {
      "type": "Returns or sets the mode for checking the spelling of Spanish. Read/write.",
      "info": "Returns or sets the mode for checking the spelling of Spanish. Read/write."
    },
    "SpellingOptions.SuggestMainOnly": {
      "type": "bool",
      "info": "When set to True, instructs Microsoft Excel to suggest words from only the main dictionary when using the spelling checker. False removes the limits of suggesting words from only the main dictionary when using the spelling checker. Read/write Boolean."
    },
    "SpellingOptions.UserDict": {
      "type": "str",
      "info": "Instructs Microsoft Excel to create a custom dictionary to which new words can be added when performing spelling checks on a worksheet. Read/write String."
    },
    "UsedObjects.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "UsedObjects.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "UsedObjects.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "UsedObjects.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "UsedObjects.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Watches.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Watches.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Watches.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Watches.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Watches.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Windows.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Windows.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Windows.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Windows.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Windows.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Windows.SyncScrollingSideBySide": {
      "type": "bool",
      "info": "True enables scrolling the contents of windows at the same time when documents are being compared side by side. False disables scrolling the windows at the same time."
    },
    "Workbooks.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Workbooks.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Workbooks.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Workbooks.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Workbooks.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "WorksheetFunction.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "WorksheetFunction.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "WorksheetFunction.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Areas.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Areas.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Areas.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Areas.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Areas.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Borders.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Borders.Color": {
      "type": "RGB",
      "info": "Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant."
    },
    "Borders.ColorIndex": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the color of all four borders."
    },
    "Borders.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Borders.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Borders.Item": {
      "type": "Border",
      "info": "Returns a Border object that represents one of the borders of either a range of cells or a style."
    },
    "Borders.LineStyle": {
      "type": "XlLineStyle",
      "info": "Returns or sets the line style for the border. Read/write XlLineStyle, xlGray25, xlGray50, xlGray75, or xlAutomatic."
    },
    "Borders.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Borders.ThemeColor": {
      "type": "VBA_Variant",
      "info": "Returns or sets the theme color in the applied color scheme that is associated with the specified object. Read/write Variant."
    },
    "Borders.TintAndShade": {
      "type": "float",
      "info": "Returns or sets a Single that lightens or darkens a color."
    },
    "Borders.Value": {
      "type": "Borders.LineStyle",
      "info": "Synonym for Borders.LineStyle."
    },
    "Borders.Weight": {
      "type": "XlBorderWeight",
      "info": "Returns or sets an XlBorderWeight value that represents the weight of the border."
    },
    "Characters.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Characters.Caption": {
      "type": "str",
      "info": "Returns a String value that represents the text of this range of characters."
    },
    "Characters.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Characters.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Characters.Font": {
      "type": "Font",
      "info": "Returns a Font object that represents the font of the specified object."
    },
    "Characters.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Characters.PhoneticCharacters": {
      "type": "Characters",
      "info": "Returns or sets the phonetic text in the specified Characters object. Read/write String."
    },
    "Characters.Text": {
      "type": "str",
      "info": "Returns or sets the text for the specified object. Read/write String."
    },
    "Comment.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Comment.Author": {
      "type": "str",
      "info": "Returns the author of the comment. Read-only String."
    },
    "Comment.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Comment.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Comment.Shape": {
      "type": "Shape",
      "info": "Returns a Shape object that represents the shape attached to the specified comment."
    },
    "Comment.Visible": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines whether the object is visible. Read/write."
    },
    "CommentThreaded.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CommentThreaded.Author": {
      "type": "Author",
      "info": "Returns the Author object that represents the author of the specified CommentThreaded object. Read-only."
    },
    "CommentThreaded.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CommentThreaded.Date": {
      "type": "String-Variant",
      "info": "Returns a date String-Variant that represents the date and time that a threaded comment was added in local time. Read-only."
    },
    "CommentThreaded.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CommentThreaded.Replies": {
      "type": "CommentsThreaded",
      "info": "If this comment is a parent, returns a CommentsThreaded collection of CommentThreaded objects that are children/replies of the specified comment (if any exist). The replies are sorted by time stamp."
    },
    "DisplayFormat.AddIndent": {
      "type": "Range",
      "info": "Returns a value that indicates if Microsoft Excel automatically indents text of the associated Range object when the text alignment in a cell is set to equal distribution (either horizontally or vertically), as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "DisplayFormat.Borders": {
      "type": "Borders",
      "info": "Returns a Borders object that represents the borders of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.Characters": {
      "type": "Characters",
      "info": "Returns a Characters object that represents a range of characters within the text of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "DisplayFormat.Font": {
      "type": "Font",
      "info": "Returns a Font object that represents the font of the associated Range as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.FormulaHidden": {
      "type": "Range",
      "info": "Returns a value that indicates if the formula of the associated Range object is hidden when the worksheet is protected as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.HorizontalAlignment": {
      "type": "Range",
      "info": "Returns a value that represents the horizontal alignment of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.IndentLevel": {
      "type": "Range",
      "info": "Returns a value that represents the indent level of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.Interior": {
      "type": "Interior",
      "info": "Returns an Interior object that represents the interior of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.Locked": {
      "type": "Range",
      "info": "Returns a value that indicates if the associated Range object is locked as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.MergeCells": {
      "type": "Range",
      "info": "Returns a value that indicates if the associated Range object contains merged cells as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.NumberFormat": {
      "type": "Range",
      "info": "Returns a value that represents the format code of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.NumberFormatLocal": {
      "type": "Range",
      "info": "Returns a value that represents the format code of the associated Range object as a string in the language of the user as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.Orientation": {
      "type": "Range",
      "info": "Returns a value that represents the text orientation of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "DisplayFormat.ReadingOrder": {
      "type": "Range",
      "info": "Returns the reading order of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.ShrinkToFit": {
      "type": "Range",
      "info": "Returns a value that indicates if Microsoft Excel automatically shrinks text to fit in the available column width of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.Style": {
      "type": "Style",
      "info": "Returns a value, containing a Style object, that represents the style of the associated Range object as it is displayed in the current user interface."
    },
    "DisplayFormat.VerticalAlignment": {
      "type": "Range",
      "info": "Returns a value that represents the vertical alignment of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "DisplayFormat.WrapText": {
      "type": "Range",
      "info": "Returns a value that indicates if Microsoft Excel wraps the text of the associated Range object as it is displayed in the current user interface. Read-only."
    },
    "Font.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Font.Background": {
      "type": "XlBackground",
      "info": "Returns or sets the type of background for text used in charts. Read/write Variant, which is set to one of the constants of XlBackground."
    },
    "Font.Bold": {
      "type": "bool",
      "info": "True if the font is bold. Read/write Variant."
    },
    "Font.Color": {
      "type": "RGB",
      "info": "Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant."
    },
    "Font.ColorIndex": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the color of the font."
    },
    "Font.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Font.FontStyle": {
      "type": "str",
      "info": "Returns or sets the font style. Read/write String."
    },
    "Font.Italic": {
      "type": "bool",
      "info": "True if the font style is italic. Read/write Boolean."
    },
    "Font.Name": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the name of the object."
    },
    "Font.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Font.Size": {
      "type": "VBA_Variant",
      "info": "Returns or sets the size of the font. Read/write Variant."
    },
    "Font.Strikethrough": {
      "type": "bool",
      "info": "True if the font is struck through with a horizontal line. Read/write Boolean."
    },
    "Font.Subscript": {
      "type": "bool",
      "info": "True if the font is formatted as subscript. False by default. Read/write Variant."
    },
    "Font.Superscript": {
      "type": "bool",
      "info": "True if the font is formatted as superscript; False by default. Read/write Variant."
    },
    "Font.ThemeColor": {
      "type": "VBA_Variant",
      "info": "Returns or sets the theme color in the applied color scheme that is associated with the specified object. Read/write Variant."
    },
    "Font.ThemeFont": {
      "type": "XlThemeFont",
      "info": "Returns or sets the theme font in the applied font scheme that is associated with the specified object. Read/write XlThemeFont."
    },
    "Font.TintAndShade": {
      "type": "float",
      "info": "Returns or sets a Single that lightens or darkens a color."
    },
    "Font.Underline": {
      "type": "VBA_Variant",
      "info": "Returns or sets the type of underline applied to the font. Read/write Variant."
    },
    "FormatConditions.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "FormatConditions.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "FormatConditions.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "FormatConditions.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Hyperlinks.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Hyperlinks.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Hyperlinks.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Hyperlinks.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Hyperlinks.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Interior.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Interior.Color": {
      "type": "RGB",
      "info": "Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant."
    },
    "Interior.ColorIndex": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the color of the interior."
    },
    "Interior.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Interior.Gradient": {
      "type": "Gradient",
      "info": "Returns or sets the Gradient property of an Interior object of a selection. Read-only."
    },
    "Interior.InvertIfNegative": {
      "type": "bool",
      "info": "True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number. Read/write Variant."
    },
    "Interior.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Interior.Pattern": {
      "type": "XlPattern",
      "info": "Returns or sets a Variant value, containing an XlPattern constant, that represents the interior pattern."
    },
    "Interior.PatternColor": {
      "type": "RGB",
      "info": "Returns or sets the color of the interior pattern as an RGB value. Read/write Variant."
    },
    "Interior.PatternColorIndex": {
      "type": "XlColorIndex",
      "info": "Returns or sets the color of the interior pattern as an index into the current color palette, or as one of the following XlColorIndex constants: xlColorIndexAutomatic or xlColorIndexNone. Read/write Long."
    },
    "Interior.PatternThemeColor": {
      "type": "Interior",
      "info": "Returns or sets a theme color pattern for an Interior object. Read/write Variant."
    },
    "Interior.PatternTintAndShade": {
      "type": "Interior",
      "info": "Returns or sets a tint and shade pattern for an Interior object. Read/write Variant."
    },
    "Interior.ThemeColor": {
      "type": "XlThemeColor",
      "info": "Returns or sets a Variant value, containing an XlThemeColor constant, that represents the color. Read/write Variant."
    },
    "Interior.TintAndShade": {
      "type": "float",
      "info": "Returns or sets a Single that lightens or darkens a color."
    },
    "ListObject.Active": {
      "type": "bool",
      "info": "Returns a Boolean value indicating whether a ListObject object on a worksheet is active—that is, whether the active cell is inside the range of the ListObject object. Read-only Boolean."
    },
    "ListObject.AlternativeText": {
      "type": "Returns or sets the descriptive (alternative) text string for the specified table. Read/write.",
      "info": "Returns or sets the descriptive (alternative) text string for the specified table. Read/write."
    },
    "ListObject.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ListObject.AutoFilter": {
      "type": "Filters a table using the AutoFilter feature. Read-only.",
      "info": "Filters a table using the AutoFilter feature. Read-only."
    },
    "ListObject.Comment": {
      "type": "str",
      "info": "Returns or sets the comment associated with the list object. Read/write String."
    },
    "ListObject.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ListObject.DataBodyRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range of values, excluding the header row, in a table. Read-only."
    },
    "ListObject.DisplayName": {
      "type": "ListObject",
      "info": "Returns or sets the display name for the specified ListObject object. Read/write String."
    },
    "ListObject.DisplayRightToLeft": {
      "type": "bool",
      "info": "True if the specified ListObject is displayed from right to left instead of from left to right. False if the object is displayed from left to right. Read-only Boolean."
    },
    "ListObject.HeaderRowRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range of the header row for a list. Read-only Range."
    },
    "ListObject.InsertRowRange": {
      "type": "Range",
      "info": "Returns a Range object representing the Insert row, if any, of a specified ListObject object. Read-only Range."
    },
    "ListObject.ListColumns": {
      "type": "ListColumns",
      "info": "Returns a ListColumns collection that represents all the columns in a ListObject object. Read-only."
    },
    "ListObject.ListRows": {
      "type": "ListRows",
      "info": "Returns a ListRows object that represents all the rows of data in the ListObject object. Read-only."
    },
    "ListObject.Name": {
      "type": "str",
      "info": "Returns or sets a String value that represents the name of the ListObject object."
    },
    "ListObject.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ListObject.QueryTable": {
      "type": "QueryTable",
      "info": "Returns the QueryTable object that provides a link for the ListObject object to the list server. Read-only."
    },
    "ListObject.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents the range to which the specified list object in the list applies."
    },
    "ListObject.SharePointURL": {
      "type": "str",
      "info": "Returns a String representing the URL of the SharePoint list for a given ListObject object. Read-only String."
    },
    "ListObject.ShowAutoFilter": {
      "type": "bool",
      "info": "Returns Boolean to indicate whether the AutoFilter will be displayed. Read/write Boolean."
    },
    "ListObject.ShowAutoFilterDropDown": {
      "type": "bool",
      "info": "True when the AutoFilter drop-down for the ListObject object is displayed. Read/write Boolean."
    },
    "ListObject.ShowHeaders": {
      "type": "ListObject",
      "info": "Returns or sets if the header information should be displayed for the specified ListObject object. Read/write Boolean."
    },
    "ListObject.ShowTableStyleColumnStripes": {
      "type": "ListObject",
      "info": "Returns or sets if the Column Stripes table style is used for the specified ListObject object. Read/write Boolean."
    },
    "ListObject.ShowTableStyleFirstColumn": {
      "type": "ListObject",
      "info": "Returns or sets if the first column is formatted for the specified ListObject object. Read/write Boolean."
    },
    "ListObject.ShowTableStyleLastColumn": {
      "type": "ListObject",
      "info": "Returns or sets if the last column is displayed for the specified ListObject object. Read/write Boolean."
    },
    "ListObject.ShowTableStyleRowStripes": {
      "type": "ListObject",
      "info": "Returns or sets if the Row Stripes table style is used for the specified ListObject object. Read/write Boolean."
    },
    "ListObject.ShowTotals": {
      "type": "bool",
      "info": "Gets or sets a Boolean to indicate whether the Total row is visible. Read/write Boolean."
    },
    "ListObject.Slicers": {
      "type": "ListObject",
      "info": "Returns a list of the table slicers associated with a ListObject. Read-only."
    },
    "ListObject.Sort": {
      "type": "ListObject",
      "info": "Gets or sets the sort column or columns and sort order for the ListObject collection."
    },
    "ListObject.SourceType": {
      "type": "XlListObjectSourceType",
      "info": "Returns an XlListObjectSourceType value that represents the current source of the list."
    },
    "ListObject.Summary": {
      "type": "Returns or sets the description associated with the alternative text string for the specified table. Read/write.",
      "info": "Returns or sets the description associated with the alternative text string for the specified table. Read/write."
    },
    "ListObject.TableObject": {
      "type": "TableObject",
      "info": "Returns a TableObject object. Read-only."
    },
    "ListObject.TableStyle": {
      "type": "ListObject",
      "info": "Gets or sets the table style for the specified ListObject object. Read/write Variant."
    },
    "ListObject.TotalsRowRange": {
      "type": "Range",
      "info": "Returns a Range object representing the Total row, if any, from a specified ListObject object. Read-only."
    },
    "ListObject.XmlMap": {
      "type": "XmlMap",
      "info": "Returns an XmlMap object that represents the schema map used for the specified table. Read-only."
    },
    "PivotTable.ActiveFilters": {
      "type": "Indicates the currently active filter in the specified PivotTable. Read-only.",
      "info": "Indicates the currently active filter in the specified PivotTable. Read-only."
    },
    "PivotTable.Allocation": {
      "type": "UPDATE CUBE",
      "info": "Returns or sets whether to run an UPDATE CUBE statement for each cell that is edited, or only when the user chooses to calculate changes when performing what-if analysis on a PivotTable based on an OLAP data source. Read/write."
    },
    "PivotTable.AllocationMethod": {
      "type": "Returns or sets the method to use to allocate values when performing what-if analysis on a PivotTable report based on an OLAP data source. Read/write.",
      "info": "Returns or sets the method to use to allocate values when performing what-if analysis on a PivotTable report based on an OLAP data source. Read/write."
    },
    "PivotTable.AllocationValue": {
      "type": "Returns or sets the value to allocate when performing what-if analysis on a PivotTable report based on an OLAP data source. Read/write.",
      "info": "Returns or sets the value to allocate when performing what-if analysis on a PivotTable report based on an OLAP data source. Read/write."
    },
    "PivotTable.AllocationWeightExpression": {
      "type": "Returns or sets the MDX weight expression to use when performing what-if analysis on a PivotTable report based on an OLAP data source. Read/write.",
      "info": "Returns or sets the MDX weight expression to use when performing what-if analysis on a PivotTable report based on an OLAP data source. Read/write."
    },
    "PivotTable.AllowMultipleFilters": {
      "type": "bool",
      "info": "Sets or retrieves a value that indicates whether a PivotField can have multiple filters applied to it at the same time. Read/write Boolean."
    },
    "PivotTable.AlternativeText": {
      "type": "Returns or sets the descriptive (alternative) text string for the specified PivotTable. Read/write.",
      "info": "Returns or sets the descriptive (alternative) text string for the specified PivotTable. Read/write."
    },
    "PivotTable.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotTable.CacheIndex": {
      "type": "int",
      "info": "Returns or sets the index number of the PivotTable cache. Read/write Long."
    },
    "PivotTable.CalculatedMembers": {
      "type": "CalculatedMembers",
      "info": "Returns a CalculatedMembers collection representing all the calculated members and calculated measures for an OLAP PivotTable."
    },
    "PivotTable.CalculatedMembersInFilters": {
      "type": "Returns or sets whether to evaluate calculated members from OLAP servers in filters. Read/write.",
      "info": "Returns or sets whether to evaluate calculated members from OLAP servers in filters. Read/write."
    },
    "PivotTable.ChangeList": {
      "type": "PivotTableChangeList",
      "info": "Returns the PivotTableChangeList collection that represents the list of changes that have been made to the specified PivotTable based on an OLAP data source. Read-only."
    },
    "PivotTable.ColumnFields": {
      "type": "PivotField",
      "info": "Returns an object that represents either a single PivotTable field (a PivotField object) or a collection of all the fields (a PivotFields object) that are currently shown as column fields. Read-only."
    },
    "PivotTable.ColumnGrand": {
      "type": "bool",
      "info": "True if the PivotTable report shows grand totals for columns. Read/write Boolean."
    },
    "PivotTable.ColumnRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range that contains the column area in the PivotTable report. Read-only."
    },
    "PivotTable.CompactLayoutColumnHeader": {
      "type": "str",
      "info": "Specifies the caption that is displayed in the column header of a PivotTable when in compact row layout form. Read/write String."
    },
    "PivotTable.CompactLayoutRowHeader": {
      "type": "str",
      "info": "Specifies the caption that is displayed in the row header of a PivotTable when in compact row layout form. Read/write String."
    },
    "PivotTable.CompactRowIndent": {
      "type": "Returns or sets the indent increment for PivotItems when compact row layout form is turned on. Read/write.",
      "info": "Returns or sets the indent increment for PivotItems when compact row layout form is turned on. Read/write."
    },
    "PivotTable.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotTable.CubeFields": {
      "type": "CubeFields",
      "info": "Returns the CubeFields collection. Each CubeField object contains the properties of the cube field element. Read-only."
    },
    "PivotTable.DataBodyRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range of values in a PivotTable. Read-only."
    },
    "PivotTable.DataFields": {
      "type": "PivotField",
      "info": "Returns an object that represents either a single PivotTable field (a PivotField object) or a collection of all the fields (a PivotFields object) that are currently shown as data fields. Read-only."
    },
    "PivotTable.DataLabelRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range that contains the labels for the data fields in the PivotTable report. Read-only."
    },
    "PivotTable.DataPivotField": {
      "type": "PivotField",
      "info": "Returns a PivotField object that represents all the data fields in a PivotTable. Read-only."
    },
    "PivotTable.DisplayContextTooltips": {
      "type": "bool",
      "info": "Controls whether tooltips are displayed for PivotTable cells. Read/write Boolean."
    },
    "PivotTable.DisplayEmptyColumn": {
      "type": "bool",
      "info": "Returns True when the non-empty MDX keyword is included in the query to the OLAP provider for the value axis. The OLAP provider will not return empty columns in the result set. Returns False when the non-empty keyword is omitted. Read/write Boolean."
    },
    "PivotTable.DisplayEmptyRow": {
      "type": "bool",
      "info": "Returns True when the non-empty MDX keyword is included in the query to the OLAP provider for the category axis. The OLAP provider will not return empty rows in the result set. Returns False when the non-empty keyword is omitted. Read/write Boolean."
    },
    "PivotTable.DisplayErrorString": {
      "type": "bool",
      "info": "True if the PivotTable report displays a custom error string in cells that contain errors. The default value is False. Read/write Boolean."
    },
    "PivotTable.DisplayFieldCaptions": {
      "type": "Controls whether filter buttons and PivotField captions for rows and columns are displayed in the grid. Read/write.",
      "info": "Controls whether filter buttons and PivotField captions for rows and columns are displayed in the grid. Read/write."
    },
    "PivotTable.DisplayImmediateItems": {
      "type": "bool",
      "info": "Returns or sets a Boolean that indicates whether items in the row and column areas are visible when the data area of the PivotTable is empty. Set this property to False to hide the items in the row and column areas when the data area of the PivotTable is empty. The default value is True."
    },
    "PivotTable.DisplayMemberPropertyTooltips": {
      "type": "bool",
      "info": "Controls whether to display member properties in tooltips. Read/write Boolean."
    },
    "PivotTable.DisplayNullString": {
      "type": "bool",
      "info": "True if the PivotTable report displays a custom string in cells that contain null values. The default value is True. Read/write Boolean."
    },
    "PivotTable.EnableDataValueEditing": {
      "type": "bool",
      "info": "True to disable the alert for when the user overwrites values in the data area of the PivotTable. True also allows the user to change data values that previously could not be changed. The default value is False. Read/write Boolean."
    },
    "PivotTable.EnableDrilldown": {
      "type": "bool",
      "info": "True if drilldown is enabled. The default value is True. Read/write Boolean."
    },
    "PivotTable.EnableFieldDialog": {
      "type": "bool",
      "info": "True if the PivotTable Field dialog box is available when the user double-clicks the PivotTable field. The default value is True. Read/write Boolean."
    },
    "PivotTable.EnableFieldList": {
      "type": "bool",
      "info": "False to disable the ability to display the field list for the PivotTable. If the field list was already being displayed, it disappears. The default value is True. Read/write Boolean."
    },
    "PivotTable.EnableWizard": {
      "type": "bool",
      "info": "True if the PivotTable Wizard is available. The default value is True. Read/write Boolean."
    },
    "PivotTable.EnableWriteback": {
      "type": "bool",
      "info": "Returns or sets whether writing back to the data source is enabled for the specified PivotTable. The default value is False. Read/write."
    },
    "PivotTable.ErrorString": {
      "type": "DisplayErrorString",
      "info": "Returns or sets a String value that represents the string displayed in cells that contain errors when the DisplayErrorString property is True."
    },
    "PivotTable.FieldListSortAscending": {
      "type": "bool",
      "info": "Controls the sort order of fields in the PivotTable Field List. When this property is set to True, the fields are sorted in ascending order. When it is set to False, the fields are sorted in data source order. Read/write."
    },
    "PivotTable.GrandTotalName": {
      "type": "str",
      "info": "Returns or sets the text string label that is displayed in the grand total column or row heading in the specified PivotTable report. The default value is the string Grand Total. Read/write String."
    },
    "PivotTable.HasAutoFormat": {
      "type": "bool",
      "info": "True if the PivotTable report is automatically formatted when it's refreshed or when fields are moved. Read/write Boolean."
    },
    "PivotTable.Hidden": {
      "type": "bool",
      "info": "Checks whether the PivotTable exists at the worksheet level. Read-only Boolean."
    },
    "PivotTable.HiddenFields": {
      "type": "PivotField",
      "info": "Returns an object that represents either a single PivotTable field (a PivotField object) or a collection of all the fields (a PivotFields object) that are currently not shown as row, column, page, or data fields. Read-only."
    },
    "PivotTable.InGridDropZones": {
      "type": "PivotTable",
      "info": "This property is used to toggle in-grid drop zones for a PivotTable object. In some cases, it also affects the layout of the PivotTable. Read/write Boolean."
    },
    "PivotTable.InnerDetail": {
      "type": "ShowDetail",
      "info": "Returns or sets the name of the field that will be shown as detail when the ShowDetail property is True for the innermost row or column field. Read/write String."
    },
    "PivotTable.LayoutRowDefault": {
      "type": "XlLayoutRowType",
      "info": "This property specifies the layout settings for PivotFields when they are added to the PivotTable for the first time. Read/write XlLayoutRowType."
    },
    "PivotTable.Location": {
      "type": "str",
      "info": "Gets or sets a String that represents the top-left cell in the body of the specified PivotTable object. Read/write."
    },
    "PivotTable.ManualUpdate": {
      "type": "bool",
      "info": "True if the PivotTable report is recalculated only at the user's request. The default value is False. Read/write Boolean."
    },
    "PivotTable.MDX": {
      "type": "str",
      "info": "Returns a String indicating the Multidimensional Expression (MDX) that would be sent to the provider to populate the current PivotTable view. Read-only."
    },
    "PivotTable.MergeLabels": {
      "type": "bool",
      "info": "True if the specified PivotTable report's outer-row item, column item, subtotal, and grand total labels use merged cells. Read/write Boolean."
    },
    "PivotTable.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "PivotTable.NullString": {
      "type": "DisplayNullString",
      "info": "Returns or sets the string displayed in cells that contain null values when the DisplayNullString property is True. The default value is an empty string (\"\"). Read/write String."
    },
    "PivotTable.PageFieldOrder": {
      "type": "XlOrder",
      "info": "Returns or sets the order in which page fields are added to the PivotTable report's layout. Can be one of the following XlOrder constants: xlDownThenOver or xlOverThenDown. The default constant is xlDownThenOver. Read/write Long."
    },
    "PivotTable.PageFields": {
      "type": "PivotField",
      "info": "Returns an object that represents either a single PivotTable field (a PivotField object) or a collection of all the fields (a PivotFields object) that are currently showing as page fields. Read-only."
    },
    "PivotTable.PageFieldStyle": {
      "type": "null",
      "info": "Returns or sets the style used in the bound page field area. The default value is a null string (no style is applied by default). Read/write String."
    },
    "PivotTable.PageFieldWrapCount": {
      "type": "int",
      "info": "Returns or sets the number of page fields in each column or row in the PivotTable report. Read/write Long."
    },
    "PivotTable.PageRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range that contains the page area in the PivotTable report. Read-only."
    },
    "PivotTable.PageRangeCells": {
      "type": "Range",
      "info": "Returns a Range object that represents only the cells in the specified PivotTable report that contain the page fields and item drop-down lists."
    },
    "PivotTable.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotTable.PivotChart": {
      "type": "Shape",
      "info": "Returns a Shape object that represents the standalone PivotChart for the specified hidden PivotTable report. Read-only."
    },
    "PivotTable.PivotColumnAxis": {
      "type": "PivotAxis",
      "info": "Returns a PivotAxis object representing the entire column axis. Read-only PivotAxis."
    },
    "PivotTable.PivotFormulas": {
      "type": "PivotFormulas",
      "info": "Returns a PivotFormulas object that represents the collection of formulas for the specified PivotTable report. Read-only."
    },
    "PivotTable.PivotRowAxis": {
      "type": "PivotAxis",
      "info": "Returns a PivotAxis object representing the entire row axis. Read-only PivotAxis."
    },
    "PivotTable.PivotSelection": {
      "type": "str",
      "info": "Returns or sets the PivotTable selection in standard PivotTable report selection format. Read/write String."
    },
    "PivotTable.PivotSelectionStandard": {
      "type": "str",
      "info": "Returns or sets a String indicating the PivotTable selection in standard PivotTable report format using English (United States) settings. Read/write."
    },
    "PivotTable.PreserveFormatting": {
      "type": "bool",
      "info": "True if formatting is preserved when the report is refreshed or recalculated by operations such as pivoting, sorting, or changing page field items."
    },
    "PivotTable.PrintDrillIndicators": {
      "type": "bool",
      "info": "Specifies whether drill indicators are printed with the PivotTable. Read/write Boolean."
    },
    "PivotTable.PrintTitles": {
      "type": "bool",
      "info": "True if the print titles for the worksheet are set based on the PivotTable report. False if the print titles for the worksheet are used. The default value is False. Read/write Boolean."
    },
    "PivotTable.RefreshDate": {
      "type": "datetime.datetime",
      "info": "Returns the date on which the PivotTable report was last refreshed. Read-only Date."
    },
    "PivotTable.RefreshName": {
      "type": "str",
      "info": "Returns the name of the person who last refreshed the PivotTable report data. Read-only String."
    },
    "PivotTable.RepeatItemsOnEachPrintedPage": {
      "type": "bool",
      "info": "True if row, column, and item labels appear on the first row of each page when the specified PivotTable report is printed. False if labels are printed only on the first page. The default value is True. Read/write Boolean."
    },
    "PivotTable.RowFields": {
      "type": "PivotField",
      "info": "Returns an object that represents either a single field in a PivotTable report (a PivotField object) or a collection of all the fields (a PivotFields object) that are currently showing as row fields. Read-only."
    },
    "PivotTable.RowGrand": {
      "type": "bool",
      "info": "True if the PivotTable report shows grand totals for rows. Read/write Boolean."
    },
    "PivotTable.RowRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range including the row area on the PivotTable report. Read-only."
    },
    "PivotTable.SaveData": {
      "type": "bool",
      "info": "True if data for the PivotTable report is saved with the workbook. False if only the report definition is saved. Read/write Boolean."
    },
    "PivotTable.SelectionMode": {
      "type": "XlPTSelectionMode",
      "info": "Returns or sets the PivotTable report structured selection mode. Read/write XlPTSelectionMode."
    },
    "PivotTable.ShowDrillIndicators": {
      "type": "ShowDrillIndicators",
      "info": "The ShowDrillIndicators property is used for toggling the display of drill indicators in the PivotTable. Read/write Boolean."
    },
    "PivotTable.ShowPageMultipleItemLabel": {
      "type": "bool",
      "info": "When set to True (default), \"(Multiple Items)\" will appear in the PivotTable cell on the worksheet whenever items are hidden and an aggregate of non-hidden items is shown in the PivotTable view. Read/write Boolean."
    },
    "PivotTable.ShowTableStyleColumnHeaders": {
      "type": "ShowTableStyleColumnHeaders",
      "info": "The ShowTableStyleColumnHeaders property is set to True if the column headers should be displayed in the PivotTable. Read/write Boolean."
    },
    "PivotTable.ShowTableStyleColumnStripes": {
      "type": "ShowTableStyleColumnStripes",
      "info": "The ShowTableStyleColumnStripes property displays banded columns in which even columns are formatted differently from odd columns. This makes PivotTables easier to read. Read/write Boolean."
    },
    "PivotTable.ShowTableStyleLastColumn": {
      "type": "PivotTable",
      "info": "Returns or sets if the last column is displayed for the specified PivotTable object. Read/write Boolean."
    },
    "PivotTable.ShowTableStyleRowHeaders": {
      "type": "ShowTableStyleRowHeaders",
      "info": "The ShowTableStyleRowHeaders property is set to True if the row headers should be displayed in the PivotTable. Read/write Boolean."
    },
    "PivotTable.ShowTableStyleRowStripes": {
      "type": "ShowTableStyleRowStripes",
      "info": "The ShowTableStyleRowStripes property displays banded rows in which even rows are formatted differently from odd rows. This makes PivotTables easier to read. Read/write Boolean."
    },
    "PivotTable.ShowValuesRow": {
      "type": "Returns or sets whether the values row is displayed. Read/write.",
      "info": "Returns or sets whether the values row is displayed. Read/write."
    },
    "PivotTable.Slicers": {
      "type": "Slicers",
      "info": "Returns the Slicers collection for the specified PivotTable. Read-only."
    },
    "PivotTable.SmallGrid": {
      "type": "bool",
      "info": "True if Microsoft Excel uses a grid that's two cells wide and two cells deep for a newly created PivotTable report. False if Excel uses a blank stencil outline. Read/write Boolean."
    },
    "PivotTable.SortUsingCustomLists": {
      "type": "SortUsingCustomLists",
      "info": "The SortUsingCustomLists property controls whether custom lists are used for sorting items of fields, both initially when the PivotField is initialized and the PivotItems are ordered by their captions, and later when the user applies a sort. Read/write Boolean."
    },
    "PivotTable.SourceData": {
      "type": "VBA_Variant",
      "info": "Returns the data source for the PivotTable report, as shown in the following table. Read/write Variant."
    },
    "PivotTable.SubtotalHiddenPageItems": {
      "type": "bool",
      "info": "True if hidden page field items in the PivotTable report are included in row and column subtotals, block totals, and grand totals. The default value is False. Read/write Boolean."
    },
    "PivotTable.Summary": {
      "type": "Returns or sets the description associated with the alternative text string for the specified PivotTable. Read/write.",
      "info": "Returns or sets the description associated with the alternative text string for the specified PivotTable. Read/write."
    },
    "PivotTable.TableRange1": {
      "type": "Range",
      "info": "Returns a Range object that represents the range containing the entire PivotTable report, but doesn't include page fields. Read-only."
    },
    "PivotTable.TableRange2": {
      "type": "Range",
      "info": "Returns a Range object that represents the range containing the entire PivotTable report, including page fields. Read-only."
    },
    "PivotTable.TableStyle2": {
      "type": "TableStyle2",
      "info": "The TableStyle2 property specifies the PivotTable style currently applied to the PivotTable. Read/write."
    },
    "PivotTable.Tag": {
      "type": "str",
      "info": "Returns or sets a string saved with the PivotTable report. Read/write String."
    },
    "PivotTable.TotalsAnnotation": {
      "type": "bool",
      "info": "True if an asterisk (*) is displayed next to each subtotal and grand total value in the specified PivotTable report if the report is based on an OLAP data source. The default value is True. Read/write Boolean."
    },
    "PivotTable.VacatedStyle": {
      "type": "str",
      "info": "Returns or sets the style applied to cells vacated when the PivotTable report is refreshed. The default value is a null string (no style is applied by default). Read/write String."
    },
    "PivotTable.Value": {
      "type": "str",
      "info": "Returns or sets a String value that represents the name of the PivotTable report."
    },
    "PivotTable.Version": {
      "type": "XlPivotTableVersionList",
      "info": "Returns an XlPivotTableVersionList value that represents the Microsoft Excel version number."
    },
    "PivotTable.ViewCalculatedMembers": {
      "type": "bool",
      "info": "When set to True (default), calculated members for Online Analytical Processing (OLAP) PivotTables can be viewed. Read/write Boolean."
    },
    "PivotTable.VisibleFields": {
      "type": "PivotField",
      "info": "Returns an object that represents either a single field in a PivotTable report (a PivotField object) or a collection of all the visible fields (a PivotFields object). Visible fields are shown as row, column, page or data fields. Read-only."
    },
    "PivotTable.VisualTotals": {
      "type": "bool",
      "info": "True (default) to enable Online Analytical Processing (OLAP) PivotTables to retotal after an item has been hidden from view. Read/write Boolean."
    },
    "PivotTable.VisualTotalsForSets": {
      "type": "Returns or sets whether to include filtered items in the totals of named sets for the specified PivotTable. Read/write.",
      "info": "Returns or sets whether to include filtered items in the totals of named sets for the specified PivotTable. Read/write."
    },
    "Phonetic.Alignment": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the alignment for the specified phonetic text or tick label."
    },
    "Phonetic.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Phonetic.CharacterType": {
      "type": "XlPhoneticCharacterType",
      "info": "Returns or sets the type of phonetic text in the specified cell. Read/write XlPhoneticCharacterType."
    },
    "Phonetic.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Phonetic.Font": {
      "type": "Font",
      "info": "Returns a Font object that represents the font of the specified object."
    },
    "Phonetic.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Phonetic.Text": {
      "type": "str",
      "info": "Returns or sets the text for the specified object. Read/write String."
    },
    "Phonetic.Visible": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines whether the object is visible. Read/write."
    },
    "Phonetics.Alignment": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the alignment for the specified phonetic text or tick label."
    },
    "Phonetics.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Phonetics.CharacterType": {
      "type": "XlPhoneticCharacterType",
      "info": "Returns or sets the type of phonetic text in the specified cell. Read/write XlPhoneticCharacterType."
    },
    "Phonetics.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Phonetics.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Phonetics.Font": {
      "type": "Font",
      "info": "Returns a Font object that represents the font of the specified object."
    },
    "Phonetics.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Phonetics.Length": {
      "type": "Start",
      "info": "Returns a Long value that represents the number of characters of phonetic text from the position you've specified with the Start property."
    },
    "Phonetics.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Phonetics.Start": {
      "type": "int",
      "info": "Returns the position that represents the first character of a phonetic text string in the specified cell. Read-only Long."
    },
    "Phonetics.Text": {
      "type": "str",
      "info": "Returns or sets the text for the specified object. Read/write String."
    },
    "Phonetics.Visible": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines whether the object is visible. Read/write."
    },
    "PivotCell.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotCell.CellChanged": {
      "type": "Returns whether a PivotTable value cell has been edited or recalculated since the PivotTable report was created or the last commit operation was performed. Read-only.",
      "info": "Returns whether a PivotTable value cell has been edited or recalculated since the PivotTable report was created or the last commit operation was performed. Read-only."
    },
    "PivotCell.ColumnItems": {
      "type": "PivotItemList",
      "info": "Returns a PivotItemList collection that corresponds to the items on the column axis that represent the selected range."
    },
    "PivotCell.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotCell.CustomSubtotalFunction": {
      "type": "XlConsolidationFunction",
      "info": "Returns the custom subtotal function field setting of a PivotCell object. Read-only XlConsolidationFunction."
    },
    "PivotCell.DataField": {
      "type": "PivotField",
      "info": "Returns a PivotField object that corresponds to the selected data field."
    },
    "PivotCell.DataSourceValue": {
      "type": "Returns the value last retrieved from the data source for edited cells in a PivotTable report. Read-only.",
      "info": "Returns the value last retrieved from the data source for edited cells in a PivotTable report. Read-only."
    },
    "PivotCell.MDX": {
      "type": "Returns a tuple that provides the full MDX coordinates of the specified value cell in a PivotTable with an OLAP data source. Read-only.",
      "info": "Returns a tuple that provides the full MDX coordinates of the specified value cell in a PivotTable with an OLAP data source. Read-only."
    },
    "PivotCell.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotCell.PivotCellType": {
      "type": "XlPivotCellType",
      "info": "Returns one of the XlPivotCellType constants that identifies the PivotTable entity that the cell corresponds to. Read-only."
    },
    "PivotCell.PivotColumnLine": {
      "type": "PivotLine",
      "info": "Returns the PivotLine object on a column for a specific PivotCell object. Read-only PivotLine."
    },
    "PivotCell.PivotField": {
      "type": "PivotField",
      "info": "Returns a PivotField object that represents the PivotTable field containing the upper-left corner of the specified range."
    },
    "PivotCell.PivotItem": {
      "type": "PivotItem",
      "info": "Returns a PivotItem object that represents the PivotTable item containing the upper-left corner of the specified range."
    },
    "PivotCell.PivotRowLine": {
      "type": "PivotLine",
      "info": "Returns the PivotLine object on a row for a specific PivotCell object. Read-only PivotLine."
    },
    "PivotCell.PivotTable": {
      "type": "PivotTable",
      "info": "Returns a PivotTable object that represents the PivotTable report associated with the PivotCell."
    },
    "PivotCell.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents the range that the specified PivotCell applies to."
    },
    "PivotCell.RowItems": {
      "type": "PivotItemList",
      "info": "Returns a PivotItemList collection that corresponds to the items on the category axis that represent the selected cell."
    },
    "PivotCell.ServerActions": {
      "type": "Represents a collection of actions consisting of OLAP-defined actions that can be executed. The actions are specific to PivotTables existing at a worksheet-level. Read-only.",
      "info": "Represents a collection of actions consisting of OLAP-defined actions that can be executed. The actions are specific to PivotTables existing at a worksheet-level. Read-only."
    },
    "PivotField.AllItemsVisible": {
      "type": "bool",
      "info": "Used to retrieve a Boolean value that indicates whether any manual filtering is applied to the PivotField. Read-only."
    },
    "PivotField.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotField.AutoShowCount": {
      "type": "int",
      "info": "Returns the number of top or bottom items that are automatically shown in the specified PivotTable field. Read-only Long."
    },
    "PivotField.AutoShowField": {
      "type": "str",
      "info": "Returns the name of the data field used to determine the top or bottom items that are automatically shown in the specified PivotTable field. Read-only String."
    },
    "PivotField.AutoShowRange": {
      "type": "constant",
      "info": "Returns the xlTop constant if the top items are shown automatically in the specified PivotTable field; returns xlBottom if the bottom items are shown. Read-only Long."
    },
    "PivotField.AutoShowType": {
      "type": "constant",
      "info": "Returns the xlAutomatic constant if AutoShow is enabled for the specified PivotTable field; returns xlManual if AutoShow is disabled. Read-only Long."
    },
    "PivotField.AutoSortCustomSubtotal": {
      "type": "Returns the name of the custom subtotal used to sort the specified PivotTable field automatically. Read-only.",
      "info": "Returns the name of the custom subtotal used to sort the specified PivotTable field automatically. Read-only."
    },
    "PivotField.AutoSortField": {
      "type": "str",
      "info": "Returns the name of the data field used to sort the specified PivotTable field automatically. Read-only String."
    },
    "PivotField.AutoSortOrder": {
      "type": "XlSortOrder",
      "info": "Returns the order used to sort the specified PivotTable field automatically. Can be one of the XlSortOrder constants. Read-only Long."
    },
    "PivotField.AutoSortPivotLine": {
      "type": "PivotLine",
      "info": "Returns the name of the PivotLine object used to sort the specified PivotTable field automatically. Read-only."
    },
    "PivotField.BaseField": {
      "type": "VBA_Variant",
      "info": "Returns or sets the base field for a custom calculation. This property is valid only for data fields. Read/write Variant."
    },
    "PivotField.BaseItem": {
      "type": "VBA_Variant",
      "info": "Returns or sets the item in the base field for a custom calculation. Valid only for data fields. Read/write Variant."
    },
    "PivotField.Calculation": {
      "type": "XlPivotFieldCalculation",
      "info": "Returns or sets an XlPivotFieldCalculation value that represents the type of calculation performed by the specified field. This property is valid only for data fields."
    },
    "PivotField.Caption": {
      "type": "str",
      "info": "Returns a String value that represents the label text for the pivot field."
    },
    "PivotField.ChildField": {
      "type": "PivotField",
      "info": "Returns a PivotField object that represents the child field for the specified field (if the field is grouped and has a child field). Read-only."
    },
    "PivotField.ChildItems": {
      "type": "PivotItem",
      "info": "Returns an object that represents either a single PivotTable item (a PivotItem object) or a collection of all the items (a PivotItems object) that are group children in the specified field, or children of the specified item. Read-only."
    },
    "PivotField.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotField.CubeField": {
      "type": "CubeField",
      "info": "Returns the CubeField object from which the specified PivotTable field is descended. Read-only."
    },
    "PivotField.CurrentPage": {
      "type": "PivotItem",
      "info": "Returns or sets the current page showing for the page field (valid only for page fields). Read/write PivotItem."
    },
    "PivotField.CurrentPageList": {
      "type": "VBA_Variant",
      "info": "Returns or sets an array of strings corresponding to the list of items included in a multiple-item page field of a PivotTable report. Read/write Variant."
    },
    "PivotField.CurrentPageName": {
      "type": "str",
      "info": "Returns or sets the currently displayed page of the specified PivotTable report. The name of the page appears in the page field. Note that this property works only if the currently displayed page already exists. Read/write String."
    },
    "PivotField.DatabaseSort": {
      "type": "bool",
      "info": "When set to True, manual repositioning of items in a PivotTable field is allowed. Returns True if the field has no manually positioned items. Read/write Boolean."
    },
    "PivotField.DataRange": {
      "type": "Range",
      "info": "Returns a Range object as shown in the following table. Read-only."
    },
    "PivotField.DataType": {
      "type": "XlPivotFieldDataType",
      "info": "Returns an XlPivotFieldDataType value that represents the type of data in the PivotTable field."
    },
    "PivotField.DisplayAsCaption": {
      "type": "This property is used to display member properties of PivotFields as captions. Read-only.",
      "info": "This property is used to display member properties of PivotFields as captions. Read-only."
    },
    "PivotField.DisplayAsTooltip": {
      "type": "bool",
      "info": "This property is used to specify whether a specific member property PivotField is displayed in tooltips. Read/write Boolean."
    },
    "PivotField.DisplayInReport": {
      "type": "bool",
      "info": "This property is used to specify whether the specified member property PivotField is displayed in the PivotTable or not. Read/write Boolean."
    },
    "PivotField.DragToColumn": {
      "type": "bool",
      "info": "True if the specified field can be dragged to the column position. The default value is True. Read/write Boolean."
    },
    "PivotField.DragToData": {
      "type": "bool",
      "info": "True if the specified field can be dragged to the data position. The default value is True. Read/write Boolean."
    },
    "PivotField.DragToHide": {
      "type": "bool",
      "info": "True if the field can be hidden by being dragged off the PivotTable report. The default value is True. Read/write Boolean."
    },
    "PivotField.DragToPage": {
      "type": "bool",
      "info": "True if the field can be dragged to the page position. The default value is True. Read/write Boolean."
    },
    "PivotField.DragToRow": {
      "type": "bool",
      "info": "True if the field can be dragged to the row position. The default value is True. Read/write Boolean."
    },
    "PivotField.DrilledDown": {
      "type": "bool",
      "info": "True if the flag for the specified PivotTable field or PivotTable item is set to \"drilled\" (expanded, or visible). Read/write Boolean."
    },
    "PivotField.EnableItemSelection": {
      "type": "bool",
      "info": "When set to False, disables the ability to use the field dropdown in the user interface. The default value is True. Read/write Boolean."
    },
    "PivotField.EnableMultiplePageItems": {
      "type": "bool",
      "info": "Used for specifying whether check boxes are present in the filter drop-down list for fields in the page area. Read/write Boolean."
    },
    "PivotField.Formula": {
      "type": "str",
      "info": "Returns or sets a String value that represents the object's formula in A1-style notation and in the language of the macro."
    },
    "PivotField.Function": {
      "type": "XlConsolidationFunction",
      "info": "Returns or sets the function used to summarize the PivotTable field (data fields only). Read/write XlConsolidationFunction."
    },
    "PivotField.GroupLevel": {
      "type": "Returns the placement of the specified field within a group of fields (if the field is a member of a grouped set of fields). Read-only.",
      "info": "Returns the placement of the specified field within a group of fields (if the field is a member of a grouped set of fields). Read-only."
    },
    "PivotField.Hidden": {
      "type": "bool",
      "info": "This property is used to hide the individual levels of an OLAP hierarchy. Read/write Boolean."
    },
    "PivotField.HiddenItems": {
      "type": "PivotItem",
      "info": "Returns an object that represents either a single hidden PivotTable item (a PivotItem object) or a collection of all the hidden items (a PivotItems object) in the specified field. Read-only."
    },
    "PivotField.HiddenItemsList": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant specifying an array of strings that are hidden items for a PivotTable field. Read/write."
    },
    "PivotField.IncludeNewItemsInFilter": {
      "type": "bool",
      "info": "Allows developers to specify whether excluded or included items should be tracked when manual filtering is applied to the PivotField. Read/write Boolean."
    },
    "PivotField.IsCalculated": {
      "type": "bool",
      "info": "True if the PivotTable field is a calculated field or item. Read-only Boolean."
    },
    "PivotField.IsMemberProperty": {
      "type": "bool",
      "info": "Returns True when the PivotField contains member properties. Read-only Boolean."
    },
    "PivotField.LabelRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the cell (or cells) that contain the field label. Read-only."
    },
    "PivotField.LayoutBlankLine": {
      "type": "bool",
      "info": "True if a blank row is inserted after the specified row field in a PivotTable report. The default value is False. Read/write Boolean."
    },
    "PivotField.LayoutCompactRow": {
      "type": "bool",
      "info": "Specifies whether or not a PivotField is compacted (items of multiple PivotFields are displayed in a single column) when rows are selected. Read/write Boolean."
    },
    "PivotField.LayoutForm": {
      "type": "XlLayoutFormType",
      "info": "Returns or sets the way the specified PivotTable items appear—in table format or in outline format. Read/write XlLayoutFormType."
    },
    "PivotField.LayoutPageBreak": {
      "type": "bool",
      "info": "True if a page break is inserted after each field. The default value is False. Read/write Boolean."
    },
    "PivotField.LayoutSubtotalLocation": {
      "type": "XlSubtotalLocationType",
      "info": "Returns or sets the position of the PivotTable field subtotals in relation to (either above or below) the specified field. Read/write XlSubtotalLocationType."
    },
    "PivotField.MemberPropertyCaption": {
      "type": "MemberPropertyCaption",
      "info": "Setting the MemberPropertyCaption property controls which member property is used as a caption for a given level. Read/write Boolean."
    },
    "PivotField.MemoryUsed": {
      "type": "int",
      "info": "Returns the amount of memory currently being used by the object, in bytes. Read-only Long."
    },
    "PivotField.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "PivotField.NumberFormat": {
      "type": "str",
      "info": "Returns or sets a String value that represents the format code for the object."
    },
    "PivotField.Orientation": {
      "type": "XlPivotFieldOrientation",
      "info": "Returns or sets an XlPivotFieldOrientation value that represents the location of the field in the specified PivotTable report."
    },
    "PivotField.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotField.ParentField": {
      "type": "PivotField",
      "info": "Returns a PivotField object that represents the PivotTable field that's the group parent of the specified object. The field must be grouped and must have a parent field. Read-only."
    },
    "PivotField.ParentItems": {
      "type": "PivotItem",
      "info": "Returns an object that represents either a single PivotTable item (a PivotItem object) or a collection of all the items (a PivotItems object) that are group parents in the specified field. The specified field must be a group parent of another field. Read-only."
    },
    "PivotField.PivotFilters": {
      "type": "PivotField",
      "info": "Returns or sets the PivotFilters for the specified PivotField object. Read-only."
    },
    "PivotField.Position": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the position of the field (first, second, third, and so on) among all the fields in its orientation (Rows, Columns, Pages, Data)."
    },
    "PivotField.PropertyOrder": {
      "type": "int",
      "info": "Valid only for PivotTable fields that are member property fields. Returns a Long indicating the display position of the member property within the cube field to which it belongs. Read/write."
    },
    "PivotField.PropertyParentField": {
      "type": "PivotField",
      "info": "Returns a PivotField object representing the field to which the properties in this field pertain."
    },
    "PivotField.RepeatLabels": {
      "type": "Returns or sets whether item labels are repeated in the PivotTable for the specified PivotField. Read/write.",
      "info": "Returns or sets whether item labels are repeated in the PivotTable for the specified PivotField. Read/write."
    },
    "PivotField.ServerBased": {
      "type": "bool",
      "info": "True if the data source for the specified PivotTable report is external and only the items matching the page field selection are retrieved. Read/write Boolean."
    },
    "PivotField.ShowAllItems": {
      "type": "bool",
      "info": "True if all items in the PivotTable report are displayed, even if they don't contain summary data. The default value is False. Read/write Boolean."
    },
    "PivotField.ShowDetail": {
      "type": "PivotField",
      "info": "Gets or sets whether the specified PivotField object is showing detail. Read/write Boolean."
    },
    "PivotField.ShowingInAxis": {
      "type": "Indicates if the PivotField is currently visible in the PivotTable or not. Read-only.",
      "info": "Indicates if the PivotField is currently visible in the PivotTable or not. Read-only."
    },
    "PivotField.SourceCaption": {
      "type": "SourceCaption",
      "info": "The SourceCaption property is applicable only for OLAP PivotTables, and returns the original caption from the OLAP server for a PivotField. Read-only."
    },
    "PivotField.SourceName": {
      "type": "str",
      "info": "Returns a String value that represents the specified object's name as it appears in the original source data for the specified PivotTable report."
    },
    "PivotField.StandardFormula": {
      "type": "str",
      "info": "Returns or sets a String specifying formulas with standard English (United States) formatting. Read/write."
    },
    "PivotField.SubtotalName": {
      "type": "str",
      "info": "Returns or sets the text string label displayed in the subtotal column or row heading in the specified PivotTable report. The default value is the string Subtotal. Read/write String."
    },
    "PivotField.Subtotals": {
      "type": "VBA_Variant",
      "info": "Returns or sets subtotals displayed with the specified field. Valid only for nondata fields. Read/write Variant."
    },
    "PivotField.TotalLevels": {
      "type": "TotalLevels",
      "info": "Returns the total number of fields in the current field group. If the field isn't grouped, or if the data source is OLAP-based, TotalLevels returns the value 1. Read-only Long."
    },
    "PivotField.UseMemberPropertyAsCaption": {
      "type": "bool",
      "info": "This property is used to control whether member property captions are used for PivotItem captions of the PivotField. Read/write Boolean."
    },
    "PivotField.Value": {
      "type": "str",
      "info": "Returns or sets a String value that represents the name of the specified field in the PivotTable report."
    },
    "PivotField.VisibleItems": {
      "type": "PivotItem",
      "info": "Returns an object that represents either a single visible PivotTable item (a PivotItem object) or a collection of all the visible items (a PivotItems object) in the specified field. Read-only."
    },
    "PivotField.VisibleItemsList": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant specifying an array of strings that represent included items in a manual filter applied to a PivotField. Read/write."
    },
    "PivotItem.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotItem.Caption": {
      "type": "str",
      "info": "Returns a String value that represents the label text for the pivot item."
    },
    "PivotItem.ChildItems": {
      "type": "PivotItem",
      "info": "Returns an object that represents either a single PivotTable item (a PivotItem object) or a collection of all the items (a PivotItems object) that are group children in the specified field, or children of the specified item. Read-only."
    },
    "PivotItem.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotItem.DataRange": {
      "type": "Range",
      "info": "Returns a Range object as shown in the following table. Read-only."
    },
    "PivotItem.DrilledDown": {
      "type": "bool",
      "info": "True if the flag for the specified PivotTable field or PivotTable item is set to \"drilled\" (expanded or visible). Read/write Boolean."
    },
    "PivotItem.Formula": {
      "type": "str",
      "info": "Returns or sets a String value that represents the object's formula in A1-style notation and in the language of the macro."
    },
    "PivotItem.IsCalculated": {
      "type": "bool",
      "info": "True if the PivotTable item is a calculated field or item. Read-only Boolean."
    },
    "PivotItem.LabelRange": {
      "type": "Range",
      "info": "Returns a Range object that represents all the cells in the PivotTable report that contain the item. Read-only."
    },
    "PivotItem.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "PivotItem.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotItem.ParentItem": {
      "type": "PivotField",
      "info": "Returns a PivotItem object that represents the parent PivotTable item in the parent PivotField object (the field must be grouped so that it has a parent). Read-only."
    },
    "PivotItem.ParentShowDetail": {
      "type": "bool",
      "info": "True if the specified item is showing because one of its parents is showing detail. False if the specified item isn't showing because one of its parents is hiding detail. This property is available only if the item is grouped. Read-only Boolean."
    },
    "PivotItem.Position": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the position of the item in its field, if the item is currently showing."
    },
    "PivotItem.RecordCount": {
      "type": "int",
      "info": "Returns the number of records in the PivotTable cache or the number of cache records that contain the specified item. Read-only Long."
    },
    "PivotItem.ShowDetail": {
      "type": "bool",
      "info": "True if the outline is expanded for the specified range (so that the detail of the column or row is visible). The specified range must be a single summary column or row in an outline. Read/write Variant. For the PivotItem object (or the Range object if the range is in a PivotTable report), this property is set to True if the item is showing detail."
    },
    "PivotItem.SourceName": {
      "type": "VBA_Variant",
      "info": "Returns a Variant value that represents the specified object's name as it appears in the original source data for the specified PivotTable report."
    },
    "PivotItem.SourceNameStandard": {
      "type": "str",
      "info": "Returns a String that represents the PivotTable items' source name in standard English (United States) format settings. Read-only."
    },
    "PivotItem.StandardFormula": {
      "type": "str",
      "info": "Returns or sets a String specifying formulas with standard English (United States) formatting. Read/write."
    },
    "PivotItem.Value": {
      "type": "str",
      "info": "Returns or sets a String value that represents the name of the specified item in the PivotTable field."
    },
    "PivotItem.Visible": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines whether the object is visible. Read/write."
    },
    "QueryTable.AdjustColumnWidth": {
      "type": "bool",
      "info": "True if the column widths are automatically adjusted for the best fit each time you refresh the specified query table. False if the column widths are not automatically adjusted with each refresh. The default value is True. Read/write Boolean."
    },
    "QueryTable.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "QueryTable.BackgroundQuery": {
      "type": "bool",
      "info": "True if queries for the query table are performed asynchronously (in the background). Read/write Boolean."
    },
    "QueryTable.CommandText": {
      "type": "VBA_Variant",
      "info": "Returns or sets the command string for the specified data source. Read/write Variant."
    },
    "QueryTable.CommandType": {
      "type": "XlCmdType",
      "info": "Returns or sets one of these XlCmdType constants: xlCmdCube, xlCmdDefault, xlCmdSql, or xlCmdTable. The constant that is returned or set describes the value of the CommandText property. The default value is xlCmdSQL. Read/write XlCmdType."
    },
    "QueryTable.Connection": {
      "type": "Returns or sets a string that contains one of the following:",
      "info": "Returns or sets a string that contains one of the following:"
    },
    "QueryTable.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "QueryTable.Destination": {
      "type": "Range",
      "info": "Returns the cell in the upper-left corner of the query table destination range (the range where the resulting query table will be placed). The destination range must be on the worksheet that contains the QueryTable object. Read-only Range."
    },
    "QueryTable.EditWebPage": {
      "type": "VBA_Variant",
      "info": "Returns or sets the webpage Uniform Resource Locator (URL) for a web query. Read/write Variant."
    },
    "QueryTable.EnableEditing": {
      "type": "bool",
      "info": "True if the user can edit the specified query table. False if the user can only refresh the query table. Read/write Boolean."
    },
    "QueryTable.EnableRefresh": {
      "type": "bool",
      "info": "True if the PivotTable cache or query table can be refreshed by the user. The default value is True. Read/write Boolean."
    },
    "QueryTable.FetchedRowOverflow": {
      "type": "Refresh",
      "info": "True if the number of rows returned by the last use of the Refresh method is greater than the number of rows available on the worksheet. Read-only Boolean."
    },
    "QueryTable.FieldNames": {
      "type": "bool",
      "info": "True if field names from the data source appear as column headings for the returned data. The default value is True. Read/write Boolean."
    },
    "QueryTable.FillAdjacentFormulas": {
      "type": "bool",
      "info": "True if formulas to the right of the specified query table are automatically updated whenever the query table is refreshed. Read/write Boolean."
    },
    "QueryTable.ListObject": {
      "type": "ListObject",
      "info": "Returns a ListObject object for the QueryTable object. Read-only ListObject object."
    },
    "QueryTable.MaintainConnection": {
      "type": "bool",
      "info": "True if the connection to the specified data source is maintained after the refresh and until the workbook is closed. The default value is True. Read/write Boolean."
    },
    "QueryTable.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "QueryTable.Parameters": {
      "type": "Parameters",
      "info": "Returns a Parameters collection that represents the query table parameters. Read-only."
    },
    "QueryTable.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "QueryTable.PostText": {
      "type": "str",
      "info": "Returns or sets the string used with the post method of inputting data into a web server to return data from a web query. Read/write String."
    },
    "QueryTable.PreserveColumnInfo": {
      "type": "bool",
      "info": "True if column sorting, filtering, and layout information is preserved whenever a query table is refreshed. The default value is True. Read/write Boolean."
    },
    "QueryTable.PreserveFormatting": {
      "type": "bool",
      "info": "True if any formatting common to the first five rows of data are applied to new rows of data in the query table. Unused cells aren't formatted. The property is False if the last AutoFormat applied to the query table is applied to new rows of data. The default value is True."
    },
    "QueryTable.QueryType": {
      "type": "XlQueryType",
      "info": "Indicates the type of query used by Microsoft Excel to populate the query table. Read-only XlQueryType."
    },
    "QueryTable.Recordset": {
      "type": "Recordset",
      "info": "Returns or sets a Recordset object that's used as the data source for the specified query table. Read/write."
    },
    "QueryTable.Refreshing": {
      "type": "bool",
      "info": "True if there is a background query in progress for the specified query table. Read-only Boolean."
    },
    "QueryTable.RefreshOnFileOpen": {
      "type": "bool",
      "info": "True if the PivotTable cache or query table is automatically updated each time the workbook is opened. The default value is False. Read/write Boolean."
    },
    "QueryTable.RefreshPeriod": {
      "type": "int",
      "info": "Returns or sets the number of minutes between refreshes. Read/write Long."
    },
    "QueryTable.RefreshStyle": {
      "type": "XlCellInsertionMode",
      "info": "Returns or sets the way rows on the specified worksheet are added or deleted to accommodate the number of rows in a recordset returned by a query. Read/write XlCellInsertionMode."
    },
    "QueryTable.ResultRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the area of the worksheet occupied by the specified query table. Read-only."
    },
    "QueryTable.RobustConnect": {
      "type": "XlRobustConnect",
      "info": "Returns or sets how the query table connects to its data source. Read/write XlRobustConnect."
    },
    "QueryTable.RowNumbers": {
      "type": "bool",
      "info": "True if row numbers are added as the first column of the specified query table. Read/write Boolean."
    },
    "QueryTable.SaveData": {
      "type": "bool",
      "info": "True if data for the QueryTable report is saved with the workbook. False if only the report definition is saved. Read/write Boolean."
    },
    "QueryTable.SavePassword": {
      "type": "bool",
      "info": "True if password information in an ODBC connection string is saved with the specified query. False if the password is removed. Read/write Boolean."
    },
    "QueryTable.Sort": {
      "type": "Returns the sort criteria for the query table range. Read-only.",
      "info": "Returns the sort criteria for the query table range. Read-only."
    },
    "QueryTable.SourceConnectionFile": {
      "type": "str",
      "info": "Returns or sets a String indicating the Microsoft Office Data Connection file or similar file that was used to create the QueryTable. Read/write."
    },
    "QueryTable.SourceDataFile": {
      "type": "str",
      "info": "Returns or sets a String value that indicates the source data file for a query table."
    },
    "QueryTable.TextFileColumnDataTypes": {
      "type": "xlGeneral",
      "info": "Returns or sets an ordered array of constants that specify the data types applied to the corresponding columns in the text file that you are importing into a query table. The default constant for each column is xlGeneral. Read/write Variant."
    },
    "QueryTable.TextFileCommaDelimiter": {
      "type": "bool",
      "info": "True if the comma is the delimiter when you import a text file into a query table. False if you want to use some other character as the delimiter. The default value is False. Read/write Boolean."
    },
    "QueryTable.TextFileConsecutiveDelimiter": {
      "type": "bool",
      "info": "True if consecutive delimiters are treated as a single delimiter when you import a text file into a query table. The default value is False. Read/write Boolean."
    },
    "QueryTable.TextFileDecimalSeparator": {
      "type": "str",
      "info": "Returns or sets the decimal separator character that Microsoft Excel uses when you import a text file into a query table. The default is the system decimal separator character. Read/write String."
    },
    "QueryTable.TextFileFixedColumnWidths": {
      "type": "VBA_Variant",
      "info": "Returns or sets an array of integers that correspond to the widths of the columns (in characters) in the text file that you are importing into a query table. Valid widths are from 1 through 32767 characters. Read/write Variant."
    },
    "QueryTable.TextFileOtherDelimiter": {
      "type": "null",
      "info": "Returns or sets the character used as the delimiter when you import a text file into a query table. The default value is null. Read/write String."
    },
    "QueryTable.TextFileParseType": {
      "type": "XlTextParsingType",
      "info": "Returns or sets the column format for the data in the text file that you are importing into a query table. Read/write XlTextParsingType."
    },
    "QueryTable.TextFilePlatform": {
      "type": "XlPlatform",
      "info": "Returns or sets the origin of the text file that you are importing into the query table. This property determines which code page is used during the data import. Read/write XlPlatform."
    },
    "QueryTable.TextFilePromptOnRefresh": {
      "type": "bool",
      "info": "True if you want to specify the name of the imported text file each time the query table is refreshed. The Import Text File dialog box allows you to specify the path and file name. The default value is False. Read/write Boolean."
    },
    "QueryTable.TextFileSemicolonDelimiter": {
      "type": "TextFileParseType",
      "info": "True if the semicolon is the delimiter when you import a text file into a query table, and if the value of the TextFileParseType property is xlDelimited. The default value is False. Read/write Boolean."
    },
    "QueryTable.TextFileSpaceDelimiter": {
      "type": "bool",
      "info": "True if the space character is the delimiter when you import a text file into a query table. The default value is False. Read/write Boolean."
    },
    "QueryTable.TextFileStartRow": {
      "type": "int",
      "info": "Returns or sets the row number at which text parsing will begin when you import a text file into a query table. Valid values are integers from 1 through 32767. The default value is 1. Read/write Long."
    },
    "QueryTable.TextFileTabDelimiter": {
      "type": "bool",
      "info": "True if the tab character is the delimiter when you import a text file into a query table. The default value is False. Read/write Boolean."
    },
    "QueryTable.TextFileTextQualifier": {
      "type": "XlTextQualifier",
      "info": "Returns or sets the text qualifier when you import a text file into a query table. The text qualifier specifies that the enclosed data is in text format. Read/write XlTextQualifier."
    },
    "QueryTable.TextFileThousandsSeparator": {
      "type": "str",
      "info": "Returns or sets the thousands separator character that Microsoft Excel uses when you import a text file into a query table. The default is the system thousands separator character. Read/write String."
    },
    "QueryTable.TextFileTrailingMinusNumbers": {
      "type": "bool",
      "info": "True for Microsoft Excel to treat numbers imported as text that begin with a - (minus) symbol as a negative symbol. False for Excel to treat numbers imported as text that begin with a - symbol as text. Read/write Boolean."
    },
    "QueryTable.TextFileVisualLayout": {
      "type": "XlTextVisualLayoutType",
      "info": "Returns or sets an XlTextVisualLayoutType enumeration that indicates whether the visual layout of the text being imported is left-to-right or right-to-left."
    },
    "QueryTable.WebConsecutiveDelimitersAsOne": {
      "type": "bool",
      "info": "True if consecutive delimiters are treated as a single delimiter when you import data from HTML <PRE> tags on a webpage into a query table, and if the data is to be parsed into columns. False if you want to treat consecutive delimiters as multiple delimiters. The default value is True. Read/write Boolean."
    },
    "QueryTable.WebDisableDateRecognition": {
      "type": "bool",
      "info": "True if data that resembles dates is parsed as text when you import a webpage into a query table. False if date recognition is used. The default value is False. Read/write Boolean."
    },
    "QueryTable.WebDisableRedirections": {
      "type": "bool",
      "info": "True if web query redirections are disabled for a QueryTable object. The default value is False. Read/write Boolean."
    },
    "QueryTable.WebFormatting": {
      "type": "XlWebFormatting",
      "info": "Returns or sets a value that determines how much formatting from a webpage, if any, is applied when you import the page into a query table. Read/write XlWebFormatting."
    },
    "QueryTable.WebPreFormattedTextToColumns": {
      "type": "bool",
      "info": "Returns or sets whether data contained within HTML <PRE> tags on the webpage is parsed into columns when you import the page into a query table. The default is True. Read/write Boolean."
    },
    "QueryTable.WebSelectionType": {
      "type": "XlWebSelectionType",
      "info": "Returns or sets a value that determines whether an entire webpage, all tables on the webpage, or only specific tables on the webpage are imported into a query table. Read/write XlWebSelectionType."
    },
    "QueryTable.WebSingleBlockTextImport": {
      "type": "bool",
      "info": "True if data from the HTML <PRE> tags on the specified webpage is processed all at once when you import the page into a query table. False if the data is imported in blocks of contiguous rows so that header rows will be recognized as such. The default value is False. Read/write Boolean."
    },
    "QueryTable.WebTables": {
      "type": "str",
      "info": "Returns or sets a comma-delimited list of table names or table index numbers when you import a webpage into a query table. Read/write String."
    },
    "QueryTable.WorkbookConnection": {
      "type": "WorkbookConnection",
      "info": "Returns the WorkbookConnection object that the query table uses. Read-only."
    },
    "SparklineGroups.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SparklineGroups.Count": {
      "type": "Range",
      "info": "Returns the count of sparkline groups in the associated Range object. Read-only."
    },
    "SparklineGroups.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SparklineGroups.Item": {
      "type": "SparklineGroup",
      "info": "Returns a SparklineGroup object from a collection. Read-only."
    },
    "SparklineGroups.Parent": {
      "type": "Range",
      "info": "Returns the Range object for the specified object. Read-only."
    },
    "Style.AddIndent": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that indicates if text is automatically indented when the text alignment in a cell is set to equal distribution (either horizontally or vertically)."
    },
    "Style.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Style.Borders": {
      "type": "Borders",
      "info": "Returns a Borders collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format)."
    },
    "Style.BuiltIn": {
      "type": "bool",
      "info": "True if the style is a built-in style. Read-only Boolean."
    },
    "Style.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Style.Font": {
      "type": "Font",
      "info": "Returns a Font object that represents the font of the specified object."
    },
    "Style.FormulaHidden": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that indicates if the formula will be hidden when the worksheet is protected."
    },
    "Style.HorizontalAlignment": {
      "type": "XlHAlign",
      "info": "Returns or sets an XlHAlign value that represents the horizontal alignment for the specified object."
    },
    "Style.IncludeAlignment": {
      "type": "bool",
      "info": "True if the style includes the AddIndent, HorizontalAlignment, VerticalAlignment, WrapText, IndentLevel, and Orientation properties of the Style object. Read/write Boolean."
    },
    "Style.IncludeBorder": {
      "type": "Border",
      "info": "True if the style includes the Color, ColorIndex, LineStyle, and Weight properties of the Border object. Read/write Boolean."
    },
    "Style.IncludeFont": {
      "type": "Background",
      "info": "True if the style includes the Background, Bold, Color, ColorIndex, FontStyle, Italic, Name, Size, Strikethrough, Subscript, Superscript, and Underline font properties. Read/write Boolean."
    },
    "Style.IncludeNumber": {
      "type": "bool",
      "info": "True if the style includes the NumberFormat property. Read/write Boolean."
    },
    "Style.IncludePatterns": {
      "type": "Interior",
      "info": "True if the style includes the Color, ColorIndex, InvertIfNegative, Pattern, PatternColor, and PatternColorIndex properties of the Interior object. Read/write Boolean."
    },
    "Style.IncludeProtection": {
      "type": "bool",
      "info": "True if the style includes the FormulaHidden and Locked protection properties. Read/write Boolean."
    },
    "Style.IndentLevel": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the indent level for the style."
    },
    "Style.Interior": {
      "type": "Interior",
      "info": "Returns an Interior object that represents the interior of the specified object."
    },
    "Style.Locked": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that indicates if the object is locked."
    },
    "Style.MergeCells": {
      "type": "bool",
      "info": "True if the style contains merged cells. Read/write Variant."
    },
    "Style.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "Style.NameLocal": {
      "type": "str",
      "info": "Returns or sets the name of the object, in the language of the user. Read-only String."
    },
    "Style.NumberFormat": {
      "type": "str",
      "info": "Returns or sets a String value that represents the format code for the object."
    },
    "Style.NumberFormatLocal": {
      "type": "str",
      "info": "Returns or sets a String value that represents the format code for the object as a string in the language of the user."
    },
    "Style.Orientation": {
      "type": "XlOrientation",
      "info": "Returns or sets an XlOrientation value that represents the text orientation."
    },
    "Style.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Style.ReadingOrder": {
      "type": "XlReadingOrder",
      "info": "Returns or sets the reading order for the specified object. Can be one of the following XlReadingOrder constants: xlRTL (right-to-left), xlLTR (left-to-right), or xlContext. Read/write Long."
    },
    "Style.ShrinkToFit": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that indicates if text automatically shrinks to fit in the available column width."
    },
    "Style.Value": {
      "type": "str",
      "info": "Returns a String value that represents the name of the specified style."
    },
    "Style.VerticalAlignment": {
      "type": "XlVAlign",
      "info": "Returns or sets an XlVAlign value that represents the vertical alignment of the specified object."
    },
    "Style.WrapText": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that indicates if Microsoft Excel wraps the text in the object."
    },
    "Validation.AlertStyle": {
      "type": "XlDVAlertStyle",
      "info": "Returns the validation alert style. Read-only XlDVAlertStyle."
    },
    "Validation.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Validation.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Validation.ErrorMessage": {
      "type": "str",
      "info": "Returns or sets the data validation error message. Read/write String."
    },
    "Validation.ErrorTitle": {
      "type": "str",
      "info": "Returns or sets the title of the data-validation error dialog box. Read/write String."
    },
    "Validation.Formula1": {
      "type": "str",
      "info": "Returns the value or expression associated with the conditional format or data validation. Can be a constant value, a string value, a cell reference, or a formula. Read-only String."
    },
    "Validation.Formula2": {
      "type": "Operator",
      "info": "Returns the value or expression associated with the second part of a conditional format or data validation. Used only when the data validation conditional format Operator property is xlBetween or xlNotBetween (XlFormatConditionOperator). Can be a constant value, a string value, a cell reference, or a formula. Read-only String."
    },
    "Validation.IgnoreBlank": {
      "type": "bool",
      "info": "True if blank values are permitted by the range data validation. Read/write Boolean."
    },
    "Validation.IMEMode": {
      "type": "XlIMEMode",
      "info": "Returns or sets the description of the Japanese input rules. Can be one of the XlIMEMode constants listed in the following table. Read/write Long."
    },
    "Validation.InCellDropdown": {
      "type": "bool",
      "info": "True if data validation displays a drop-down list that contains acceptable values. Read/write Boolean."
    },
    "Validation.InputMessage": {
      "type": "str",
      "info": "Returns or sets the data validation input message. Read/write String."
    },
    "Validation.InputTitle": {
      "type": "str",
      "info": "Returns or sets the title of the data-validation input dialog box. Read/write String. Limited to 32 characters."
    },
    "Validation.Operator": {
      "type": "XlFormatConditionOperator",
      "info": "Returns a Long value that represents the operator for the data validation. See XlFormatConditionOperator."
    },
    "Validation.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Validation.ShowError": {
      "type": "bool",
      "info": "True if the data validation error message will be displayed whenever the user enters invalid data. Read/write Boolean."
    },
    "Validation.ShowInput": {
      "type": "bool",
      "info": "True if the data validation input message will be displayed whenever the user selects a cell in the data validation range. Read/write Boolean."
    },
    "Validation.Type": {
      "type": "XlDVType",
      "info": "Returns a Long value containing an XlDVType constant that represents the data type validation for a range."
    },
    "Validation.Value": {
      "type": "bool",
      "info": "Returns a Boolean value that indicates if all the validation criteria are met (that is, if the range contains valid data)."
    },
    "Worksheet.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Worksheet.AutoFilter": {
      "type": "AutoFilter",
      "info": "Returns an AutoFilter object if filtering is on. Read-only."
    },
    "Worksheet.AutoFilterMode": {
      "type": "bool",
      "info": "True if the AutoFilter drop-down arrows are currently displayed on the sheet. This property is independent of the FilterMode property. Read/write Boolean."
    },
    "Worksheet.Cells": {
      "type": "Range",
      "info": "Returns a Range object that represents all the cells on the worksheet (not just the cells that are currently in use)."
    },
    "Worksheet.CircularReference": {
      "type": "Range",
      "info": "Returns a Range object that represents the range containing the first circular reference on the sheet, or returns Nothing if there's no circular reference on the sheet. The circular reference must be removed before calculation can proceed."
    },
    "Worksheet.CodeName": {
      "type": "str",
      "info": "Returns the code name for the object. Read-only String."
    },
    "Worksheet.Columns": {
      "type": "Range",
      "info": "Returns a Range object that represents all the columns on the specified worksheet."
    },
    "Worksheet.Comments": {
      "type": "Comments",
      "info": "Returns a Comments collection that represents all the comments for the specified worksheet. Read-only."
    },
    "Worksheet.CommentsThreaded": {
      "type": "CommentsThreaded",
      "info": "Returns a CommentsThreaded collection that represents all the top-level/root comments (no replies) for the specified worksheet. Includes legacy and modern comments. Read-only."
    },
    "Worksheet.ConsolidationFunction": {
      "type": "XlConsolidationFunction",
      "info": "Returns the function code used for the current consolidation. Can be one of the constants of XlConsolidationFunction. Read-only Long."
    },
    "Worksheet.ConsolidationOptions": {
      "type": "bool",
      "info": "Returns a three-element array of consolidation options, as shown in the following table. If the element is True, that option is set. Read-only Variant."
    },
    "Worksheet.ConsolidationSources": {
      "type": "Empty",
      "info": "Returns an array of string values that name the source sheets for the worksheet's current consolidation. Returns Empty if there's no consolidation on the sheet. Read-only Variant."
    },
    "Worksheet.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Worksheet.CustomProperties": {
      "type": "CustomProperties",
      "info": "Returns a CustomProperties object representing the identifier information associated with a worksheet."
    },
    "Worksheet.DisplayPageBreaks": {
      "type": "bool",
      "info": "True if page breaks (both automatic and manual) on the specified worksheet are displayed. Read/write Boolean."
    },
    "Worksheet.DisplayRightToLeft": {
      "type": "bool",
      "info": "True if the specified worksheet is displayed from right to left instead of from left to right. False if the object is displayed from left to right. Read-only Boolean."
    },
    "Worksheet.EnableAutoFilter": {
      "type": "bool",
      "info": "True if AutoFilter arrows are enabled when user-interface-only protection is turned on. Read/write Boolean."
    },
    "Worksheet.EnableCalculation": {
      "type": "bool",
      "info": "True if Microsoft Excel automatically recalculates the worksheet when necessary. False if Excel doesn't recalculate the sheet. Read/write Boolean."
    },
    "Worksheet.EnableFormatConditionsCalculation": {
      "type": "bool",
      "info": "Returns or sets if conditional formats occur automatically as needed. Read/write Boolean."
    },
    "Worksheet.EnableOutlining": {
      "type": "bool",
      "info": "True if outlining symbols are enabled when user-interface-only protection is turned on. Read/write Boolean."
    },
    "Worksheet.EnablePivotTable": {
      "type": "bool",
      "info": "True if PivotTable controls and actions are enabled when user-interface-only protection is turned on. Read/write Boolean."
    },
    "Worksheet.EnableSelection": {
      "type": "XlEnableSelection",
      "info": "Returns or sets what can be selected on the sheet. Read/write XlEnableSelection."
    },
    "Worksheet.FilterMode": {
      "type": "bool",
      "info": "True if the worksheet is in the filter mode. Read-only Boolean."
    },
    "Worksheet.HPageBreaks": {
      "type": "HPageBreaks",
      "info": "Returns an HPageBreaks collection that represents the horizontal page breaks on the sheet. Read-only."
    },
    "Worksheet.Hyperlinks": {
      "type": "Hyperlinks",
      "info": "Returns a Hyperlinks collection that represents the hyperlinks for the worksheet."
    },
    "Worksheet.Index": {
      "type": "int",
      "info": "Returns a Long value that represents the index number of the object within the collection of similar objects."
    },
    "Worksheet.ListObjects": {
      "type": "ListObject",
      "info": "Returns a collection of ListObject objects on the worksheet. Read-only ListObjects collection."
    },
    "Worksheet.MailEnvelope": {
      "type": "Represents an email header for a document.",
      "info": "Represents an email header for a document."
    },
    "Worksheet.Name": {
      "type": "str",
      "info": "Returns or sets a String value that represents the object name."
    },
    "Worksheet.Names": {
      "type": "Names",
      "info": "Returns a Names collection that represents all the worksheet-specific names (names defined with the \"WorksheetName!\" prefix). Read-only Names object."
    },
    "Worksheet.Next": {
      "type": "Worksheet",
      "info": "Returns a Worksheet object that represents the next sheet."
    },
    "Worksheet.Outline": {
      "type": "Outline",
      "info": "Returns an Outline object that represents the outline for the specified worksheet. Read-only."
    },
    "Worksheet.PageSetup": {
      "type": "PageSetup",
      "info": "Returns a PageSetup object that contains all the page setup settings for the specified object. Read-only."
    },
    "Worksheet.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Worksheet.Previous": {
      "type": "Worksheet",
      "info": "Returns a Worksheet object that represents the previous sheet."
    },
    "Worksheet.PrintedCommentPages": {
      "type": "Returns the number of comment pages that will be printed for the current worksheet. Read-only.",
      "info": "Returns the number of comment pages that will be printed for the current worksheet. Read-only."
    },
    "Worksheet.ProtectContents": {
      "type": "Protect",
      "info": "True if the contents of the sheet are protected. This protects the individual cells. To turn on content protection, use the Protect method with the Contents argument set to True. Read-only Boolean."
    },
    "Worksheet.ProtectDrawingObjects": {
      "type": "Protect",
      "info": "True if shapes are protected. To turn on shape protection, use the Protect method with the DrawingObjects argument set to True. Read-only Boolean."
    },
    "Worksheet.Protection": {
      "type": "Protection",
      "info": "Returns a Protection object that represents the protection options of the worksheet."
    },
    "Worksheet.ProtectionMode": {
      "type": "Protect",
      "info": "True if user-interface-only protection is turned on. To turn on user interface protection, use the Protect method with the UserInterfaceOnly argument set to True. Read-only Boolean."
    },
    "Worksheet.ProtectScenarios": {
      "type": "bool",
      "info": "True if the worksheet scenarios are protected. Read-only Boolean."
    },
    "Worksheet.QueryTables": {
      "type": "QueryTables",
      "info": "Returns the QueryTables collection that represents all the query tables on the specified worksheet. Read-only."
    },
    "Worksheet.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents a cell or a range of cells."
    },
    "Worksheet.Rows": {
      "type": "Range",
      "info": "Returns a Range object that represents all the rows on the specified worksheet."
    },
    "Worksheet.ScrollArea": {
      "type": "str",
      "info": "Returns or sets the range where scrolling is allowed, as an A1-style range reference. Cells outside the scroll area cannot be selected. Read/write String."
    },
    "Worksheet.Shapes": {
      "type": "Shapes",
      "info": "Returns a Shapes collection that represents all the shapes on the worksheet. Read-only."
    },
    "Worksheet.Sort": {
      "type": "Sort",
      "info": "Returns a Sort object. Read-only."
    },
    "Worksheet.StandardHeight": {
      "type": "points",
      "info": "Returns the standard (default) height of all the rows on the worksheet, in points. Read-only Double."
    },
    "Worksheet.StandardWidth": {
      "type": "float",
      "info": "Returns or sets the standard (default) width of all the columns on the worksheet. Read/write Double."
    },
    "Worksheet.Tab": {
      "type": "Tab",
      "info": "Returns a Tab object for a worksheet."
    },
    "Worksheet.TransitionExpEval": {
      "type": "bool",
      "info": "True if Microsoft Excel uses Lotus 1-2-3 expression evaluation rules for the worksheet. Read/write Boolean."
    },
    "Worksheet.TransitionFormEntry": {
      "type": "bool",
      "info": "True if Microsoft Excel uses Lotus 1-2-3 formula entry rules for the worksheet. Read/write Boolean."
    },
    "Worksheet.Type": {
      "type": "XlSheetType",
      "info": "Returns an XlSheetType value that represents the worksheet type."
    },
    "Worksheet.UsedRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the used range on the specified worksheet. Read-only."
    },
    "Worksheet.Visible": {
      "type": "XlSheetVisibility",
      "info": "Returns or sets an XlSheetVisibility value that determines whether the object is visible."
    },
    "Worksheet.VPageBreaks": {
      "type": "VPageBreaks",
      "info": "Returns a VPageBreaks collection that represents the vertical page breaks on the sheet. Read-only."
    },
    "XPath.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "XPath.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "XPath.Map": {
      "type": "XmlMap",
      "info": "Returns an XmlMap object that represents the schema map that contains the specified XPath object. Read-only."
    },
    "XPath.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "XPath.Repeating": {
      "type": "bool",
      "info": "Returns True if the specified XPath object is mapped to an XML list; returns False if the XPath object is mapped to a single cell. Read-only Boolean."
    },
    "XPath.Value": {
      "type": "str",
      "info": "Returns a String that represents the XPath for the specified object."
    },
    "Walls.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Walls.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Walls.Format": {
      "type": "ChartFormat",
      "info": "Returns the ChartFormat object. Read-only."
    },
    "Walls.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "Walls.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Walls.PictureType": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the way pictures are displayed on the walls and faces of a 3D chart."
    },
    "Walls.PictureUnit": {
      "type": "PictureType",
      "info": "Returns or sets the unit for each picture on the chart if the PictureType property is set to xlStackScale (if not, this property is ignored). Read/write Long."
    },
    "Walls.Thickness": {
      "type": "int",
      "info": "Returns or sets a Long specifying the thickness of the wall. Read/write."
    },
    "ChartArea.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ChartArea.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ChartArea.Format": {
      "type": "ChartFormat",
      "info": "Returns the ChartFormat object. Read-only."
    },
    "ChartArea.Height": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the height, in points, of the object."
    },
    "ChartArea.Left": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the left edge of the object to the left edge of column A (on a worksheet) or the left edge of the chart area (on a chart)."
    },
    "ChartArea.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "ChartArea.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ChartArea.RoundedCorners": {
      "type": "bool",
      "info": "True if the chart area of the chart has rounded corners. Read/write Boolean."
    },
    "ChartArea.Shadow": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines if the object has a shadow."
    },
    "ChartArea.Top": {
      "type": "points",
      "info": "Returns a Double value that represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart)."
    },
    "ChartArea.Width": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the width, in points, of the object."
    },
    "ChartTitle.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ChartTitle.Caption": {
      "type": "str",
      "info": "Returns or sets a String value that represents the chart title text."
    },
    "ChartTitle.Characters": {
      "type": "Characters",
      "info": "Returns a Characters object that represents a range of characters within the object text. Use the Characters object to format characters within a text string."
    },
    "ChartTitle.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ChartTitle.Format": {
      "type": "ChartFormat",
      "info": "Returns the ChartFormat object. Read-only."
    },
    "ChartTitle.Formula": {
      "type": "str",
      "info": "Gets or sets a String value that represents the formula of the object by using A1-style notation, in English. Read/write."
    },
    "ChartTitle.FormulaLocal": {
      "type": "str",
      "info": "Gets or sets a String value that represents the formula of the object by using A1-style notation, in the language of the user. Read/write."
    },
    "ChartTitle.FormulaR1C1": {
      "type": "str",
      "info": "Gets or sets a String value that represents the formula of the object by using R1C1-style notation, in English. Read/write."
    },
    "ChartTitle.FormulaR1C1Local": {
      "type": "str",
      "info": "Gets or sets a String value that represents the formula of the object by using R1C1-style notation, in the language of the user. Read/write."
    },
    "ChartTitle.Height": {
      "type": "points",
      "info": "Returns the height, in points, of the object. Read-only."
    },
    "ChartTitle.HorizontalAlignment": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the horizontal alignment for the specified object."
    },
    "ChartTitle.IncludeInLayout": {
      "type": "bool",
      "info": "True if a chart title will occupy the chart layout space when a chart layout is being determined. The default value is True. Read/write Boolean."
    },
    "ChartTitle.Left": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the left edge of the object to the left edge of column A (on a worksheet) or the left edge of the chart area (on a chart)."
    },
    "ChartTitle.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "ChartTitle.Orientation": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the text orientation."
    },
    "ChartTitle.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ChartTitle.Position": {
      "type": "XlChartElementPosition",
      "info": "Returns or sets the position of the chart title on the chart. Read/write XlChartElementPosition."
    },
    "ChartTitle.ReadingOrder": {
      "type": "XlReadingOrder",
      "info": "Returns or sets the reading order for the specified object. Can be one of the following XlReadingOrder constants: xlRTL (right-to-left), xlLTR (left-to-right), or xlContext. Read/write Long."
    },
    "ChartTitle.Shadow": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines if the object has a shadow."
    },
    "ChartTitle.Text": {
      "type": "str",
      "info": "Returns or sets the text for the specified object. Read/write String."
    },
    "ChartTitle.Top": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart)."
    },
    "ChartTitle.VerticalAlignment": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the vertical alignment of the specified object."
    },
    "ChartTitle.Width": {
      "type": "points",
      "info": "Returns the width, in points, of the object. Read-only."
    },
    "DataTable.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "DataTable.Border": {
      "type": "Border",
      "info": "Returns a Border object that represents the border of the object."
    },
    "DataTable.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "DataTable.Font": {
      "type": "Font",
      "info": "Returns a Font object that represents the font of the specified object."
    },
    "DataTable.Format": {
      "type": "ChartFormat",
      "info": "Returns the ChartFormat object. Read-only."
    },
    "DataTable.HasBorderHorizontal": {
      "type": "bool",
      "info": "True if the chart data table has horizontal cell borders. Read/write Boolean."
    },
    "DataTable.HasBorderOutline": {
      "type": "bool",
      "info": "True if the chart data table has outline borders. Read/write Boolean."
    },
    "DataTable.HasBorderVertical": {
      "type": "bool",
      "info": "True if the chart data table has vertical cell borders. Read/write Boolean."
    },
    "DataTable.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "DataTable.ShowLegendKey": {
      "type": "bool",
      "info": "True if the data label legend key is visible. Read/write Boolean."
    },
    "Floor.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Floor.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Floor.Format": {
      "type": "ChartFormat",
      "info": "Returns the ChartFormat object. Read-only."
    },
    "Floor.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "Floor.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Floor.PictureType": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the way pictures are displayed on the walls and faces of a 3D chart."
    },
    "Floor.Thickness": {
      "type": "int",
      "info": "Returns or sets a Long, specifying the thickness of the floor. Read/write."
    },
    "Legend.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Legend.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Legend.Format": {
      "type": "ChartFormat",
      "info": "Returns the ChartFormat object. Read-only."
    },
    "Legend.Height": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the height, in points, of the object."
    },
    "Legend.IncludeInLayout": {
      "type": "bool",
      "info": "True if a legend will occupy the chart layout space when a chart layout is being determined. The default value is True. Read/write Boolean."
    },
    "Legend.Left": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the left edge of the object to the left edge of column A (on a worksheet) or the left edge of the chart area (on a chart)."
    },
    "Legend.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "Legend.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Legend.Position": {
      "type": "XlLegendPosition",
      "info": "Returns or sets an XlLegendPosition value that represents the position of the legend on the chart."
    },
    "Legend.Shadow": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines if the object has a shadow."
    },
    "Legend.Top": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart)."
    },
    "Legend.Width": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the width, in points, of the object."
    },
    "PageSetup.AlignMarginsHeaderFooter": {
      "type": "bool",
      "info": "Returns True for Excel to align the header and the footer with the margins set in the page setup options. Read/write Boolean."
    },
    "PageSetup.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PageSetup.BlackAndWhite": {
      "type": "bool",
      "info": "True if elements of the document will be printed in black and white. Read/write Boolean."
    },
    "PageSetup.BottomMargin": {
      "type": "points",
      "info": "Returns or sets the size of the bottom margin, in points. Read/write Double."
    },
    "PageSetup.CenterFooter": {
      "type": "PageSetup",
      "info": "Center aligns the footer information in the PageSetup object. Read/write String."
    },
    "PageSetup.CenterFooterPicture": {
      "type": "Graphic",
      "info": "Returns a Graphic object that represents the picture for the center section of the footer. Used to set attributes about the picture."
    },
    "PageSetup.CenterHeader": {
      "type": "PageSetup",
      "info": "Center aligns the header information in the PageSetup object. Read/write String."
    },
    "PageSetup.CenterHeaderPicture": {
      "type": "Graphic",
      "info": "Returns a Graphic object that represents the picture for the center section of the header. Used to set attributes about the picture."
    },
    "PageSetup.CenterHorizontally": {
      "type": "bool",
      "info": "True if the sheet is centered horizontally on the page when it's printed. Read/write Boolean."
    },
    "PageSetup.CenterVertically": {
      "type": "bool",
      "info": "True if the sheet is centered vertically on the page when it's printed. Read/write Boolean."
    },
    "PageSetup.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PageSetup.DifferentFirstPageHeaderFooter": {
      "type": "bool",
      "info": "True if a different header or footer is used on the first page. Read/write Boolean."
    },
    "PageSetup.Draft": {
      "type": "bool",
      "info": "True if the sheet will be printed without graphics. Read/write Boolean."
    },
    "PageSetup.EvenPage": {
      "type": "Returns or sets the alignment of text on the even page of a workbook or section.",
      "info": "Returns or sets the alignment of text on the even page of a workbook or section."
    },
    "PageSetup.FirstPage": {
      "type": "Returns or sets the alignment of text on the first page of a workbook or section.",
      "info": "Returns or sets the alignment of text on the first page of a workbook or section."
    },
    "PageSetup.FirstPageNumber": {
      "type": "Constants",
      "info": "Returns or sets the first page number that will be used when this sheet is printed. If xlAutomatic, Microsoft Excel chooses the first page number. The default is xlAutomatic (Constants). Read/write Long."
    },
    "PageSetup.FitToPagesTall": {
      "type": "VBA_Variant",
      "info": "Returns or sets the number of pages tall that the worksheet will be scaled to when it's printed. Applies only to worksheets. Read/write Variant."
    },
    "PageSetup.FitToPagesWide": {
      "type": "VBA_Variant",
      "info": "Returns or sets the number of pages wide that the worksheet will be scaled to when it's printed. Applies only to worksheets. Read/write Variant."
    },
    "PageSetup.FooterMargin": {
      "type": "points",
      "info": "Returns or sets the distance from the bottom of the page to the footer, in points. Read/write Double."
    },
    "PageSetup.HeaderMargin": {
      "type": "points",
      "info": "Returns or sets the distance from the top of the page to the header, in points. Read/write Double."
    },
    "PageSetup.LeftFooter": {
      "type": "Returns or sets the alignment of text on the left footer of a workbook or section.",
      "info": "Returns or sets the alignment of text on the left footer of a workbook or section."
    },
    "PageSetup.LeftFooterPicture": {
      "type": "Graphic",
      "info": "Returns a Graphic object that represents the picture for the left section of the footer. Used to set attributes about the picture."
    },
    "PageSetup.LeftHeader": {
      "type": "Returns or sets the alignment of text on the left header of a workbook or section.",
      "info": "Returns or sets the alignment of text on the left header of a workbook or section."
    },
    "PageSetup.LeftHeaderPicture": {
      "type": "Graphic",
      "info": "Returns a Graphic object that represents the picture for the left section of the header. Used to set attributes about the picture."
    },
    "PageSetup.LeftMargin": {
      "type": "points",
      "info": "Returns or sets the size of the left margin, in points. Read/write Double."
    },
    "PageSetup.OddAndEvenPagesHeaderFooter": {
      "type": "bool",
      "info": "True if the specified PageSetup object has different headers and footers for odd-numbered and even-numbered pages. Read/write Boolean."
    },
    "PageSetup.Order": {
      "type": "XlOrder",
      "info": "Returns or sets an XlOrder value that represents the order that Microsoft Excel uses to number pages when printing a large worksheet."
    },
    "PageSetup.Orientation": {
      "type": "XlPageOrientation",
      "info": "Returns or sets an XlPageOrientation value that represents the portrait or landscape printing mode."
    },
    "PageSetup.Pages": {
      "type": "Pages",
      "info": "Returns or sets the count or item number of the pages in the Pages collection."
    },
    "PageSetup.PaperSize": {
      "type": "XlPaperSize",
      "info": "Returns or sets the size of the paper. Read/write XlPaperSize."
    },
    "PageSetup.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PageSetup.PrintArea": {
      "type": "str",
      "info": "Returns or sets the range to be printed as a String using A1-style references in the language of the macro. Read/write String."
    },
    "PageSetup.PrintComments": {
      "type": "XlPrintLocation",
      "info": "Returns or sets the way comments are printed with the sheet. Read/write XlPrintLocation."
    },
    "PageSetup.PrintErrors": {
      "type": "XlPrintErrors",
      "info": "Sets or returns an XlPrintErrors constant specifying the type of print error displayed. This feature allows users to suppress the display of error values when printing a worksheet. Read/write."
    },
    "PageSetup.PrintGridlines": {
      "type": "bool",
      "info": "True if cell gridlines are printed on the page. Applies only to worksheets. Read/write Boolean."
    },
    "PageSetup.PrintHeadings": {
      "type": "bool",
      "info": "True if row and column headings are printed with this page. Applies only to worksheets. Read/write Boolean."
    },
    "PageSetup.PrintNotes": {
      "type": "bool",
      "info": "True if cell notes are printed as end notes with the sheet. Applies only to worksheets. Read/write Boolean."
    },
    "PageSetup.PrintQuality": {
      "type": "VBA_Variant",
      "info": "Returns or sets the print quality. Read/write Variant."
    },
    "PageSetup.PrintTitleColumns": {
      "type": "str",
      "info": "Returns or sets the columns that contain the cells to be repeated on the left side of each page, as a String in A1-style notation in the language of the macro. Read/write String."
    },
    "PageSetup.PrintTitleRows": {
      "type": "str",
      "info": "Returns or sets the rows that contain the cells to be repeated at the top of each page, as a String in A1-style notation in the language of the macro. Read/write String."
    },
    "PageSetup.RightFooter": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the right edge of the page and the right boundary of the footer. Read/write String."
    },
    "PageSetup.RightFooterPicture": {
      "type": "Graphic",
      "info": "Returns a Graphic object that represents the picture for the right section of the footer. Used to set attributes of the picture."
    },
    "PageSetup.RightHeader": {
      "type": "str",
      "info": "Returns or sets the right part of the header. Read/write String."
    },
    "PageSetup.RightHeaderPicture": {
      "type": "Graphic",
      "info": "Returns a Graphic object that represents the picture for the right section of the header. Used to set attributes about the picture."
    },
    "PageSetup.RightMargin": {
      "type": "points",
      "info": "Returns or sets the size of the right margin, in points. Read/write Double."
    },
    "PageSetup.ScaleWithDocHeaderFooter": {
      "type": "bool",
      "info": "Returns or sets if the header and footer should be scaled with the document when the size of the document changes. Read/write Boolean."
    },
    "PageSetup.TopMargin": {
      "type": "points",
      "info": "Returns or sets the size of the top margin, in points. Read/write Double."
    },
    "PageSetup.Zoom": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents a percentage (between 10 and 400 percent) by which Microsoft Excel will scale the worksheet for printing."
    },
    "PivotLayout.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotLayout.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotLayout.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotLayout.PivotTable": {
      "type": "PivotTable",
      "info": "Returns a PivotTable object that represents the PivotTable report associated with the PivotChart report."
    },
    "PlotArea.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PlotArea.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PlotArea.Format": {
      "type": "ChartFormat",
      "info": "Returns the ChartFormat object. Read-only."
    },
    "PlotArea.Height": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the height, in points, of the object."
    },
    "PlotArea.InsideHeight": {
      "type": "points",
      "info": "Returns the inside height of the plot area, in points. Read/write Double."
    },
    "PlotArea.InsideLeft": {
      "type": "points",
      "info": "Returns the distance from the chart edge to the inside left edge of the plot area, in points. Read/write Double."
    },
    "PlotArea.InsideTop": {
      "type": "points",
      "info": "Returns the distance from the chart edge to the inside top edge of the plot area, in points. Read/write Double."
    },
    "PlotArea.InsideWidth": {
      "type": "points",
      "info": "Returns the inside width of the plot area, in points. Read/write Double."
    },
    "PlotArea.Left": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the left edge of the object to the left edge of column A (on a worksheet) or the left edge of the chart area (on a chart)."
    },
    "PlotArea.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "PlotArea.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PlotArea.Position": {
      "type": "XlChartElementPosition",
      "info": "Returns or sets the position of the plot area on the chart. Read/write XlChartElementPosition."
    },
    "PlotArea.Top": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart)."
    },
    "PlotArea.Width": {
      "type": "points",
      "info": "Returns or sets a Double value that represents the width, in points, of the object."
    },
    "Shapes.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Shapes.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Shapes.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Shapes.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Shapes.Range": {
      "type": "ShapeRange",
      "info": "Returns a ShapeRange object that represents a subset of the shapes in a Shapes collection."
    },
    "Tab.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Tab.Color": {
      "type": "RGB",
      "info": "Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant."
    },
    "Tab.ColorIndex": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the color of the specified worksheet tab or chart tab."
    },
    "Tab.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Tab.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Tab.ThemeColor": {
      "type": "XlThemeColor",
      "info": "Returns or sets the theme color in the applied color scheme that is associated with the specified object. Read/write XlThemeColor."
    },
    "Tab.TintAndShade": {
      "type": "float",
      "info": "Returns or sets a Single that lightens or darkens a color."
    },
    "Pane.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Pane.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Pane.Index": {
      "type": "int",
      "info": "Returns a Long value that represents the index number of the object within the collection of similar objects."
    },
    "Pane.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Pane.ScrollColumn": {
      "type": "int",
      "info": "Returns or sets the number of the leftmost column in the pane or window. Read/write Long."
    },
    "Pane.ScrollRow": {
      "type": "int",
      "info": "Returns or sets the number of the row that appears at the top of the pane or window. Read/write Long."
    },
    "Pane.VisibleRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the range of cells that are visible in the window or pane. If a column or row is partially visible, it's included in the range. Read-only."
    },
    "Panes.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Panes.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Panes.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Panes.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Panes.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "SheetViews.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SheetViews.Count": {
      "type": "int",
      "info": "Returns the number of objects in the collection. Read-only Long."
    },
    "SheetViews.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SheetViews.Item": {
      "type": "SheetView",
      "info": "Returns a SheetView object that represents views in a workbook. Read-only."
    },
    "SheetViews.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Connections.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Connections.Count": {
      "type": "int",
      "info": "Returns the number of objects in the collection. Read-only Long."
    },
    "Connections.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Connections.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CustomViews.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CustomViews.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "CustomViews.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CustomViews.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "TableStyles.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "TableStyles.Count": {
      "type": "int",
      "info": "Returns the number of objects in the collection. Read-only Long."
    },
    "TableStyles.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "TableStyles.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "IconSets.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "IconSets.Count": {
      "type": "int",
      "info": "Returns a Long value that specifies the number of icon sets available in the workbook. Read-only."
    },
    "IconSets.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "IconSets.Item": {
      "type": "IconSet",
      "info": "Returns a single IconSet object from the IconSets collection. Read-only."
    },
    "IconSets.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Model.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "Model.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "Model.DataModelConnection": {
      "type": "WorkbookConnection",
      "info": "Returns the model WorkbookConnection object from the workbook connections collection that connects to the model."
    },
    "Model.ModelFormatBoolean": {
      "type": "ModelFormatBoolean",
      "info": "Returns a ModelFormatBoolean object that represents formatting of type True/False in the data model. Read-only."
    },
    "Model.ModelFormatCurrency": {
      "type": "ModelFormatCurrency",
      "info": "Returns a ModelFormatCurrency object that represents formatting of type currency in the data model. Read-only."
    },
    "Model.ModelFormatDate": {
      "type": "ModelFormatDate",
      "info": "Returns a ModelFormatDate object that represents formatting of type date in the data model. Read-only."
    },
    "Model.ModelFormatDecimalNumber": {
      "type": "ModelFormatDecimalNumber",
      "info": "Returns a ModelFormatDecimalNumber object that represents formatting of type decimal number in the data model. Read-only."
    },
    "Model.ModelFormatGeneral": {
      "type": "ModelFormatGeneral",
      "info": "Returns a ModelFormatGeneral object that represents formatting of type general in the data model. Read-only."
    },
    "Model.ModelFormatPercentageNumber": {
      "type": "ModelFormatPercentageNumber",
      "info": "Returns a ModelFormatPercentageNumber object that represents formatting of type percentage number in the data model. Read-only."
    },
    "Model.ModelFormatScientificNumber": {
      "type": "ModelFormatScientificNumber",
      "info": "Returns a ModelFormatScientificNumber object that represents formatting of type scientific number in the data model. Read-only."
    },
    "Model.ModelFormatWholeNumber": {
      "type": "ModelFormatWholeNumber",
      "info": "Returns a ModelFormatWholeNumber object that represents formatting of type whole number in the data model. Read-only."
    },
    "Model.ModelMeasures": {
      "type": "ModelMeasures",
      "info": "Returns a ModelMeasures object that represents the collection of model measures in the data model. Read-only."
    },
    "Model.ModelRelationships": {
      "type": "ModelRelationships",
      "info": "Returns a ModelRelationships object that represents the collection of relationships between data model tables. Read-only."
    },
    "Model.ModelTables": {
      "type": "ModelTables",
      "info": "Returns a ModelTables object that represents a collection of tables inside the data model. Read-only."
    },
    "Model.Name": {
      "type": "str",
      "info": "Returns a String value representing the name of the Model object. Read-only."
    },
    "Model.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified object. Read-only."
    },
    "PublishObjects.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PublishObjects.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "PublishObjects.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PublishObjects.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "PublishObjects.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Queries.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Queries.Count": {
      "type": "Returns an integer that represents the number of objects in the collection.",
      "info": "Returns an integer that represents the number of objects in the collection."
    },
    "Queries.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Queries.FastCombine": {
      "type": "bool",
      "info": "True to enable the fast combine feature, as long as the workbook is open. Read/write Boolean."
    },
    "Queries.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "SlicerCaches.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SlicerCaches.Count": {
      "type": "Returns the number of objects in the collection.",
      "info": "Returns the number of objects in the collection."
    },
    "SlicerCaches.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SlicerCaches.Item": {
      "type": "SlicerCache",
      "info": "Returns a single SlicerCache object from the collection."
    },
    "SlicerCaches.Parent": {
      "type": "Workbook",
      "info": "Returns the parent Workbook object for the collection. Read-only."
    },
    "Styles.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Styles.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Styles.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Styles.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Styles.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "WebOptions.AllowPNG": {
      "type": "bool",
      "info": "True if Portable Network Graphics (PNG) is allowed as an image format when you save documents as a webpage. False if PNG is not allowed as an output format. The default value is False. Read/write Boolean."
    },
    "WebOptions.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "WebOptions.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "WebOptions.DownloadComponents": {
      "type": "bool",
      "info": "True if the necessary Microsoft Office Web components are downloaded when you view the saved document in a web browser, but only if the components are not already installed. False if the components are not downloaded. The default value is False. Read/write Boolean."
    },
    "WebOptions.Encoding": {
      "type": "MsoEncoding",
      "info": "Returns or sets the document encoding (code page or character set) to be used by the web browser when you view the saved document. The default is the system code page. Read/write MsoEncoding."
    },
    "WebOptions.FolderSuffix": {
      "type": "UseLongFileNames",
      "info": "Returns the folder suffix that Microsoft Excel uses when you save a document as a webpage, use long file names, and choose to save supporting files in a separate folder (that is, if the UseLongFileNames and OrganizeInFolder properties are set to True). Read-only String."
    },
    "WebOptions.LocationOfComponents": {
      "type": "str",
      "info": "Returns or sets the central URL (on the intranet or web) or path (local or network) to the location from which authorized users can download Microsoft Office Web components when viewing your saved document. The default value is the local or network installation path for Microsoft Office. Read/write String."
    },
    "WebOptions.OrganizeInFolder": {
      "type": "bool",
      "info": "True if all supporting files, such as background textures and graphics, are organized in a separate folder when you save the specified document as a webpage. False if supporting files are saved in the same folder as the webpage. The default value is True. Read/write Boolean."
    },
    "WebOptions.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "WebOptions.PixelsPerInch": {
      "type": "int",
      "info": "Returns or sets the density (pixels per inch) of graphics images and table cells on a webpage. The range of settings is usually from 19 to 480, and common settings for popular screen sizes are 72, 96, and 120. The default setting is 96. Read/write Long."
    },
    "WebOptions.RelyOnCSS": {
      "type": "OrganizeInFolder",
      "info": "True if cascading style sheets (CSS) are used for font formatting when you view a saved document in a web browser. Microsoft Excel creates a cascading style sheet file and saves it either to the specified folder or to the same folder as your webpage, depending on the value of the OrganizeInFolder property. False if HTML <FONT> tags and cascading style sheets are used. The default value is True. Read/write Boolean."
    },
    "WebOptions.RelyOnVML": {
      "type": "bool",
      "info": "True if image files are not generated from drawing objects when you save a document as a webpage. False if images are generated. The default value is False. Read/write Boolean."
    },
    "WebOptions.ScreenSize": {
      "type": "MsoScreenSize",
      "info": "Returns or sets the ideal minimum screen size (width by height, in pixels) that you should use when viewing the saved document in a web browser. Can be one of the MsoScreenSize constants. The default constant is msoScreenSize800x600. Read/write MsoScreenSize."
    },
    "WebOptions.TargetBrowser": {
      "type": "MsoTargetBrowser",
      "info": "Returns or sets an MsoTargetBrowser constant indicating the browser version. Read/write."
    },
    "WebOptions.UseLongFileNames": {
      "type": "bool",
      "info": "True if long file names are used when you save the document as a webpage. False if long file names are not used and the DOS file name format (8.3) is used. The default value is True. Read/write Boolean."
    },
    "Worksheets.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Worksheets.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Worksheets.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Worksheets.HPageBreaks": {
      "type": "HPageBreaks",
      "info": "Returns an HPageBreaks collection that represents the horizontal page breaks on the sheet. Read-only."
    },
    "Worksheets.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Worksheets.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Worksheets.Visible": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that determines whether the object is visible."
    },
    "Worksheets.VPageBreaks": {
      "type": "VPageBreaks",
      "info": "Returns a VPageBreaks collection that represents the vertical page breaks on the sheet. Read-only."
    },
    "XmlMaps.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "XmlMaps.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "XmlMaps.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "XmlMaps.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "XmlMaps.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "XmlNamespaces.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "XmlNamespaces.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "XmlNamespaces.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "XmlNamespaces.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "XmlNamespaces.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "XmlNamespaces.Value": {
      "type": "str",
      "info": "Returns a String value that represents the XML namespaces that have been added to the workbook."
    },
    "HPageBreaks.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "HPageBreaks.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "HPageBreaks.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "HPageBreaks.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "HPageBreaks.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "VPageBreaks.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "VPageBreaks.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "VPageBreaks.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "VPageBreaks.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "VPageBreaks.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "FileExportConverter.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "FileExportConverter.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "FileExportConverter.Description": {
      "type": "str",
      "info": "Returns the description for the file converter. Read-only String."
    },
    "FileExportConverter.Extensions": {
      "type": "FileExportConverter",
      "info": "Returns the file name extensions associated with the specified FileExportConverter object. Read-only String."
    },
    "FileExportConverter.FileFormat": {
      "type": "FileExportConverter",
      "info": "Returns an integer that identifies the file format associated with the specified FileExportConverter object. Read-only."
    },
    "FileExportConverter.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified FileExportConverter object. Read-only."
    },
    "Name.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Name.Category": {
      "type": "str",
      "info": "Returns or sets the category for the specified name in the language of the macro. The name must refer to a custom function or command. Read/write String."
    },
    "Name.CategoryLocal": {
      "type": "str",
      "info": "Returns or sets the category for the specified name, in the language of the user, if the name refers to a custom function or command. Read/write String."
    },
    "Name.Comment": {
      "type": "str",
      "info": "Returns or sets the comment associated with the name. Read/write String."
    },
    "Name.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Name.Index": {
      "type": "int",
      "info": "Returns a Long value that represents the index number of the object within the collection of similar objects."
    },
    "Name.MacroType": {
      "type": "XlXLMMacroType",
      "info": "Returns or sets what the name refers to. Read/write XlXLMMacroType."
    },
    "Name.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "Name.NameLocal": {
      "type": "str",
      "info": "Returns or sets the name of the object, in the language of the user. Read/write String."
    },
    "Name.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Name.RefersTo": {
      "type": "str",
      "info": "Returns or sets the formula that the name is defined to refer to, in the language of the macro and in A1-style notation, beginning with an equal sign. Read/write String."
    },
    "Name.RefersToLocal": {
      "type": "str",
      "info": "Returns or sets the formula that the name refers to. The formula is in the language of the user, and it's in A1-style notation, beginning with an equal sign. Read/write String."
    },
    "Name.RefersToR1C1": {
      "type": "str",
      "info": "Returns or sets the formula that the name refers to. The formula is in the language of the macro, and it's in R1C1-style notation, beginning with an equal sign. Read/write String."
    },
    "Name.RefersToR1C1Local": {
      "type": "str",
      "info": "Returns or sets the formula that the name refers to. This formula is in the language of the user, and it's in R1C1-style notation, beginning with an equal sign. Read/write String."
    },
    "Name.RefersToRange": {
      "type": "Range",
      "info": "Returns the Range object referred to by a Name object. Read-only."
    },
    "Name.ShortcutKey": {
      "type": "str",
      "info": "Returns or sets the shortcut key for a name defined as a custom Microsoft Excel 4.0 macro command. Read/write String."
    },
    "Name.ValidWorkbookParameter": {
      "type": "bool",
      "info": "Returns True if the specified Name object is a valid workbook parameter. Read-only Boolean."
    },
    "Name.Value": {
      "type": "str",
      "info": "Returns or sets a String value that represents the formula that the name is defined to refer to."
    },
    "Name.Visible": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines whether the object is visible. Read/write."
    },
    "Name.WorkbookParameter": {
      "type": "Name",
      "info": "Returns or sets the specified Name object as a workbook parameter. Read/write."
    },
    "ODBCError.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ODBCError.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ODBCError.ErrorString": {
      "type": "str",
      "info": "Returns a String value that represents the ODBC error string."
    },
    "ODBCError.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ODBCError.SqlState": {
      "type": "str",
      "info": "Returns the SQL state error. Read-only String."
    },
    "OLEDBError.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "OLEDBError.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "OLEDBError.ErrorString": {
      "type": "str",
      "info": "Returns a String value that represents the ODBC error string."
    },
    "OLEDBError.Native": {
      "type": "int",
      "info": "Returns a provider-specific numeric value that specifies an error. The error number corresponds to an error condition that resulted after the most recent OLE DB query. Read-only Long."
    },
    "OLEDBError.Number": {
      "type": "int",
      "info": "Returns a numeric value that specifies an error. The error number corresponds to a unique trap number corresponding to an error condition that resulted after the most recent OLE DB query. Read-only Long."
    },
    "OLEDBError.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "OLEDBError.SqlState": {
      "type": "str",
      "info": "Returns the SQL state error. Read-only String."
    },
    "OLEDBError.Stage": {
      "type": "int",
      "info": "Returns a numeric value specifying the stage of an error that resulted after the most recent OLE DB query. Read-only Long."
    },
    "RecentFile.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "RecentFile.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "RecentFile.Index": {
      "type": "int",
      "info": "Returns a Long value that represents the index number of the object within the collection of similar objects."
    },
    "RecentFile.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "RecentFile.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "RecentFile.Path": {
      "type": "str",
      "info": "Returns a String value that represents the complete path to the workbook or file that this RecentFile object represents."
    },
    "Watch.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Watch.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Watch.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Watch.Source": {
      "type": "SourceType",
      "info": "Returns a Variant value that represents the unique name that identifies items that have a SourceType property value of xlSourceRange, xlSourceChart, xlSourcePrintArea, xlSourceAutoFilter, xlSourcePivotTable, or xlSourceQuery."
    },
    "Border.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Border.Color": {
      "type": "RGB",
      "info": "Returns or sets the primary color of the object, as shown in the table in the remarks section. Use the RGB function to create a color value. Read/write Variant."
    },
    "Border.ColorIndex": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the color of the border."
    },
    "Border.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Border.LineStyle": {
      "type": "XlLineStyle",
      "info": "Returns or sets the line style for the border. Read/write XlLineStyle, xlGray25, xlGray50, xlGray75, or xlAutomatic."
    },
    "Border.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Border.ThemeColor": {
      "type": "VBA_Variant",
      "info": "Returns or sets the theme color in the applied color scheme that is associated with the specified object. Read/write Variant."
    },
    "Border.TintAndShade": {
      "type": "float",
      "info": "Returns or sets a Single that lightens or darkens a color."
    },
    "Border.Weight": {
      "type": "XlBorderWeight",
      "info": "Returns or sets an XlBorderWeight value that represents the weight of the border."
    },
    "Shape.Adjustments": {
      "type": "Adjustments",
      "info": "Returns an Adjustments object that contains adjustment values for all the adjustments in the specified shape. Applies to any Shape object that represents an AutoShape, WordArt, or Connector."
    },
    "Shape.AlternativeText": {
      "type": "Shape",
      "info": "Returns or sets the descriptive (alternative) text string for a Shape object when the object is saved to a webpage. Read/write String."
    },
    "Shape.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Shape.AutoShapeType": {
      "type": "ShapeRange",
      "info": "Returns or sets the shape type for the specified Shape or ShapeRange object, which must represent an AutoShape other than a line, freeform drawing, or connector. Read/write MsoAutoShapeType."
    },
    "Shape.BackgroundStyle": {
      "type": "MsoBackgroundStyleIndex",
      "info": "Returns or sets the background style. Read/write MsoBackgroundStyleIndex."
    },
    "Shape.BlackWhiteMode": {
      "type": "MsoBlackWhiteMode",
      "info": "Returns or sets a value that indicates how the specified shape appears when the presentation is viewed in black-and-white mode. Read/write MsoBlackWhiteMode."
    },
    "Shape.BottomRightCell": {
      "type": "Range",
      "info": "Returns a Range object that represents the cell that lies under the lower-right corner of the object. Read-only."
    },
    "Shape.Callout": {
      "type": "CalloutFormat",
      "info": "Returns a CalloutFormat object that contains callout formatting properties for the specified shape. Applies to a Shape object that represent line callouts. Read-only."
    },
    "Shape.Chart": {
      "type": "Chart",
      "info": "Returns a Chart object that represents the chart contained in the shape. Read-only."
    },
    "Shape.Child": {
      "type": "MsoTriState",
      "info": "Returns msoTrue if the specified shape is a child shape or if all shapes in a shape range are child shapes of the same parent. Returns msoFalse if the selected shape is not a child shape. Returns msoTriStateMixed if only some of the selected shapes are child shapes. Read-only MsoTriState."
    },
    "Shape.ConnectionSiteCount": {
      "type": "int",
      "info": "Returns the number of connection sites on the specified shape. Read-only Long."
    },
    "Shape.Connector": {
      "type": "MsoTriState",
      "info": "True if the specified shape is a connector. Read-only MsoTriState."
    },
    "Shape.ConnectorFormat": {
      "type": "ConnectorFormat",
      "info": "Returns a ConnectorFormat object that contains connector formatting properties. Applies to a Shape object that represents connectors. Read-only."
    },
    "Shape.ControlFormat": {
      "type": "ControlFormat",
      "info": "Returns a ControlFormat object that contains Microsoft Excel control properties. Read-only."
    },
    "Shape.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Shape.Decorative": {
      "type": "Sets or returns the decorative flag for the specified object. Read/write.",
      "info": "Sets or returns the decorative flag for the specified object. Read/write."
    },
    "Shape.Fill": {
      "type": "FillFormat",
      "info": "Returns a FillFormat object for a specified shape or a ChartFillFormat object for a specified chart that contains fill formatting properties for the shape or chart. Read-only."
    },
    "Shape.FormControlType": {
      "type": "XlFormControl",
      "info": "Returns the Microsoft Excel control type. Read-only XlFormControl."
    },
    "Shape.Glow": {
      "type": "GlowFormat",
      "info": "Returns a GlowFormat object for a specified shape that contains glow formatting properties for the shape. Read-only."
    },
    "Shape.GraphicStyle": {
      "type": "MsoGraphicStyleIndex",
      "info": "Returns or sets an MsoGraphicStyleIndex constant that represents the style of an SVG graphic. Read/write."
    },
    "Shape.GroupItems": {
      "type": "GroupShapes",
      "info": "Returns a GroupShapes object that represents the individual shapes in the specified group. Use the Item method of the GroupShapes object to return a single shape from the group. Applies to Shape objects that represent grouped shapes. Read-only."
    },
    "Shape.HasChart": {
      "type": "MsoTriState",
      "info": "Returns whether a shape contains a chart. Read-only MsoTriState."
    },
    "Shape.HasSmartArt": {
      "type": "Returns whether there is a SmartArt diagram present on the specified shape. Read-only.",
      "info": "Returns whether there is a SmartArt diagram present on the specified shape. Read-only."
    },
    "Shape.Height": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the height, in points, of the object."
    },
    "Shape.HorizontalFlip": {
      "type": "MsoTriState",
      "info": "True if the specified shape is flipped around the horizontal axis. Read-only MsoTriState."
    },
    "Shape.Hyperlink": {
      "type": "Hyperlink",
      "info": "Returns a Hyperlink object that represents the hyperlink for the shape."
    },
    "Shape.ID": {
      "type": "Returns a Long value that represents the type for the specified object.",
      "info": "Returns a Long value that represents the type for the specified object."
    },
    "Shape.Left": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the distance, in points, from the left edge of the object to the left edge of column A (on a worksheet) or the left edge of the chart area (on a chart)."
    },
    "Shape.Line": {
      "type": "LineFormat",
      "info": "Returns a LineFormat object that contains line formatting properties for the specified shape. (For a line, the LineFormat object represents the line itself; for a shape with a border, the LineFormat object represents the border). Read-only."
    },
    "Shape.LinkFormat": {
      "type": "LinkFormat",
      "info": "Returns a LinkFormat object that contains linked OLE object properties. Read-only."
    },
    "Shape.LockAspectRatio": {
      "type": "MsoTriState",
      "info": "True if the specified shape retains its original proportions when you resize it. False if you can change the height and width of the shape independently of one another when you resize it. Read/write MsoTriState."
    },
    "Shape.Locked": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that indicates if the object is locked."
    },
    "Shape.Model3D": {
      "type": "Model3DFormat",
      "info": "Returns a Model3DFormat object that contains Model3D properties. Read-only."
    },
    "Shape.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "Shape.Nodes": {
      "type": "ShapeNodes",
      "info": "Returns a ShapeNodes collection that represents the geometric description of the specified shape."
    },
    "Shape.OLEFormat": {
      "type": "OLEFormat",
      "info": "Returns an OLEFormat object that contains OLE object properties. Read-only."
    },
    "Shape.OnAction": {
      "type": "str",
      "info": "Returns or sets the name of a macro that's run when the specified object is chosen. Read/write String."
    },
    "Shape.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Shape.ParentGroup": {
      "type": "Shape",
      "info": "Returns a Shape object that represents the common parent shape of a child shape or a range of child shapes."
    },
    "Shape.PictureFormat": {
      "type": "PictureFormat",
      "info": "Returns a PictureFormat object that contains picture formatting properties for the specified shape. Applies to a Shape object that represents pictures or OLE objects. Read-only."
    },
    "Shape.Placement": {
      "type": "XlPlacement",
      "info": "Returns or sets an XlPlacement value that represents the way the object is attached to the cells below it."
    },
    "Shape.Reflection": {
      "type": "ReflectionFormat",
      "info": "Returns a ReflectionFormat object for a specified shape that contains reflection formatting properties for the shape. Read-only."
    },
    "Shape.Rotation": {
      "type": "float",
      "info": "Returns or sets the rotation of the shape, in degrees. Read/write Single."
    },
    "Shape.Shadow": {
      "type": "ShadowFormat",
      "info": "Returns a read-only ShadowFormat object that contains shadow formatting properties for the specified shape or shapes."
    },
    "Shape.ShapeStyle": {
      "type": "MsoShapeStyleIndex",
      "info": "Returns or sets an MsoShapeStyleIndex value that represents the shape style of the shape range. Read/write."
    },
    "Shape.SmartArt": {
      "type": "Returns an object that represents the SmartArt associated with the shape. Read-only.",
      "info": "Returns an object that represents the SmartArt associated with the shape. Read-only."
    },
    "Shape.SoftEdge": {
      "type": "SoftEdgeFormat",
      "info": "Returns a SoftEdgeFormat object for a specified shape that contains soft edge formatting properties for the shape. Read-only."
    },
    "Shape.TextEffect": {
      "type": "TextEffectFormat",
      "info": "Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape. Read-only."
    },
    "Shape.TextFrame": {
      "type": "TextFrame",
      "info": "Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape. Read-only."
    },
    "Shape.TextFrame2": {
      "type": "TextFrame2",
      "info": "Returns a TextFrame2 object that contains text formatting for the specified shape. Read-only."
    },
    "Shape.ThreeD": {
      "type": "ThreeDFormat",
      "info": "Returns a ThreeDFormat object that contains 3D-effect formatting properties for the specified shape. Read-only."
    },
    "Shape.Title": {
      "type": "Returns or sets the title of the alternative text associated with the specified shape. Read/write.",
      "info": "Returns or sets the title of the alternative text associated with the specified shape. Read/write."
    },
    "Shape.Top": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the distance, in points, from the top edge of the topmost shape in the shape range to the top edge of the worksheet."
    },
    "Shape.TopLeftCell": {
      "type": "Range",
      "info": "Returns a Range object that represents the cell that lies under the upper-left corner of the specified object. Read-only."
    },
    "Shape.Type": {
      "type": "MsoShapeType",
      "info": "Returns or sets an MsoShapeType value that represents the shape type."
    },
    "Shape.VerticalFlip": {
      "type": "MsoTriState",
      "info": "True if the specified shape is flipped around the vertical axis. Read-only MsoTriState."
    },
    "Shape.Vertices": {
      "type": "AddCurve",
      "info": "Returns the coordinates of the specified freeform drawing's vertices (and control points for Bézier curves) as a series of coordinate pairs. Use the array returned by this property as an argument to the AddCurve method or AddPolyLine method. Read-only Variant."
    },
    "Shape.Visible": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that determines whether the object is visible. Read/write."
    },
    "Shape.Width": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the width, in points, of the object."
    },
    "Shape.ZOrderPosition": {
      "type": "int",
      "info": "Returns the position of the specified shape in the z-order. Read-only Long."
    },
    "Author.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Author.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Author.Name": {
      "type": "str",
      "info": "Returns a String that contains the display name of the specified comment author. Read-only."
    },
    "Author.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Author.ProviderID": {
      "type": "str",
      "info": "Returns a String that represents the ID of the service providing the contact information. Read-only."
    },
    "Author.UserID": {
      "type": "str",
      "info": "Returns a String that represents the user ID of the contact. Read-only."
    },
    "CommentsThreaded.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CommentsThreaded.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "CommentsThreaded.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CommentsThreaded.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "FormatCondition.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "FormatCondition.AppliesTo": {
      "type": "Range",
      "info": "Returns a Range object specifying the cell range to which the formatting rule is applied."
    },
    "FormatCondition.Borders": {
      "type": "Borders",
      "info": "Returns a Borders collection that represents the borders of a style or a range of cells (including a range defined as part of a conditional format)."
    },
    "FormatCondition.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "FormatCondition.DateOperator": {
      "type": "Specifies the Date operator used in the format condition. Read/write.",
      "info": "Specifies the Date operator used in the format condition. Read/write."
    },
    "FormatCondition.Font": {
      "type": "Font",
      "info": "Returns a Font object that represents the font of the specified object."
    },
    "FormatCondition.Formula1": {
      "type": "str",
      "info": "Returns the value or expression associated with the conditional format or data validation. Can be a constant value, a string value, a cell reference, or a formula. Read-only String."
    },
    "FormatCondition.Formula2": {
      "type": "Operator",
      "info": "Returns the value or expression associated with the second part of a conditional format or data validation. Used only when the data validation conditional format Operator property is xlBetween or xlNotBetween. Can be a constant value, a string value, a cell reference, or a formula. Read-only String."
    },
    "FormatCondition.Interior": {
      "type": "Interior",
      "info": "Returns an Interior object that represents the interior of the specified object."
    },
    "FormatCondition.NumberFormat": {
      "type": "bool",
      "info": "Returns or sets the number format applied to a cell if the conditional formatting rule evaluates to True. Read/write Variant."
    },
    "FormatCondition.Operator": {
      "type": "int",
      "info": "Returns a Long value that represents the operator for the conditional format."
    },
    "FormatCondition.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "FormatCondition.Priority": {
      "type": "Returns or sets the priority value of the conditional formatting rule. The priority determines the order of evaluation when multiple conditional formatting rules exist on a worksheet.",
      "info": "Returns or sets the priority value of the conditional formatting rule. The priority determines the order of evaluation when multiple conditional formatting rules exist on a worksheet."
    },
    "FormatCondition.PTCondition": {
      "type": "bool",
      "info": "Returns a Boolean value indicating if the conditional format is being applied to a PivotTable. Read-only."
    },
    "FormatCondition.ScopeType": {
      "type": "XlPivotConditionScope",
      "info": "Returns or sets one of the constants of the XlPivotConditionScope enumeration, which determines the scope of the conditional format when it is applied to a PivotTable."
    },
    "FormatCondition.StopIfTrue": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that determines if additional formatting rules on the cell should be evaluated if the current rule evaluates to True."
    },
    "FormatCondition.Text": {
      "type": "str",
      "info": "Returns or sets a String value specifying the text string used by the conditional formatting rule."
    },
    "FormatCondition.TextOperator": {
      "type": "XlContainsOperator",
      "info": "Returns or sets one of the constants of the XlContainsOperator enumeration, specifying the text search performed by the conditional formatting rule."
    },
    "FormatCondition.Type": {
      "type": "XlFormatConditionType",
      "info": "Returns a Long value, containing an XlFormatConditionType value, that represents the object type."
    },
    "Hyperlink.Address": {
      "type": "str",
      "info": "Returns or sets a String value that represents the address of the target document."
    },
    "Hyperlink.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Hyperlink.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Hyperlink.EmailSubject": {
      "type": "str",
      "info": "Returns or sets the text string of the specified hyperlink's email subject line. The subject line is appended to the hyperlink's address. Read/write String."
    },
    "Hyperlink.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "Hyperlink.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Hyperlink.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents the range that the specified hyperlink is attached to."
    },
    "Hyperlink.ScreenTip": {
      "type": "str",
      "info": "Returns or sets the ScreenTip text for the specified hyperlink. Read/write String."
    },
    "Hyperlink.Shape": {
      "type": "Shape",
      "info": "Returns a Shape object that represents the shape attached to the specified hyperlink."
    },
    "Hyperlink.SubAddress": {
      "type": "str",
      "info": "Returns or sets the location within the document associated with the hyperlink. Read/write String."
    },
    "Hyperlink.TextToDisplay": {
      "type": "str",
      "info": "Returns or sets the text to be displayed for the specified hyperlink. The default value is the address of the hyperlink. Read/write String."
    },
    "Hyperlink.Type": {
      "type": "MsoHyperlinkType",
      "info": "Returns a Long value, containing an MsoHyperlinkType constant, that represents the location of the HTML frame."
    },
    "ListColumns.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ListColumns.Count": {
      "type": "int",
      "info": "Returns an Integer value that represents the number of objects in the collection."
    },
    "ListColumns.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ListColumns.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "ListColumns.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ListRows.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ListRows.Count": {
      "type": "int",
      "info": "Returns an Integer value that represents the number of objects in the collection."
    },
    "ListRows.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ListRows.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "ListRows.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "TableObject.AdjustColumnWidth": {
      "type": "bool",
      "info": "Specifies if the column widths are automatically adjusted for the best fit each time you refresh the specified query table. The default value is True. Read/write Boolean."
    },
    "TableObject.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "TableObject.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "TableObject.Destination": {
      "type": "TableObject",
      "info": "Returns the cell in the upper-left corner of the query table destination range (the range where the resulting query table will be placed). The destination range must be on the worksheet that contains the TableObject object. Read-only Range."
    },
    "TableObject.EnableEditing": {
      "type": "bool",
      "info": "True if the user can edit the specified query table. False if the user can only refresh the query table. Read/write Boolean."
    },
    "TableObject.EnableRefresh": {
      "type": "bool",
      "info": "Specifies if the query table can be refreshed by the user. Read/write Boolean."
    },
    "TableObject.FetchedRowOverflow": {
      "type": "Refresh",
      "info": "Specifies if the number of rows returned by the last use of the Refresh method is greater than the number of rows available on the worksheet. Read-only Boolean."
    },
    "TableObject.ListObject": {
      "type": "ListObject",
      "info": "Returns a ListObject object for the TableObject object. Read-only."
    },
    "TableObject.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified TableObject object. Read-only."
    },
    "TableObject.PreserveColumnInfo": {
      "type": "bool",
      "info": "Specifies if column sorting, filtering, and layout information is preserved whenever a query table is refreshed. The default value is False. Read/write Boolean."
    },
    "TableObject.PreserveFormatting": {
      "type": "bool",
      "info": "True if any formatting common to the first five rows of data are applied to new rows of data in the query table. Unused cells aren't formatted. The property is False if the last AutoFormat applied to the query table is applied to new rows of data. The default value is True. Read/write Boolean."
    },
    "TableObject.RefreshStyle": {
      "type": "XlCellInsertionMode",
      "info": "Returns or sets the way rows on the specified worksheet are added or deleted to accommodate the number of rows in a record set returned by a query. Read/write XlCellInsertionMode enumeration."
    },
    "TableObject.ResultRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the area of the worksheet occupied by the specified query table. Read-only."
    },
    "TableObject.RowNumbers": {
      "type": "bool",
      "info": "Specifies if row numbers are added as the first column of the specified query table. Read/write Boolean."
    },
    "TableObject.WorkbookConnection": {
      "type": "WorkbookConnection",
      "info": "Returns the WorkbookConnection object used by the TableObject for connecting to the model."
    },
    "XmlMap.AdjustColumnWidth": {
      "type": "bool",
      "info": "True if the column widths are automatically adjusted for the best fit each time that you refresh the specified XML map."
    },
    "XmlMap.AppendOnImport": {
      "type": "bool",
      "info": "True if you want to append new rows to XML lists that are bound to the specified schema map when you are importing new data or refreshing an existing connection."
    },
    "XmlMap.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "XmlMap.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "XmlMap.DataBinding": {
      "type": "XmlDataBinding",
      "info": "Returns an XmlDataBinding object that represents the binding associated with the specified schema map. Read-only."
    },
    "XmlMap.IsExportable": {
      "type": "XPath",
      "info": "Returns True if Microsoft Excel can use the XPath objects in the specified schema map to export XML data, and all XML lists mapped to the specified schema map can be exported."
    },
    "XmlMap.Name": {
      "type": "str",
      "info": "Returns or sets a String value that represents the friendly name used to uniquely identify a mapping in the workbook."
    },
    "XmlMap.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "XmlMap.PreserveColumnFilter": {
      "type": "bool",
      "info": "Returns or sets whether filtering is preserved when the specified XML map is refreshed. Read/write Boolean."
    },
    "XmlMap.PreserveNumberFormatting": {
      "type": "bool",
      "info": "True if number formatting on cells mapped to the specified XML schema map are preserved when the schema map is refreshed. The default value is False. Read/write Boolean."
    },
    "XmlMap.RootElementName": {
      "type": "str",
      "info": "Returns a String that represents the name of the root element for the specified XML schema map. Read-only."
    },
    "XmlMap.RootElementNamespace": {
      "type": "XmlNamespace",
      "info": "Returns an XmlNamespace object that represents the root element for the specified XML schema map. Read-only."
    },
    "XmlMap.SaveDataSourceDefinition": {
      "type": "bool",
      "info": "True if the data source definition of the specified XML schema map is saved with the workbook. The default value is True. Read/write Boolean."
    },
    "XmlMap.Schemas": {
      "type": "XmlSchemas",
      "info": "Returns an XmlSchemas collection that represents the schemas that the specified XmlMap object contains. Read-only."
    },
    "XmlMap.ShowImportExportValidationErrors": {
      "type": "bool",
      "info": "Returns or sets whether to display a dialog box that details schema-validation errors when data is imported or exported through the specified XML schema map. The default value is False. Read/write Boolean."
    },
    "XmlMap.WorkbookConnection": {
      "type": "XMLMap",
      "info": "Returns a new connection for the specified XMLMap object. Read-only."
    },
    "CalculatedMembers.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CalculatedMembers.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "CalculatedMembers.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CalculatedMembers.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "CalculatedMembers.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotTableChangeList.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotTableChangeList.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "PivotTableChangeList.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotTableChangeList.Item": {
      "type": "ValueChange",
      "info": "Returns a single ValueChange object from the specified PivotTableChangeList collection."
    },
    "PivotTableChangeList.Parent": {
      "type": "PivotTable",
      "info": "Returns the parent PivotTable object for the specified PivotTableChangeList collection. Read-only."
    },
    "CubeFields.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CubeFields.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "CubeFields.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CubeFields.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "CubeFields.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotAxis.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotAxis.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotAxis.Parent": {
      "type": "PivotAxis",
      "info": "Returns the parent object for the specified PivotAxis object. Read-only."
    },
    "PivotAxis.PivotLines": {
      "type": "PivotLines",
      "info": "Returns the PivotLines object attached to the specified PivotAxis object. Read-only."
    },
    "PivotFormulas.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotFormulas.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "PivotFormulas.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotFormulas.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Slicers.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Slicers.Count": {
      "type": "Returns the number of objects in the collection.",
      "info": "Returns the number of objects in the collection."
    },
    "Slicers.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Slicers.Item": {
      "type": "Slicer",
      "info": "Returns a Slicer object from the collection. Read-only."
    },
    "Slicers.Parent": {
      "type": "SlicerCache",
      "info": "Returns the parent SlicerCache object for the specified Slicers collection. Read-only."
    },
    "PivotItemList.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotItemList.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "PivotItemList.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotItemList.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotLine.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotLine.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotLine.LineType": {
      "type": "XlPivotLineType",
      "info": "Returns an XlPivotLineType constant that indicates the type of PivotLine. Read-only."
    },
    "PivotLine.Parent": {
      "type": "PivotLine",
      "info": "Returns the parent object for the specified PivotLine object. Read-only."
    },
    "PivotLine.PivotLineCells": {
      "type": "PivotCell",
      "info": "Returns a collection of PivotCell objects in a PivotLine. Read-only."
    },
    "PivotLine.PivotLineCellsFull": {
      "type": "PivotLine",
      "info": "Retrieves all the PivotLine cells including those that are hidden in compact form. Read-only."
    },
    "PivotLine.Position": {
      "type": "PivotLine",
      "info": "Returns or sets the position of the PivotLine object. Read-only."
    },
    "CubeField.AllItemsVisible": {
      "type": "AllItemsVisible",
      "info": "The AllItemsVisible property checks whether manual filtering is applied to a PivotField or CubeField. Read-only Boolean."
    },
    "CubeField.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CubeField.Caption": {
      "type": "str",
      "info": "Returns a String value that represents the label text for the cube field."
    },
    "CubeField.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CubeField.CubeFieldSubType": {
      "type": "Specifies the type of a CubeField. Read-only.",
      "info": "Specifies the type of a CubeField. Read-only."
    },
    "CubeField.CubeFieldType": {
      "type": "XlCubeFieldType",
      "info": "Indicates whether the OLAP cube field is a hierarchy field or a measure field. Can be one of the XlCubeFieldType constants."
    },
    "CubeField.CurrentPageName": {
      "type": "str",
      "info": "Returns or sets the page name for a CubeField. Read/write String."
    },
    "CubeField.DragToColumn": {
      "type": "bool",
      "info": "True if the specified field can be dragged to the column position. The default value is True. Read/write Boolean."
    },
    "CubeField.DragToData": {
      "type": "bool",
      "info": "True if the specified field can be dragged to the data position. The default value is True. Read/write Boolean."
    },
    "CubeField.DragToHide": {
      "type": "bool",
      "info": "True if the field can be hidden by being dragged off the PivotTable report. The default value is True. Read/write Boolean."
    },
    "CubeField.DragToPage": {
      "type": "bool",
      "info": "True if the field can be dragged to the page position. The default value is True. Read/write Boolean."
    },
    "CubeField.DragToRow": {
      "type": "bool",
      "info": "True if the field can be dragged to the row position. The default value is True. Read/write Boolean."
    },
    "CubeField.EnableMultiplePageItems": {
      "type": "bool",
      "info": "Set to True to allow multiple items in the page field area for OLAP PivotTables to be selected. The default value is False. Read/write Boolean."
    },
    "CubeField.FlattenHierarchies": {
      "type": "Returns or sets whether items from all levels of hierarchies in a named set cube field are displayed in the same field of a PivotTable report based on an OLAP cube. Read/write.",
      "info": "Returns or sets whether items from all levels of hierarchies in a named set cube field are displayed in the same field of a PivotTable report based on an OLAP cube. Read/write."
    },
    "CubeField.HasMemberProperties": {
      "type": "bool",
      "info": "Returns True when there are member properties specified to be displayed for the cube field. Read-only Boolean."
    },
    "CubeField.HierarchizeDistinct": {
      "type": "Returns or sets whether to order and remove duplicates when displaying the specified named set in a PivotTable report based on an OLAP cube. Read/write.",
      "info": "Returns or sets whether to order and remove duplicates when displaying the specified named set in a PivotTable report based on an OLAP cube. Read/write."
    },
    "CubeField.IncludeNewItemsInFilter": {
      "type": "IncludeNewItemsInFilter",
      "info": "The IncludeNewItemsInFilter property is used to track included/excluded items in OLAP PivotTables. Read/write."
    },
    "CubeField.IsDate": {
      "type": "bool",
      "info": "Returns True if the CubeField is a date. Read-only Boolean."
    },
    "CubeField.LayoutForm": {
      "type": "XlLayoutFormType",
      "info": "Returns or sets the way the specified PivotTable items appear—in table format or in outline format. Read/write XlLayoutFormType."
    },
    "CubeField.LayoutSubtotalLocation": {
      "type": "XlSubtotalLocationType",
      "info": "Returns or sets the position of the PivotTable field subtotals in relation to (either above or below) the specified field. Read/write XlSubtotalLocationType."
    },
    "CubeField.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "CubeField.Orientation": {
      "type": "XlPivotFieldOrientation",
      "info": "Returns or sets an XlPivotFieldOrientation value that represents the location of the field in the specified PivotTable report."
    },
    "CubeField.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CubeField.PivotFields": {
      "type": "PivotFields",
      "info": "Returns the PivotFields collection. This collection contains all PivotTable fields, including those that aren't currently visible on-screen. Read-only PivotFields object."
    },
    "CubeField.Position": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the position of the hierarchy field on the PivotTable report when it's dragged from the field well."
    },
    "CubeField.ShowInFieldList": {
      "type": "bool",
      "info": "When set to True (default), a CubeField object will be shown in the field list. Read/write Boolean."
    },
    "CubeField.TreeviewControl": {
      "type": "TreeviewControl",
      "info": "Returns the TreeviewControl object of the CubeField object, representing the cube manipulation control of an OLAP-based PivotTable report. Read-only."
    },
    "CubeField.Value": {
      "type": "str",
      "info": "Returns a String value that represents the name of the specified field."
    },
    "Parameters.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Parameters.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Parameters.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Parameters.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "WorkbookConnection.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "WorkbookConnection.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "WorkbookConnection.DataFeedConnection": {
      "type": "DataFeedConnection",
      "info": "Returns a DataFeedConnection object that contains the data and functionality needed to connect to data feeds. Read-only."
    },
    "WorkbookConnection.Description": {
      "type": "WorkbookConnection",
      "info": "Returns or sets a brief description for a WorkbookConnection object. Read/write String."
    },
    "WorkbookConnection.InModel": {
      "type": "WorkbookConnection",
      "info": "Specifies whether the WorkbookConnection has been added to the model. Read-only Boolean."
    },
    "WorkbookConnection.ModelConnection": {
      "type": "Returns an object that contains information for the new model connection type introduced in Excel 2013 to interact with the integrated Data Model. Read-only.",
      "info": "Returns an object that contains information for the new model connection type introduced in Excel 2013 to interact with the integrated Data Model. Read-only."
    },
    "WorkbookConnection.ModelTables": {
      "type": "ModelTables",
      "info": "Returns a ModelTables object associated with the particular connection. Read-only."
    },
    "WorkbookConnection.Name": {
      "type": "WorkbookConnection",
      "info": "Returns or sets the name of the WorkbookConnection object. Read/write String."
    },
    "WorkbookConnection.ODBCConnection": {
      "type": "WorkbookConnection",
      "info": "Returns the ODBC connection details for the specified WorkbookConnection object. Read-only ODBCConnection."
    },
    "WorkbookConnection.OLEDBConnection": {
      "type": "WorkbookConnection",
      "info": "Returns the OLEDB connection details for the specified WorkbookConnection object. Read-only OLEDBConnection."
    },
    "WorkbookConnection.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "WorkbookConnection.Ranges": {
      "type": "WorkbookConnection",
      "info": "Returns the range of objects for the specified WorkbookConnection object. Read-only Ranges."
    },
    "WorkbookConnection.RefreshWithRefreshAll": {
      "type": "bool",
      "info": "Determines if the connection should be refreshed when Refresh All is executed. Read/write Boolean."
    },
    "WorkbookConnection.TextConnection": {
      "type": "TextConnection",
      "info": "Returns a TextConnection object that contains the information on a query to a text file. Read-only."
    },
    "WorkbookConnection.Type": {
      "type": "XlConnectionType",
      "info": "Returns the workbook connection type. Read-only XlConnectionType."
    },
    "WorkbookConnection.WorksheetDataConnection": {
      "type": "Returns an object that contains information for a connection from the PowerPivot Model to data within the workbook, such as a range, named range, or table. Read-only.",
      "info": "Returns an object that contains information for a connection from the PowerPivot Model to data within the workbook, such as a range, named range, or table. Read-only."
    },
    "SparklineGroup.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SparklineGroup.Axes": {
      "type": "SparkAxes",
      "info": "Returns the associated SparkAxes object. Read-only."
    },
    "SparklineGroup.Count": {
      "type": "Returns the number of sparklines in the sparkline group. Read-only.",
      "info": "Returns the number of sparklines in the sparkline group. Read-only."
    },
    "SparklineGroup.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SparklineGroup.DateRange": {
      "type": "Gets or sets the date range for the sparkline group. Read/write.",
      "info": "Gets or sets the date range for the sparkline group. Read/write."
    },
    "SparklineGroup.DisplayBlanksAs": {
      "type": null,
      "info": null,
      "ERROR": "not found info on 'excel.sparklinegroup.displayblanksas.html' "
    },
    "SparklineGroup.DisplayHidden": {
      "type": "Specifies if hidden cells are plotted in the sparkline group. Read/write.",
      "info": "Specifies if hidden cells are plotted in the sparkline group. Read/write."
    },
    "SparklineGroup.Item": {
      "type": "Sparkline",
      "info": "Returns a Sparkline object. Read-only."
    },
    "SparklineGroup.LineWeight": {
      "type": "Gets or sets the thickness of the sparklines in the sparkline group. Read/write.",
      "info": "Gets or sets the thickness of the sparklines in the sparkline group. Read/write."
    },
    "SparklineGroup.Location": {
      "type": "Range",
      "info": "Gets or sets the Range object that represents the location of the sparkline group. Read/write."
    },
    "SparklineGroup.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "SparklineGroup.PlotBy": {
      "type": "Returns or sets how to plot the sparkline when the data on which it is based is in a square-shaped range. Read/write.",
      "info": "Returns or sets how to plot the sparkline when the data on which it is based is in a square-shaped range. Read/write."
    },
    "SparklineGroup.Points": {
      "type": "SparkPoints",
      "info": "Returns the associated SparkPoints object for the sparkline group. Read-only."
    },
    "SparklineGroup.SeriesColor": {
      "type": "FormatColor",
      "info": "Returns a FormatColor object that represents the main series color for the sparkline group. Read-only."
    },
    "SparklineGroup.SourceData": {
      "type": "Returns or sets the range that contains the source data for the sparkline group. Read/write.",
      "info": "Returns or sets the range that contains the source data for the sparkline group. Read/write."
    },
    "SparklineGroup.Type": {
      "type": "Gets or sets the type of sparkline for the group. Read/write.",
      "info": "Gets or sets the type of sparkline for the group. Read/write."
    },
    "AutoFilter.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "AutoFilter.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "AutoFilter.FilterMode": {
      "type": "bool",
      "info": "Returns True if the worksheet is in the AutoFilter filter mode. Read-only Boolean."
    },
    "AutoFilter.Filters": {
      "type": "Filters",
      "info": "Returns a Filters collection that represents all the filters in an autofiltered range. Read-only."
    },
    "AutoFilter.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "AutoFilter.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents the range to which the specified AutoFilter applies."
    },
    "AutoFilter.Sort": {
      "type": "AutoFilter",
      "info": "Gets the sort column or columns, and sort order for the AutoFilter collection."
    },
    "Comments.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Comments.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Comments.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Comments.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CustomProperties.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CustomProperties.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "CustomProperties.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CustomProperties.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "CustomProperties.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Outline.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Outline.AutomaticStyles": {
      "type": "bool",
      "info": "True if the outline uses automatic styles. Read/write Boolean."
    },
    "Outline.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Outline.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Outline.SummaryColumn": {
      "type": "XlSummaryColumn",
      "info": "Returns or sets the location of the summary columns in the outline. Read/write XlSummaryColumn."
    },
    "Outline.SummaryRow": {
      "type": "XlSummaryRow",
      "info": "Returns or sets the location of the summary rows in the outline. Read/write XlSummaryRow."
    },
    "Protection.AllowDeletingColumns": {
      "type": "bool",
      "info": "Returns True if the deletion of columns is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowDeletingRows": {
      "type": "bool",
      "info": "Returns True if the deletion of rows is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowEditRanges": {
      "type": "AllowEditRanges",
      "info": "Returns an AllowEditRanges object."
    },
    "Protection.AllowFiltering": {
      "type": "bool",
      "info": "Returns True if the user is allowed to make use of an AutoFilter that was created before the sheet was protected. Read-only Boolean."
    },
    "Protection.AllowFormattingCells": {
      "type": "bool",
      "info": "Returns True if the formatting of cells is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowFormattingColumns": {
      "type": "bool",
      "info": "Returns True if the formatting of columns is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowFormattingRows": {
      "type": "bool",
      "info": "Returns True if the formatting of rows is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowInsertingColumns": {
      "type": "bool",
      "info": "Returns True if the insertion of columns is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowInsertingHyperlinks": {
      "type": "bool",
      "info": "Returns True if the insertion of hyperlinks is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowInsertingRows": {
      "type": "bool",
      "info": "Returns True if the insertion of rows is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowSorting": {
      "type": "bool",
      "info": "Returns True if the sorting option is allowed on a protected worksheet. Read-only Boolean."
    },
    "Protection.AllowUsingPivotTables": {
      "type": "bool",
      "info": "Returns True if the user is allowed to manipulate PivotTables on a protected worksheet. Read-only Boolean."
    },
    "QueryTables.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "QueryTables.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "QueryTables.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "QueryTables.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Sort.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Sort.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Sort.Header": {
      "type": "XlYesNoGuess",
      "info": "Specifies whether the first row contains header information. Read/write XlYesNoGuess."
    },
    "Sort.MatchCase": {
      "type": "bool",
      "info": "Set to True to perform a case-sensitive sort, or set to False to perform a non-case-sensitive sort. Read/write."
    },
    "Sort.Orientation": {
      "type": "XlSortOrientation",
      "info": "Specifies the orientation for the sort. Read/write XlSortOrientation."
    },
    "Sort.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Sort.Rng": {
      "type": "Return the range of values on which the sort is performed. Read-only.",
      "info": "Return the range of values on which the sort is performed. Read-only."
    },
    "Sort.SortFields": {
      "type": "SortFields",
      "info": "Returns the SortFields object that represents the collection of sort fields associated with the Sort object. Read-only."
    },
    "Sort.SortMethod": {
      "type": "XlSortMethod",
      "info": "Specifies the sort method for Chinese languages. Read/write XlSortMethod."
    },
    "ChartFormat.Adjustments": {
      "type": "Adjustments",
      "info": "Returns an Adjustments object. Read-only."
    },
    "ChartFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ChartFormat.AutoShapeType": {
      "type": "MsoAutoShapeType",
      "info": "Returns the type of the specified shape. Read-only MsoAutoShapeType."
    },
    "ChartFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ChartFormat.Fill": {
      "type": "FillFormat",
      "info": "Returns a FillFormat object for the parent chart element that contains fill formatting properties for the chart element. Read-only."
    },
    "ChartFormat.Glow": {
      "type": "GlowFormat",
      "info": "Returns a GlowFormat object for a specified chart that contains glow formatting properties for the chart element. Read-only."
    },
    "ChartFormat.Line": {
      "type": "LineFormat",
      "info": "Returns a LineFormat object that contains line formatting properties for the specified chart element. Read-only."
    },
    "ChartFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ChartFormat.PictureFormat": {
      "type": "PictureFormat",
      "info": "Returns a PictureFormat object for a specified chart that contains pictures. Read-only."
    },
    "ChartFormat.Shadow": {
      "type": "ShadowFormat",
      "info": "Returns a ShadowFormat object that contains shadow formatting properties for the chart element. Read-only."
    },
    "ChartFormat.SoftEdge": {
      "type": "SoftEdgeFormat",
      "info": "Returns a SoftEdgeFormat object for a specified chart that contains soft edge formatting properties for the chart. Read-only."
    },
    "ChartFormat.TextFrame2": {
      "type": "TextFrame2",
      "info": "Returns a TextFrame2 object that contains text formatting for the specified chart element. Read-only."
    },
    "ChartFormat.ThreeD": {
      "type": "ThreeDFormat",
      "info": "Returns a ThreeDFormat object that contains 3D-effect formatting properties for the specified chart. Read-only."
    },
    "Graphic.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Graphic.Brightness": {
      "type": "float",
      "info": "Returns or sets the brightness of the specified picture or OLE object. The value for this property must be a number from 0.0 (dimmest) to 1.0 (brightest). Read/write Single."
    },
    "Graphic.ColorType": {
      "type": "MsoPictureColorType",
      "info": "Returns or sets the type of color transformation applied to the specified picture or OLE object. Read/write MsoPictureColorType."
    },
    "Graphic.Contrast": {
      "type": "float",
      "info": "Returns or sets the contrast for the specified picture or OLE object. The value for this property must be a number from 0.0 (the least contrast) to 1.0 (the greatest contrast). Read/write Single."
    },
    "Graphic.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Graphic.CropBottom": {
      "type": "points",
      "info": "Returns or sets the number of points that are cropped off the bottom of the specified picture or OLE object. Read/write Single."
    },
    "Graphic.CropLeft": {
      "type": "points",
      "info": "Returns or sets the number of points that are cropped off the left side of the specified picture or OLE object. Read/write Single."
    },
    "Graphic.CropRight": {
      "type": "points",
      "info": "Returns or sets the number of points that are cropped off the right side of the specified picture or OLE object. Read/write Single."
    },
    "Graphic.CropTop": {
      "type": "points",
      "info": "Returns or sets the number of points that are cropped off the top of the specified picture or OLE object. Read/write Single."
    },
    "Graphic.Filename": {
      "type": "str",
      "info": "Returns or sets the URL (on the intranet or the web) or path (local or network) to the location where the specified source object was saved. Read/write String."
    },
    "Graphic.Height": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the height, in points, of the object."
    },
    "Graphic.LockAspectRatio": {
      "type": "MsoTriState",
      "info": "True if the specified shape retains its original proportions when you resize it. False if you can change the height and width of the shape independently of one another when you resize it. Read/write MsoTriState."
    },
    "Graphic.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Graphic.Width": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the width, in points, of the object."
    },
    "Pages.Count": {
      "type": "int",
      "info": "Returns the number of objects in the collection. Read-only Long."
    },
    "Pages.Item": {
      "type": "Page",
      "info": "Returns a Page object that represents a collection of pages in a workbook. Read-only."
    },
    "ShapeRange.Adjustments": {
      "type": "Adjustments",
      "info": "Returns an Adjustments object that contains adjustment values for all the adjustments in the specified shape. Applies to any ShapeRange object that represents an AutoShape, WordArt, or Connector."
    },
    "ShapeRange.AlternativeText": {
      "type": "ShapeRange",
      "info": "Returns or sets the descriptive (alternative) text string for a ShapeRange object when the object is saved to a webpage. Read/write String."
    },
    "ShapeRange.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application. When used with an object qualifier, this property returns an Application object that represents the creator of the specified object (you can use this property with an OLE Automation object to return the application of that object). Read-only."
    },
    "ShapeRange.AutoShapeType": {
      "type": "Shape",
      "info": "Returns or sets the shape type for the specified Shape or ShapeRange object, which must represent an AutoShape other than a line, freeform drawing, or connector. Read/write MsoAutoShapeType."
    },
    "ShapeRange.BackgroundStyle": {
      "type": "MsoBackgroundStyleIndex",
      "info": "Returns or sets the background style. Read/write MsoBackgroundStyleIndex."
    },
    "ShapeRange.BlackWhiteMode": {
      "type": "MsoBlackWhiteMode",
      "info": "Returns or sets a value that indicates how the specified shape appears when the presentation is viewed in black-and-white mode. Read/write MsoBlackWhiteMode."
    },
    "ShapeRange.Callout": {
      "type": "CalloutFormat",
      "info": "Returns a CalloutFormat object that contains callout formatting properties for the specified shape. Applies to ShapeRange objects that represent line callouts. Read-only."
    },
    "ShapeRange.Chart": {
      "type": "Chart",
      "info": "Returns a Chart object that represents the chart contained in the shape range. Read-only."
    },
    "ShapeRange.Child": {
      "type": "MsoTriState",
      "info": "Returns msoTrue if the specified shape is a child shape or if all shapes in a shape range are child shapes of the same parent. Returns msoFalse if the selected shape is not a child shape. Returns msoTriStateMixed if only some of the selected shapes are child shapes. Read-only MsoTriState."
    },
    "ShapeRange.ConnectionSiteCount": {
      "type": "int",
      "info": "Returns the number of connection sites on the specified shape. Read-only Long."
    },
    "ShapeRange.Connector": {
      "type": "MsoTriState",
      "info": "True if the specified shape is a connector. Read-only MsoTriState."
    },
    "ShapeRange.ConnectorFormat": {
      "type": "ConnectorFormat",
      "info": "Returns a ConnectorFormat object that contains connector formatting properties. Applies to ShapeRange objects that represent connectors. Read-only."
    },
    "ShapeRange.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "ShapeRange.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ShapeRange.Decorative": {
      "type": "Sets or returns the decorative flag for the specified object. Read/write.",
      "info": "Sets or returns the decorative flag for the specified object. Read/write."
    },
    "ShapeRange.Fill": {
      "type": "FillFormat",
      "info": "Returns a FillFormat object for a specified shape or a ChartFillFormat object for a specified chart that contains fill formatting properties for the shape or chart. Read-only."
    },
    "ShapeRange.Glow": {
      "type": "GlowFormat",
      "info": "Returns a GlowFormat object for a specified shape range that contains glow formatting properties for the shape range. Read-only."
    },
    "ShapeRange.GraphicStyle": {
      "type": "MsoGraphicStyleIndex",
      "info": "Returns or sets an MsoGraphicStyleIndex constant that represents the style of a shape range containing one or more SVG graphics. Read/write."
    },
    "ShapeRange.GroupItems": {
      "type": "GroupShapes",
      "info": "Returns a GroupShapes object that represents the individual shapes in the specified group. Use the Item method of the GroupShapes object to return a single shape from the group. Applies to ShapeRange objects that represent grouped shapes. Read-only."
    },
    "ShapeRange.HasChart": {
      "type": "MsoTriState",
      "info": "Returns whether a shape range contains a chart. Read-only MsoTriState."
    },
    "ShapeRange.Height": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the height, in points, of the object."
    },
    "ShapeRange.HorizontalFlip": {
      "type": "MsoTriState",
      "info": "True if the specified shape is flipped around the horizontal axis. Read-only MsoTriState."
    },
    "ShapeRange.ID": {
      "type": "int",
      "info": "Returns a Long value that represents the type for the specified object."
    },
    "ShapeRange.Left": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the distance, in points, from the left edge of the object to the left edge of column A (on a worksheet) or the left edge of the chart area (on a chart)."
    },
    "ShapeRange.Line": {
      "type": "LineFormat",
      "info": "Returns a LineFormat object that contains line formatting properties for the specified shape. (For a line, the LineFormat object represents the line itself; for a shape with a border, the LineFormat object represents the border). Read-only."
    },
    "ShapeRange.LockAspectRatio": {
      "type": "MsoTriState",
      "info": "True if the specified shape retains its original proportions when you resize it. False if you can change the height and width of the shape independently of one another when you resize it. Read/write MsoTriState."
    },
    "ShapeRange.Model3D": {
      "type": "Model3DFormat",
      "info": "Returns a Model3DFormat object that contains Model3D properties. Read-only."
    },
    "ShapeRange.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "ShapeRange.Nodes": {
      "type": "ShapeNodes",
      "info": "Returns a ShapeNodes collection that represents the geometric description of the specified shape."
    },
    "ShapeRange.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ShapeRange.ParentGroup": {
      "type": "Shape",
      "info": "Returns a Shape object that represents the common parent shape of a child shape or a range of child shapes."
    },
    "ShapeRange.PictureFormat": {
      "type": "PictureFormat",
      "info": "Returns a PictureFormat object that contains picture formatting properties for the specified shape. Applies to a ShapeRange object that represent pictures or OLE objects. Read-only."
    },
    "ShapeRange.Reflection": {
      "type": "ReflectionFormat",
      "info": "Returns a ReflectionFormat object for a specified shape range that contains reflection formatting properties for the shape range. Read-only."
    },
    "ShapeRange.Rotation": {
      "type": "float",
      "info": "Returns or sets the rotation of the shape, in degrees. Read/write Single."
    },
    "ShapeRange.Shadow": {
      "type": "ShadowFormat",
      "info": "Returns a read-only ShadowFormat object that contains shadow formatting properties for the specified shape or shapes."
    },
    "ShapeRange.ShapeStyle": {
      "type": "MsoShapeStyleIndex",
      "info": "Returns or sets an MsoShapeStyleIndex value that represents the shape style of the shape range. Read/write."
    },
    "ShapeRange.SoftEdge": {
      "type": "SoftEdgeFormat",
      "info": "Returns a SoftEdgeFormat object for a specified shape range that contains soft edge formatting properties for the shape range. Read-only."
    },
    "ShapeRange.TextEffect": {
      "type": "TextEffectFormat",
      "info": "Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape. Read-only."
    },
    "ShapeRange.TextFrame": {
      "type": "TextFrame",
      "info": "Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape. Read-only."
    },
    "ShapeRange.TextFrame2": {
      "type": "TextFrame2",
      "info": "Returns a TextFrame2 object that contains text formatting for the specified shape range. Read-only."
    },
    "ShapeRange.ThreeD": {
      "type": "ThreeDFormat",
      "info": "Returns a ThreeDFormat object that contains 3D-effect formatting properties for the specified shape. Read-only."
    },
    "ShapeRange.Title": {
      "type": "Returns or sets the title of the alternative text associated with the specified shape range. Read/write.",
      "info": "Returns or sets the title of the alternative text associated with the specified shape range. Read/write."
    },
    "ShapeRange.Top": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the distance, in points, from the top edge of the topmost shape in the shape range to the top edge of the worksheet."
    },
    "ShapeRange.Type": {
      "type": "MsoShapeType",
      "info": "Returns an MsoShapeType value that represents the shape type."
    },
    "ShapeRange.VerticalFlip": {
      "type": "MsoTriState",
      "info": "True if the specified shape is flipped around the vertical axis. Read-only MsoTriState."
    },
    "ShapeRange.Vertices": {
      "type": "AddCurve",
      "info": "Returns the coordinates of the specified freeform drawing's vertices (and control points for Bézier curves) as a series of coordinate pairs. Use the array returned by this property as an argument to the AddCurve method or AddPolyLine method. Read-only Variant."
    },
    "ShapeRange.Visible": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that determines whether the object is visible. Read/write."
    },
    "ShapeRange.Width": {
      "type": "points",
      "info": "Returns or sets a Single value that represents the width, in points, of the object."
    },
    "ShapeRange.ZOrderPosition": {
      "type": "int",
      "info": "Returns the position of the specified shape in the z-order. Read-only Long."
    },
    "CustomView.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CustomView.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CustomView.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "CustomView.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CustomView.PrintSettings": {
      "type": "bool",
      "info": "True if print settings are included in the custom view. Read-only Boolean."
    },
    "CustomView.RowColSettings": {
      "type": "bool",
      "info": "True if the custom view includes settings for hidden rows and columns (including filter information). Read-only Boolean."
    },
    "IconSet.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "IconSet.Count": {
      "type": "int",
      "info": "Returns a Long value that specifies the number of icons in the icon set. Read-only."
    },
    "IconSet.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "IconSet.ID": {
      "type": "XlIconSet",
      "info": "Returns one of the constants of the XlIconSet enumeration, which specifies the name of the icon set used in an icon set conditional formatting rule."
    },
    "IconSet.Item": {
      "type": "Icon",
      "info": "Returns an Icon object that represents a single icon from an icon set. Read-only."
    },
    "IconSet.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatBoolean.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelFormatBoolean.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelFormatBoolean.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatCurrency.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelFormatCurrency.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelFormatCurrency.DecimalPlaces": {
      "type": "int",
      "info": "Specifies the number of decimal places after the dot. Read/write Long."
    },
    "ModelFormatCurrency.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatCurrency.Symbol": {
      "type": "str",
      "info": "Specifies the symbol to use to represent the currency. Read/write String."
    },
    "ModelFormatDate.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelFormatDate.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelFormatDate.FormatString": {
      "type": "str",
      "info": "Specifies the date format, for example, \"dd/mm/yy\". Read/write String."
    },
    "ModelFormatDate.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatDecimalNumber.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelFormatDecimalNumber.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelFormatDecimalNumber.DecimalPlaces": {
      "type": "int",
      "info": "Specifies the number of decimal places after the dot. Read/write Long."
    },
    "ModelFormatDecimalNumber.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatDecimalNumber.UseThousandSeparator": {
      "type": "bool",
      "info": "Specifies whether to display commas between thousands. Read/write Boolean."
    },
    "ModelFormatGeneral.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelFormatGeneral.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelFormatGeneral.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatPercentageNumber.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelFormatPercentageNumber.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelFormatPercentageNumber.DecimalPlaces": {
      "type": "int",
      "info": "Specifies the number of decimal places after the dot. Read/write Long."
    },
    "ModelFormatPercentageNumber.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatPercentageNumber.UseThousandSeparator": {
      "type": "bool",
      "info": "Specifies whether to display commas between thousands. Read/write Boolean."
    },
    "ModelFormatScientificNumber.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelFormatScientificNumber.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelFormatScientificNumber.DecimalPlaces": {
      "type": "int",
      "info": "Specifies the number of decimal places after the dot. Read/write Long."
    },
    "ModelFormatScientificNumber.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatWholeNumber.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelFormatWholeNumber.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelFormatWholeNumber.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelFormatWholeNumber.UseThousandSeparator": {
      "type": "bool",
      "info": "Specifies whether to display commas between thousands. Read/write Boolean."
    },
    "ModelMeasures.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelMeasures.Count": {
      "type": "Returns an integer that represents the number of objects in the collection.",
      "info": "Returns an integer that represents the number of objects in the collection."
    },
    "ModelMeasures.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelMeasures.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelRelationships.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "ModelRelationships.Count": {
      "type": "ModelRelationship",
      "info": "Returns a Long value that represents the number of ModelRelationship objects in a ModelRelationships object. Read-only."
    },
    "ModelRelationships.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "ModelRelationships.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified ModelRelationships object. Read-only."
    },
    "ModelTables.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "ModelTables.Count": {
      "type": "ModelTable",
      "info": "Returns a Long value that represents the number of ModelTable objects in a ModelTables collection. Read-only."
    },
    "ModelTables.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "ModelTables.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified ModelTables object. Read-only."
    },
    "WorkbookQuery.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "WorkbookQuery.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "WorkbookQuery.Description": {
      "type": "str",
      "info": "The description of the query. Read/write String."
    },
    "WorkbookQuery.Formula": {
      "type": "str",
      "info": "The Power Query M formula for the object. Read/write String."
    },
    "WorkbookQuery.Name": {
      "type": "str",
      "info": "The name of the query. Read/write String."
    },
    "WorkbookQuery.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "SlicerCache.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SlicerCache.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SlicerCache.CrossFilterType": {
      "type": "Returns or sets whether a slicer is participating in cross filtering with other slicers that share the same slicer cache, and how cross filtering is displayed. Read/write.",
      "info": "Returns or sets whether a slicer is participating in cross filtering with other slicers that share the same slicer cache, and how cross filtering is displayed. Read/write."
    },
    "SlicerCache.FilterCleared": {
      "type": "bool",
      "info": "Returns whether the slicer or timeline filter state is cleared. Read-only Boolean."
    },
    "SlicerCache.Index": {
      "type": "SlicerCaches",
      "info": "Returns the index of the specified SlicerCache object in the SlicerCaches collection. Read-only."
    },
    "SlicerCache.List": {
      "type": "bool",
      "info": "True if the slicer cache is for a slicer on a table; otherwise, False. Read-only Boolean."
    },
    "SlicerCache.ListObject": {
      "type": "ListObject",
      "info": "Returns a ListObject object for the QueryTable object. Read-only."
    },
    "SlicerCache.Name": {
      "type": "Returns or sets the name of the slicer cache.",
      "info": "Returns or sets the name of the slicer cache."
    },
    "SlicerCache.OLAP": {
      "type": "Returns whether the slicer associated with the specified slicer cache is based on an OLAP data source. Read-only.",
      "info": "Returns whether the slicer associated with the specified slicer cache is based on an OLAP data source. Read-only."
    },
    "SlicerCache.Parent": {
      "type": "SlicerCaches",
      "info": "Returns the parent SlicerCaches object for the specified SlicerCache object. Read-only."
    },
    "SlicerCache.PivotTables": {
      "type": "SlicerPivotTables",
      "info": "Returns a SlicerPivotTables collection that contains information about the PivotTables that the slicer cache is currently filtering. Read-only."
    },
    "SlicerCache.RequireManualUpdate": {
      "type": "bool",
      "info": "True when manual updates of the slicer cache are required. Read/write Boolean."
    },
    "SlicerCache.ShowAllItems": {
      "type": "Returns or sets whether slicers connected to the specified slicer cache display items that have been deleted from the corresponding PivotCache. Read/write.",
      "info": "Returns or sets whether slicers connected to the specified slicer cache display items that have been deleted from the corresponding PivotCache. Read/write."
    },
    "SlicerCache.SlicerCacheLevels": {
      "type": "SlicerCacheLevel",
      "info": "Returns the collection of SlicerCacheLevel objects that represent the levels of an OLAP hierarchy on which the specified slicer cache is based. Read-only."
    },
    "SlicerCache.SlicerCacheType": {
      "type": "XlSlicerCacheType",
      "info": "Returns the type of the slicer cache: slicer (xlSlicer) or timeline (xlTimeline) . Read-only XlSlicerCacheType."
    },
    "SlicerCache.SlicerItems": {
      "type": "SlicerItems",
      "info": "Returns a SlicerItems collection that contains the collection of all items in the slicer cache. Read-only."
    },
    "SlicerCache.Slicers": {
      "type": "Slicers",
      "info": "Returns a Slicers collection that contains the collection of Slicer objects associated with the specified SlicerCache object. Read-only."
    },
    "SlicerCache.SortItems": {
      "type": "XlSlicerSort",
      "info": "Returns or sets the sort order of the items in the slicer. Read/write XlSlicerSort."
    },
    "SlicerCache.SortUsingCustomLists": {
      "type": "Returns or sets whether items in the specified slicer cache will be sorted by the custom lists. Read/write.",
      "info": "Returns or sets whether items in the specified slicer cache will be sorted by the custom lists. Read/write."
    },
    "SlicerCache.SourceName": {
      "type": "Returns the name of the data source that the slicer is connected to. Read-only.",
      "info": "Returns the name of the data source that the slicer is connected to. Read-only."
    },
    "SlicerCache.SourceType": {
      "type": "Returns the kind of data source that the slicer is connected to. Read-only.",
      "info": "Returns the kind of data source that the slicer is connected to. Read-only."
    },
    "SlicerCache.TimelineState": {
      "type": "SlicerCache",
      "info": "The timeline-specific state of the SlicerCache object. Read-only."
    },
    "SlicerCache.VisibleSlicerItems": {
      "type": "SlicerItems",
      "info": "Returns a SlicerItems collection that contains the collection of all the visible items in the specified slicer cache. Read-only."
    },
    "SlicerCache.VisibleSlicerItemsList": {
      "type": "Returns or sets the list of MDX unique names for members at all levels of the hierarchy where manual filtering is applied. Read/write.",
      "info": "Returns or sets the list of MDX unique names for members at all levels of the hierarchy where manual filtering is applied. Read/write."
    },
    "SlicerCache.WorkbookConnection": {
      "type": "WorkbookConnection",
      "info": "Gets or sets the WorkbookConnection object that represents the data connection used by the specified slicer. Read/write."
    },
    "HPageBreak.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "HPageBreak.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "HPageBreak.Extent": {
      "type": "XlPageBreakExtent",
      "info": "Returns the type of the specified page break: full-screen or only within a print area. Can be either of the following XlPageBreakExtent constants: xlPageBreakFull or xlPageBreakPartial. Read-only Long."
    },
    "HPageBreak.Location": {
      "type": "Range",
      "info": "Returns or sets the cell (a Range object) that defines the page-break location. Horizontal page breaks are aligned with the top edge of the location cell. Read/write Range."
    },
    "HPageBreak.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "HPageBreak.Type": {
      "type": "XlPageBreak",
      "info": "Returns or sets an XlPageBreak value that represents the page break type."
    },
    "VPageBreak.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "VPageBreak.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "VPageBreak.Extent": {
      "type": "XlPageBreakExtent",
      "info": "Returns the type of the specified page break: full-screen or only within a print area. Can be either of the following XlPageBreakExtent constants: xlPageBreakFull or xlPageBreakPartial. Read-only Long."
    },
    "VPageBreak.Location": {
      "type": "Range",
      "info": "Returns the cell (a Range object) that defines the page-break location. Vertical page breaks are aligned with the left edge of the location cell. Read-only Range."
    },
    "VPageBreak.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "VPageBreak.Type": {
      "type": "XlPageBreak",
      "info": "Returns or sets an XlPageBreak value that represents the page break type."
    },
    "Adjustments.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Adjustments.Count": {
      "type": "int",
      "info": "Returns an Integer value that represents the number of objects in the collection."
    },
    "Adjustments.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Adjustments.Item": {
      "type": "float",
      "info": "Returns or sets the adjustment value specified by the Index argument. Read/write Single."
    },
    "Adjustments.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CalloutFormat.Accent": {
      "type": "MsoTriState",
      "info": "Allows the user to place a vertical accent bar to separate the callout text from the callout line. Read/write MsoTriState."
    },
    "CalloutFormat.Angle": {
      "type": "MsoCalloutAngleType",
      "info": "Returns or sets the angle of the callout line. If the callout line contains more than one line segment, this property returns or sets the angle of the segment that is farthest from the callout text box. Read/write MsoCalloutAngleType."
    },
    "CalloutFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CalloutFormat.AutoAttach": {
      "type": "MsoTriState",
      "info": "True if the place where the callout line attaches to the callout text box changes depending on whether the origin of the callout line (where the callout points to) is to the left or right of the callout text box. Read/write MsoTriState."
    },
    "CalloutFormat.AutoLength": {
      "type": "MsoCalloutType",
      "info": "Applies only to callouts whose lines consist of more than one segment (MsoCalloutType types msoCalloutThree and msoCalloutFour). Read/write MsoTriState."
    },
    "CalloutFormat.Border": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that represents the visibility options for the border of the object."
    },
    "CalloutFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CalloutFormat.Drop": {
      "type": "points",
      "info": "For callouts with an explicitly set drop value, this property returns the vertical distance (in points) from the edge of the text bounding box to the place where the callout line attaches to the text box. Read-only Single."
    },
    "CalloutFormat.DropType": {
      "type": "MsoCalloutDropType",
      "info": "Returns a value that indicates where the callout line attaches to the callout text box. Read-only MsoCalloutDropType."
    },
    "CalloutFormat.Gap": {
      "type": "points",
      "info": "Returns or sets the horizontal distance (in points) between the end of the callout line and the text bounding box. Read/write Single."
    },
    "CalloutFormat.Length": {
      "type": "points",
      "info": "Returns a Single value that represents the length (in points) of the first segment of the callout line (the segment attached to the text callout box)."
    },
    "CalloutFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CalloutFormat.Type": {
      "type": "MsoCalloutType",
      "info": "Returns or sets an MsoCalloutType value that represents the callout format type."
    },
    "ConnectorFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ConnectorFormat.BeginConnected": {
      "type": "MsoTriState",
      "info": "True if the beginning of the specified connector is connected to a shape. Read-only MsoTriState."
    },
    "ConnectorFormat.BeginConnectedShape": {
      "type": "Shape",
      "info": "Returns a Shape object that represents the shape that the beginning of the specified connector is attached to. Read-only."
    },
    "ConnectorFormat.BeginConnectionSite": {
      "type": "int",
      "info": "Returns an integer that specifies the connection site that the beginning of a connector is connected to. Read-only Long."
    },
    "ConnectorFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ConnectorFormat.EndConnected": {
      "type": "MsoTriState",
      "info": "msoTrue if the end of the specified connector is connected to a shape. Read-only MsoTriState."
    },
    "ConnectorFormat.EndConnectedShape": {
      "type": "Shape",
      "info": "Returns a Shape object that represents the shape that the end of the specified connector is attached to. Read-only."
    },
    "ConnectorFormat.EndConnectionSite": {
      "type": "int",
      "info": "Returns an integer that specifies the connection site that the end of a connector is connected to. Read-only Long."
    },
    "ConnectorFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ConnectorFormat.Type": {
      "type": "MsoConnectorType",
      "info": "Returns or sets an MsoConnectorType value that represents the connector format type."
    },
    "ControlFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ControlFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ControlFormat.DropDownLines": {
      "type": "int",
      "info": "Returns or sets the number of list lines displayed in the drop-down portion of a combo box. Read/write Long."
    },
    "ControlFormat.Enabled": {
      "type": "bool",
      "info": "True if the object is enabled. Read/write Boolean."
    },
    "ControlFormat.LargeChange": {
      "type": "int",
      "info": "Returns or sets the amount that the scroll box increments or decrements for a page scroll (when the user clicks in the scroll bar body region). Read/write Long."
    },
    "ControlFormat.LinkedCell": {
      "type": "str",
      "info": "Returns or sets the worksheet range linked to the control's value. If you place a value in the cell, the control takes this value. Likewise, if you change the value of the control, that value is also placed in the cell. Read/write String."
    },
    "ControlFormat.ListCount": {
      "type": "int",
      "info": "Returns the number of entries in a list box or combo box. Returns 0 (zero) if there are no entries in the list. Read-only Long."
    },
    "ControlFormat.ListFillRange": {
      "type": "str",
      "info": "Returns or sets the worksheet range used to fill the specified list box. Setting this property destroys any existing list in the list box. Read/write String."
    },
    "ControlFormat.ListIndex": {
      "type": "int",
      "info": "Returns or sets the index number of the currently selected item in a list box or combo box. Read/write Long."
    },
    "ControlFormat.LockedText": {
      "type": "bool",
      "info": "True if the text in the specified object will be locked to prevent changes when the workbook is protected. Read/write Boolean."
    },
    "ControlFormat.Max": {
      "type": "int",
      "info": "Returns or sets the maximum value of a scroll bar or spinner range. The scroll bar or spinner won't take on values greater than this maximum value. Read/write Long."
    },
    "ControlFormat.Min": {
      "type": "int",
      "info": "Returns or sets the minimum value of a scroll bar or spinner range. The scroll bar or spinner won't take on values less than this minimum value. Read/write Long."
    },
    "ControlFormat.MultiSelect": {
      "type": "constants",
      "info": "Returns or sets the selection mode of the specified list box. Can be one of the following constants: xlNone, xlSimple, or xlExtended. Read/write Long."
    },
    "ControlFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ControlFormat.PrintObject": {
      "type": "bool",
      "info": "True if the object will be printed when the document is printed. Read/write Boolean."
    },
    "ControlFormat.SmallChange": {
      "type": "int",
      "info": "Returns or sets the amount that the scroll bar or spinner is incremented or decremented for a line scroll (when the user chooses an arrow). Read/write Long."
    },
    "ControlFormat.Value": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the name of the specified control format."
    },
    "FillFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "FillFormat.BackColor": {
      "type": "ColorFormat",
      "info": "Returns or sets a ColorFormat object that represents the specified fill background color."
    },
    "FillFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "FillFormat.ForeColor": {
      "type": "ColorFormat",
      "info": "Returns or sets a ColorFormat object that represents the specified foreground fill or solid color."
    },
    "FillFormat.GradientAngle": {
      "type": "Returns or sets the angle of the gradient fill for the specified fill format. Read/write.",
      "info": "Returns or sets the angle of the gradient fill for the specified fill format. Read/write."
    },
    "FillFormat.GradientColorType": {
      "type": "MsoGradientColorType",
      "info": "Returns the gradient color type for the specified fill. Read-only MsoGradientColorType."
    },
    "FillFormat.GradientDegree": {
      "type": "float",
      "info": "Returns the gradient degree of the specified one-color shaded fill as a floating-point value from 0.0 (dark) through 1.0 (light). Read-only Single."
    },
    "FillFormat.GradientStops": {
      "type": "Returns the end point for the gradient fill. Read-only.",
      "info": "Returns the end point for the gradient fill. Read-only."
    },
    "FillFormat.GradientStyle": {
      "type": "MsoGradientStyle",
      "info": "Returns the gradient style for the specified fill. Read-only MsoGradientStyle."
    },
    "FillFormat.GradientVariant": {
      "type": "Gradient",
      "info": "Returns the shade variant for the specified fill as an integer value from 1 through 4. The values for this property correspond to the gradient variants (numbered from left to right and from top to bottom) on the Gradient tab in the Fill Effects dialog box. Read-only Long."
    },
    "FillFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "FillFormat.Pattern": {
      "type": "MsoPatternType",
      "info": "Returns or sets an MsoPatternType value that represents the fill pattern."
    },
    "FillFormat.PictureEffects": {
      "type": "PictureEffects",
      "info": "Returns a PictureEffects object that represents the picture or texture fill for the specified fill format. Read-only."
    },
    "FillFormat.PresetGradientType": {
      "type": "MsoPresetGradientType",
      "info": "Returns the preset gradient type for the specified fill. Read-only MsoPresetGradientType."
    },
    "FillFormat.PresetTexture": {
      "type": "MsoPresetTexture",
      "info": "Returns the preset texture for the specified fill. Read-only MsoPresetTexture."
    },
    "FillFormat.RotateWithObject": {
      "type": "MsoTriState",
      "info": "Returns or sets if the fill style should rotate with the object. Read/write MsoTriState."
    },
    "FillFormat.TextureAlignment": {
      "type": "Returns or sets the alignment (the origin of the coordinate grid) for the tiling of the texture fill. Read/write.",
      "info": "Returns or sets the alignment (the origin of the coordinate grid) for the tiling of the texture fill. Read/write."
    },
    "FillFormat.TextureHorizontalScale": {
      "type": "float",
      "info": "Returns or sets the horizontal scaling factor for the texture fill. Read/write Single."
    },
    "FillFormat.TextureName": {
      "type": "str",
      "info": "Returns the name of the custom texture file for the specified fill. Read-only String."
    },
    "FillFormat.TextureOffsetX": {
      "type": "float",
      "info": "Returns the offset X value for the specified fill. Read/write Single."
    },
    "FillFormat.TextureOffsetY": {
      "type": "float",
      "info": "Returns the offset Y value for the specified fill. Read/write Single."
    },
    "FillFormat.TextureTile": {
      "type": "MsoTriState",
      "info": "Returns the texture tile style for the specified fill. Read/write MsoTriState."
    },
    "FillFormat.TextureType": {
      "type": "MsoTextureType",
      "info": "Returns the texture type for the specified fill. Read-only MsoTextureType."
    },
    "FillFormat.TextureVerticalScale": {
      "type": "float",
      "info": "Returns the texture vertical scale for the specified fill. Read/write Single."
    },
    "FillFormat.Transparency": {
      "type": "float",
      "info": "Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear). Read/write Double."
    },
    "FillFormat.Type": {
      "type": "MsoFillType",
      "info": "Returns an MsoFillType value that represents the fill type."
    },
    "FillFormat.Visible": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that determines whether the object is visible. Read/write."
    },
    "GroupShapes.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "GroupShapes.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "GroupShapes.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "GroupShapes.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "GroupShapes.Range": {
      "type": "ShapeRange",
      "info": "Returns a ShapeRange object that represents a subset of the shapes in a Shapes collection."
    },
    "LineFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "LineFormat.BackColor": {
      "type": "ColorFormat",
      "info": "Returns or sets a ColorFormat object that represents the specified fill background color."
    },
    "LineFormat.BeginArrowheadLength": {
      "type": "MsoArrowheadLength",
      "info": "Returns or sets the length of the arrowhead at the beginning of the specified line. Read/write MsoArrowheadLength."
    },
    "LineFormat.BeginArrowheadStyle": {
      "type": "MsoArrowheadStyle",
      "info": "Returns or sets the style of the arrowhead at the beginning of the specified line. Read/write MsoArrowheadStyle."
    },
    "LineFormat.BeginArrowheadWidth": {
      "type": "MsoArrowheadWidth",
      "info": "Returns or sets the width of the arrowhead at the beginning of the specified line. Read/write MsoArrowheadWidth."
    },
    "LineFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "LineFormat.DashStyle": {
      "type": "MsoLineDashStyle",
      "info": "Returns or sets the dash style for the specified line. Can be one of the MsoLineDashStyle contants. Read/write Long."
    },
    "LineFormat.EndArrowheadLength": {
      "type": "MsoArrowheadLength",
      "info": "Returns or sets the length of the arrowhead at the end of the specified line. Read/write MsoArrowheadLength."
    },
    "LineFormat.EndArrowheadStyle": {
      "type": "MsoArrowheadStyle",
      "info": "Returns or sets the style of the arrowhead at the end of the specified line. Read/write MsoArrowheadStyle."
    },
    "LineFormat.EndArrowheadWidth": {
      "type": "MsoArrowheadWidth",
      "info": "Returns or sets the width of the arrowhead at the end of the specified line. Read/write MsoArrowheadWidth."
    },
    "LineFormat.ForeColor": {
      "type": "ColorFormat",
      "info": "Returns or sets a ColorFormat object that represents the specified foreground fill or solid color."
    },
    "LineFormat.InsetPen": {
      "type": "Returns or sets whether lines are drawn inside the specified shape's boundaries. Read/write.",
      "info": "Returns or sets whether lines are drawn inside the specified shape's boundaries. Read/write."
    },
    "LineFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "LineFormat.Pattern": {
      "type": "MsoPatternType",
      "info": "Returns or sets an MsoPatternType value that represents the fill pattern."
    },
    "LineFormat.Style": {
      "type": "MsoLineStyle",
      "info": "Returns or sets an MsoLineStyle value that represents the style of the line."
    },
    "LineFormat.Transparency": {
      "type": "float",
      "info": "Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear). Read/write Double."
    },
    "LineFormat.Visible": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that determines whether the object is visible. Read/write."
    },
    "LineFormat.Weight": {
      "type": "float",
      "info": "Returns or sets a Single value that represents the weight of the line."
    },
    "LinkFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "LinkFormat.AutoUpdate": {
      "type": "bool",
      "info": "True if the LinkFormat object is updated automatically when the source changes. Read-only Boolean."
    },
    "LinkFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "LinkFormat.Locked": {
      "type": "bool",
      "info": "Returns or sets a Boolean value that indicates if the object is locked."
    },
    "LinkFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Model3DFormat.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the creator of the specified object."
    },
    "Model3DFormat.AutoFit": {
      "type": "Returns whether AutoFit is enabled for the model. Read/write.",
      "info": "Returns whether AutoFit is enabled for the model. Read/write."
    },
    "Model3DFormat.CameraPositionX": {
      "type": "Returns the x-coordinate of a 3D model object's camera position. Read/write.",
      "info": "Returns the x-coordinate of a 3D model object's camera position. Read/write."
    },
    "Model3DFormat.CameraPositionY": {
      "type": "Returns the y-coordinate of a 3D model object's camera position. Read/write.",
      "info": "Returns the y-coordinate of a 3D model object's camera position. Read/write."
    },
    "Model3DFormat.CameraPositionZ": {
      "type": "Returns the z-coordinate of a 3D model object's camera position. Read/write.",
      "info": "Returns the z-coordinate of a 3D model object's camera position. Read/write."
    },
    "Model3DFormat.Creator": {
      "type": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only.",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only."
    },
    "Model3DFormat.FieldOfView": {
      "type": "Returns the field-of-view angle of a 3D model object's camera, expressed in degrees. Read/write.",
      "info": "Returns the field-of-view angle of a 3D model object's camera, expressed in degrees. Read/write."
    },
    "Model3DFormat.LookAtPointX": {
      "type": "Returns the x-coordinate of a 3D model object's camera look-at position. Read/write.",
      "info": "Returns the x-coordinate of a 3D model object's camera look-at position. Read/write."
    },
    "Model3DFormat.LookAtPointY": {
      "type": "Returns the y-coordinate of a 3D model object's camera look-at position. Read/write.",
      "info": "Returns the y-coordinate of a 3D model object's camera look-at position. Read/write."
    },
    "Model3DFormat.LookAtPointZ": {
      "type": "Returns the z-coordinate of a 3D model object's camera look-at position. Read/write.",
      "info": "Returns the z-coordinate of a 3D model object's camera look-at position. Read/write."
    },
    "Model3DFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Model3DFormat.RotationX": {
      "type": "Returns the x-angle of a 3D model object's rotation. Read/write.",
      "info": "Returns the x-angle of a 3D model object's rotation. Read/write."
    },
    "Model3DFormat.RotationY": {
      "type": "Returns the y-angle of a 3D model object's rotation. Read/write.",
      "info": "Returns the y-angle of a 3D model object's rotation. Read/write."
    },
    "Model3DFormat.RotationZ": {
      "type": "Returns the z-angle of a 3D model object's rotation. Read/write.",
      "info": "Returns the z-angle of a 3D model object's rotation. Read/write."
    },
    "ShapeNodes.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ShapeNodes.Count": {
      "type": "int",
      "info": "Returns an Integer value that represents the number of objects in the collection."
    },
    "ShapeNodes.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ShapeNodes.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "OLEFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "OLEFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "OLEFormat.Object": {
      "type": "VBA_Object",
      "info": "Returns the OLE Automation object associated with this OLE object. Read-only Object."
    },
    "OLEFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "OLEFormat.progID": {
      "type": "str",
      "info": "Returns the programmatic identifiers for the object. Read-only String."
    },
    "PictureFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PictureFormat.Brightness": {
      "type": "float",
      "info": "Returns or sets the brightness of the specified picture or OLE object. The value for this property must be a number from 0.0 (dimmest) to 1.0 (brightest). Read/write Single."
    },
    "PictureFormat.ColorType": {
      "type": "Returns or sets the type of color transformation applied to the specified picture or OLE object. Read/write.",
      "info": "Returns or sets the type of color transformation applied to the specified picture or OLE object. Read/write."
    },
    "PictureFormat.Contrast": {
      "type": "float",
      "info": "Returns or sets the contrast for the specified picture or OLE object. The value for this property must be a number from 0.0 (the least contrast) to 1.0 (the greatest contrast). Read/write Single."
    },
    "PictureFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PictureFormat.Crop": {
      "type": "Crop",
      "info": "Returns a Crop object that represents the cropping settings for the specified PictureFormat object. Read-only."
    },
    "PictureFormat.CropBottom": {
      "type": "points",
      "info": "Returns or sets the number of points that are cropped off the bottom of the specified picture or OLE object. Read/write Single."
    },
    "PictureFormat.CropLeft": {
      "type": "points",
      "info": "Returns or sets the number of points that are cropped off the left side of the specified picture or OLE object. Read/write Single."
    },
    "PictureFormat.CropRight": {
      "type": "points",
      "info": "Returns or sets the number of points that are cropped off the right side of the specified picture or OLE object. Read/write Single."
    },
    "PictureFormat.CropTop": {
      "type": "points",
      "info": "Returns or sets the number of points that are cropped off the top of the specified picture or OLE object. Read/write Single."
    },
    "PictureFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PictureFormat.TransparencyColor": {
      "type": "TransparentBackground",
      "info": "Returns or sets the transparent color for the specified picture as a red-green-blue (RGB) value. For this property to take effect, the TransparentBackground property must be set to True. Applies to bitmaps only. Read/write Long."
    },
    "PictureFormat.TransparentBackground": {
      "type": "TransparencyColor",
      "info": "Use the TransparencyColor property to set the transparent color. Applies to bitmaps only. Read/write MsoTriState."
    },
    "ShadowFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ShadowFormat.Blur": {
      "type": "float",
      "info": "Returns or sets the degree of blurriness of the specified shadow. Read/write Single."
    },
    "ShadowFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ShadowFormat.ForeColor": {
      "type": "ColorFormat",
      "info": "Returns or sets a ColorFormat object that represents the specified foreground fill or solid color."
    },
    "ShadowFormat.Obscured": {
      "type": "bool",
      "info": "True if the shadow of the specified shape appears filled in and is obscured by the shape, even if the shape has no fill."
    },
    "ShadowFormat.OffsetX": {
      "type": "points",
      "info": "Returns or sets the horizontal offset of the shadow from the specified shape, in points. A positive value offsets the shadow to the right of the shape; a negative value offsets it to the left. Read/write Single."
    },
    "ShadowFormat.OffsetY": {
      "type": "points",
      "info": "Returns or sets the vertical offset of the shadow from the specified shape, in points. A positive value offsets the shadow down; a negative value offsets it up. Read/write Single."
    },
    "ShadowFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ShadowFormat.RotateWithShape": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that represents whether to rotate the shadow when rotating the shape. Read/write."
    },
    "ShadowFormat.Size": {
      "type": "float",
      "info": "Returns or sets the size of the specified shadow. Read/write Single."
    },
    "ShadowFormat.Style": {
      "type": "MsoShadowStyle",
      "info": "Returns or sets the style of the specified shadow. Read/write MsoShadowStyle."
    },
    "ShadowFormat.Transparency": {
      "type": "float",
      "info": "Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear). Read/write Double."
    },
    "ShadowFormat.Type": {
      "type": "MsoShadowType",
      "info": "Returns or sets an MsoShadowType value that represents the shadow format type."
    },
    "ShadowFormat.Visible": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that determines whether the object is visible. Read/write."
    },
    "TextEffectFormat.Alignment": {
      "type": "MsoTextEffectAlignment",
      "info": "Returns or sets an MsoTextEffectAlignment value that represents the alignment for WordArt."
    },
    "TextEffectFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "TextEffectFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "TextEffectFormat.FontBold": {
      "type": "MsoTriState",
      "info": "Returns msoTrue if the font in the specified WordArt is bold. Read/write MsoTriState."
    },
    "TextEffectFormat.FontItalic": {
      "type": "MsoTriState",
      "info": "Returns msoTrue if the font in the specified WordArt is italic. Read/write MsoTriState."
    },
    "TextEffectFormat.FontName": {
      "type": "str",
      "info": "Returns or sets the name of the font in the specified WordArt. Read/write String."
    },
    "TextEffectFormat.FontSize": {
      "type": "points",
      "info": "Returns or sets the font size for the specified WordArt, in points. Read/write Single."
    },
    "TextEffectFormat.KernedPairs": {
      "type": "MsoTriState",
      "info": "Returns msoTrue if character pairs in the specified WordArt are kerned. Read/write MsoTriState."
    },
    "TextEffectFormat.NormalizedHeight": {
      "type": "MsoTriState",
      "info": "Returns msoTrue if all characters (both uppercase and lowercase) in the specified WordArt are the same height. Read/write MsoTriState."
    },
    "TextEffectFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "TextEffectFormat.PresetShape": {
      "type": "MsoPresetTextEffectShape",
      "info": "Returns or sets the shape of the specified WordArt. Read/write MsoPresetTextEffectShape."
    },
    "TextEffectFormat.PresetTextEffect": {
      "type": "MsoPresetTextEffect",
      "info": "Returns or sets the style of the specified WordArt. Read/write MsoPresetTextEffect."
    },
    "TextEffectFormat.RotatedChars": {
      "type": "MsoTriState",
      "info": "Returns msoTrue if characters in the specified WordArt are rotated 90 degrees relative to the WordArt's bounding shape. Returns msoFalse if characters in the specified WordArt retain their original orientation relative to the bounding shape. Read/write MsoTriState."
    },
    "TextEffectFormat.Text": {
      "type": "str",
      "info": "Returns or sets the text for the specified object. Read/write String."
    },
    "TextEffectFormat.Tracking": {
      "type": "float",
      "info": "Returns or sets the ratio of the horizontal space allotted to each character in the specified WordArt to the width of the character. Can be a value from 0 (zero) through 5. Large values for this property specify ample space between characters; values less than 1 can produce character overlap. Read/write Single."
    },
    "TextFrame.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "TextFrame.AutoMargins": {
      "type": "Returns or sets whether Excel automatically calculates text frame margins. Read/write.",
      "info": "Returns or sets whether Excel automatically calculates text frame margins. Read/write."
    },
    "TextFrame.AutoSize": {
      "type": "bool",
      "info": "True if the size of the specified object is changed automatically to fit text within its boundaries. Read/write Boolean."
    },
    "TextFrame.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "TextFrame.HorizontalAlignment": {
      "type": "XlHAlign",
      "info": "Returns or sets an XlHAlign value that represents the horizontal alignment for the specified object."
    },
    "TextFrame.HorizontalOverflow": {
      "type": "Returns or sets the horizontal overflow setting for the specified object. Read/write.",
      "info": "Returns or sets the horizontal overflow setting for the specified object. Read/write."
    },
    "TextFrame.MarginBottom": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the bottom of the text frame and the bottom of the inscribed rectangle of the shape that contains the text. Read/write Single."
    },
    "TextFrame.MarginLeft": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the left edge of the text frame and the left edge of the inscribed rectangle of the shape that contains the text. Read/write Single."
    },
    "TextFrame.MarginRight": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the right edge of the text frame and the right edge of the inscribed rectangle of the shape that contains the text. Read/write Single."
    },
    "TextFrame.MarginTop": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the top of the text frame and the top of the inscribed rectangle of the shape that contains the text. Read/write Single."
    },
    "TextFrame.Orientation": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the text frame orientation."
    },
    "TextFrame.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "TextFrame.ReadingOrder": {
      "type": "XlReadingOrder",
      "info": "Returns or sets the reading order for the specified object. Can be one of the following XlReadingOrder constants: xlRTL (right-to-left), xlLTR (left-to-right), or xlContext. Read/write Long."
    },
    "TextFrame.VerticalAlignment": {
      "type": "XlVAlign",
      "info": "Returns or sets an XlVAlign value that represents the vertical alignment of the specified object."
    },
    "TextFrame.VerticalOverflow": {
      "type": "Returns or sets the vertical overflow setting for the specified object. Read/write.",
      "info": "Returns or sets the vertical overflow setting for the specified object. Read/write."
    },
    "TextFrame2.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "TextFrame2.AutoSize": {
      "type": "MsoAutoSize",
      "info": "The size of the specified object that changes automatically to fit text within its boundaries. Read/write MsoAutoSize."
    },
    "TextFrame2.Column": {
      "type": "TextColumn2",
      "info": "Returns the TextColumn2 object that represents the columns within the text frame. Read-only."
    },
    "TextFrame2.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "TextFrame2.HasText": {
      "type": "MsoTriState",
      "info": "Returns whether the specified text frame has text. Read-only MsoTriState."
    },
    "TextFrame2.HorizontalAnchor": {
      "type": "MsoHorizontalAnchor",
      "info": "Returns or sets the horizontal anchor type for the specified text. Read/write MsoHorizontalAnchor."
    },
    "TextFrame2.MarginBottom": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the bottom of the text frame and the bottom of the inscribed rectangle of the shape that contains the text. Read/write Single."
    },
    "TextFrame2.MarginLeft": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the left edge of the text frame and the left edge of the inscribed rectangle of the shape that contains the text. Read/write Single."
    },
    "TextFrame2.MarginRight": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the right edge of the text frame and the right edge of the inscribed rectangle of the shape that contains the text. Read/write Single."
    },
    "TextFrame2.MarginTop": {
      "type": "points",
      "info": "Returns or sets the distance (in points) between the top of the text frame and the top of the inscribed rectangle of the shape that contains the text. Read/write Single."
    },
    "TextFrame2.NoTextRotation": {
      "type": "Returns or sets whether text remains flat when the specified object is rotated. Read/write.",
      "info": "Returns or sets whether text remains flat when the specified object is rotated. Read/write."
    },
    "TextFrame2.Orientation": {
      "type": "MsoTextOrientation",
      "info": "Returns or sets a value that represents the text frame orientation. Read/write MsoTextOrientation."
    },
    "TextFrame2.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "TextFrame2.PathFormat": {
      "type": "MsoPathFormat",
      "info": "Returns or sets the path type for the specified text frame. Read/write MsoPathFormat."
    },
    "TextFrame2.Ruler": {
      "type": "Ruler2",
      "info": "Returns a Ruler2 object that represents the ruler for the specified text. Read-only."
    },
    "TextFrame2.TextRange": {
      "type": "TextRange2",
      "info": "Returns the TextRange2 object that represents the text in the object. Read-only."
    },
    "TextFrame2.ThreeD": {
      "type": "ThreeDFormat",
      "info": "Returns a ThreeDFormat object that contains 3D-effect formatting properties for the specified text. Read-only."
    },
    "TextFrame2.VerticalAnchor": {
      "type": "MsoVerticalAnchor",
      "info": "Returns or sets the vertical anchor type for the specified text. Read/write MsoVerticalAnchor."
    },
    "TextFrame2.WarpFormat": {
      "type": "MsoWarpFormat",
      "info": "Returns or sets the warp type for the specified text frame. Read/write MsoWarpFormat."
    },
    "TextFrame2.WordArtformat": {
      "type": "MsoPresetTextEffect",
      "info": "Returns or sets the Word Art type for the specified text frame. Read/write MsoPresetTextEffect."
    },
    "TextFrame2.WordWrap": {
      "type": "MsoTriState",
      "info": "Returns or sets text break lines within or past the boundaries of the shape. Read/write MsoTriState."
    },
    "ThreeDFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ThreeDFormat.BevelBottomDepth": {
      "type": "ThreeDFormat",
      "info": "Returns or sets the bottom depth when using the bevel effect on a ThreeDFormat object. Read/write Single."
    },
    "ThreeDFormat.BevelBottomInset": {
      "type": "ThreeDFormat",
      "info": "Returns or sets a value indicating whether the bottom insert bevel should be raised for a ThreeDFormat object. Read/write Single."
    },
    "ThreeDFormat.BevelBottomType": {
      "type": "MsoBevelType",
      "info": "Returns or sets the bottom bevel type for a ThreeDFormat object. Read/write MsoBevelType."
    },
    "ThreeDFormat.BevelTopDepth": {
      "type": "ThreeDFormat",
      "info": "Returns or sets the top depth when using the bevel effect on a ThreeDFormat object. Read/write Single."
    },
    "ThreeDFormat.BevelTopInset": {
      "type": "ThreeDFormat",
      "info": "Returns or sets a value indicating whether the top insert bevel should be raised for a ThreeDFormat object. Read/write Single."
    },
    "ThreeDFormat.BevelTopType": {
      "type": "MsoBevelType",
      "info": "Returns or sets the top bevel type for a ThreeDFormat object. Read/write MsoBevelType."
    },
    "ThreeDFormat.ContourColor": {
      "type": "ColorFormat",
      "info": "Returns the contour color for a ThreeDFormat object. Read-only ColorFormat."
    },
    "ThreeDFormat.ContourWidth": {
      "type": "ThreeDFormat",
      "info": "Returns or sets the contour width for a ThreeDFormat object. Read/write Single."
    },
    "ThreeDFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ThreeDFormat.Depth": {
      "type": "float",
      "info": "Returns or sets a Single value that represents the depth of the shape's extrusion."
    },
    "ThreeDFormat.ExtrusionColor": {
      "type": "ColorFormat",
      "info": "Returns a ColorFormat object that represents the color of the shape's extrusion. Read-only."
    },
    "ThreeDFormat.ExtrusionColorType": {
      "type": "MsoExtrusionColorType",
      "info": "Returns or sets a value that indicates whether the extrusion color is based on the extruded shape's fill (the front face of the extrusion) and automatically changes when the shape's fill changes, or whether the extrusion color is independent of the shape's fill. Read/write MsoExtrusionColorType."
    },
    "ThreeDFormat.FieldOfView": {
      "type": "ThreeDFormat",
      "info": "Returns or sets the angle at which a ThreeDFormat object can be viewed. Read/write Single."
    },
    "ThreeDFormat.LightAngle": {
      "type": "ThreeDFormat",
      "info": "Returns or sets the angle of the extrusion lights set on a ThreeDFormat object. Read/write Single."
    },
    "ThreeDFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ThreeDFormat.Perspective": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that determines whether the extrusion appears in perspective."
    },
    "ThreeDFormat.PresetCamera": {
      "type": "MsoPresetCamera",
      "info": "Returns or sets the extrusion preset camera for a ThreeDFormat object. Read-only MsoPresetCamera."
    },
    "ThreeDFormat.PresetExtrusionDirection": {
      "type": "MsoPresetExtrusionDirection",
      "info": "Returns the direction that the extrusion's sweep path takes away from the extruded shape (the front face of the extrusion). Read-only MsoPresetExtrusionDirection."
    },
    "ThreeDFormat.PresetLighting": {
      "type": "MsoLightRigType",
      "info": "Returns or sets the extrusion preset lighting for a ThreeDFormat object. Read-only MsoLightRigType."
    },
    "ThreeDFormat.PresetLightingDirection": {
      "type": "MsoPresetLightingDirection",
      "info": "Returns or sets the position of the light source relative to the extrusion. Read/write MsoPresetLightingDirection."
    },
    "ThreeDFormat.PresetLightingSoftness": {
      "type": "MsoPresetLightingSoftness",
      "info": "Returns or sets the intensity of the extrusion lighting. Read/write MsoPresetLightingSoftness."
    },
    "ThreeDFormat.PresetMaterial": {
      "type": "MsoPresetMaterial",
      "info": "Returns or sets the extrusion surface material. Read/write MsoPresetMaterial."
    },
    "ThreeDFormat.PresetThreeDFormat": {
      "type": "MsoPresetThreeDFormat",
      "info": "Returns the preset extrusion format. Each preset extrusion format contains a set of preset values for the various properties of the extrusion. Read-only MsoPresetThreeDFormat."
    },
    "ThreeDFormat.ProjectText": {
      "type": "MsoTriState",
      "info": "Returns or sets the project text state for the specified ThreeDFormat object. Read/write MsoTriState."
    },
    "ThreeDFormat.RotationX": {
      "type": "float",
      "info": "Returns or sets the rotation of the extruded shape around the x-axis in degrees. Can be a value from -90 through 90. A positive value indicates upward rotation; a negative value indicates downward rotation. Read/write Single."
    },
    "ThreeDFormat.RotationY": {
      "type": "float",
      "info": "Returns or sets the rotation of the extruded shape around the y-axis in degrees. Can be a value from -90 through 90. A positive value indicates rotation to the left; a negative value indicates rotation to the right. Read/write Single."
    },
    "ThreeDFormat.RotationZ": {
      "type": "float",
      "info": "Returns or sets the rotation of the extruded shape around the z-axis in degrees. Can be a value from -90 through 90. A positive value indicates upward rotation; a negative value indicates downward rotation. Read/write Single."
    },
    "ThreeDFormat.Visible": {
      "type": "MsoTriState",
      "info": "Returns or sets an MsoTriState value that determines whether the object is visible. Read/write."
    },
    "ThreeDFormat.Z": {
      "type": "ThreeDFormat",
      "info": "Returns the Z order of the specified ThreeDFormat object. Read/write Single."
    },
    "ListColumn.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ListColumn.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ListColumn.DataBodyRange": {
      "type": "Range",
      "info": "Returns a Range object that is the size of the data portion of a column. Read-only."
    },
    "ListColumn.Index": {
      "type": "ListColumns",
      "info": "Returns a Long value that represents the index number of the ListColumn object within the ListColumns collection."
    },
    "ListColumn.Name": {
      "type": "str",
      "info": "Returns or sets a String value that represents the name of the list column."
    },
    "ListColumn.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ListColumn.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents the range to which the specified list object applies."
    },
    "ListColumn.Total": {
      "type": "ListColumn",
      "info": "Returns the Total row for a ListColumn object. Read-only."
    },
    "ListColumn.TotalsCalculation": {
      "type": "XlTotalsCalculation",
      "info": "Determines the type of calculation in the Totals row of the list column based on the value of the XlTotalsCalculation enumeration. Read/write."
    },
    "ListColumn.XPath": {
      "type": "XPath",
      "info": "Returns an XPath object that represents the XPath of the element mapped to the specified Range object. The context of the range determines whether the action succeeds or returns an empty object. Read-only."
    },
    "ListRow.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ListRow.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ListRow.Index": {
      "type": "ListRows",
      "info": "Returns a Long value that represents the index number of the ListRow object within the ListRows collection."
    },
    "ListRow.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ListRow.Range": {
      "type": "Range",
      "info": "Returns a Range object that represents the range to which the specified list object in the list applies."
    },
    "XmlDataBinding.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "XmlDataBinding.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "XmlDataBinding.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "XmlDataBinding.SourceUrl": {
      "type": "str",
      "info": "Returns a String that represents the path to the XML data file or the web service that provides the source data for the specified data binding. Read-only."
    },
    "XmlNamespace.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "XmlNamespace.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "XmlNamespace.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "XmlNamespace.Prefix": {
      "type": "str",
      "info": "Returns a String that represents the prefix for the specified XML namespace. Read-only."
    },
    "XmlNamespace.Uri": {
      "type": "str",
      "info": "Returns a String that represents the Uniform Resource Identifier (URI) for the specified XML namespace. Read-only."
    },
    "XmlSchemas.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "XmlSchemas.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "XmlSchemas.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "XmlSchemas.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "XmlSchemas.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ValueChange.AllocationMethod": {
      "type": "Returns the method to use to allocate this value when performing what-if analysis. Read-only.",
      "info": "Returns the method to use to allocate this value when performing what-if analysis. Read-only."
    },
    "ValueChange.AllocationValue": {
      "type": "Returns the value to allocate when performing what-if analysis. Read-only.",
      "info": "Returns the value to allocate when performing what-if analysis. Read-only."
    },
    "ValueChange.AllocationWeightExpression": {
      "type": "Returns the MDX weight expression to use for this value when performing what-if analysis. Read-only.",
      "info": "Returns the MDX weight expression to use for this value when performing what-if analysis. Read-only."
    },
    "ValueChange.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ValueChange.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ValueChange.Order": {
      "type": "PivotTableChangeList",
      "info": "Returns a value that indicates the order in which this change was performed relative to other changes in the PivotTableChangeList collection. Read-only."
    },
    "ValueChange.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ValueChange.PivotCell": {
      "type": "PivotCell",
      "info": "Returns a PivotCell object that represents the cell (tuple) that was changed. Read-only."
    },
    "ValueChange.Tuple": {
      "type": "Returns the MDX tuple of the value that was changed in the OLAP data source. Read-only.",
      "info": "Returns the MDX tuple of the value that was changed in the OLAP data source. Read-only."
    },
    "ValueChange.Value": {
      "type": "UPDATE CUBE",
      "info": "Returns the value that the user entered in the cell or that the formula in the cell was evaluated to when the UPDATE CUBE statement was last run against the OLAP data source. Read-only."
    },
    "ValueChange.VisibleInPivotTable": {
      "type": "Returns whether the cell (tuple) is currently visible in the PivotTable report. Read-only.",
      "info": "Returns whether the cell (tuple) is currently visible in the PivotTable report. Read-only."
    },
    "PivotLines.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotLines.Count": {
      "type": "PivotLines",
      "info": "Returns the number of items in the PivotLines collection. Read-only."
    },
    "PivotLines.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotLines.Item": {
      "type": "PivotLines",
      "info": "Returns a specific element of the PivotLines collection object by its position in the collection. Read-only."
    },
    "PivotLines.Parent": {
      "type": "PivotLines",
      "info": "Returns the parent object for the specified PivotLines object. Read-only."
    },
    "PivotFormula.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotFormula.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotFormula.Formula": {
      "type": "str",
      "info": "Returns or sets a String value that represents the object's formula in A1-style notation and in the language of the macro."
    },
    "PivotFormula.Index": {
      "type": "PivotFormulas",
      "info": "Returns or sets a Long value that represents the index number of the PivotFormula object within the PivotFormulas collection."
    },
    "PivotFormula.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "PivotFormula.StandardFormula": {
      "type": "str",
      "info": "Returns or sets a String specifying formulas with standard English (United States) formatting. Read/write."
    },
    "PivotFormula.Value": {
      "type": "str",
      "info": "Returns or sets a String value that represents the name of the specified formula in the PivotTable formula."
    },
    "Slicer.ActiveItem": {
      "type": "SlicerItem",
      "info": "Returns a SlicerItem object that represents the slicer button that is currently in focus for the specified slicer. Read-only."
    },
    "Slicer.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Slicer.Caption": {
      "type": "Returns or sets the caption of the specified slicer. Read/write.",
      "info": "Returns or sets the caption of the specified slicer. Read/write."
    },
    "Slicer.ColumnWidth": {
      "type": "points",
      "info": "Returns or sets the width, in points, of each column in the slicer. Read/write."
    },
    "Slicer.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Slicer.DisableMoveResizeUI": {
      "type": "Returns or sets whether the specified slicer can be moved or resized by using the user interface. Read/write.",
      "info": "Returns or sets whether the specified slicer can be moved or resized by using the user interface. Read/write."
    },
    "Slicer.DisplayHeader": {
      "type": "Caption",
      "info": "Returns or sets whether the header that displays the slicer Caption property is visible. Read/write."
    },
    "Slicer.Height": {
      "type": "points",
      "info": "Returns or sets the height of the specified slicer, in points. Read/write."
    },
    "Slicer.Left": {
      "type": "points",
      "info": "Returns or sets the horizontal position of the specified slicer, in points, relative to the upper-left corner of cell A1 on a worksheet. Read/write."
    },
    "Slicer.Locked": {
      "type": "Returns or sets whether the specified slicer can be modified when the sheet that contains it is protected. Read/write.",
      "info": "Returns or sets whether the specified slicer can be modified when the sheet that contains it is protected. Read/write."
    },
    "Slicer.Name": {
      "type": "Returns or sets the name of the specified slicer. Read/write.",
      "info": "Returns or sets the name of the specified slicer. Read/write."
    },
    "Slicer.NumberOfColumns": {
      "type": "Returns or sets the number of columns in the specified slicer. Read/write.",
      "info": "Returns or sets the number of columns in the specified slicer. Read/write."
    },
    "Slicer.Parent": {
      "type": "Worksheet",
      "info": "Returns the Worksheet object that represents the sheet that contains the slicer. Read-only."
    },
    "Slicer.RowHeight": {
      "type": "points",
      "info": "Returns or sets the height, in points, of each row in the specified slicer. Read/write."
    },
    "Slicer.Shape": {
      "type": "Shape",
      "info": "Returns the Shape object associated with the specified slicer. Read-only."
    },
    "Slicer.SlicerCache": {
      "type": "SlicerCache",
      "info": "Returns the SlicerCache object associated with the slicer. Read-only."
    },
    "Slicer.SlicerCacheLevel": {
      "type": "SlicerCacheLevel",
      "info": "Returns the SlicerCacheLevel object associated with the slicer. Read-only."
    },
    "Slicer.SlicerCacheType": {
      "type": "XlSlicerCacheType",
      "info": "Returns the type of the slicer cache: slicer (xlSlicer) or timeline (xlTimeline) . Read-only XlSlicerCacheType."
    },
    "Slicer.Style": {
      "type": "Returns or sets the style currently applied to the specified slicer. Read/write.",
      "info": "Returns or sets the style currently applied to the specified slicer. Read/write."
    },
    "Slicer.TimelineViewState": {
      "type": "TimelineViewState",
      "info": "The timeline-specific state of the slicer. Read-only TimelineViewState."
    },
    "Slicer.Top": {
      "type": "points",
      "info": "Returns or sets the vertical position of the specified slicer, in points, relative to the upper-left corner of cell A1 on a worksheet. Read/write."
    },
    "Slicer.Width": {
      "type": "points",
      "info": "Returns or sets the width of the specified slicer, in points. Read/write."
    },
    "PivotFields.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "PivotFields.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "PivotFields.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "PivotFields.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "TreeviewControl.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "TreeviewControl.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "TreeviewControl.Drilled": {
      "type": "Sets the \"drilled\" (expanded or visible) status of the cube field members in the hierarchical member-selection control of a cube field. This property is used primarily for macro recording and isn't intended for any other use. Read/write.",
      "info": "Sets the \"drilled\" (expanded or visible) status of the cube field members in the hierarchical member-selection control of a cube field. This property is used primarily for macro recording and isn't intended for any other use. Read/write."
    },
    "TreeviewControl.Hidden": {
      "type": "VBA_Variant",
      "info": "Returns or sets a Variant value that represents the hidden status of the cube field members in the hierarchical member-selection control of a cube field."
    },
    "TreeviewControl.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Parameter.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Parameter.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Parameter.DataType": {
      "type": "XlParameterDataType",
      "info": "Returns or sets an XlParameterDataType value that represents the data type of the specified query parameter."
    },
    "Parameter.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "Parameter.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Parameter.PromptString": {
      "type": "str",
      "info": "Returns the phrase that prompts the user for a parameter value in a parameter query. Read-only String."
    },
    "Parameter.RefreshOnChange": {
      "type": "bool",
      "info": "True if the specified query table is refreshed whenever you change the parameter value of a parameter query. Read/write Boolean."
    },
    "Parameter.SourceRange": {
      "type": "Range",
      "info": "Returns a Range object that represents the cell that contains the value of the specified query parameter. Read-only."
    },
    "Parameter.Type": {
      "type": "XlParameterType",
      "info": "Returns an XlParameterType value that represents the parameter type."
    },
    "Parameter.Value": {
      "type": "VBA_Variant",
      "info": "Returns a Variant value that represents the parameter value."
    },
    "DataFeedConnection.AlwaysUseConnectionFile": {
      "type": "bool",
      "info": "True if the connection file is always used to establish a connection to the data source. Read/write Boolean."
    },
    "DataFeedConnection.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "DataFeedConnection.CommandText": {
      "type": "VBA_Variant",
      "info": "Returns or sets the command string for the specified data source. Read/write Variant."
    },
    "DataFeedConnection.CommandType": {
      "type": "VBA_Variant",
      "info": "Returns or sets the command string for the specified data source. Read/write Variant."
    },
    "DataFeedConnection.Connection": {
      "type": "VBA_Variant",
      "info": "Returns or sets a string that contains Service Contract settings that enable Microsoft Excel to connect to a Data Feed data source. Read/write Variant."
    },
    "DataFeedConnection.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "DataFeedConnection.EnableRefresh": {
      "type": "bool",
      "info": "True if the connection can be refreshed by the user. The default value is True. Read/write Boolean."
    },
    "DataFeedConnection.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified DataFeedConnection object. Read-only."
    },
    "DataFeedConnection.RefreshDate": {
      "type": "datetime.datetime",
      "info": "Returns the date on which the OLE DB connection was last refreshed. Read-only Date."
    },
    "DataFeedConnection.Refreshing": {
      "type": "bool",
      "info": "True if an OLE DB query is in progress for the specified data source connection. Read/write Boolean."
    },
    "DataFeedConnection.RefreshOnFileOpen": {
      "type": "bool",
      "info": "True if the connection is automatically updated each time the workbook is opened. The default value is False."
    },
    "DataFeedConnection.RefreshPeriod": {
      "type": "int",
      "info": "Returns or sets the number of minutes between refreshes. Read/write Long."
    },
    "DataFeedConnection.SavePassword": {
      "type": "bool",
      "info": "True if password information in a data feed connection string is saved in the connection string. False if the password is removed."
    },
    "DataFeedConnection.ServerCredentialsMethod": {
      "type": "XlCredentialsMethod",
      "info": "Returns or sets the type of credentials that should be used for server authentication. Read/write XlCredentialsMethod enumeration."
    },
    "DataFeedConnection.SourceConnectionFile": {
      "type": "str",
      "info": "Returns or sets a String indicating the Microsoft Office Data Connection file or similar file that was used to create the connection. Read/write."
    },
    "DataFeedConnection.SourceDataFile": {
      "type": "str",
      "info": "A path to the original file used to create the connection. In the case of an OData connection, this is the location of the *.atom or *.atomsvc file used to create the connection. Read/write String."
    },
    "TextConnection.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "TextConnection.Connection": {
      "type": "VBA_Variant",
      "info": "Returns or sets a string that contains text file names that enable Microsoft Excel to connect to text data sources. Read/write Variant."
    },
    "TextConnection.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "TextConnection.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified TextConnection object. Read-only."
    },
    "TextConnection.TextFileColumnDataTypes": {
      "type": "xlGeneral",
      "info": "Returns or sets an ordered array of constants that specify the data types applied to the corresponding columns in the text file that you are importing into a query table. The default constant for each column is xlGeneral. Read/write Variant."
    },
    "TextConnection.TextFileCommaDelimiter": {
      "type": "bool",
      "info": "True if the comma is the delimiter when you import a text file into a query table. False if you want to use some other character as the delimiter. The default value is False. Read/write Boolean."
    },
    "TextConnection.TextFileConsecutiveDelimiter": {
      "type": "bool",
      "info": "True if consecutive delimiters are treated as a single delimiter when you import a text file into a query table. The default value is False. Read/write Boolean."
    },
    "TextConnection.TextFileDecimalSeparator": {
      "type": "str",
      "info": "Returns or sets the decimal separator character that Microsoft Excel uses when you import a text file into a query table. The default is the system decimal separator character. Read/write String."
    },
    "TextConnection.TextFileFixedColumnWidths": {
      "type": "VBA_Variant",
      "info": "Returns or sets an array of integers that correspond to the widths of the columns (in characters) in the text file that you are importing into a query table. Valid widths are from 1 through 32767 characters. Read/write Variant."
    },
    "TextConnection.TextFileHeaderRow": {
      "type": "bool",
      "info": "Returns or sets a value that specifies whether the first row (from the starting row) should be treated as a header row. Read/write Boolean."
    },
    "TextConnection.TextFileOtherDelimiter": {
      "type": "null",
      "info": "Returns or sets the character used as the delimiter when you import a text file into a query table. The default value is null. Read/write String."
    },
    "TextConnection.TextFileParseType": {
      "type": "XlTextParsingType",
      "info": "Returns or sets the column format for the data in the text file that you are importing into a query table. Read/write XlTextParsingType enumeration."
    },
    "TextConnection.TextFilePlatform": {
      "type": "XlPlatform",
      "info": "Returns or sets the origin of the text file that you are importing into the query table. This property determines which code page is used during the data import. Read/write XlPlatform."
    },
    "TextConnection.TextFilePromptOnRefresh": {
      "type": "bool",
      "info": "True if you want to specify the name of the imported text file each time the query table is refreshed. The Import Text File dialog box allows you to specify the path and file name. The default value is False. Read/write Boolean."
    },
    "TextConnection.TextFileSemicolonDelimiter": {
      "type": "TextFileParseType",
      "info": "True if the semicolon is the delimiter when you import a text file into a query table, and if the value of the TextFileParseType property is xlDelimited. The default value is False. Read/write Boolean."
    },
    "TextConnection.TextFileSpaceDelimiter": {
      "type": "bool",
      "info": "True if the space character is the delimiter when you import a text file into a query table. The default value is False. Read/write Boolean."
    },
    "TextConnection.TextFileStartRow": {
      "type": "int",
      "info": "Returns or sets the row number at which text parsing will begin when you import a text file into a query table. Valid values are integers from 1 through 32767. The default value is 1. Read/write Long."
    },
    "TextConnection.TextFileTabDelimiter": {
      "type": "bool",
      "info": "True if the tab character is the delimiter when you import a text file into a query table. The default value is False. Read/write Boolean."
    },
    "TextConnection.TextFileTextQualifier": {
      "type": "XlTextQualifier",
      "info": "Returns or sets the text qualifier when you import a text file into a query table. The text qualifier specifies that the enclosed data is in text format. Read/write XlTextQualifier."
    },
    "TextConnection.TextFileThousandsSeparator": {
      "type": "str",
      "info": "Returns or sets the thousands separator character that Microsoft Excel uses when you import a text file into a query table. The default is the system thousands separator character. Read/write String."
    },
    "TextConnection.TextFileTrailingMinusNumbers": {
      "type": "bool",
      "info": "True for Microsoft Excel to treat numbers imported as text that begin with a - (minus) symbol as a negative symbol. False for Excel to treat numbers imported as text that begin with a - symbol as text. Read/write Boolean."
    },
    "TextConnection.TextFileVisualLayout": {
      "type": "XlTextVisualLayoutType",
      "info": "Returns or sets an XlTextVisualLayoutType value that indicates whether the visual layout of the text being imported is left-to-right or right-to-left. Read/write."
    },
    "SparkAxes.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SparkAxes.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SparkAxes.Horizontal": {
      "type": "SparkHorizontalAxis",
      "info": "Returns the SparkHorizontalAxis object for the specified SparkAxes object. Read-only."
    },
    "SparkAxes.Parent": {
      "type": "SparklineGroup",
      "info": "Returns the parent SparklineGroup object for the specified SparkAxes object. Read-only."
    },
    "SparkAxes.Vertical": {
      "type": "SparkVerticalAxis",
      "info": "Returns the SparkVerticalAxis object for the specified SparkAxes object. Read-only."
    },
    "Sparkline.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Sparkline.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Sparkline.Location": {
      "type": "Returns or sets the location of a single sparkline. Read/write.",
      "info": "Returns or sets the location of a single sparkline. Read/write."
    },
    "Sparkline.Parent": {
      "type": "SparklineGroup",
      "info": "Returns the parent SparklineGroup object for the specified object. Read-only."
    },
    "Sparkline.SourceData": {
      "type": "Returns or sets the range that contains the source data for a single sparkline. Read/write.",
      "info": "Returns or sets the range that contains the source data for a single sparkline. Read/write."
    },
    "SparkPoints.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SparkPoints.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SparkPoints.Firstpoint": {
      "type": "SparkColor",
      "info": "Returns a SparkColor object that represents the color and visibility of the marker for the first point of data on a sparkline. Read-only."
    },
    "SparkPoints.Highpoint": {
      "type": "SparkColor",
      "info": "Returns a SparkColor object that represents the color and visibility of the marker for the highest point of data on a sparkline. Read-only."
    },
    "SparkPoints.Lastpoint": {
      "type": "SparkColor",
      "info": "Returns a SparkColor object that represents the color and visibility of the marker for the last point of data on a sparkline. Read-only."
    },
    "SparkPoints.Lowpoint": {
      "type": "SparkColor",
      "info": "Returns a SparkColor object that represents the color and visibility of the marker for the lowest point of data on a sparkline. Read-only."
    },
    "SparkPoints.Markers": {
      "type": "SparkColor",
      "info": "Returns a SparkColor object that represents the color and visibility of markers for positive points of data on a sparkline. Read-only."
    },
    "SparkPoints.Negative": {
      "type": "SparkColor",
      "info": "Returns a SparkColor object that represents the color and visibility of markers for negative points of data on a sparkline. Read-only."
    },
    "SparkPoints.Parent": {
      "type": "SparklineGroup",
      "info": "Returns the parent SparklineGroup object for the specified object. Read-only."
    },
    "FormatColor.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "FormatColor.Color": {
      "type": "Returns or sets the fill color associated with a threshold for a data bar or color scale conditional formatting rule.",
      "info": "Returns or sets the fill color associated with a threshold for a data bar or color scale conditional formatting rule."
    },
    "FormatColor.ColorIndex": {
      "type": "XlColorIndex",
      "info": "Returns or sets one of the constants of the XlColorIndex enumeration, specifying if the fill color is expressed as an index value into the current color palette."
    },
    "FormatColor.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "FormatColor.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "FormatColor.ThemeColor": {
      "type": "XlThemeColor",
      "info": "Returns or sets one of the constants of the XlThemeColor enumeration, specifying the theme color used in a threshold of a data bar or color scale conditional format."
    },
    "FormatColor.TintAndShade": {
      "type": "float",
      "info": "Returns or sets a Single that lightens or darkens the fill color of a cell for a threshold of a data bar or color scale conditional formatting rule."
    },
    "Filters.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Filters.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "Filters.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Filters.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "Filters.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CustomProperty.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "CustomProperty.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "CustomProperty.Name": {
      "type": "str",
      "info": "Returns or sets a String value representing the name of the object."
    },
    "CustomProperty.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "CustomProperty.Value": {
      "type": "Borders.LineStyle",
      "info": "Synonym for the Borders.LineStyle property."
    },
    "AllowEditRanges.Count": {
      "type": "int",
      "info": "Returns a Long value that represents the number of objects in the collection."
    },
    "AllowEditRanges.Item": {
      "type": "Returns a single object from a collection.",
      "info": "Returns a single object from a collection."
    },
    "SortFields.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SortFields.Count": {
      "type": "int",
      "info": "Returns the number of objects in the collection. Read-only Long."
    },
    "SortFields.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SortFields.Item": {
      "type": "SortField",
      "info": "Returns a SortField object that represents a collection of items that can be sorted in a workbook. Read-only."
    },
    "SortFields.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "Page.CenterFooter": {
      "type": "Specifies a picture or text to be center-aligned in the page footer.",
      "info": "Specifies a picture or text to be center-aligned in the page footer."
    },
    "Page.CenterHeader": {
      "type": "Specifies a picture or text to be center-aligned in the page header.",
      "info": "Specifies a picture or text to be center-aligned in the page header."
    },
    "Page.LeftFooter": {
      "type": "Specifies a picture or text to be left-aligned in the page footer.",
      "info": "Specifies a picture or text to be left-aligned in the page footer."
    },
    "Page.LeftHeader": {
      "type": "Specifies a picture or text to be left-aligned in the page header.",
      "info": "Specifies a picture or text to be left-aligned in the page header."
    },
    "Page.RightFooter": {
      "type": "Specifies a picture or text to be right-aligned in the page footer.",
      "info": "Specifies a picture or text to be right-aligned in the page footer."
    },
    "Page.RightHeader": {
      "type": "Specifies a picture or text to be right-aligned in the page header.",
      "info": "Specifies a picture or text to be right-aligned in the page header."
    },
    "Icon.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "Icon.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "Icon.Index": {
      "type": "IconSet",
      "info": "Returns a Long value specifying the index number of the Icon object within the IconSet object. Read-only."
    },
    "Icon.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelMeasure.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ModelMeasure.AssociatedTable": {
      "type": "ModelTable",
      "info": "Specifies the table that contains the model measure, as displayed in the Field List task pane. Read/write ModelTable."
    },
    "ModelMeasure.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ModelMeasure.Description": {
      "type": "str",
      "info": "The description of the model measure. Read/write String."
    },
    "ModelMeasure.FormatInformation": {
      "type": "VBA_Variant",
      "info": "The format of the model measure. Read/write Variant."
    },
    "ModelMeasure.Formula": {
      "type": "str",
      "info": "The Data Analysis Expressions (DAX) formula of the model measure. Read/write String."
    },
    "ModelMeasure.Name": {
      "type": "str",
      "info": "The name of the model measure. Read/write String."
    },
    "ModelMeasure.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ModelRelationship.Active": {
      "type": "bool",
      "info": "When True, the relationship is active. When False, this relationship is inactive. Read/write Boolean."
    },
    "ModelRelationship.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "ModelRelationship.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "ModelRelationship.ForeignKeyColumn": {
      "type": "ModelTableColumn",
      "info": "Contains the ModelTableColumn object representing the foreign key column on the many side of the one-to-many relationship. Read-only."
    },
    "ModelRelationship.ForeignKeyTable": {
      "type": "ModelTable",
      "info": "Contains the ModelTable object representing the table on the many side of the one-to-many relationship. Read-only."
    },
    "ModelRelationship.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified ModelRelationship object. Read-only."
    },
    "ModelRelationship.PrimaryKeyColumn": {
      "type": "ModelTableColumn",
      "info": "Contains the ModelTableColumn object representing the primary key column in the table on the one side of the one-to-many relationship."
    },
    "ModelRelationship.PrimaryKeyTable": {
      "type": "ModelTable",
      "info": "Contains the ModelTable object representing the table on the one side of the one-to-many relationship."
    },
    "ModelTable.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "ModelTable.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "ModelTable.ModelTableColumns": {
      "type": "ModelTableColumns",
      "info": "Collection of ModelTableColumns objects that make up the ModelTable. Read-only."
    },
    "ModelTable.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "ModelTable.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified ModelTable object. Read-only."
    },
    "ModelTable.RecordCount": {
      "type": "int",
      "info": "Returns the total row count for the model table. Read-only Integer."
    },
    "ModelTable.SourceName": {
      "type": "str",
      "info": "Name of the data source for the table. If the table has no data source, the call will generate a run-time error. Read-only String."
    },
    "ModelTable.SourceWorkbookConnection": {
      "type": "Workbook Connection",
      "info": "Returns the Workbook Connection from which the model table originated. Read-only."
    },
    "SlicerPivotTables.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SlicerPivotTables.Count": {
      "type": "Returns the number of objects in the collection.",
      "info": "Returns the number of objects in the collection."
    },
    "SlicerPivotTables.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SlicerPivotTables.Item": {
      "type": "PivotTable",
      "info": "Returns a single PivotTable object from the collection."
    },
    "SlicerPivotTables.Parent": {
      "type": "SlicerCache",
      "info": "Returns the SlicerCache object that is the parent of the specified SlicerPivotTables collection. Read-only."
    },
    "SlicerCacheLevel.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SlicerCacheLevel.Count": {
      "type": "SlicerItem",
      "info": "Returns the number of SlicerItem objects in the specified SlicerCacheLevel object. Read-only."
    },
    "SlicerCacheLevel.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SlicerCacheLevel.CrossFilterType": {
      "type": "Returns or sets whether a slicer is participating in cross filtering with other slicers that share the same slicer cache, and how cross filtering is displayed. Read/write.",
      "info": "Returns or sets whether a slicer is participating in cross filtering with other slicers that share the same slicer cache, and how cross filtering is displayed. Read/write."
    },
    "SlicerCacheLevel.Name": {
      "type": "Returns the MDX unique name of the OLAP hierarchy level represented by the object.",
      "info": "Returns the MDX unique name of the OLAP hierarchy level represented by the object."
    },
    "SlicerCacheLevel.Ordinal": {
      "type": "SlicerCacheLevel",
      "info": "Returns the one-based ordinal value of the hierarchy level represented by the specified SlicerCacheLevel object. Read-only."
    },
    "SlicerCacheLevel.Parent": {
      "type": "SlicerCache",
      "info": "Returns the SlicerCache object for the specified SlicerCacheLevel object. Read-only."
    },
    "SlicerCacheLevel.SlicerItems": {
      "type": "SlicerItems",
      "info": "Returns a SlicerItems collection that contains the collection of all slicer items for the specified level. Read-only."
    },
    "SlicerCacheLevel.SortItems": {
      "type": "Returns or sets the sort order of the items in the slicer. Read/write.",
      "info": "Returns or sets the sort order of the items in the slicer. Read/write."
    },
    "SlicerCacheLevel.VisibleSlicerItemsList": {
      "type": "Returns the list of slicer items that are currently included in the slicer filter. Read-only.",
      "info": "Returns the list of slicer items that are currently included in the slicer filter. Read-only."
    },
    "SlicerItems.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SlicerItems.Count": {
      "type": "Returns the number of objects in the collection. Read-only.",
      "info": "Returns the number of objects in the collection. Read-only."
    },
    "SlicerItems.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SlicerItems.Item": {
      "type": "SlicerItem",
      "info": "Returns a SlicerItem object from a collection. Read-only."
    },
    "SlicerItems.Parent": {
      "type": "SlicerCache",
      "info": "Returns the parent SlicerCache object for the specified object. Read-only."
    },
    "ColorFormat.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ColorFormat.Brightness": {
      "type": "Returns or sets the luminosity of the specified object. Read/write.",
      "info": "Returns or sets the luminosity of the specified object. Read/write."
    },
    "ColorFormat.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ColorFormat.ObjectThemeColor": {
      "type": "MsoThemeColorIndex",
      "info": "Returns or sets a color that is mapped to the theme color scheme. Read/write MsoThemeColorIndex."
    },
    "ColorFormat.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ColorFormat.RGB": {
      "type": "int",
      "info": "Returns or sets a Long value that represents the red-green-blue value of the specified color."
    },
    "ColorFormat.SchemeColor": {
      "type": "int",
      "info": "Returns or sets an Integer value that represents the color of a Color object, as an index in the current color."
    },
    "ColorFormat.TintAndShade": {
      "type": "float",
      "info": "Returns or sets a Single that lightens or darkens a color."
    },
    "ColorFormat.Type": {
      "type": "MsoColorType",
      "info": "Returns an MsoColorType value that represents the color format type."
    },
    "ShapeNode.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "ShapeNode.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "ShapeNode.EditingType": {
      "type": "MsoEditingType",
      "info": "If the specified node is a vertex, this property returns a value that indicates how changes made to the node affect the two segments connected to the node. Read-only MsoEditingType."
    },
    "ShapeNode.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "ShapeNode.Points": {
      "type": "points",
      "info": "Returns the position of the specified node as a coordinate pair. Each coordinate is expressed in points. Read-only Variant."
    },
    "ShapeNode.SegmentType": {
      "type": "MsoSegmentType",
      "info": "Returns a value that indicates whether the segment associated with the specified node is straight or curved. If the specified node is a control point for a curved segment, this property returns msoSegmentCurve. Read-only MsoSegmentType."
    },
    "SlicerItem.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SlicerItem.Caption": {
      "type": "Returns the label text for the slicer item. Read-only.",
      "info": "Returns the label text for the slicer item. Read-only."
    },
    "SlicerItem.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SlicerItem.HasData": {
      "type": "Returns whether the slicer item contains data that matches the current manual filter state. Read-only.",
      "info": "Returns whether the slicer item contains data that matches the current manual filter state. Read-only."
    },
    "SlicerItem.Name": {
      "type": "Returns the name of the slicer item. Read-only.",
      "info": "Returns the name of the slicer item. Read-only."
    },
    "SlicerItem.Parent": {
      "type": "SlicerCache",
      "info": "Returns the parent SlicerCache object for the slicer item. Read-only."
    },
    "SlicerItem.Selected": {
      "type": "Returns or sets whether the slicer item is selected. Read/write for slicers connected to non-OLAP data sources. Read-only for slicers connected to OLAP data sources.",
      "info": "Returns or sets whether the slicer item is selected. Read/write for slicers connected to non-OLAP data sources. Read-only for slicers connected to OLAP data sources."
    },
    "SlicerItem.SourceName": {
      "type": "Returns the source name of the slicer item. Read-only.",
      "info": "Returns the source name of the slicer item. Read-only."
    },
    "SlicerItem.SourceNameStandard": {
      "type": "Returns the slicer item's source name in standard English (United States) format settings. Read-only.",
      "info": "Returns the slicer item's source name in standard English (United States) format settings. Read-only."
    },
    "SlicerItem.Value": {
      "type": "Returns the value of the slicer item. Read-only.",
      "info": "Returns the value of the slicer item. Read-only."
    },
    "TimelineViewState.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "TimelineViewState.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "TimelineViewState.Level": {
      "type": "XlTimelineLevel",
      "info": "Gets or sets the displayed level. Read/write XlTimelineLevel."
    },
    "TimelineViewState.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified TimelineViewState object. Read-only."
    },
    "TimelineViewState.ShowHeader": {
      "type": "bool",
      "info": "Gets or sets whether the control's header is displayed. Read/write Boolean."
    },
    "TimelineViewState.ShowHorizontalScrollbar": {
      "type": "bool",
      "info": "Gets or sets whether the control's horizontal scrollbar is displayed. Read/write Boolean."
    },
    "TimelineViewState.ShowSelectionLabel": {
      "type": "bool",
      "info": "Gets or sets whether the control's filter selection label is displayed. Read/write Boolean."
    },
    "TimelineViewState.ShowTimeLevel": {
      "type": "bool",
      "info": "Gets or sets whether the control's time level drop-down is displayed. Read/write Boolean."
    },
    "SparkHorizontalAxis.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SparkHorizontalAxis.Axis": {
      "type": "SparkColor",
      "info": "Returns a SparkColor object that specifies the color of the horizontal axis of the sparkline. Read-only."
    },
    "SparkHorizontalAxis.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SparkHorizontalAxis.IsDateAxis": {
      "type": "Returns whether the horizontal axis of the sparkline is based on date values. Read-only.",
      "info": "Returns whether the horizontal axis of the sparkline is based on date values. Read-only."
    },
    "SparkHorizontalAxis.Parent": {
      "type": "SparklineGroup",
      "info": "Returns the parent SparklineGroup object for the specified object. Read-only."
    },
    "SparkHorizontalAxis.RightToLeftPlotOrder": {
      "type": "Returns or sets whether the points on the horizontal axis are plotted in right-to-left order. Read/write.",
      "info": "Returns or sets whether the points on the horizontal axis are plotted in right-to-left order. Read/write."
    },
    "SparkVerticalAxis.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SparkVerticalAxis.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SparkVerticalAxis.CustomMaxScaleValue": {
      "type": "Returns or sets the custom maximum value for the vertical axis of a sparkline. Read/write.",
      "info": "Returns or sets the custom maximum value for the vertical axis of a sparkline. Read/write."
    },
    "SparkVerticalAxis.CustomMinScaleValue": {
      "type": "Returns or sets the custom minimum value for the vertical axis of a sparkline. Read/write.",
      "info": "Returns or sets the custom minimum value for the vertical axis of a sparkline. Read/write."
    },
    "SparkVerticalAxis.MaxScaleType": {
      "type": "Returns or sets how the maximum value of the vertical axis of the sparkline is scaled relative to other sparklines in the group. Read/write.",
      "info": "Returns or sets how the maximum value of the vertical axis of the sparkline is scaled relative to other sparklines in the group. Read/write."
    },
    "SparkVerticalAxis.MinScaleType": {
      "type": "Returns or sets how the minimum value of the vertical axis of the sparkline is scaled relative to other sparklines in the group. Read/write.",
      "info": "Returns or sets how the minimum value of the vertical axis of the sparkline is scaled relative to other sparklines in the group. Read/write."
    },
    "SparkVerticalAxis.Parent": {
      "type": "SparklineGroup",
      "info": "Returns the parent SparklineGroup object for the specified object. Read-only."
    },
    "SparkColor.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SparkColor.Color": {
      "type": "FormatColor",
      "info": "Returns a FormatColor object that you can use to set the color of the horizontal axis or the markers for points in a sparkline. Read-only."
    },
    "SparkColor.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SparkColor.Parent": {
      "type": "SparklineGroup",
      "info": "Returns the parent SparklineGroup object for the specified object. Read-only."
    },
    "SparkColor.Visible": {
      "type": "Returns or sets whether the point is visible. Read/write.",
      "info": "Returns or sets whether the point is visible. Read/write."
    },
    "SortField.Application": {
      "type": "Application",
      "info": "When used without an object qualifier, this property returns an Application object that represents the Microsoft Excel application."
    },
    "SortField.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which this object was created. Read-only Long."
    },
    "SortField.CustomOrder": {
      "type": "VBA_Variant",
      "info": "Specifies a custom order to sort the fields. Read/write Variant."
    },
    "SortField.DataOption": {
      "type": "XlSortDataOption",
      "info": "Specifies how to sort text in the range specified in a SortField object. Read/write XlSortDataOption."
    },
    "SortField.Key": {
      "type": "Specifies the range that is currently being sorted on. Read-only.",
      "info": "Specifies the range that is currently being sorted on. Read-only."
    },
    "SortField.Order": {
      "type": "Determines the sort order for the values specified in the key. Read/write.",
      "info": "Determines the sort order for the values specified in the key. Read/write."
    },
    "SortField.Parent": {
      "type": "Returns the parent object for the specified object. Read-only.",
      "info": "Returns the parent object for the specified object. Read-only."
    },
    "SortField.Priority": {
      "type": "Specifies the priority for the sort field. Read/write.",
      "info": "Specifies the priority for the sort field. Read/write."
    },
    "SortField.SortOn": {
      "type": "XlSortOn",
      "info": "Returns or sets the attribute of the cell to sort on. Read/write XlSortOn."
    },
    "SortField.SortOnValue": {
      "type": "SortField",
      "info": "Returns the value on which the sort is performed for the specified SortField object. Read-only."
    },
    "ModelTableColumn.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "ModelTableColumn.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "ModelTableColumn.DataType": {
      "type": "XlParameterDataType",
      "info": "Returns the XlParameterDataType enumeration of the ModelTableColumn. Read-only."
    },
    "ModelTableColumn.Name": {
      "type": "str",
      "info": "Returns a String value that represents the name of the object."
    },
    "ModelTableColumn.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified ModelTableColumn object. Read-only."
    },
    "ModelTableColumns.Application": {
      "type": "Application",
      "info": "Returns an Application object that represents the Microsoft Excel application. Read-only."
    },
    "ModelTableColumns.Count": {
      "type": "ModelTableColumn",
      "info": "Returns a Long value that represents the number of ModelTableColumn objects in a ModelTableColumns object. Read-only."
    },
    "ModelTableColumns.Creator": {
      "type": "int",
      "info": "Returns a 32-bit integer that indicates the application in which the specified object was created. Read-only Long."
    },
    "ModelTableColumns.Parent": {
      "type": "VBA_Object",
      "info": "Returns an Object that represents the parent object of the specified ModelTableColumns object. Read-only."
    }
  }
}